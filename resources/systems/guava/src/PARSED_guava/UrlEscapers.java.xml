<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\net\UrlEscapers.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>net</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>escape</name>.
            <name>Escaper</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * {@code Escaper} instances suitable for strings to be included in particular
        * sections of URLs.
        *
        * &lt;p&gt;If the resulting URLs are inserted into an HTML or XML document, they will
        * require additional escaping with {@link com.google.common.html.HtmlEscapers}
        * or {@link com.google.common.xml.XmlEscapers}.
        *
        *
        * @author David Beaumont
        * @author Chris Povirk
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>UrlEscapers</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>UrlEscapers</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="line">// For each xxxEscaper() method, please add links to external reference pages</comment>
            <comment type="line">// that are considered authoritative for the behavior of that escaper.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>URL_FORM_PARAMETER_OTHER_SAFE_CHARS</name> =
                    <init>
                        <expr>"-_.*"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS</name> =
                    <init>
                        <expr>"-._~" +
                            <comment type="line">// Unreserved characters.</comment>
                            "!$'()*,;&amp;=" +
                            <comment type="line">// The subdelim characters (excluding '+').</comment>
                            "@:"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// The gendelim characters permitted in paths.</comment>

            <comment type="javadoc">/**
                * Returns an {@link Escaper} instance that escapes strings so they can be
                * safely included in &lt;a href="http://goo.gl/OQEc8"&gt;URL form parameter names
                * and values&lt;/a&gt;. Escaping is performed with the UTF-8 character encoding.
                * The caller is responsible for &lt;a href="http://goo.gl/i20ms"&gt;replacing any
                * unpaired carriage return or line feed characters with a CR+LF pair&lt;/a&gt; on
                * any non-file inputs before escaping them with this escaper.
                *
                * &lt;p&gt;When escaping a String, the following rules apply:
                * &lt;ul&gt;
                * &lt;li&gt;The alphanumeric characters "a" through "z", "A" through "Z" and "0"
                * through "9" remain the same.
                * &lt;li&gt;The special characters ".", "-", "*", and "_" remain the same.
                * &lt;li&gt;The space character " " is converted into a plus sign "+".
                * &lt;li&gt;All other characters are converted into one or more bytes using UTF-8
                * encoding and each byte is then represented by the 3-character string
                * "%XY", where "XY" is the two-digit, uppercase, hexadecimal
                * representation of the byte value.
                * &lt;/ul&gt;
                *
                * &lt;p&gt;This escaper is suitable for escaping parameter names and values even
                * when &lt;a href="http://goo.gl/utn6M"&gt;using the non-standard semicolon&lt;/a&gt;,
                * rather than the ampersand, as a parameter delimiter. Nevertheless, we
                * recommend using the ampersand unless you must interoperate with systems
                * that require semicolons.
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Unlike other escapers, URL escapers produce uppercase
                * hexadecimal sequences. From &lt;a href="http://www.ietf.org/rfc/rfc3986.txt"&gt;
                * RFC 3986&lt;/a&gt;:&lt;br&gt;
                * &lt;i&gt;"URI producers and normalizers should use uppercase hexadecimal digits
                * for all percent-encodings."&lt;/i&gt;
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>urlFormParameterEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>URL_FORM_PARAMETER_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>URL_FORM_PARAMETER_ESCAPER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>PercentEscaper</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>URL_FORM_PARAMETER_OTHER_SAFE_CHARS</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns an {@link Escaper} instance that escapes strings so they can be
                * safely included in &lt;a href="http://goo.gl/swjbR"&gt;URL path segments&lt;/a&gt;. The
                * returned escaper escapes all non-ASCII characters, even though &lt;a
                * href="http://goo.gl/xIJWe"&gt;many of these are accepted in modern URLs&lt;/a&gt;.
                * (&lt;a href="http://goo.gl/WMGvZ"&gt;If the escaper were to leave these
                * characters unescaped, they would be escaped by the consumer at parse time,
                * anyway.&lt;/a&gt;) Additionally, the escaper escapes the slash character ("/").
                * While slashes are acceptable in URL paths, they are considered by the
                * specification to be separators between "path segments." This implies that,
                * if you wish for your path to contain slashes, you must escape each segment
                * separately and then join them.
                *
                * &lt;p&gt;When escaping a String, the following rules apply:
                * &lt;ul&gt;
                * &lt;li&gt;The alphanumeric characters "a" through "z", "A" through "Z" and "0"
                * through "9" remain the same.
                * &lt;li&gt;The unreserved characters ".", "-", "~", and "_" remain the same.
                * &lt;li&gt;The general delimiters "@" and ":" remain the same.
                * &lt;li&gt;The subdelimiters "!", "$", "&amp;amp;", "'", "(", ")", "*", "+", ",", ";",
                * and "=" remain the same.
                * &lt;li&gt;The space character " " is converted into %20.
                * &lt;li&gt;All other characters are converted into one or more bytes using UTF-8
                * encoding and each byte is then represented by the 3-character string
                * "%XY", where "XY" is the two-digit, uppercase, hexadecimal
                * representation of the byte value.
                * &lt;/ul&gt;
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Unlike other escapers, URL escapers produce uppercase
                * hexadecimal sequences. From &lt;a href="http://www.ietf.org/rfc/rfc3986.txt"&gt;
                * RFC 3986&lt;/a&gt;:&lt;br&gt;
                * &lt;i&gt;"URI producers and normalizers should use uppercase hexadecimal digits
                * for all percent-encodings."&lt;/i&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>urlPathSegmentEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>URL_PATH_SEGMENT_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>URL_PATH_SEGMENT_ESCAPER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>PercentEscaper</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS</name>
                                            + "+"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns an {@link Escaper} instance that escapes strings so they can be
                * safely included in a &lt;a href="http://goo.gl/xXEq4p"&gt;URL fragment&lt;/a&gt;. The
                * returned escaper escapes all non-ASCII characters, even though &lt;a
                * href="http://goo.gl/xIJWe"&gt;many of these are accepted in modern URLs&lt;/a&gt;.
                * (&lt;a href="http://goo.gl/WMGvZ"&gt;If the escaper were to leave these
                * characters unescaped, they would be escaped by the consumer at parse time,
                * anyway.&lt;/a&gt;)
                *
                * &lt;p&gt;When escaping a String, the following rules apply:
                * &lt;ul&gt;
                * &lt;li&gt;The alphanumeric characters "a" through "z", "A" through "Z" and "0"
                * through "9" remain the same.
                * &lt;li&gt;The unreserved characters ".", "-", "~", and "_" remain the same.
                * &lt;li&gt;The general delimiters "@" and ":" remain the same.
                * &lt;li&gt;The subdelimiters "!", "$", "&amp;amp;", "'", "(", ")", "*", "+", ",", ";",
                * and "=" remain the same.
                * &lt;li&gt;The space character " " is converted into %20.
                * &lt;li&gt;Fragments allow unescaped "/" and "?", so they remain the same.
                * &lt;li&gt;All other characters are converted into one or more bytes using UTF-8
                * encoding and each byte is then represented by the 3-character string
                * "%XY", where "XY" is the two-digit, uppercase, hexadecimal
                * representation of the byte value.
                * &lt;/ul&gt;
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Unlike other escapers, URL escapers produce uppercase
                * hexadecimal sequences. From &lt;a href="http://www.ietf.org/rfc/rfc3986.txt"&gt;
                * RFC 3986&lt;/a&gt;:&lt;br&gt;
                * &lt;i&gt;"URI producers and normalizers should use uppercase hexadecimal digits
                * for all percent-encodings."&lt;/i&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>urlFragmentEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>URL_FRAGMENT_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>URL_FRAGMENT_ESCAPER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>PercentEscaper</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS</name>
                                            + "+/?"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
