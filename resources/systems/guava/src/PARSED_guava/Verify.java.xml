<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Verify.java">
    <comment type="block">/*
        * Copyright (C) 2013 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>format</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static convenience methods that serve the same purpose as Java language
        * &lt;a href="http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html"&gt;
        * assertions&lt;/a&gt;, except that they are always enabled. These methods should be used instead of Java
        * assertions whenever there is a chance the check may fail "in real life". Example: &lt;pre&gt; {@code
        *
        * Bill bill = remoteService.getLastUnpaidBill();
        *
        * // In case bug 12345 happens again we'd rather just die
        * Verify.verify(bill.status() == Status.UNPAID,
        * "Unexpected bill status: %s", bill.status());}&lt;/pre&gt;
        *
        * &lt;h3&gt;Comparison to alternatives&lt;/h3&gt;
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; In some cases the differences explained below can be subtle. When it's
        unclear
        * which approach to use, &lt;b&gt;don't worry&lt;/b&gt; too much about it; just pick something that seems
        * reasonable and it will be fine.
        *
        * &lt;ul&gt;
        * &lt;li&gt;If checking whether the &lt;i&gt;caller&lt;/i&gt; has violated your method or constructor's contract
        * (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
        * class instead.
        *
        * &lt;li&gt;If checking an &lt;i&gt;impossible&lt;/i&gt; condition (which &lt;i&gt;cannot&lt;/i&gt; happen
        unless your own class
        * or its &lt;i&gt;trusted&lt;/i&gt; dependencies is badly broken), this is what ordinary Java assertions
        * are for. Note that assertions are not enabled by default; they are essentially considered
        * "compiled comments."
        *
        * &lt;li&gt;An explicit {@code if/throw} (as illustrated below) is always acceptable; we still recommend
        * using our {@link VerifyException} exception type. Throwing a plain {@link RuntimeException}
        * is frowned upon.
        *
        * &lt;li&gt;Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
        * {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
        * same function with more clarity.
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;Warning about performance&lt;/h3&gt;
        *
        * &lt;p&gt;Remember that parameter values for message construction must all be computed eagerly, and
        * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
        * the message ends up unneeded. Performance-sensitive verification checks should continue to use
        * usual form: &lt;pre&gt; {@code
        *
        * Bill bill = remoteService.getLastUnpaidBill();
        * if (bill.status() != Status.UNPAID) {
        * throw new VerifyException("Unexpected bill status: " + bill.status());
        * }}&lt;/pre&gt;
        *
        * &lt;h3&gt;Only {@code %s} is supported&lt;/h3&gt;
        *
        * &lt;p&gt;As with {@link Preconditions} error message template strings, only the {@code "%s"} specifier
        * is supported, not the full range of {@link java.util.Formatter} specifiers. However, note that
        * if the number of arguments does not match the number of occurrences of {@code "%s"} in the
        * format string, {@code Verify} will still behave as expected, and will still include all argument
        * values in the error message; the message will simply not be formatted exactly as intended.
        *
        * &lt;h3&gt;More information&lt;/h3&gt;
        *
        * See
        * &lt;a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained"&gt;Conditional
        * failures explained&lt;/a&gt; in the Guava User Guide for advice on when this class should be used.
        *
        * @since 17.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Verify</name>
        <block>{
            <comment type="javadoc">/**
                * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no
                * message otherwise.
                *
                * @throws VerifyException if {@code expression} is {@code false}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>verify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>VerifyException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
                * custom message otherwise.
                *
                * @param expression a boolean expression
                * @param errorMessageTemplate a template for the exception message should the
                * check fail. The message is formed by replacing each {@code %s}
                * placeholder in the template with an argument. These are matched by
                * position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc.
                * Unmatched arguments will be appended to the formatted message in square
                * braces. Unmatched placeholders will be left as-is.
                * @param errorMessageArgs the arguments to be substituted into the message
                * template. Arguments are converted to strings using
                * {@link String#valueOf(Object)}.
                * @throws VerifyException if {@code expression} is {@code false}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>verify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>errorMessageTemplate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>...
                            </type>
                            <name>errorMessageArgs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>VerifyException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>format</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageTemplate</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageArgs</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code reference} is non-null, throwing a {@code VerifyException} with a default
                * message otherwise.
                *
                * @return {@code reference}, guaranteed to be non-null, for convenience
                * @throws VerifyException if {@code reference} is {@code null}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>verifyNotNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>verifyNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reference</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"expected a non-null reference"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code reference} is non-null, throwing a {@code VerifyException} with a custom
                * message otherwise.
                *
                * @param errorMessageTemplate a template for the exception message should the
                * check fail. The message is formed by replacing each {@code %s}
                * placeholder in the template with an argument. These are matched by
                * position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc.
                * Unmatched arguments will be appended to the formatted message in square
                * braces. Unmatched placeholders will be left as-is.
                * @param errorMessageArgs the arguments to be substituted into the message
                * template. Arguments are converted to strings using
                * {@link String#valueOf(Object)}.
                * @return {@code reference}, guaranteed to be non-null, for convenience
                * @throws VerifyException if {@code reference} is {@code null}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>verifyNotNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>errorMessageTemplate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>...
                            </type>
                            <name>errorMessageArgs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>verify</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reference</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>errorMessageTemplate</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>errorMessageArgs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>reference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// TODO(kevinb): consider &lt;T&gt; T verifySingleton(Iterable&lt;T&gt;) to take over
                for
            </comment>
            <comment type="line">// Iterables.getOnlyElement()</comment>

            <constructor>
                <specifier>private</specifier>
                <name>Verify</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            }
        </block>
    </class>
</unit>
