<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\xml\XmlEscapers.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>xml</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>escape</name>.
            <name>Escaper</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>escape</name>.
            <name>Escapers</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * {@code Escaper} instances suitable for strings to be included in XML
        * attribute values and elements' text contents. When possible, avoid manual
        * escaping by using templating systems and high-level APIs that provide
        * autoescaping. For example, consider &lt;a href="http://www.xom.nu/"&gt;XOM&lt;/a&gt; or
        * &lt;a href="http://www.jdom.org/"&gt;JDOM&lt;/a&gt;.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Currently the escapers provided by this class do not escape
        * any characters outside the ASCII character range. Unlike HTML escaping the
        * XML escapers will not escape non-ASCII characters to their numeric entity
        * replacements. These XML escapers provide the minimal level of escaping to
        * ensure that the output can be safely included in a Unicode XML document.
        *
        *
        * &lt;p&gt;For details on the behavior of the escapers in this class, see sections
        * &lt;a href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets"&gt;2.2&lt;/a&gt; and
        * &lt;a href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax"&gt;2.4&lt;/a&gt; of the
        * XML specification.
        *
        * @author Alex Matevossian
        * @author David Beaumont
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        class <name>XmlEscapers</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>XmlEscapers</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>MIN_ASCII_CONTROL_CHAR</name> =
                    <init>
                        <expr>0x00</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>MAX_ASCII_CONTROL_CHAR</name> =
                    <init>
                        <expr>0x1F</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// For each xxxEscaper() method, please add links to external reference pages</comment>
            <comment type="line">// that are considered authoritative for the behavior of that escaper.</comment>

            <comment type="javadoc">/**
                * Returns an {@link Escaper} instance that escapes special characters in a
                * string so it can safely be included in an XML document as element content.
                * See section
                * &lt;a href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax"&gt;2.4&lt;/a&gt; of the
                * XML specification.
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Double and single quotes are not escaped, so it is &lt;b&gt;not
                * safe&lt;/b&gt; to use this escaper to escape attribute values. Use
                * {@link #xmlContentEscaper} if the output can appear in element content or
                * {@link #xmlAttributeEscaper} in attribute values.
                *
                * &lt;p&gt;This escaper substitutes {@code 0xFFFD} for non-whitespace control
                * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which
                * are not permitted in XML. For more detail see section &lt;a
                * href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets"&gt;2.2&lt;/a&gt; of the
                * XML specification.
                *
                * &lt;p&gt;This escaper does not escape non-ASCII characters to their numeric
                * character references (NCR). Any non-ASCII characters appearing in the input
                * will be preserved in the output. Specifically "\r" (carriage return) is
                * preserved in the output, which may result in it being silently converted to
                * "\n" when the XML is parsed.
                *
                * &lt;p&gt;This escaper does not treat surrogate pairs specially and does not
                * perform Unicode validation on its input.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>xmlContentEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>XML_CONTENT_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@link Escaper} instance that escapes special characters in a
                * string so it can safely be included in XML document as an attribute value.
                * See section
                * &lt;a href="http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize"&gt;3.3.3&lt;/a&gt;
                * of the XML specification.
                *
                * &lt;p&gt;This escaper substitutes {@code 0xFFFD} for non-whitespace control
                * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which
                * are not permitted in XML. For more detail see section &lt;a
                * href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets"&gt;2.2&lt;/a&gt; of the
                * XML specification.
                *
                * &lt;p&gt;This escaper does not escape non-ASCII characters to their numeric
                * character references (NCR). However, horizontal tab {@code '\t'}, line feed
                * {@code '\n'} and carriage return {@code '\r'} are escaped to a
                * corresponding NCR {@code "&amp;#x9;"}, {@code "&amp;#xA;"}, and {@code "&amp;#xD;"}
                * respectively. Any other non-ASCII characters appearing in the input will
                * be preserved in the output.
                *
                * &lt;p&gt;This escaper does not treat surrogate pairs specially and does not
                * perform Unicode validation on its input.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>xmlAttributeEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>XML_ATTRIBUTE_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>XML_ESCAPER</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>XML_CONTENT_ESCAPER</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>XML_ATTRIBUTE_ESCAPER</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name><name>Escapers</name>.
                                <name>Builder</name>
                            </name>
                        </type>
                        <name>builder</name> =
                        <init>
                            <expr>
                                <call>
                                    <name><name>Escapers</name>.
                                        <name>builder</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <comment type="line">// The char values \uFFFE and \uFFFF are explicitly not allowed in XML</comment>
                <comment type="line">// (Unicode code points above \uFFFF are represented via surrogate pairs</comment>
                <comment type="line">// which means they are treated as pairs of safe characters).</comment>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>setSafeRange</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Character</name>.
                                            <name>MIN_VALUE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>'\uFFFD'</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <comment type="line">// Unsafe characters are replaced with the Unicode replacement character.</comment>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>setUnsafeReplacement</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>"\uFFFD"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <comment type="block">/*
                    * Except for \n, \t, and \r, all ASCII control characters are replaced with
                    * the Unicode replacement character.
                    *
                    * Implementation note: An alternative to the following would be to make a
                    * map that simply replaces the allowed ASCII whitespace characters with
                    * themselves and to set the minimum safe character to 0x20. However this
                    * would slow down the escaping of simple strings that contain \t, \n, or
                    * \r.
                    */
                </comment>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name> =
                            <init>
                                <expr>
                                    <name>MIN_ASCII_CONTROL_CHAR</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>c</name>
                            &lt;=
                            <name>MAX_ASCII_CONTROL_CHAR</name>
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>c</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <name>c</name>
                                    != '\t' &amp;&amp; <name>c</name> != '\n' &amp;&amp; <name>c</name> != '\r'
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>builder</name>.
                                                    <name>addEscape</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"\uFFFD"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </for>

                <comment type="line">// Build the content escaper first and then add quote escaping for the</comment>
                <comment type="line">// general escaper.</comment>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'&amp;'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;amp;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'&lt;'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;lt;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'&gt;'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;gt;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>XML_CONTENT_ESCAPER</name>
                        =
                        <call>
                            <name><name>builder</name>.
                                <name>build</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\''</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;apos;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'"'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;quot;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>XML_ESCAPER</name>
                        =
                        <call>
                            <name><name>builder</name>.
                                <name>build</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\t'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;#x9;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\n'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;#xA;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>builder</name>.
                                <name>addEscape</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>'\r'</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"&amp;#xD;"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>XML_ATTRIBUTE_ESCAPER</name>
                        =
                        <call>
                            <name><name>builder</name>.
                                <name>build</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>
            }
        </block>
    </class>
</unit>
