<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\package-info.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <comment type="javadoc">/**
        * This package contains generic collection interfaces and implementations, and
        * other utilities for working with collections. It is a part of the open-source
        * &lt;a href="http://guava-libraries.googlecode.com"&gt;Guava libraries&lt;/a&gt;.
        *
        * &lt;h2&gt;Collection Types&lt;/h2&gt;
        *
        * &lt;dl&gt;
        * &lt;dt&gt;{@link com.google.common.collect.BiMap}
        * &lt;dd&gt;An extension of {@link java.util.Map} that guarantees the uniqueness of
        * its values as well as that of its keys. This is sometimes called an
        * "invertible map," since the restriction on values enables it to support
        * an {@linkplain com.google.common.collect.BiMap#inverse inverse view} --
        * which is another instance of {@code BiMap}.
        *
        * &lt;dt&gt;{@link com.google.common.collect.Multiset}
        * &lt;dd&gt;An extension of {@link java.util.Collection} that may contain duplicate
        * values like a {@link java.util.List}, yet has order-independent equality
        * like a {@link java.util.Set}. One typical use for a multiset is to
        * represent a histogram.
        *
        * &lt;dt&gt;{@link com.google.common.collect.Multimap}
        * &lt;dd&gt;A new type, which is similar to {@link java.util.Map}, but may contain
        * multiple entries with the same key. Some behaviors of
        * {@link com.google.common.collect.Multimap} are left unspecified and are
        * provided only by the subtypes mentioned below.
        *
        * &lt;dt&gt;{@link com.google.common.collect.ListMultimap}
        * &lt;dd&gt;An extension of {@link com.google.common.collect.Multimap} which permits
        * duplicate entries, supports random access of values for a particular key,
        * and has &lt;i&gt;partially order-dependent equality&lt;/i&gt; as defined by
        * {@link com.google.common.collect.ListMultimap#equals(Object)}. {@code
        * ListMultimap} takes its name from the fact that the {@linkplain
        * com.google.common.collect.ListMultimap#get collection of values}
        * associated with a given key fulfills the {@link java.util.List} contract.
        *
        * &lt;dt&gt;{@link com.google.common.collect.SetMultimap}
        * &lt;dd&gt;An extension of {@link com.google.common.collect.Multimap} which has
        * order-independent equality and does not allow duplicate entries; that is,
        * while a key may appear twice in a {@code SetMultimap}, each must map to a
        * different value. {@code SetMultimap} takes its name from the fact that
        * the {@linkplain com.google.common.collect.SetMultimap#get collection of
        * values} associated with a given key fulfills the {@link java.util.Set}
        * contract.
        *
        * &lt;dt&gt;{@link com.google.common.collect.SortedSetMultimap}
        * &lt;dd&gt;An extension of {@link com.google.common.collect.SetMultimap} for which
        * the {@linkplain com.google.common.collect.SortedSetMultimap#get
        * collection values} associated with a given key is a
        * {@link java.util.SortedSet}.
        *
        * &lt;dt&gt;{@link com.google.common.collect.Table}
        * &lt;dd&gt;A new type, which is similar to {@link java.util.Map}, but which indexes
        * its values by an ordered pair of keys, a row key and column key.
        *
        * &lt;dt&gt;{@link com.google.common.collect.ClassToInstanceMap}
        * &lt;dd&gt;An extension of {@link java.util.Map} that associates a raw type with an
        * instance of that type.
        * &lt;/dl&gt;
        *
        * &lt;h2&gt;Collection Implementations&lt;/h2&gt;
        *
        * &lt;h3&gt;of {@link java.util.List}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableList}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link java.util.Set}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableSet}
        * &lt;li&gt;{@link com.google.common.collect.ImmutableSortedSet}
        * &lt;li&gt;{@link com.google.common.collect.ContiguousSet} (see {@code Range})
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link java.util.Map}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableMap}
        * &lt;li&gt;{@link com.google.common.collect.ImmutableSortedMap}
        * &lt;li&gt;{@link com.google.common.collect.MapMaker}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link com.google.common.collect.BiMap}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableBiMap}
        * &lt;li&gt;{@link com.google.common.collect.HashBiMap}
        * &lt;li&gt;{@link com.google.common.collect.EnumBiMap}
        * &lt;li&gt;{@link com.google.common.collect.EnumHashBiMap}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link com.google.common.collect.Multiset}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableMultiset}
        * &lt;li&gt;{@link com.google.common.collect.HashMultiset}
        * &lt;li&gt;{@link com.google.common.collect.LinkedHashMultiset}
        * &lt;li&gt;{@link com.google.common.collect.TreeMultiset}
        * &lt;li&gt;{@link com.google.common.collect.EnumMultiset}
        * &lt;li&gt;{@link com.google.common.collect.ConcurrentHashMultiset}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link com.google.common.collect.Multimap}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ImmutableListMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ImmutableSetMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ArrayListMultimap}
        * &lt;li&gt;{@link com.google.common.collect.HashMultimap}
        * &lt;li&gt;{@link com.google.common.collect.TreeMultimap}
        * &lt;li&gt;{@link com.google.common.collect.LinkedHashMultimap}
        * &lt;li&gt;{@link com.google.common.collect.LinkedListMultimap}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link com.google.common.collect.Table}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableTable}
        * &lt;li&gt;{@link com.google.common.collect.ArrayTable}
        * &lt;li&gt;{@link com.google.common.collect.HashBasedTable}
        * &lt;li&gt;{@link com.google.common.collect.TreeBasedTable}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;of {@link com.google.common.collect.ClassToInstanceMap}&lt;/h3&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ImmutableClassToInstanceMap}
        * &lt;li&gt;{@link com.google.common.collect.MutableClassToInstanceMap}
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Classes of static utility methods&lt;/h2&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.Collections2}
        * &lt;li&gt;{@link com.google.common.collect.Iterators}
        * &lt;li&gt;{@link com.google.common.collect.Iterables}
        * &lt;li&gt;{@link com.google.common.collect.Lists}
        * &lt;li&gt;{@link com.google.common.collect.Maps}
        * &lt;li&gt;{@link com.google.common.collect.Queues}
        * &lt;li&gt;{@link com.google.common.collect.Sets}
        * &lt;li&gt;{@link com.google.common.collect.Multisets}
        * &lt;li&gt;{@link com.google.common.collect.Multimaps}
        * &lt;li&gt;{@link com.google.common.collect.Tables}
        * &lt;li&gt;{@link com.google.common.collect.ObjectArrays}
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Comparison&lt;/h2&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.Ordering}
        * &lt;li&gt;{@link com.google.common.collect.ComparisonChain}
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Abstract implementations&lt;/h2&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.AbstractIterator}
        * &lt;li&gt;{@link com.google.common.collect.AbstractSequentialIterator}
        * &lt;li&gt;{@link com.google.common.collect.ImmutableCollection}
        * &lt;li&gt;{@link com.google.common.collect.UnmodifiableIterator}
        * &lt;li&gt;{@link com.google.common.collect.UnmodifiableListIterator}
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Ranges&lt;/h2&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.Range}
        * &lt;li&gt;{@link com.google.common.collect.RangeMap}
        * &lt;li&gt;{@link com.google.common.collect.DiscreteDomain}
        * &lt;li&gt;{@link com.google.common.collect.ContiguousSet}
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Other&lt;/h2&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.Interner},
        * {@link com.google.common.collect.Interners}
        * &lt;li&gt;{@link com.google.common.collect.Constraint},
        * {@link com.google.common.collect.Constraints}
        * &lt;li&gt;{@link com.google.common.collect.MapConstraint},
        * {@link com.google.common.collect.MapConstraints}
        * &lt;li&gt;{@link com.google.common.collect.MapDifference},
        * {@link com.google.common.collect.SortedMapDifference}
        * &lt;li&gt;{@link com.google.common.collect.MinMaxPriorityQueue}
        * &lt;li&gt;{@link com.google.common.collect.PeekingIterator}
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Forwarding collections&lt;/h2&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link com.google.common.collect.ForwardingCollection}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingConcurrentMap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingIterator}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingList}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingListIterator}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingListMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingMap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingMapEntry}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingMultiset}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingNavigableMap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingNavigableSet}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingObject}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingQueue}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingSet}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingSetMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingSortedMap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingSortedMultiset}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingSortedSet}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingSortedSetMultimap}
        * &lt;li&gt;{@link com.google.common.collect.ForwardingTable}
        * &lt;/ul&gt;
        */
    </comment>
    @
    <macro>
        <name>javax</name>
    </macro>
    <expr_stmt>
        <expr>.
            <name><name>annotation</name>.
                <name>
                    <name>ParametersAreNonnullByDefault</name>
                </name>
            </name>
            package
            <name><name>com</name>.<name>google</name>.<name>common</name>.
                <name>collect</name>
            </name>
        </expr>
        ;
    </expr_stmt>
</unit>
