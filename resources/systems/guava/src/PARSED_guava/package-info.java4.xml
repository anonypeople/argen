<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\eventbus\package-info.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <comment type="javadoc">/**
        * The EventBus allows publish-subscribe-style communication between components
        * without requiring the components to explicitly register with one another
        * (and thus be aware of each other). It is designed exclusively to replace
        * traditional Java in-process event distribution using explicit registration.
        * It is &lt;em&gt;not&lt;/em&gt; a general-purpose publish-subscribe system, nor is it
        * intended for interprocess communication.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/EventBusExplained"&gt;
        * {@code EventBus}&lt;/a&gt;.
        *
        * &lt;h2&gt;One-Minute Guide&lt;/h2&gt;
        *
        * &lt;p&gt;Converting an existing EventListener-based system to use the EventBus is
        * easy.
        *
        * &lt;h3&gt;For Listeners&lt;/h3&gt;
        * &lt;p&gt;To listen for a specific flavor of event (say, a CustomerChangeEvent)...
        * &lt;ul&gt;
        * &lt;li&gt;&lt;strong&gt;...in traditional Java events:&lt;/strong&gt; implement an interface
        * defined with the event &amp;mdash; such as CustomerChangeEventListener.&lt;/li&gt;
        * &lt;li&gt;&lt;strong&gt;...with EventBus:&lt;/strong&gt; create a method that accepts
        * CustomerChangeEvent as its sole argument, and mark it with the
        * {@link com.google.common.eventbus.Subscribe} annotation.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;To register your listener methods with the event producers...
        * &lt;ul&gt;
        * &lt;li&gt;&lt;strong&gt;...in traditional Java events:&lt;/strong&gt; pass your object to each
        * producer's {@code registerCustomerChangeEventListener} method. These
        * methods are rarely defined in common interfaces, so in addition to
        * knowing every possible producer, you must also know its type.&lt;/li&gt;
        * &lt;li&gt;&lt;strong&gt;...with EventBus:&lt;/strong&gt; pass your object to the
        * {@link com.google.common.eventbus.EventBus#register(Object)} method on an
        * EventBus. You'll need to
        * make sure that your object shares an EventBus instance with the event
        * producers.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;To listen for a common event supertype (such as EventObject or Object)...
        * &lt;ul&gt;
        * &lt;li&gt;&lt;strong&gt;...in traditional Java events:&lt;/strong&gt; not easy.&lt;/li&gt;
        * &lt;li&gt;&lt;strong&gt;...with EventBus:&lt;/strong&gt; events are automatically dispatched to
        * listeners of any supertype, allowing listeners for interface types
        * or "wildcard listeners" for Object.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;To listen for and detect events that were dispatched without listeners...
        * &lt;ul&gt;
        * &lt;li&gt;&lt;strong&gt;...in traditional Java events:&lt;/strong&gt; add code to each
        * event-dispatching method (perhaps using AOP).&lt;/li&gt;
        * &lt;li&gt;&lt;strong&gt;...with EventBus:&lt;/strong&gt; subscribe to {@link
        * com.google.common.eventbus.DeadEvent}. The
        * EventBus will notify you of any events that were posted but not
        * delivered. (Handy for debugging.)&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;For Producers&lt;/h3&gt;
        * &lt;p&gt;To keep track of listeners to your events...
        * &lt;ul&gt;
        * &lt;li&gt;&lt;strong&gt;...in traditional Java events:&lt;/strong&gt; write code to manage
        * a list of listeners to your object, including synchronization, or use a
        * utility class like EventListenerList.&lt;/li&gt;
        * &lt;li&gt;&lt;strong&gt;...with EventBus:&lt;/strong&gt; EventBus does this for you.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;To dispatch an event to listeners...
        * &lt;ul&gt;
        * &lt;li&gt;&lt;strong&gt;...in traditional Java events:&lt;/strong&gt; write a method to
        * dispatch events to each event listener, including error isolation and
        * (if desired) asynchronicity.&lt;/li&gt;
        * &lt;li&gt;&lt;strong&gt;...with EventBus:&lt;/strong&gt; pass the event object to an EventBus's
        * {@link com.google.common.eventbus.EventBus#post(Object)} method.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;h2&gt;Glossary&lt;/h2&gt;
        *
        * &lt;p&gt;The EventBus system and code use the following terms to discuss event
        * distribution:
        * &lt;dl&gt;
        * &lt;dt&gt;Event&lt;/dt&gt;&lt;dd&gt;Any object that may be &lt;em&gt;posted&lt;/em&gt; to a bus.&lt;/dd&gt;
        * &lt;dt&gt;Subscribing&lt;/dt&gt;&lt;dd&gt;The act of registering a &lt;em&gt;listener&lt;/em&gt; with an
        * EventBus, so that its &lt;em&gt;subscriber methods&lt;/em&gt; will receive events.&lt;/dd&gt;
        * &lt;dt&gt;Listener&lt;/dt&gt;&lt;dd&gt;An object that wishes to receive events, by exposing
        * &lt;em&gt;subscriber methods&lt;/em&gt;.&lt;/dt&gt;
        * &lt;dt&gt;Subscriber method&lt;/dt&gt;&lt;dd&gt;A public method that the EventBus should use to
        * deliver &lt;em&gt;posted&lt;/em&gt; events. Subscriber methods are marked by the
        * {@link com.google.common.eventbus.Subscribe} annotation.&lt;/dd&gt;
        * &lt;dt&gt;Posting an event&lt;/dt&gt;&lt;dd&gt;Making the event available to any
        * &lt;em&gt;listeners&lt;/em&gt; through the EventBus.&lt;/dt&gt;
        * &lt;/dl&gt;
        *
        * &lt;h2&gt;FAQ&lt;/h2&gt;
        * &lt;h3&gt;Why must I create my own Event Bus, rather than using a singleton?&lt;/h3&gt;
        *
        * &lt;p&gt;The Event Bus doesn't specify how you use it; there's nothing stopping your
        * application from having separate EventBus instances for each component, or
        * using separate instances to separate events by context or topic. This also
        * makes it trivial to set up and tear down EventBus objects in your tests.
        *
        * &lt;p&gt;Of course, if you'd like to have a process-wide EventBus singleton,
        * there's nothing stopping you from doing it that way. Simply have your
        * container (such as Guice) create the EventBus as a singleton at global scope
        * (or stash it in a static field, if you're into that sort of thing).
        *
        * &lt;p&gt;In short, the EventBus is not a singleton because we'd rather not make
        * that decision for you. Use it how you like.
        *
        * &lt;h3&gt;Why use an annotation to mark subscriber methods, rather than requiring the
        * listener to implement an interface?&lt;/h3&gt;
        * &lt;p&gt;We feel that the Event Bus's {@code @Subscribe} annotation conveys your
        * intentions just as explicitly as implementing an interface (or perhaps more
        * so), while leaving you free to place event subscriber methods wherever you wish
        * and give them intention-revealing names.
        *
        * &lt;p&gt;Traditional Java Events use a listener interface which typically sports
        * only a handful of methods -- typically one. This has a number of
        * disadvantages:
        * &lt;ul&gt;
        * &lt;li&gt;Any one class can only implement a single response to a given event.
        * &lt;li&gt;Listener interface methods may conflict.
        * &lt;li&gt;The method must be named after the event (e.g. {@code
        * handleChangeEvent}), rather than its purpose (e.g. {@code
        * recordChangeInJournal}).
        * &lt;li&gt;Each event usually has its own interface, without a common parent
        * interface for a family of events (e.g. all UI events).
        * &lt;/ul&gt;
        *
        * &lt;p&gt;The difficulties in implementing this cleanly has given rise to a pattern,
        * particularly common in Swing apps, of using tiny anonymous classes to
        * implement event listener interfaces.
        *
        * &lt;p&gt;Compare these two cases: &lt;pre&gt;
        * class ChangeRecorder {
        * void setCustomer(Customer cust) {
        * cust.addChangeListener(new ChangeListener() {
        * void customerChanged(ChangeEvent e) {
        * recordChange(e.getChange());
        * }
        * };
        * }
        * }
        *
        * // Class is typically registered by the container.
        * class EventBusChangeRecorder {
        * &amp;#064;Subscribe void recordCustomerChange(ChangeEvent e) {
        * recordChange(e.getChange());
        * }
        * }&lt;/pre&gt;
        *
        * &lt;p&gt;The intent is actually clearer in the second case: there's less noise code,
        * and the event subscriber has a clear and meaningful name.
        *
        * &lt;h3&gt;What about a generic {@code Subscriber&lt;T&gt;} interface?&lt;/h3&gt;
        * &lt;p&gt;Some have proposed a generic {@code Subscriber&lt;T&gt;} interface for EventBus
        * listeners. This runs into issues with Java's use of type erasure, not to
        * mention problems in usability.
        *
        * &lt;p&gt;Let's say the interface looked something like the following: &lt;pre&gt; {@code
        * interface Subscriber&lt;T&gt; {
        * void handleEvent(T event);
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;Due to erasure, no single class can implement a generic interface more than
        * once with different type parameters. This is a giant step backwards from
        * traditional Java Events, where even if {@code actionPerformed} and {@code
        * keyPressed} aren't very meaningful names, at least you can implement both
        * methods!
        *
        * &lt;h3&gt;Doesn't EventBus destroy static typing and eliminate automated
        * refactoring support?&lt;/h3&gt;
        * &lt;p&gt;Some have freaked out about EventBus's {@code register(Object)} and {@code
        * post(Object)} methods' use of the {@code Object} type.
        *
        * &lt;p&gt;{@code Object} is used here for a good reason: the Event Bus library
        * places no restrictions on the types of either your event listeners (as in
        * {@code register(Object)}) or the events themselves (in {@code post(Object)}).
        *
        * &lt;p&gt;Event subscriber methods, on the other hand, must explicitly declare their
        * argument type -- the type of event desired (or one of its supertypes). Thus,
        * searching for references to an event class will instantly find all subscriber
        * methods for that event, and renaming the type will affect all subscriber methods
        * within view of your IDE (and any code that creates the event).
        *
        * &lt;p&gt;It's true that you can rename your {@code @Subscribed} event subscriber
        * methods at will; Event Bus will not stop this or do anything to propagate the
        * rename because, to Event Bus, the names of your subscriber methods are
        * irrelevant. Test code that calls the methods directly, of course, will be
        * affected by your renaming -- but that's what your refactoring tools are for.
        *
        * &lt;h3&gt;What happens if I {@code register} a listener without any subscriber
        * methods?&lt;/h3&gt;
        * &lt;p&gt;Nothing at all.
        *
        * &lt;p&gt;The Event Bus was designed to integrate with containers and module
        * systems, with Guice as the prototypical example. In these cases, it's
        * convenient to have the container/factory/environment pass &lt;i&gt;every&lt;/i&gt;
        * created object to an EventBus's {@code register(Object)} method.
        *
        * &lt;p&gt;This way, any object created by the container/factory/environment can
        * hook into the system's event model simply by exposing subscriber methods.
        *
        * &lt;h3&gt;What Event Bus problems can be detected at compile time?&lt;/h3&gt;
        * &lt;p&gt;Any problem that can be unambiguously detected by Java's type system. For
        * example, defining a subscriber method for a nonexistent event type.
        *
        * &lt;h3&gt;What Event Bus problems can be detected immediately at registration?&lt;/h3&gt;
        * &lt;p&gt;Immediately upon invoking {@code register(Object)} , the listener being
        * registered is checked for the &lt;i&gt;well-formedness&lt;/i&gt; of its subscriber methods.
        * Specifically, any methods marked with {@code @Subscribe} must take only a
        * single argument.
        *
        * &lt;p&gt;Any violations of this rule will cause an {@code IllegalArgumentException}
        * to be thrown.
        *
        * &lt;p&gt;(This check could be moved to compile-time using APT, a solution we're
        * researching.)
        *
        * &lt;h3&gt;What Event Bus problems may only be detected later, at runtime?&lt;/h3&gt;
        * &lt;p&gt;If a component posts events with no registered listeners, it &lt;i&gt;may&lt;/i&gt;
        * indicate an error (typically an indication that you missed a
        * {@code @Subscribe} annotation, or that the listening component is not loaded).
        *
        * &lt;p&gt;(Note that this is &lt;i&gt;not necessarily&lt;/i&gt; indicative of a problem. There
        * are many cases where an application will deliberately ignore a posted event,
        * particularly if the event is coming from code you don't control.)
        *
        * &lt;p&gt;To handle such events, register a subscriber method for the {@code DeadEvent}
        * class. Whenever EventBus receives an event with no registered subscribers, it
        * will turn it into a {@code DeadEvent} and pass it your way -- allowing you to
        * log it or otherwise recover.
        *
        * &lt;h3&gt;How do I test event listeners and their subscriber methods?&lt;/h3&gt;
        * &lt;p&gt;Because subscriber methods on your listener classes are normal methods, you can
        * simply call them from your test code to simulate the EventBus.
        */
    </comment>
    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>eventbus</name>
        </name>
        ;
    </package>
</unit>
