<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\Axis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------
 * Axis.java
 * ---------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Bill Kelemen; Nicolas Brodu
 *
 * Changes
 * -------
 * 21-Aug-2001 : Added standard header, fixed DOS encoding problem (DG);
 * 18-Sep-2001 : Updated header (DG);
 * 07-Nov-2001 : Allow null axis labels (DG);
 *             : Added default font values (DG);
 * 13-Nov-2001 : Modified the setPlot() method to check compatibility between 
 *               the axis and the plot (DG);
 * 30-Nov-2001 : Changed default font from "Arial" --&gt; "SansSerif" (DG);
 * 06-Dec-2001 : Allow null in setPlot() method (BK);
 * 06-Mar-2002 : Added AxisConstants interface (DG);
 * 23-Apr-2002 : Added a visible property.  Moved drawVerticalString to 
 *               RefineryUtilities.  Added fixedDimension property for use in 
 *               combined plots (DG);
 * 25-Jun-2002 : Removed unnecessary imports (DG);
 * 05-Sep-2002 : Added attribute for tick mark paint (DG);
 * 18-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 07-Nov-2002 : Added attributes to control the inside and outside length of 
 *               the tick marks (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 18-Nov-2002 : Added axis location to refreshTicks() parameters (DG);
 * 15-Jan-2003 : Removed monolithic constructor (DG);
 * 17-Jan-2003 : Moved plot classes to separate package (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 03-Jul-2003 : Modified reserveSpace method (DG);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 11-Sep-2003 : Took care of listeners while cloning (NB);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 06-Nov-2003 : Modified refreshTicks() signature (DG);
 * 06-Jan-2004 : Added axis line attributes (DG);
 * 16-Mar-2004 : Added plot state to draw() method (DG);
 * 07-Apr-2004 : Modified text bounds calculation (DG);
 * 18-May-2004 : Eliminated AxisConstants.java (DG);
 * 30-Sep-2004 : Moved drawRotatedString() from RefineryUtilities --&gt; 
 *               TextUtilities (DG);
 * 04-Oct-2004 : Modified getLabelEnclosure() method to treat an empty String 
 *               the same way as a null string - see bug 1026521 (DG);
 * 21-Apr-2005 : Replaced Insets with RectangleInsets (DG);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 01-Jun-2005 : Added hasListener() method for unit testing (DG);
 * 08-Jun-2005 : Fixed equals() method to handle GradientPaint (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 22-Aug-2006 : API doc updates (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EventListener</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>event</name>.<name>EventListenerList</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * The base class for all axes in JFreeChart.  Subclasses are divided into 
 * those that display values ({@link ValueAxis}) and those that display 
 * categories ({@link CategoryAxis}).
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Axis</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7719289504573298271L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default axis visibility. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_AXIS_VISIBLE</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default axis label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_AXIS_LABEL_FONT</name> 
        =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default axis label paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_AXIS_LABEL_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default axis label insets. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RectangleInsets</name></type> <name>DEFAULT_AXIS_LABEL_INSETS</name> 
        =<init> <expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr>3.0</expr></argument>, <argument><expr>3.0</expr></argument>, <argument><expr>3.0</expr></argument>, <argument><expr>3.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default axis line paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_AXIS_LINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>gray</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default axis line stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_AXIS_LINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick labels visibility. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_TICK_LABELS_VISIBLE</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_TICK_LABEL_FONT</name> 
        =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick label paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_TICK_LABEL_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick label insets. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RectangleInsets</name></type> <name>DEFAULT_TICK_LABEL_INSETS</name> 
        =<init> <expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr>2.0</expr></argument>, <argument><expr>4.0</expr></argument>, <argument><expr>2.0</expr></argument>, <argument><expr>4.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick marks visible. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_TICK_MARKS_VISIBLE</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_TICK_MARK_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_TICK_MARK_PAINT</name> =<init> <expr><name><name>Color</name>.<name>gray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick mark inside length. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_TICK_MARK_INSIDE_LENGTH</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick mark outside length. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_TICK_MARK_OUTSIDE_LENGTH</name> =<init> <expr>2.0f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not the axis is visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>visible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The label for the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>label</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font for displaying the axis label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>labelFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint for drawing the axis label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The insets for the axis label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>labelInsets</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The label angle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>labelAngle</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the axis line is visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>axisLineVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used for the axis line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>axisLineStroke</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used for the axis line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>axisLinePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that indicates whether or not tick labels are visible for the 
     * axis. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>tickLabelsVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font used to display the tick labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>tickLabelFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The color used to display the tick labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>tickLabelPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The blank space around each tick label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>tickLabelInsets</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that indicates whether or not tick marks are visible for the 
     * axis. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>tickMarksVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The length of the tick mark inside the data area (zero permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>tickMarkInsideLength</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The length of the tick mark outside the data area (zero permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>tickMarkOutsideLength</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw tick marks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>tickMarkStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw tick marks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>tickMarkPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fixed (horizontal or vertical) dimension for the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>fixedDimension</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A reference back to the plot that the axis is assigned to (can be 
     * &lt;code&gt;null&lt;/code&gt;). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Plot</name></type> <name>plot</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for registered listeners. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>EventListenerList</name></type> <name>listenerList</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs an axis, using default values where necessary.
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>protected</specifier> <name>Axis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>visible</name></name> = <name>DEFAULT_AXIS_VISIBLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>DEFAULT_AXIS_LABEL_FONT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>DEFAULT_AXIS_LABEL_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelInsets</name></name> = <name>DEFAULT_AXIS_LABEL_INSETS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelAngle</name></name> = 0.0</expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>axisLineVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLinePaint</name></name> = <name>DEFAULT_AXIS_LINE_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLineStroke</name></name> = <name>DEFAULT_AXIS_LINE_STROKE</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelsVisible</name></name> = <name>DEFAULT_TICK_LABELS_VISIBLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFont</name></name> = <name>DEFAULT_TICK_LABEL_FONT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <name>DEFAULT_TICK_LABEL_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelInsets</name></name> = <name>DEFAULT_TICK_LABEL_INSETS</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>tickMarksVisible</name></name> = <name>DEFAULT_TICK_MARKS_VISIBLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkStroke</name></name> = <name>DEFAULT_TICK_MARK_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkPaint</name></name> = <name>DEFAULT_TICK_MARK_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkInsideLength</name></name> = <name>DEFAULT_TICK_MARK_INSIDE_LENGTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkOutsideLength</name></name> = <name>DEFAULT_TICK_MARK_OUTSIDE_LENGTH</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>plot</name></name> = <name>null</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>listenerList</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the axis is visible, and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @return A boolean.
     * 
     * @see #setVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>visible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not the axis is visible and sends 
     * an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #isVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>flag</name> != <name><name>this</name>.<name>visible</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>visible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the label for the axis.
     *
     * @return The label for the axis (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #getLabelFont()
     * @see #getLabelPaint()
     * @see #setLabel(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>label</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the label for the axis and sends an {@link AxisChangeEvent} to all 
     * registered listeners.
     *
     * @param label  the new label (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLabel()
     * @see #setLabelFont(Font)
     * @see #setLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>String</name></type> <name>existing</name> =<init> <expr><name><name>this</name>.<name>label</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>existing</name>.<name>equals</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>label</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the font for the axis label.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the font for the axis label and sends an {@link AxisChangeEvent} 
     * to all registered listeners.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>labelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>font</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the color/shade used to draw the axis label.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the axis label and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the insets for the label (that is, the amount of blank space
     * that should be left around the label).
     *
     * @return The label insets (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelInsets(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getLabelInsets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelInsets</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the insets for the axis label, and sends an {@link AxisChangeEvent}
     * to all registered listeners.
     *
     * @param insets  the insets (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelInsets()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelInsets</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>insets</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>insets</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'insets' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>insets</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInsets</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>labelInsets</name></name> = <name>insets</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the angle of the axis label.
     *
     * @return The angle (in radians).
     * 
     * @see #setLabelAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLabelAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelAngle</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the angle for the label and sends an {@link AxisChangeEvent} to all 
     * registered listeners.
     *
     * @param angle  the angle (in radians).
     * 
     * @see #getLabelAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelAngle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A flag that controls whether or not the axis line is drawn.
     * 
     * @return A boolean.
     * 
     * @see #getAxisLinePaint()
     * @see #getAxisLineStroke()
     * @see #setAxisLineVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAxisLineVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLineVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a flag that controls whether or not the axis line is visible and 
     * sends an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param visible  the flag.
     * 
     * @see #isAxisLineVisible()
     * @see #setAxisLinePaint(Paint)
     * @see #setAxisLineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLineVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>axisLineVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the axis line.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxisLinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getAxisLinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLinePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the axis line and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAxisLinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>axisLinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to draw the axis line.
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxisLineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getAxisLineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLineStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to draw the axis line and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAxisLineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>axisLineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the tick labels are visible.
     *
     * @return The flag.
     * 
     * @see #getTickLabelFont()
     * @see #getTickLabelPaint()
     * @see #setTickLabelsVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTickLabelsVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelsVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that determines whether or not the tick labels are 
     * visible and sends an {@link AxisChangeEvent} to all registered 
     * listeners.
     *
     * @param flag  the flag.
     * 
     * @see #isTickLabelsVisible()
     * @see #setTickLabelFont(Font)
     * @see #setTickLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelsVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>flag</name> != <name><name>this</name>.<name>tickLabelsVisible</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickLabelsVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the font used for the tick labels (if showing).
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getTickLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the font for the tick labels and sends an {@link AxisChangeEvent} 
     * to all registered listeners.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not allowed).
     * 
     * @see #getTickLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>tickLabelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickLabelFont</name></name> = <name>font</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the color/shade used for the tick labels.
     *
     * @return The paint used for the tick labels.
     * 
     * @see #setTickLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getTickLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw tick labels (if they are showing) and 
     * sends an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickLabelPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the insets for the tick labels.
     *
     * @return The insets (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelInsets(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getTickLabelInsets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelInsets</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the insets for the tick labels and sends an {@link AxisChangeEvent}
     * to all registered listeners.
     *
     * @param insets  the insets (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickLabelInsets()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelInsets</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>insets</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>insets</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'insets' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>tickLabelInsets</name>.<name>equals</name></name><argument_list>(<argument><expr><name>insets</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickLabelInsets</name></name> = <name>insets</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that indicates whether or not the tick marks are
     * showing.
     *
     * @return The flag that indicates whether or not the tick marks are 
     *         showing.
     *         
     * @see #setTickMarksVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTickMarksVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickMarksVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates whether or not the tick marks are showing
     * and sends an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #isTickMarksVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickMarksVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>flag</name> != <name><name>this</name>.<name>tickMarksVisible</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickMarksVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the inside length of the tick marks.
     *
     * @return The length.
     * 
     * @see #getTickMarkOutsideLength()
     * @see #setTickMarkInsideLength(float)
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getTickMarkInsideLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickMarkInsideLength</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the inside length of the tick marks and sends
     * an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param length  the new length.
     * 
     * @see #getTickMarkInsideLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickMarkInsideLength</name><parameter_list>(<param><decl><type><name>float</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkInsideLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the outside length of the tick marks.
     *
     * @return The length.
     * 
     * @see #getTickMarkInsideLength()
     * @see #setTickMarkOutsideLength(float)
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getTickMarkOutsideLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickMarkOutsideLength</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the outside length of the tick marks and sends
     * an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param length  the new length.
     * 
     * @see #getTickMarkInsideLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickMarkOutsideLength</name><parameter_list>(<param><decl><type><name>float</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkOutsideLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw tick marks.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickMarkStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getTickMarkStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickMarkStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to draw tick marks and sends
     * an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickMarkStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickMarkStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>tickMarkStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickMarkStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw tick marks (if they are showing).
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickMarkPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getTickMarkPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickMarkPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw tick marks and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickMarkPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickMarkPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the plot that the axis is assigned to.  This method will return 
     * &lt;code&gt;null&lt;/code&gt; if the axis is not currently assigned to a plot.
     *
     * @return The plot that the axis is assigned to (possibly 
     *         &lt;code&gt;null&lt;/code&gt;).
     *         
     * @see #setPlot(Plot)
     */</comment>
    <function><type><specifier>public</specifier> <name>Plot</name></type> <name>getPlot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plot</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a reference to the plot that the axis is assigned to.
     * &lt;P&gt;
     * This method is used internally, you shouldn't need to call it yourself.
     *
     * @param plot  the plot.
     * 
     * @see #getPlot()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlot</name><parameter_list>(<param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>plot</name></name> = <name>plot</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fixed dimension for the axis.
     *
     * @return The fixed dimension.
     * 
     * @see #setFixedDimension(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getFixedDimension</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedDimension</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed dimension for the axis.
     * &lt;P&gt;
     * This is used when combining more than one plot on a chart.  In this case,
     * there may be several axes that need to have the same height or width so
     * that they are aligned.  This method is used to fix a dimension for the
     * axis (the context determines whether the dimension is horizontal or
     * vertical).
     *
     * @param dimension  the fixed dimension.
     * 
     * @see #getFixedDimension()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedDimension</name><parameter_list>(<param><decl><type><name>double</name></type> <name>dimension</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedDimension</name></name> = <name>dimension</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the axis to work with the current plot.  Override this method
     * to perform any special processing (such as auto-rescaling).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Estimates the space (height or width) required to draw the axis.
     *
     * @param g2  the graphics device.
     * @param plot  the plot that the axis belongs to.
     * @param plotArea  the area within which the plot (including axes) should 
     *                  be drawn.
     * @param edge  the axis location.
     * @param space  space already reserved.
     *
     * @return The space required to draw the axis (including pre-reserved 
     *         space).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>AxisSpace</name></type> <name>reserveSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, 
                                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                           <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, 
                                           <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location (determines where to draw the axis).
     * @param plotArea  the area within which the axes and plot should be drawn.
     * @param dataArea  the area within which the data should be drawn.
     * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                   <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                                   <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                   <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                   <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                                   <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Calculates the positions of the ticks for the axis, storing the results
     * in the tick list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the area inside the axes.
     * @param edge  the edge on which the axis is located.
     * 
     * @return The list of ticks.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                      <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                                      <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                      <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Registers an object for notification of changes to the axis.
     *
     * @param listener  the object that is being registered.
     * 
     * @see #removeChangeListener(AxisChangeListener)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addChangeListener</name><parameter_list>(<param><decl><type><name>AxisChangeListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>listenerList</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>AxisChangeListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Deregisters an object for notification of changes to the axis.
     *
     * @param listener  the object to deregister.
     * 
     * @see #addChangeListener(AxisChangeListener)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeChangeListener</name><parameter_list>(<param><decl><type><name>AxisChangeListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>listenerList</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>AxisChangeListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified object is registered with
     * the dataset as a listener.  Most applications won't need to call this 
     * method, it exists mainly for use by unit testing code.
     * 
     * @param listener  the listener.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasListener</name><parameter_list>(<param><decl><type><name>EventListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>list</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>listenerList</name>.<name>getListenerList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>list</name>.<name>contains</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Notifies all registered listeners that the axis has changed.
     * The AxisChangeEvent provides information about the change.
     *
     * @param event  information about the change to the axis.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>notifyListeners</name><parameter_list>(<param><decl><type><name>AxisChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>listeners</name> =<init> <expr><call><name><name>this</name>.<name>listenerList</name>.<name>getListenerList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>listeners</name>.<name>length</name></name> - 2</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name> -= 2</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>AxisChangeListener</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>AxisChangeListener</name>) <name><name>listeners</name><index>[<expr><name>i</name> + 1</expr>]</index></name>).<call><name>axisChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a rectangle that encloses the axis label.  This is typically 
     * used for layout purposes (it gives the maximum dimensions of the label).
     *
     * @param g2  the graphics device.
     * @param edge  the edge of the plot area along which the axis is measuring.
     *
     * @return The enclosing rectangle.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>getLabelEnclosure</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>result</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>axisLabel</name> =<init> <expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>axisLabel</name> != <name>null</name> &amp;&amp; !<call><name><name>axisLabel</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><call><name>getLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>axisLabel</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bounds</name> = <call><name><name>insets</name>.<name>createOutsetRectangle</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>angle</name> = <name>angle</name> - <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>bounds</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>bounds</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>transformer</name> 
                =<init> <expr><call><name><name>AffineTransform</name>.<name>getRotateInstance</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>labelBounds</name> =<init> <expr><call><name><name>transformer</name>.<name>createTransformedShape</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name><name>labelBounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis label.
     *
     * @param label  the label text.
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param dataArea  the area inside the axes.
     * @param edge  the location of the axis.
     * @param state  the axis state (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return Information about the axis.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisState</name></type> <name>drawLabel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>,
                                  <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                  <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                  <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                  <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, 
                                  <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// it is unlikely that 'state' will be null, but check anyway...</comment>
        <if>if <condition>(<expr><name>state</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'state' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <if>if <condition>(<expr>(<name>label</name> == <name>null</name>) || (<call><name><name>label</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr><name>state</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Font</name></type> <name>font</name> =<init> <expr><call><name>getLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getLabelPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>labelBounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>t</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getRotateInstance</name></name><argument_list>(
                    <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>labelBounds</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>labelBounds</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>rotatedLabelBounds</name> =<init> <expr><call><name><name>t</name>.<name>createTransformedShape</name></name><argument_list>(<argument><expr><name>labelBounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>labelBounds</name> = <call><name><name>rotatedLabelBounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labelx</name> =<init> <expr><call><name><name>dataArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labely</name> =<init> <expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> - <call><name><name>insets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call> 
                            - <call><name><name>labelBounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>labelx</name></expr></argument>, 
                    <argument><expr>(<name>float</name>) <name>labely</name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name>.<name>cursorUp</name></name><argument_list>(<argument><expr><call><name><name>insets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>labelBounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> 
                    + <call><name><name>insets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>t</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getRotateInstance</name></name><argument_list>(
                    <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>labelBounds</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>labelBounds</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>rotatedLabelBounds</name> =<init> <expr><call><name><name>t</name>.<name>createTransformedShape</name></name><argument_list>(<argument><expr><name>labelBounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>labelBounds</name> = <call><name><name>rotatedLabelBounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labelx</name> =<init> <expr><call><name><name>dataArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labely</name> =<init> <expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> 
                            + <call><name><name>insets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>labelBounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>labelx</name></expr></argument>, 
                    <argument><expr>(<name>float</name>) <name>labely</name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name>.<name>cursorDown</name></name><argument_list>(<argument><expr><call><name><name>insets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>labelBounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> 
                    + <call><name><name>insets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>t</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getRotateInstance</name></name><argument_list>(
                    <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call> - <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>, <argument><expr><call><name><name>labelBounds</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>labelBounds</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>rotatedLabelBounds</name> =<init> <expr><call><name><name>t</name>.<name>createTransformedShape</name></name><argument_list>(<argument><expr><name>labelBounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>labelBounds</name> = <call><name><name>rotatedLabelBounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labelx</name> =<init> <expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> 
                            - <call><name><name>insets</name>.<name>getRight</name></name><argument_list>()</argument_list></call> - <call><name><name>labelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labely</name> =<init> <expr><call><name><name>dataArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>labelx</name></expr></argument>, 
                    <argument><expr>(<name>float</name>) <name>labely</name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, 
                    <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call> - <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name>.<name>cursorLeft</name></name><argument_list>(<argument><expr><call><name><name>insets</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>labelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                    + <call><name><name>insets</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>t</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getRotateInstance</name></name><argument_list>(
                    <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call> + <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>, 
                    <argument><expr><call><name><name>labelBounds</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>labelBounds</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>rotatedLabelBounds</name> =<init> <expr><call><name><name>t</name>.<name>createTransformedShape</name></name><argument_list>(<argument><expr><name>labelBounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>labelBounds</name> = <call><name><name>rotatedLabelBounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labelx</name> =<init> <expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> 
                            + <call><name><name>insets</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>labelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>labely</name> =<init> <expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>labelx</name></expr></argument>, 
                    <argument><expr>(<name>float</name>) <name>labely</name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>,
                    <argument><expr><call><name>getLabelAngle</name><argument_list>()</argument_list></call> + <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name>.<name>cursorRight</name></name><argument_list>(<argument><expr><call><name><name>insets</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>labelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                    + <call><name><name>insets</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if></else></if></else></if></else></if>

        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws an axis line at the current cursor position and edge.
     * 
     * @param g2  the graphics device.
     * @param cursor  the cursor position.
     * @param dataArea  the data area.
     * @param edge  the edge.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawAxisLine</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Line2D</name></type> <name>axisLine</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axisLine</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axisLine</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axisLine</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axisLine</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></then></if></else></if></else></if></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>axisLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the axis.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if some component of the axis does 
     *         not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Axis</name></type> <name>clone</name> =<init> <expr>(<name>Axis</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// It's up to the plot which clones up to restore the correct references</comment>
        <expr_stmt><expr><name><name>clone</name>.<name>plot</name></name> = <name>null</name></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>clone</name>.<name>listenerList</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this axis for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Axis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Axis</name></type> <name>that</name> =<init> <expr>(<name>Axis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>visible</name></name> != <name><name>that</name>.<name>visible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>label</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>label</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInsets</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelInsets</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelAngle</name></name> != <name><name>that</name>.<name>labelAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>axisLineVisible</name></name> != <name><name>that</name>.<name>axisLineVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLineStroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>axisLineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLinePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>axisLinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelsVisible</name></name> != <name><name>that</name>.<name>tickLabelsVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>tickLabelInsets</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelInsets</name></name></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickMarksVisible</name></name> != <name><name>that</name>.<name>tickMarksVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkInsideLength</name></name> != <name><name>that</name>.<name>tickMarkInsideLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>                  
        <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkOutsideLength</name></name> != <name><name>that</name>.<name>tickMarkOutsideLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>                  
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickMarkPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickMarkPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickMarkStroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickMarkStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedDimension</name></name> != <name><name>that</name>.<name>fixedDimension</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickMarkStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickMarkPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>listenerList</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
