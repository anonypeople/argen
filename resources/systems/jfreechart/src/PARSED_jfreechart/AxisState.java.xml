<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\AxisState.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------
 * AxisState.java
 * --------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Nov-2003 : Added standard header (DG);
 * 07-Nov-2003 : Added 'max' attribute (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>

<comment type="javadoc">/**
 * Instances of this class are used to carry state information for an axis 
 * during the drawing process.  By retaining this information in a separate 
 * object, it is possible for multiple threads to draw the same axis to 
 * different output targets (each drawing will maintain separate state 
 * information).
 */</comment>
<class><specifier>public</specifier> class <name>AxisState</name> <block>{

    <comment type="javadoc">/** The cursor position. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>cursor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The axis ticks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>ticks</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum width/height. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>max</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new axis state.
     */</comment>
    <constructor><specifier>public</specifier> <name>AxisState</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new axis state.
     * 
     * @param cursor  the cursor.
     */</comment>
    <constructor><specifier>public</specifier> <name>AxisState</name><parameter_list>(<param><decl><type><name>double</name></type> <name>cursor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cursor</name></name> = <name>cursor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ticks</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the cursor position.
     * 
     * @return The cursor position.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCursor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>cursor</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the cursor position.
     * 
     * @param cursor  the cursor position.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCursor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>cursor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cursor</name></name> = <name>cursor</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Moves the cursor outwards by the specified number of units.
     * 
     * @param units  the units.
     * @param edge  the edge.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>moveCursor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>units</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>cursorUp</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>cursorDown</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>cursorLeft</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>cursorRight</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if></else></if></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Moves the cursor up by the specified number of Java 2D units.
     * 
     * @param units  the units.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cursorUp</name><parameter_list>(<param><decl><type><name>double</name></type> <name>units</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cursor</name></name> = <name><name>this</name>.<name>cursor</name></name> - <name>units</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Moves the cursor down by the specified number of Java 2D units.
     * 
     * @param units  the units.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cursorDown</name><parameter_list>(<param><decl><type><name>double</name></type> <name>units</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cursor</name></name> = <name><name>this</name>.<name>cursor</name></name> + <name>units</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Moves the cursor left by the specified number of Java 2D units.
     * 
     * @param units  the units.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cursorLeft</name><parameter_list>(<param><decl><type><name>double</name></type> <name>units</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cursor</name></name> = <name><name>this</name>.<name>cursor</name></name> - <name>units</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Moves the cursor right by the specified number of Java 2D units.
     * 
     * @param units  the units.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cursorRight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>units</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cursor</name></name> = <name><name>this</name>.<name>cursor</name></name> + <name>units</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the list of ticks.
     * 
     * @return The list of ticks.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getTicks</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>ticks</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the list of ticks.
     * 
     * @param ticks  the ticks.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTicks</name><parameter_list>(<param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ticks</name></name> = <name>ticks</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum width/height.
     * 
     * @return The maximum width/height.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMax</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>max</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum width/height.
     * 
     * @param max the maximum width/height.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMax</name><parameter_list>(<param><decl><type><name>double</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>max</name></name> = <name>max</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
