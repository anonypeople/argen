<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\CategoryAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * CategoryAxis.java
 * -----------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert;
 * Contributor(s):   Pady Srinivasan (patch 1217634);
 *
 * Changes
 * -------
 * 21-Aug-2001 : Added standard header. Fixed DOS encoding problem (DG);
 * 18-Sep-2001 : Updated header (DG);
 * 04-Dec-2001 : Changed constructors to protected, and tidied up default 
 *               values (DG);
 * 19-Apr-2002 : Updated import statements (DG);
 * 05-Sep-2002 : Updated constructor for changes in Axis class (DG);
 * 06-Nov-2002 : Moved margins from the CategoryPlot class (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 22-Jan-2002 : Removed monolithic constructor (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 09-May-2003 : Merged HorizontalCategoryAxis and VerticalCategoryAxis into 
 *               this class (DG);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 05-Nov-2003 : Fixed serialization bug (DG);
 * 26-Nov-2003 : Added category label offset (DG);
 * 06-Jan-2004 : Moved axis line attributes to Axis class, rationalised 
 *               category label position attributes (DG);
 * 07-Jan-2004 : Added new implementation for linewrapping of category 
 *               labels (DG);
 * 17-Feb-2004 : Moved deprecated code to bottom of source file (DG);
 * 10-Mar-2004 : Changed Dimension --&gt; Dimension2D in text classes (DG);
 * 16-Mar-2004 : Added support for tooltips on category labels (DG);
 * 01-Apr-2004 : Changed java.awt.geom.Dimension2D to org.jfree.ui.Size2D 
 *               because of JDK bug 4976448 which persists on JDK 1.3.1 (DG);
 * 03-Sep-2004 : Added 'maxCategoryLabelLines' attribute (DG);
 * 04-Oct-2004 : Renamed ShapeUtils --&gt; ShapeUtilities (DG);
 * 11-Jan-2005 : Removed deprecated methods in preparation for 1.0.0 
 *               release (DG);
 * 21-Jan-2005 : Modified return type for RectangleAnchor.coordinates() 
 *               method (DG);
 * 21-Apr-2005 : Replaced Insets with RectangleInsets (DG);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 08-Jun-2005 : Fixed bug in axis layout (DG);
 * 22-Nov-2005 : Added a method to access the tool tip text for a category
 *               label (DG);
 * 23-Nov-2005 : Added per-category font and paint options - see patch 
 *               1217634 (DG);
 * ------------- JFreeChart 1.0.x ---------------------------------------------
 * 11-Jan-2006 : Fixed null pointer exception in drawCategoryLabels - see bug
 *               1403043 (DG);
 * 18-Aug-2006 : Fix for bug drawing category labels, thanks to Adriaan
 *               Joubert (1277726) (DG);
 * 02-Oct-2006 : Updated category label entity (DG);
 * 30-Oct-2006 : Updated refreshTicks() method to account for possibility of
 *               multiple domain axes (DG);
 * 07-Mar-2007 : Fixed bug in axis label positioning (DG);
 * 27-Sep-2007 : Added getCategorySeriesMiddle() method (DG);
 * 21-Nov-2007 : Fixed performance bug noted by FindBugs in the 
 *               equalPaintMaps() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryLabelEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>G2TextMeasurer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlock</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * An axis that displays categories.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryAxis</name> <super><extends>extends <name>Axis</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5886554608114265863L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The default margin for the axis (used for both lower and upper margins).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_AXIS_MARGIN</name> =<init> <expr>0.05</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default margin between categories (a percentage of the overall axis
     * length). 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_CATEGORY_MARGIN</name> =<init> <expr>0.20</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The amount of space reserved at the start of the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerMargin</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The amount of space reserved at the end of the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperMargin</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The amount of space reserved between categories. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>categoryMargin</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum number of lines for category labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumCategoryLabelLines</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A ratio that is multiplied by the width of one category to determine the 
     * maximum label width. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maximumCategoryLabelWidthRatio</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The category label offset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>categoryLabelPositionOffset</name></decl>;</decl_stmt> 
    
    <comment type="javadoc">/** 
     * A structure defining the category label positions for each axis 
     * location. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryLabelPositions</name></type> <name>categoryLabelPositions</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for tick label font overrides (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>tickLabelFontMap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for tick label paint overrides (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Map</name></type> <name>tickLabelPaintMap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the category label tooltips (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>categoryLabelToolTips</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new category axis with no label.
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryAxis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Constructs a category axis, using default values where necessary.
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>lowerMargin</name></name> = <name>DEFAULT_AXIS_MARGIN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperMargin</name></name> = <name>DEFAULT_AXIS_MARGIN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>categoryMargin</name></name> = <name>DEFAULT_CATEGORY_MARGIN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumCategoryLabelLines</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumCategoryLabelWidthRatio</name></name> = 0.0f</expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>setTickMarksVisible</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// not supported by this axis type yet</comment>
        
        <expr_stmt><expr><name><name>this</name>.<name>categoryLabelPositionOffset</name></name> = 4</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>categoryLabelPositions</name></name> = <name><name>CategoryLabelPositions</name>.<name>STANDARD</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFontMap</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaintMap</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>categoryLabelToolTips</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the lower margin for the axis.
     *
     * @return The margin.
     * 
     * @see #getUpperMargin()
     * @see #setLowerMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerMargin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the lower margin for the axis and sends an {@link AxisChangeEvent} 
     * to all registered listeners.
     *
     * @param margin  the margin as a percentage of the axis length (for 
     *                example, 0.05 is five percent).
     *                
     * @see #getLowerMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLowerMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>lowerMargin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper margin for the axis.
     *
     * @return The margin.
     * 
     * @see #getLowerMargin()
     * @see #setUpperMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperMargin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the upper margin for the axis and sends an {@link AxisChangeEvent}
     * to all registered listeners.
     *
     * @param margin  the margin as a percentage of the axis length (for 
     *                example, 0.05 is five percent).
     *                
     * @see #getUpperMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUpperMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>upperMargin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the category margin.
     *
     * @return The margin.
     * 
     * @see #setCategoryMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategoryMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>categoryMargin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the category margin and sends an {@link AxisChangeEvent} to all 
     * registered listeners.  The overall category margin is distributed over 
     * N-1 gaps, where N is the number of categories on the axis.
     *
     * @param margin  the margin as a percentage of the axis length (for 
     *                example, 0.05 is five percent).
     *                
     * @see #getCategoryMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCategoryMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>categoryMargin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum number of lines to use for each category label.
     * 
     * @return The maximum number of lines.
     * 
     * @see #setMaximumCategoryLabelLines(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumCategoryLabelLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumCategoryLabelLines</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum number of lines to use for each category label and
     * sends an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param lines  the maximum number of lines.
     * 
     * @see #getMaximumCategoryLabelLines()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumCategoryLabelLines</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lines</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumCategoryLabelLines</name></name> = <name>lines</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the category label width ratio.
     * 
     * @return The ratio.
     * 
     * @see #setMaximumCategoryLabelWidthRatio(float)
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMaximumCategoryLabelWidthRatio</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumCategoryLabelWidthRatio</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum category label width ratio and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param ratio  the ratio.
     * 
     * @see #getMaximumCategoryLabelWidthRatio()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumCategoryLabelWidthRatio</name><parameter_list>(<param><decl><type><name>float</name></type> <name>ratio</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumCategoryLabelWidthRatio</name></name> = <name>ratio</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the offset between the axis and the category labels (before 
     * label positioning is taken into account).
     * 
     * @return The offset (in Java2D units).
     * 
     * @see #setCategoryLabelPositionOffset(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCategoryLabelPositionOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the offset between the axis and the category labels (before label 
     * positioning is taken into account).
     * 
     * @param offset  the offset (in Java2D units).
     * 
     * @see #getCategoryLabelPositionOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCategoryLabelPositionOffset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>categoryLabelPositionOffset</name></name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the category label position specification (this contains label 
     * positioning info for all four possible axis locations).
     * 
     * @return The positions (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setCategoryLabelPositions(CategoryLabelPositions)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryLabelPositions</name></type> <name>getCategoryLabelPositions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>categoryLabelPositions</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the category label position specification for the axis and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param positions  the positions (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getCategoryLabelPositions()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCategoryLabelPositions</name><parameter_list>(<param><decl><type><name>CategoryLabelPositions</name></type> <name>positions</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>positions</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'positions' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>categoryLabelPositions</name></name> = <name>positions</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the font for the tick label for the given category.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelFont(Comparable, Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getTickLabelFont</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Font</name></type> <name>result</name> =<init> <expr>(<name>Font</name>) <call><name><name>this</name>.<name>tickLabelFontMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// if there is no specific font, use the general one...</comment>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the font for the tick label for the specified category and sends
     * an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getTickLabelFont(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFont</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>tickLabelFontMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>tickLabelFontMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the tick label for the given category.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getTickLabelPaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr>(<name>Paint</name>) <call><name><name>this</name>.<name>tickLabelPaintMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// if there is no specific paint, use the general one...</comment>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getTickLabelPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint for the tick label for the specified category and sends
     * an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getTickLabelPaint(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelPaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>tickLabelPaintMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>tickLabelPaintMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a tooltip to the specified category and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param category  the category (&lt;code&gt;null&lt;code&gt; not permitted).
     * @param tooltip  the tooltip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #removeCategoryLabelToolTip(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCategoryLabelToolTip</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>String</name></type> <name>tooltip</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>categoryLabelToolTips</name>.<name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tool tip text for the label belonging to the specified 
     * category.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The tool tip text (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #addCategoryLabelToolTip(Comparable, String)
     * @see #removeCategoryLabelToolTip(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCategoryLabelToolTip</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>String</name>) <call><name><name>this</name>.<name>categoryLabelToolTips</name>.<name>get</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes the tooltip for the specified category and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param category  the category (&lt;code&gt;null&lt;code&gt; not permitted).
     * 
     * @see #addCategoryLabelToolTip(Comparable, String)
     * @see #clearCategoryLabelToolTips()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeCategoryLabelToolTip</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>categoryLabelToolTips</name>.<name>remove</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears the category label tooltips and sends an {@link AxisChangeEvent} 
     * to all registered listeners.
     * 
     * @see #addCategoryLabelToolTip(Comparable, String)
     * @see #removeCategoryLabelToolTip(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearCategoryLabelToolTips</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>categoryLabelToolTips</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the Java 2D coordinate for a category.
     * 
     * @param anchor  the anchor point.
     * @param category  the category index.
     * @param categoryCount  the category count.
     * @param area  the data area.
     * @param edge  the location of the axis.
     * 
     * @return The coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategoryJava2DCoordinate</name><parameter_list>(<param><decl><type><name>CategoryAnchor</name></type> <name>anchor</name></decl></param>, 
                                              <param><decl><type><name>int</name></type> <name>category</name></decl></param>, 
                                              <param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, 
                                              <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
    
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>anchor</name> == <name><name>CategoryAnchor</name>.<name>START</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getCategoryStart</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getCategoryMiddle</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>CategoryAnchor</name>.<name>END</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
                                                      
    }</block></function>
                                              
    <comment type="javadoc">/**
     * Returns the starting coordinate for the specified category.
     *
     * @param category  the category.
     * @param categoryCount  the number of categories.
     * @param area  the data area.
     * @param edge  the axis location.
     *
     * @return The coordinate.
     * 
     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)
     * @see #getCategoryEnd(int, int, Rectangle2D, RectangleEdge)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategoryStart</name><parameter_list>(<param><decl><type><name>int</name></type> <name>category</name></decl></param>, <param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, 
                                   <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                   <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name>) || (<name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name>getLowerMargin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>(<name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name>) 
                || (<name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <call><name>getLowerMargin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>double</name></type> <name>categorySize</name> =<init> <expr><call><name>calculateCategorySize</name><argument_list>(<argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>categoryGapWidth</name> =<init> <expr><call><name>calculateCategoryGapSize</name><argument_list>(<argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>,
                <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> = <name>result</name> + <name>category</name> * (<name>categorySize</name> + <name>categoryGapWidth</name>)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the middle coordinate for the specified category.
     *
     * @param category  the category.
     * @param categoryCount  the number of categories.
     * @param area  the data area.
     * @param edge  the axis location.
     *
     * @return The coordinate.
     * 
     * @see #getCategoryStart(int, int, Rectangle2D, RectangleEdge)
     * @see #getCategoryEnd(int, int, Rectangle2D, RectangleEdge)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategoryMiddle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>category</name></decl></param>, <param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, 
                                    <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <return>return <expr><call><name>getCategoryStart</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call>
               + <call><name>calculateCategorySize</name><argument_list>(<argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call> / 2</expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the end coordinate for the specified category.
     *
     * @param category  the category.
     * @param categoryCount  the number of categories.
     * @param area  the data area.
     * @param edge  the axis location.
     *
     * @return The coordinate.
     * 
     * @see #getCategoryStart(int, int, Rectangle2D, RectangleEdge)
     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategoryEnd</name><parameter_list>(<param><decl><type><name>int</name></type> <name>category</name></decl></param>, <param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, 
                                 <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <return>return <expr><call><name>getCategoryStart</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call>
               + <call><name>calculateCategorySize</name><argument_list>(<argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the middle coordinate (in Java2D space) for a series within a 
     * category.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param seriesKey  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param itemMargin  the item margin (0.0 &lt;= itemMargin &lt; 1.0);
     * @param area  the area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param edge  the edge (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The coordinate in Java2D space.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategorySeriesMiddle</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, 
            <param><decl><type><name>Comparable</name></type> <name>seriesKey</name></decl></param>, <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>double</name></type> <name>itemMargin</name></decl></param>,
            <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>int</name></type> <name>categoryIndex</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesIndex</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>seriesKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name>getCategoryStart</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, 
                <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><name>end</name> - <name>start</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>seriesCount</name> == 1</expr>)</condition><then> <block>{
            <return>return <expr><name>start</name> + <name>width</name> / 2.0</expr>;</return>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>gap</name> =<init> <expr>(<name>width</name> * <name>itemMargin</name>) / (<name>seriesCount</name> - 1)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ww</name> =<init> <expr>(<name>width</name> * (1 - <name>itemMargin</name>)) / <name>seriesCount</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>start</name> + (<name>seriesIndex</name> * (<name>ww</name> + <name>gap</name>)) + <name>ww</name> / 2.0</expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the size (width or height, depending on the location of the 
     * axis) of a category.
     *
     * @param categoryCount  the number of categories.
     * @param area  the area within which the categories will be drawn.
     * @param edge  the axis location.
     *
     * @return The category size.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateCategorySize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                           <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>available</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name>) || (<name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>available</name> = <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>(<name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name>) 
                || (<name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>available</name> = <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><name>categoryCount</name> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name>available</name> * (1 - <call><name>getLowerMargin</name><argument_list>()</argument_list></call> - <call><name>getUpperMargin</name><argument_list>()</argument_list></call> 
                     - <call><name>getCategoryMargin</name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = <name>result</name> / <name>categoryCount</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <name>available</name> * (1 - <call><name>getLowerMargin</name><argument_list>()</argument_list></call> - <call><name>getUpperMargin</name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the size (width or height, depending on the location of the 
     * axis) of a category gap.
     *
     * @param categoryCount  the number of categories.
     * @param area  the area within which the categories will be drawn.
     * @param edge  the axis location.
     *
     * @return The category gap width.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateCategoryGapSize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, 
                                              <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>available</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name>) || (<name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>available</name> = <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>(<name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name>) 
                || (<name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>available</name> = <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><name>categoryCount</name> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name>available</name> * <call><name>getCategoryMargin</name><argument_list>()</argument_list></call> / (<name>categoryCount</name> - 1)</expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Estimates the space required for the axis, given a specific drawing area.
     *
     * @param g2  the graphics device (used to obtain font information).
     * @param plot  the plot that the axis belongs to.
     * @param plotArea  the area within which the axis should be drawn.
     * @param edge  the axis location (top or bottom).
     * @param space  the space already reserved.
     *
     * @return The space required to draw the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>reserveSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, 
                                  <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                  <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// create a new space object if one wasn't supplied...</comment>
        <if>if <condition>(<expr><name>space</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// if the axis is not visible, no additional space is required...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>space</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// calculate the max size of the tick labels (if visible)...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelHeight</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelWidth</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isTickLabelsVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr>new <call><name>AxisState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// we call refresh ticks just to get the maximum width or height</comment>
            <expr_stmt><expr><call><name>refreshTicks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tickLabelHeight</name> = <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tickLabelHeight</name> = <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tickLabelWidth</name> = <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tickLabelWidth</name> = <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
            }</block></then></if></else></if></else></if></else></if>
        }</block></then></if>
        
        <comment type="line">// get the axis label size and update the space object...</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>labelEnclosure</name> =<init> <expr><call><name>getLabelEnclosure</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelHeight</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelWidth</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelHeight</name> = <call><name><name>labelEnclosure</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>space</name>.<name>add</name></name><argument_list>(<argument><expr><name>labelHeight</name> + <name>tickLabelHeight</name> 
                    + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelWidth</name> = <call><name><name>labelEnclosure</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>space</name>.<name>add</name></name><argument_list>(<argument><expr><name>labelWidth</name> + <name>tickLabelWidth</name> 
                    + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>space</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Configures the axis against the current plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// nothing required</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location.
     * @param plotArea  the area within which the axis should be drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area within which the plot is being drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param edge  the location of the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// if the axis is not visible, don't draw it...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        
        <if>if <condition>(<expr><call><name>isAxisLineVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawAxisLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw the category labels and axis label</comment>
        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>state</name> = <call><name>drawCategoryLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, 
                <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> = <call><name>drawLabel</name><argument_list>(<argument><expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the category labels and returns the updated axis state.
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area inside the axes (&lt;code&gt;null&lt;/code&gt; not 
     *                  permitted).
     * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param state  the axis state (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot (&lt;code&gt;null&lt;/code&gt;
     *                   permitted).
     * 
     * @return The updated axis state (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @deprecated Use {@link #drawCategoryLabels(Graphics2D, Rectangle2D, 
     *     Rectangle2D, RectangleEdge, AxisState, PlotRenderingInfo)}.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisState</name></type> <name>drawCategoryLabels</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                           <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                                           <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                                           <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// this method is deprecated because we really need the plotArea</comment>
        <comment type="line">// when drawing the labels - see bug 1277726</comment>
        <return>return <expr><call><name>drawCategoryLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, 
                <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the category labels and returns the updated axis state.
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotArea  the plot area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area inside the axes (&lt;code&gt;null&lt;/code&gt; not 
     *                  permitted).
     * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param state  the axis state (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot (&lt;code&gt;null&lt;/code&gt;
     *                   permitted).
     * 
     * @return The updated axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisState</name></type> <name>drawCategoryLabels</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                           <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                                           <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                                           <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>state</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'state' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>isTickLabelsVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{       
            <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr><call><name>refreshTicks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>       
            <expr_stmt><expr><call><name><name>state</name>.<name>setTicks</name></name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
          
            <decl_stmt><decl><type><name>int</name></type> <name>categoryIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                
                <decl_stmt><decl><type><name>CategoryTick</name></type> <name>tick</name> =<init> <expr>(<name>CategoryTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name>getTickLabelFont</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getTickLabelPaint</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>CategoryLabelPosition</name></type> <name>position</name> 
                        =<init> <expr><call><name><name>this</name>.<name>categoryLabelPositions</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>x0</name> = <call><name>getCategoryStart</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x1</name> = <call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y1</name> = <call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y0</name> = <name>y1</name> - <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>x0</name> = <call><name>getCategoryStart</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x1</name> = <call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                    <expr_stmt><expr><name>y0</name> = <call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y1</name> = <name>y0</name> + <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>y0</name> = <call><name>getCategoryStart</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y1</name> = <call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x1</name> = <call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x0</name> = <name>x1</name> - <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>y0</name> = <call><name>getCategoryStart</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y1</name> = <call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>categoryIndex</name></expr></argument>, <argument><expr><call><name><name>ticks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x0</name> = <call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x1</name> = <name>x0</name> - <call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>area</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr>(<name>x1</name> - <name>x0</name>)</expr></argument>, 
                        <argument><expr>(<name>y1</name> - <name>y0</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Point2D</name></type> <name>anchorPoint</name> =<init> <expr><call><name><name>RectangleAnchor</name>.<name>coordinates</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>, 
                        <argument><expr><call><name><name>position</name>.<name>getCategoryAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextBlock</name></type> <name>block</name> =<init> <expr><call><name><name>tick</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>block</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Shape</name></type> <name>bounds</name> =<init> <expr><call><name><name>block</name>.<name>calculateBounds</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>position</name>.<name>getLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>plotState</name> != <name>null</name> &amp;&amp; <call><name><name>plotState</name>.<name>getOwner</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> 
                            =<init> <expr><call><name><name>plotState</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>tooltip</name> =<init> <expr><call><name>getCategoryLabelToolTip</name><argument_list>(
                                <argument><expr><call><name><name>tick</name>.<name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>CategoryLabelEntity</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>tooltip</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <expr_stmt><expr><name>categoryIndex</name>++</expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><call><name><name>edge</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>state</name>.<name>cursorUp</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>edge</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>state</name>.<name>cursorDown</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>state</name>.<name>cursorLeft</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>state</name>.<name>getMax</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>state</name>.<name>cursorRight</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if>
        }</block></then></if>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a temporary list of ticks that can be used when drawing the axis.
     *
     * @param g2  the graphics device (used to get font measurements).
     * @param state  the axis state.
     * @param dataArea  the area inside the axes.
     * @param edge  the location of the axis.
     * 
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                             <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                             <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                             <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// sanity check for data area...</comment>
        <if>if <condition>(<expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> &lt;= 0.0 || <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt; 0.0</expr>)</condition><then> <block>{
            <return>return <expr><name>ticks</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>plot</name> =<init> <expr>(<name>CategoryPlot</name>) <call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>categories</name> =<init> <expr><call><name><name>plot</name>.<name>getCategoriesForAxis</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                
        <if>if <condition>(<expr><name>categories</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>CategoryLabelPosition</name></type> <name>position</name> 
                    =<init> <expr><call><name><name>this</name>.<name>categoryLabelPositions</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>r</name> =<init> <expr><name><name>this</name>.<name>maximumCategoryLabelWidthRatio</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> &lt;= 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>r</name> = <call><name><name>position</name>.<name>getWidthRatio</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
                  
            <decl_stmt><decl><type><name>float</name></type> <name>l</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>position</name>.<name>getWidthType</name></name><argument_list>()</argument_list></call> == <name><name>CategoryLabelWidthType</name>.<name>CATEGORY</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l</name> = (<name>float</name>) <call><name>calculateCategorySize</name><argument_list>(<argument><expr><call><name><name>categories</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>l</name> = (<name>float</name>) <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>l</name> = (<name>float</name>) <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
                }</block></else></if>
            }</block></else></if>
            <decl_stmt><decl><type><name>int</name></type> <name>categoryIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>categories</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>category</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextBlock</name></type> <name>label</name> =<init> <expr><call><name>createLabel</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>l</name> * <name>r</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>max</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>calculateTextBlockHeight</name><argument_list>(<argument><expr><name>label</name></expr></argument>, 
                            <argument><expr><name>position</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name> 
                        || <name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>max</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>calculateTextBlockWidth</name><argument_list>(<argument><expr><name>label</name></expr></argument>, 
                            <argument><expr><name>position</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>CategoryTick</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, 
                        <argument><expr><call><name><name>position</name>.<name>getLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>position</name>.<name>getRotationAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>categoryIndex</name> = <name>categoryIndex</name> + 1</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>setMax</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ticks</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Creates a label.
     *
     * @param category  the category.
     * @param width  the available width. 
     * @param edge  the edge on which the axis appears.
     * @param g2  the graphics device.
     *
     * @return A label.
     */</comment>
    <function><type><specifier>protected</specifier> <name>TextBlock</name></type> <name>createLabel</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>float</name></type> <name>width</name></decl></param>, 
                                    <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TextBlock</name></type> <name>label</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>createTextBlock</name></name><argument_list>(<argument><expr><call><name><name>category</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name>getTickLabelFont</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getTickLabelPaint</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>,
                <argument><expr><name><name>this</name>.<name>maximumCategoryLabelLines</name></name></expr></argument>, <argument><expr>new <call><name>G2TextMeasurer</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
        <return>return <expr><name>label</name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * A utility method for determining the width of a text block.
     *
     * @param block  the text block.
     * @param position  the position.
     * @param g2  the graphics device.
     *
     * @return The width.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateTextBlockWidth</name><parameter_list>(<param><decl><type><name>TextBlock</name></type> <name>block</name></decl></param>, 
                                             <param><decl><type><name>CategoryLabelPosition</name></type> <name>position</name></decl></param>, 
                                             <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
                                                    
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>block</name>.<name>calculateDimensions</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>box</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>size</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>size</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>rotatedBox</name> =<init> <expr><call><name><name>ShapeUtilities</name>.<name>rotateShape</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>rotatedBox</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call>.<call><name>getWidth</name><argument_list>()</argument_list></call> + <call><name><name>insets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> 
                + <call><name><name>insets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>w</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * A utility method for determining the height of a text block.
     *
     * @param block  the text block.
     * @param position  the label position.
     * @param g2  the graphics device.
     *
     * @return The height.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateTextBlockHeight</name><parameter_list>(<param><decl><type><name>TextBlock</name></type> <name>block</name></decl></param>, 
                                              <param><decl><type><name>CategoryLabelPosition</name></type> <name>position</name></decl></param>, 
                                              <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
                                                    
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>block</name>.<name>calculateDimensions</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>box</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>size</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>size</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>rotatedBox</name> =<init> <expr><call><name><name>ShapeUtilities</name>.<name>rotateShape</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>rotatedBox</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call> 
                   + <call><name><name>insets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>insets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>h</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Creates a clone of the axis.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if some component of the axis does 
     *         not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>clone</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>tickLabelFontMap</name></name> = new <call><name>HashMap</name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFontMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>tickLabelPaintMap</name></name> = new <call><name>HashMap</name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaintMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>categoryLabelToolTips</name></name> = new <call><name>HashMap</name><argument_list>(<argument><expr><name><name>this</name>.<name>categoryLabelToolTips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>  
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this axis for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>that</name> =<init> <expr>(<name>CategoryAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>that</name>.<name>lowerMargin</name></name> != <name><name>this</name>.<name>lowerMargin</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>that</name>.<name>upperMargin</name></name> != <name><name>this</name>.<name>upperMargin</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>that</name>.<name>categoryMargin</name></name> != <name><name>this</name>.<name>categoryMargin</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>that</name>.<name>maximumCategoryLabelWidthRatio</name></name> 
                != <name><name>this</name>.<name>maximumCategoryLabelWidthRatio</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>that</name>.<name>categoryLabelPositionOffset</name></name> 
                != <name><name>this</name>.<name>categoryLabelPositionOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>categoryLabelPositions</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>categoryLabelPositions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>categoryLabelToolTips</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>categoryLabelToolTips</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFontMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>tickLabelFontMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>equalPaintMaps</name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaintMap</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelPaintMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getLabel</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getLabel</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>0</expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writePaintMap</name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaintMap</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaintMap</name></name> = <call><name>readPaintMap</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
 
    <comment type="javadoc">/**
     * Reads a &lt;code&gt;Map&lt;/code&gt; of (&lt;code&gt;Comparable&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;)
     * elements from a stream.
     * 
     * @param in  the input stream.
     * 
     * @return The map.
     * 
     * @throws IOException
     * @throws ClassNotFoundException
     * 
     * @see #writePaintMap(Map, ObjectOutputStream)
     */</comment>
    <function><type><specifier>private</specifier> <name>Map</name></type> <name>readPaintMap</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>in</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isNull</name> =<init> <expr><call><name><name>in</name>.<name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isNull</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Map</name></type> <name>result</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>in</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>category</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>in</name>.<name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Writes a map of (&lt;code&gt;Comparable&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;)
     * elements to a stream.
     * 
     * @param map  the map (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @param out
     * @throws IOException
     * 
     * @see #readPaintMap(ObjectInputStream)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writePaintMap</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>map</name></decl></param>, <param><decl><type><name>ObjectOutputStream</name></type> <name>out</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>map</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>writeBoolean</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>map</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>writeObject</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr>(<name>Paint</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests two maps containing (&lt;code&gt;Comparable&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;)
     * elements for equality.
     * 
     * @param map1  the first map (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param map2  the second map (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalPaintMaps</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>map1</name></decl></param>, <param><decl><type><name>Map</name></type> <name>map2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>map1</name>.<name>size</name></name><argument_list>()</argument_list></call> != <call><name><name>map2</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Set</name></type> <name>entries</name> =<init> <expr><call><name><name>map1</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>entries</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>p1</name> =<init> <expr>(<name>Paint</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>p2</name> =<init> <expr>(<name>Paint</name>) <call><name><name>map2</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>  
            }</block></then></if>
        }</block></while>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
