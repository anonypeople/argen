<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\ColorBar.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------
 * ColorBar.java
 * -------------
 * (C) Copyright 2002-2007, by David M. O'Donnell and Contributors.
 *
 * Original Author:  David M. O'Donnell;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 26-Nov-2002 : Version 1 contributed by David M. O'Donnell (DG);
 * 14-Jan-2003 : Changed autoRangeMinimumSize from Number --&gt; double (DG);
 * 17-Jan-2003 : Moved plot classes to separate package (DG);
 * 20-Jan-2003 : Removed unnecessary constructors (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 09-Jul-2003 : Changed ColorBar from extending axis classes to enclosing 
 *               them (DG);
 * 05-Aug-2003 : Applied changes in bug report 780298 (DG);
 * 14-Aug-2003 : Implemented Cloneable (DG);
 * 08-Sep-2003 : Changed ValueAxis API (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 31-Jan-2007 : Deprecated (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ColorPalette</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ContourPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>RainbowPalette</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.<name>XYBlockRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>

<comment type="javadoc">/**
 * A color bar.
 *
 * @deprecated This class is no longer supported (as of version 1.0.4).  If 
 *     you are creating contour plots, please try to use {@link XYPlot} and 
 *     {@link XYBlockRenderer}.
 */</comment>
<class><specifier>public</specifier> class <name>ColorBar</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2101776212647268103L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default color bar thickness. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_COLORBAR_THICKNESS</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default color bar thickness percentage. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_COLORBAR_THICKNESS_PERCENT</name> =<init> <expr>0.10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default outer gap. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_OUTERGAP</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueAxis</name></type> <name>axis</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The color bar thickness. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>colorBarThickness</name> =<init> <expr><name>DEFAULT_COLORBAR_THICKNESS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The color bar thickness as a percentage of the height of the data area. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>colorBarThicknessPercent</name> 
            =<init> <expr><name>DEFAULT_COLORBAR_THICKNESS_PERCENT</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The color palette. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ColorPalette</name></type> <name>colorPalette</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The color bar length. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>colorBarLength</name> =<init> <expr>0</expr></init></decl>;</decl_stmt> <comment type="line">// default make height of plotArea</comment>

    <comment type="javadoc">/** The amount of blank space around the colorbar. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>outerGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a horizontal colorbar axis, using default values where 
     * necessary.
     *
     * @param label  the axis label.
     */</comment>
    <constructor><specifier>public</specifier> <name>ColorBar</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
   
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>a</name> =<init> <expr>new <call><name>NumberAxis</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setAutoRangeIncludesZero</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axis</name></name> = <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setLowerMargin</name></name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setUpperMargin</name></name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>colorPalette</name></name> = new <call><name>RainbowPalette</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>colorBarThickness</name></name> = <name>DEFAULT_COLORBAR_THICKNESS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>colorBarThicknessPercent</name></name> = <name>DEFAULT_COLORBAR_THICKNESS_PERCENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outerGap</name></name> = <name>DEFAULT_OUTERGAP</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>colorPalette</name>.<name>setMinZ</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>colorPalette</name>.<name>setMaxZ</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Configures the color bar.
     * 
     * @param plot  the plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<param><decl><type><name>ContourPlot</name></type> <name>plot</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>minZ</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call>.<call><name>getMinZValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxZ</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call>.<call><name>getMaxZValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setMinimumValue</name><argument_list>(<argument><expr><name>minZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMaximumValue</name><argument_list>(<argument><expr><name>maxZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the axis.
     * 
     * @return The axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axis</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the axis.
     * 
     * @param axis  the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>axis</name></name> = <name>axis</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Rescales the axis to ensure that all data are visible.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>autoAdjustRange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>colorPalette</name>.<name>setMinZ</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>axis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>colorPalette</name>.<name>setMaxZ</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>axis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param cursor  the cursor.
     * @param plotArea  the area within which the chart should be drawn.
     * @param dataArea  the area within which the plot should be drawn (a
     *                  subset of the drawArea).
     * @param reservedArea  the reserved area.
     * @param edge  the color bar location.
     * 
     * @return The new cursor location.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                       <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                       <param><decl><type><name>Rectangle2D</name></type> <name>reservedArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{


        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>colorBarArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>thickness</name> =<init> <expr><call><name>calculateBarThickness</name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>colorBarThickness</name></name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>thickness</name> = <name><name>this</name>.<name>colorBarThickness</name></name></expr>;</expr_stmt>  <comment type="line">// allow fixed thickness</comment>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>length</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>length</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>length</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>colorBarLength</name></name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>length</name> = <name><name>this</name>.<name>colorBarLength</name></name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>colorBarArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>plotArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>outerGap</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>colorBarArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>reservedArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>outerGap</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>colorBarArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>thickness</name> 
                    - <name><name>this</name>.<name>outerGap</name></name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>colorBarArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>plotArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> 
                    + <name><name>this</name>.<name>outerGap</name></name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>thickness</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
        
        <comment type="line">// update, but dont draw tick marks (needed for stepped colors)</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>refreshTicks</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name>AxisState</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>drawColorBar</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cursor</name> = <call><name><name>colorBarArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> = <call><name><name>this</name>.<name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>reservedArea</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cursor</name> = <call><name><name>colorBarArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> = <call><name><name>this</name>.<name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>reservedArea</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cursor</name> = <call><name><name>colorBarArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> = <call><name><name>this</name>.<name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>reservedArea</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cursor</name> = <call><name><name>colorBarArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> = <call><name><name>this</name>.<name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>reservedArea</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
        <return>return <expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param colorBarArea  the area within which the axis should be drawn.
     * @param edge  the location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawColorBar</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>colorBarArea</name></decl></param>, 
                             <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Object</name></type> <name>antiAlias</name> =<init> <expr><call><name><name>g2</name>.<name>getRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>,
                            <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// setTickValues was missing from ColorPalette v. 0.96</comment>
        <comment type="line">//colorPalette.setTickValues(this.axis.getTicks());</comment>

        <decl_stmt><decl><type><name>Stroke</name></type> <name>strokeSaved</name> =<init> <expr><call><name><name>g2</name>.<name>getStroke</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>colorBarArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>colorBarArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>colorBarArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>xx</name> &lt;= <call><name><name>colorBarArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getPaint</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>xx</name> += 1</expr>;</expr_stmt>
            }</block></while>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>colorBarArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>colorBarArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>colorBarArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>xx</name> &lt;= <call><name><name>colorBarArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>colorBarArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getPaint</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>xx</name> += 1</expr>;</expr_stmt>
            }</block></while>            
        }</block></else></if>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, <argument><expr><name>antiAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>strokeSaved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the color palette.
     *
     * @return The color palette.
     */</comment>
    <function><type><specifier>public</specifier> <name>ColorPalette</name></type> <name>getColorPalette</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>colorPalette</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the Paint associated with a value.
     *
     * @param value  the value.
     *
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>colorPalette</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the color palette.
     *
     * @param palette  the new palette.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColorPalette</name><parameter_list>(<param><decl><type><name>ColorPalette</name></type> <name>palette</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>colorPalette</name></name> = <name>palette</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum value.
     *
     * @param value  the maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>colorPalette</name>.<name>setMaxZ</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setUpperBound</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the minimum value.
     *
     * @param value  the minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>colorPalette</name>.<name>setMinZ</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setLowerBound</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Reserves the space required to draw the color bar.
     *
     * @param g2  the graphics device.
     * @param plot  the plot that the axis belongs to.
     * @param plotArea  the area within which the plot should be drawn.
     * @param dataArea  the data area.
     * @param edge  the axis location.
     * @param space  the space already reserved.
     *
     * @return The space required to draw the axis in the specified plot area.
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>reserveSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, 
                                  <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                  <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, 
                                  <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, 
                <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>thickness</name> =<init> <expr><call><name>calculateBarThickness</name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>thickness</name> + 2 * <name><name>this</name>.<name>outerGap</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the bar thickness.
     * 
     * @param plotArea  the plot area.
     * @param edge  the location.
     * 
     * @return The thickness.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>calculateBarThickness</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                         <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>colorBarThicknessPercent</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>colorBarThicknessPercent</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the object.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if some component of the color bar 
     *         does not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
    
        <decl_stmt><decl><type><name>ColorBar</name></type> <name>clone</name> =<init> <expr>(<name>ColorBar</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>axis</name></name> = (<name>ValueAxis</name>) <call><name><name>this</name>.<name>axis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
            
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with another.
     * 
     * @param obj  the object to test against.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ColorBar</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>ColorBar</name></type> <name>that</name> =<init> <expr>(<name>ColorBar</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>axis</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>axis</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>colorBarThickness</name></name> != <name><name>that</name>.<name>colorBarThickness</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>colorBarThicknessPercent</name></name> != <name><name>that</name>.<name>colorBarThicknessPercent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>colorPalette</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>colorPalette</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>colorBarLength</name></name> != <name><name>that</name>.<name>colorBarLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>outerGap</name></name> != <name><name>that</name>.<name>outerGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>axis</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
