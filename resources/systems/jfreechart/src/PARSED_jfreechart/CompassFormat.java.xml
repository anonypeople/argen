<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\CompassFormat.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * CompassFormat.java
 * ------------------
 * (C) Copyright 2003-2007, by Sylvain Vieujot and Contributors.
 *
 * Original Author:  Sylvain Vieujot;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 18-Feb-2004 : Version 1 contributed by Sylvain Vieujot (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>FieldPosition</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParsePosition</name></name>;</import>

<comment type="javadoc">/**
 * A formatter that displays numbers as directions.
 */</comment>
<class><specifier>public</specifier> class <name>CompassFormat</name> <super><extends>extends <name>NumberFormat</name></extends></super> <block>{
    
    <comment type="javadoc">/** North. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>N</name> =<init> <expr>"N"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** East. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>E</name> =<init> <expr>"E"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** South. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>S</name> =<init> <expr>"S"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** West. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>W</name> =<init> <expr>"W"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The directions. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>DIRECTIONS</name> =<init> <expr><block>{
        <expr><name>N</name></expr>, <expr><name>N</name> + <name>N</name> + <name>E</name></expr>, <expr><name>N</name> + <name>E</name></expr>, <expr><name>E</name> + <name>N</name> + <name>E</name></expr>, <expr><name>E</name></expr>, <expr><name>E</name> + <name>S</name> + <name>E</name></expr>, <expr><name>S</name> + <name>E</name></expr>, <expr><name>S</name> + <name>S</name> + <name>E</name></expr>, <expr><name>S</name></expr>,
        <expr><name>S</name> + <name>S</name> + <name>W</name></expr>, <expr><name>S</name> + <name>W</name></expr>, <expr><name>W</name> + <name>S</name> + <name>W</name></expr>, <expr><name>W</name></expr>, <expr><name>W</name> + <name>N</name> + <name>W</name></expr>, <expr><name>N</name> + <name>W</name></expr>, <expr><name>N</name> + <name>N</name> + <name>W</name></expr>, <expr><name>N</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new formatter.
     */</comment>
    <constructor><specifier>public</specifier> <name>CompassFormat</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns a string representing the direction.
     * 
     * @param direction  the direction.
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDirectionCode</name><parameter_list>(<param><decl><type><name>double</name></type> <name>direction</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><name>direction</name> = <name>direction</name> % 360</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>direction</name> &lt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>direction</name> = <name>direction</name> + 360.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>((<name>int</name>) <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><name>direction</name> / 11.25</expr></argument>)</argument_list></call> + 1) / 2</expr></init></decl>;</decl_stmt> 
        <return>return <expr><name><name>DIRECTIONS</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
        
    }</block></function>

    <comment type="block">/* (non-Javadoc)
     * @see java.text.NumberFormat#format(double, java.lang.StringBuffer, 
     *      java.text.FieldPosition)
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuffer</name></type> <name>format</name><parameter_list>(<param><decl><type><name>double</name></type> <name>number</name></decl></param>, <param><decl><type><name>StringBuffer</name></type> <name>toAppendTo</name></decl></param>, 
                               <param><decl><type><name>FieldPosition</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getDirectionCode</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/* (non-Javadoc)
     * @see java.text.NumberFormat#format(long, java.lang.StringBuffer, 
     *      java.text.FieldPosition)
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuffer</name></type> <name>format</name><parameter_list>(<param><decl><type><name>long</name></type> <name>number</name></decl></param>, <param><decl><type><name>StringBuffer</name></type> <name>toAppendTo</name></decl></param>, 
                               <param><decl><type><name>FieldPosition</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getDirectionCode</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This method returns &lt;code&gt;null&lt;/code&gt; for all inputs.  This class cannot
     * be used for parsing.
     * 
     * @param source  the source string.
     * @param parsePosition  the parse position.
     * 
     * @return &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>parse</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>, <param><decl><type><name>ParsePosition</name></type> <name>parsePosition</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
