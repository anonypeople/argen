<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\DateAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------
 * DateAxis.java
 * -------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert;
 * Contributor(s):   Jonathan Nash;
 *                   David Li;
 *                   Michael Rauch;
 *                   Bill Kelemen;
 *                   Pawel Pabis;
 *                   Chris Boek;
 *
 * Changes (from 23-Jun-2001)
 * --------------------------
 * 23-Jun-2001 : Modified to work with null data source (DG);
 * 18-Sep-2001 : Updated header (DG);
 * 27-Nov-2001 : Changed constructors from public to protected, updated Javadoc 
 *               comments (DG);
 * 16-Jan-2002 : Added an optional crosshair, based on the implementation by 
 *               Jonathan Nash (DG);
 * 26-Feb-2002 : Updated import statements (DG);
 * 22-Apr-2002 : Added a setRange() method (DG);
 * 25-Jun-2002 : Removed redundant local variable (DG);
 * 25-Jul-2002 : Changed order of parameters in ValueAxis constructor (DG);
 * 21-Aug-2002 : The setTickUnit() method now turns off auto-tick unit 
 *               selection (fix for bug id 528885) (DG);
 * 05-Sep-2002 : Updated the constructors to reflect changes in the Axis 
 *               class (DG);
 * 18-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 25-Sep-2002 : Added new setRange() methods, and deprecated 
 *               setAxisRange() (DG);
 * 04-Oct-2002 : Changed auto tick selection to parallel number axis 
 *               classes (DG);
 * 24-Oct-2002 : Added a date format override (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 14-Jan-2003 : Changed autoRangeMinimumSize from Number --&gt; double, moved
 *               crosshair settings to the plot (DG);
 * 15-Jan-2003 : Removed anchor date (DG);
 * 20-Jan-2003 : Removed unnecessary constructors (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 02-May-2003 : Added additional units to createStandardDateTickUnits() 
 *               method, as suggested by mhilpert in bug report 723187 (DG);
 * 13-May-2003 : Merged HorizontalDateAxis and VerticalDateAxis (DG);
 * 24-May-2003 : Added support for underlying timeline for 
 *               SegmentedTimeline (BK);
 * 16-Jul-2003 : Applied patch from Pawel Pabis to fix overlapping dates (DG);
 * 22-Jul-2003 : Applied patch from Pawel Pabis for monthly ticks (DG);
 * 25-Jul-2003 : Fixed bug 777561 and 777586 (DG);
 * 13-Aug-2003 : Implemented Cloneable and added equals() method (DG);
 * 02-Sep-2003 : Fixes for bug report 790506 (DG);
 * 04-Sep-2003 : Fixed tick label alignment when axis appears at the top (DG);
 * 10-Sep-2003 : Fixes for segmented timeline (DG);
 * 17-Sep-2003 : Fixed a layout bug when multiple domain axes are used (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 07-Nov-2003 : Modified to use new tick classes (DG);
 * 12-Nov-2003 : Modified tick labelling to use roll unit from DateTickUnit 
 *               when a calculated tick value is hidden (which can occur in 
 *               segmented date axes) (DG);
 * 24-Nov-2003 : Fixed some problems with the auto tick unit selection, and 
 *               fixed bug 846277 (labels missing for inverted axis) (DG);
 * 30-Dec-2003 : Fixed bug in refreshTicksHorizontal() when start of time unit 
 *               (ex. 1st of month) was hidden, causing infinite loop (BK);
 * 13-Jan-2004 : Fixed bug in previousStandardDate() method (fix by Richard 
 *               Wardle) (DG);
 * 21-Jan-2004 : Renamed translateJava2DToValue --&gt; java2DToValue, and 
 *               translateValueToJava2D --&gt; valueToJava2D (DG); 
 * 12-Mar-2004 : Fixed bug where date format override is ignored for vertical 
 *               axis (DG);
 * 16-Mar-2004 : Added plotState to draw() method (DG);
 * 07-Apr-2004 : Changed string width calculation (DG);
 * 21-Apr-2004 : Fixed bug in estimateMaximumTickLabelWidth() method (bug id 
 *               939148) (DG);
 * 11-Jan-2005 : Removed deprecated methods in preparation for 1.0.0 
 *               release (DG);
 * 13-Jan-2005 : Fixed bug (see 
 *               http://www.jfree.org/forum/viewtopic.php?t=11330) (DG);
 * 21-Apr-2005 : Replaced Insets with RectangleInsets, removed redundant 
 *               argument from selectAutoTickUnit() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 10-Feb-2006 : Added some API doc comments in respect of bug 821046 (DG);
 * 19-Apr-2006 : Fixed bug 1472942 in equals() method (DG);
 * 25-Sep-2006 : Fixed bug 1564977 missing tick labels (DG);
 * 15-Jan-2007 : Added get/setTimeZone() suggested by 'skunk' (DG);
 * 18-Jan-2007 : Fixed bug 1638678, time zone for calendar in 
 *               previousStandardDate() (DG);
 * 04-Apr-2007 : Use time zone in date calculations (CB);
 * 19-Apr-2007 : Fix exceptions in setMinimum/MaximumDate() (DG);
 * 03-May-2007 : Fixed minor bugs in previousStandardDate(), with new JUnit
 *               tests (DG);
 * 21-Nov-2007 : Fixed warnings from FindBugs (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>FontRenderContext</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>LineMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueAxisPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>DateRange</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>Month</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>RegularTimePeriod</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>Year</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * The base class for axes that display dates.  You will find it easier to 
 * understand how this axis works if you bear in mind that it really 
 * displays/measures integer (or long) data, where the integers are 
 * milliseconds since midnight, 1-Jan-1970.  When displaying tick labels, the 
 * millisecond values are converted back to dates using a 
 * &lt;code&gt;DateFormat&lt;/code&gt; instance.
 * &lt;P&gt;
 * You can also create a {@link org.jfree.chart.axis.Timeline} and supply in 
 * the constructor to create an axis that only contains certain domain values. 
 * For example, this allows you to create a date axis that only contains 
 * working days.
 */</comment>
<class><specifier>public</specifier> class <name>DateAxis</name> <super><extends>extends <name>ValueAxis</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-1013460999649007604L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default axis range. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateRange</name></type> <name>DEFAULT_DATE_RANGE</name> =<init> <expr>new <call><name>DateRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default minimum auto range size. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> 
            <name>DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS</name> =<init> <expr>2.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default date tick unit. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateTickUnit</name></type> <name>DEFAULT_DATE_TICK_UNIT</name>
            =<init> <expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>new <call><name>SimpleDateFormat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default anchor date. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>DEFAULT_ANCHOR_DATE</name> =<init> <expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The current tick unit. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateTickUnit</name></type> <name>tickUnit</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The override date format. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>dateFormatOverride</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Tick marks can be displayed at the start or the middle of the time 
     * period. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateTickMarkPosition</name></type> <name>tickMarkPosition</name> =<init> <expr><name><name>DateTickMarkPosition</name>.<name>START</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A timeline that includes all milliseconds (as defined by 
     * &lt;code&gt;java.util.Date&lt;/code&gt;) in the real time line.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>DefaultTimeline</name> <super><implements>implements <name>Timeline</name>, <name>Serializable</name></implements></super> <block>{

        <comment type="javadoc">/**
         * Converts a millisecond into a timeline value.
         *
         * @param millisecond  the millisecond.
         *
         * @return The timeline value.
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>toTimelineValue</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millisecond</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>millisecond</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Converts a date into a timeline value.
         *
         * @param date  the domain value.
         *
         * @return The timeline value.
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>toTimelineValue</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Converts a timeline value into a millisecond (as encoded by 
         * &lt;code&gt;java.util.Date&lt;/code&gt;).
         *
         * @param value  the value.
         *
         * @return The millisecond.
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>toMillisecond</name><parameter_list>(<param><decl><type><name>long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns &lt;code&gt;true&lt;/code&gt; if the timeline includes the specified 
         * domain value.
         *
         * @param millisecond  the millisecond.
         *
         * @return &lt;code&gt;true&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsDomainValue</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millisecond</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns &lt;code&gt;true&lt;/code&gt; if the timeline includes the specified 
         * domain value.
         *
         * @param date  the date.
         *
         * @return &lt;code&gt;true&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsDomainValue</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns &lt;code&gt;true&lt;/code&gt; if the timeline includes the specified 
         * domain value range.
         *
         * @param from  the start value.
         * @param to  the end value.
         *
         * @return &lt;code&gt;true&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsDomainRange</name><parameter_list>(<param><decl><type><name>long</name></type> <name>from</name></decl></param>, <param><decl><type><name>long</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns &lt;code&gt;true&lt;/code&gt; if the timeline includes the specified 
         * domain value range.
         *
         * @param from  the start date.
         * @param to  the end date.
         *
         * @return &lt;code&gt;true&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsDomainRange</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>from</name></decl></param>, <param><decl><type><name>Date</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Tests an object for equality with this instance.
         *
         * @param object  the object.
         *
         * @return A boolean.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>object</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>object</name> == <name>this</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>object</name> <name>instanceof</name> <name>DefaultTimeline</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/** A static default timeline shared by all standard DateAxis */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Timeline</name></type> <name>DEFAULT_TIMELINE</name> =<init> <expr>new <call><name>DefaultTimeline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The time zone for the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimeZone</name></type> <name>timeZone</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Our underlying timeline. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Timeline</name></type> <name>timeline</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a date axis with no label.
     */</comment>
    <constructor><specifier>public</specifier> <name>DateAxis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a date axis with the specified label.
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>DateAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a date axis. A timeline is specified for the axis. This allows 
     * special transformations to occur between a domain of values and the 
     * values included in the axis.
     *
     * @see org.jfree.chart.axis.SegmentedTimeline
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param zone  the time zone.
     */</comment>
    <constructor><specifier>public</specifier> <name>DateAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><call><name><name>DateAxis</name>.<name>createStandardDateTickUnits</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name><name>DateAxis</name>.<name>DEFAULT_DATE_TICK_UNIT</name></name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAutoRangeMinimumSize</name><argument_list>(
                <argument><expr><name>DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>DEFAULT_DATE_RANGE</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dateFormatOverride</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>timeZone</name></name> = <name>zone</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>timeline</name></name> = <name>DEFAULT_TIMELINE</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the time zone for the axis.
     * 
     * @return The time zone.
     * 
     * @since 1.0.4
     * @see #setTimeZone(TimeZone)
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeZone</name></type> <name>getTimeZone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>timeZone</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the time zone for the axis and sends an {@link AxisChangeEvent} to
     * all registered listeners.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.4
     * @see #getTimeZone()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeZone</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>timeZone</name>.<name>equals</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>timeZone</name></name> = <name>zone</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setStandardTickUnits</name><argument_list>(<argument><expr><call><name>createStandardDateTickUnits</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function> 
    
    <comment type="javadoc">/**
     * Returns the underlying timeline used by this axis.
     *
     * @return The timeline.
     */</comment>
    <function><type><specifier>public</specifier> <name>Timeline</name></type> <name>getTimeline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>timeline</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the underlying timeline to use for this axis.
     * &lt;P&gt;
     * If the timeline is changed, an {@link AxisChangeEvent} is sent to all
     * registered listeners.
     *
     * @param timeline  the timeline.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeline</name><parameter_list>(<param><decl><type><name>Timeline</name></type> <name>timeline</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>timeline</name></name> != <name>timeline</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>timeline</name></name> = <name>timeline</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick unit for the axis.
     * &lt;p&gt;
     * Note: if the &lt;code&gt;autoTickUnitSelection&lt;/code&gt; flag is 
     * &lt;code&gt;true&lt;/code&gt; the tick unit may be changed while the axis is being 
     * drawn, so in that case the return value from this method may be
     * irrelevant if the method is called before the axis has been drawn.
     *
     * @return The tick unit (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickUnit(DateTickUnit)
     * @see ValueAxis#isAutoTickUnitSelection()
     */</comment>
    <function><type><specifier>public</specifier> <name>DateTickUnit</name></type> <name>getTickUnit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickUnit</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick unit for the axis.  The auto-tick-unit-selection flag is 
     * set to &lt;code&gt;false&lt;/code&gt;, and registered listeners are notified that 
     * the axis has been changed.
     *
     * @param unit  the tick unit.
     * 
     * @see #getTickUnit()
     * @see #setTickUnit(DateTickUnit, boolean, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickUnit</name><parameter_list>(<param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick unit attribute.
     *
     * @param unit  the new tick unit.
     * @param notify  notify registered listeners?
     * @param turnOffAutoSelection  turn off auto selection?
     * 
     * @see #getTickUnit()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickUnit</name><parameter_list>(<param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>, 
                            <param><decl><type><name>boolean</name></type> <name>turnOffAutoSelection</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name>.<name>tickUnit</name></name> = <name>unit</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>turnOffAutoSelection</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setAutoTickUnitSelection</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the date format override.  If this is non-null, then it will be
     * used to format the dates on the axis.
     *
     * @return The formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getDateFormatOverride</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dateFormatOverride</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the date format override.  If this is non-null, then it will be 
     * used to format the dates on the axis.
     *
     * @param formatter  the date formatter (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDateFormatOverride</name><parameter_list>(<param><decl><type><name>DateFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dateFormatOverride</name></name> = <name>formatter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the upper and lower bounds for the axis and sends an 
     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, 
     * the auto-range flag is set to false.
     *
     * @param range  the new range (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range for the axis, if requested, sends an 
     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, 
     * the auto-range flag is set to &lt;code&gt;false&lt;/code&gt; (optional).
     *
     * @param range  the range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param turnOffAutoRange  a flag that controls whether or not the auto 
     *                          range is turned off.
     * @param notify  a flag that controls whether or not listeners are 
     *                notified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>turnOffAutoRange</name></decl></param>, 
                         <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'range' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// usually the range will be a DateRange, but if it isn't do a </comment>
        <comment type="line">// conversion...</comment>
        <if>if <condition>(<expr>!(<name>range</name> <name>instanceof</name> <name>DateRange</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>range</name> = new <call><name>DateRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>turnOffAutoRange</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the axis range and sends an {@link AxisChangeEvent} to all 
     * registered listeners.
     *
     * @param lower  the lower bound for the axis.
     * @param upper  the upper bound for the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>lower</name></decl></param>, <param><decl><type><name>Date</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>lower</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>upper</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires 'lower' &lt; 'upper'."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>DateRange</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the axis range and sends an {@link AxisChangeEvent} to all 
     * registered listeners.
     *
     * @param lower  the lower bound for the axis.
     * @param upper  the upper bound for the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>, <param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lower</name> &gt;= <name>upper</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires 'lower' &lt; 'upper'."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>DateRange</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the earliest date visible on the axis.
     *
     * @return The date.
     * 
     * @see #setMinimumDate(Date)
     * @see #getMaximumDate()
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getMinimumDate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>range</name> <name>instanceof</name> <name>DateRange</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DateRange</name></type> <name>r</name> =<init> <expr>(<name>DateRange</name>) <name>range</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name><name>r</name>.<name>getLowerDate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the minimum date visible on the axis and sends an 
     * {@link AxisChangeEvent} to all registered listeners.  If 
     * &lt;code&gt;date&lt;/code&gt; is on or after the current maximum date for 
     * the axis, the maximum date will be shifted to preserve the current
     * length of the axis.
     *
     * @param date  the date (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMinimumDate()
     * @see #setMaximumDate(Date)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>date</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'date' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// check the new minimum date relative to the current maximum date</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>maxDate</name> =<init> <expr><call><name>getMaximumDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>maxMillis</name> =<init> <expr><call><name><name>maxDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>newMinMillis</name> =<init> <expr><call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>maxMillis</name> &lt;= <name>newMinMillis</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Date</name></type> <name>oldMin</name> =<init> <expr><call><name>getMinimumDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>length</name> =<init> <expr><name>maxMillis</name> - <call><name><name>oldMin</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>maxDate</name> = new <call><name>Date</name><argument_list>(<argument><expr><name>newMinMillis</name> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>DateRange</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>maxDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the latest date visible on the axis.
     *
     * @return The date.
     * 
     * @see #setMaximumDate(Date)
     * @see #getMinimumDate()
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getMaximumDate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>range</name> <name>instanceof</name> <name>DateRange</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DateRange</name></type> <name>r</name> =<init> <expr>(<name>DateRange</name>) <name>range</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name><name>r</name>.<name>getUpperDate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum date visible on the axis and sends an 
     * {@link AxisChangeEvent} to all registered listeners.  If 
     * &lt;code&gt;maximumDate&lt;/code&gt; is on or before the current minimum date for 
     * the axis, the minimum date will be shifted to preserve the current
     * length of the axis.
     *
     * @param maximumDate  the date (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMinimumDate()
     * @see #setMinimumDate(Date)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>maximumDate</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>maximumDate</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'maximumDate' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// check the new maximum date relative to the current minimum date</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>minDate</name> =<init> <expr><call><name>getMinimumDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>minMillis</name> =<init> <expr><call><name><name>minDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>newMaxMillis</name> =<init> <expr><call><name><name>maximumDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>minMillis</name> &gt;= <name>newMaxMillis</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Date</name></type> <name>oldMax</name> =<init> <expr><call><name>getMaximumDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>length</name> =<init> <expr><call><name><name>oldMax</name>.<name>getTime</name></name><argument_list>()</argument_list></call> - <name>minMillis</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>minDate</name> = new <call><name>Date</name><argument_list>(<argument><expr><name>newMaxMillis</name> - <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>DateRange</name><argument_list>(<argument><expr><name>minDate</name></expr></argument>, <argument><expr><name>maximumDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick mark position (start, middle or end of the time period).
     *
     * @return The position (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>DateTickMarkPosition</name></type> <name>getTickMarkPosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickMarkPosition</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick mark position (start, middle or end of the time period) 
     * and sends an {@link AxisChangeEvent} to all registered listeners.
     *
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickMarkPosition</name><parameter_list>(<param><decl><type><name>DateTickMarkPosition</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>position</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'position' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickMarkPosition</name></name> = <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the axis to work with the specified plot.  If the axis has
     * auto-scaling, then sets the maximum and minimum values.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAutoRange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>autoAdjustRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the axis hides this value, and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @param millis  the data value.
     *
     * @return A value.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isHiddenValue</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(!<call><name><name>this</name>.<name>timeline</name>.<name>containsDomainValue</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Translates the data value to the display coordinates (Java 2D User Space)
     * of the chart.
     *
     * @param value  the date to be plotted.
     * @param area  the rectangle (in Java2D space) where the data is to be 
     *              plotted.
     * @param edge  the axis location.
     *
     * @return The coordinate corresponding to the supplied data value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><name>value</name> = <call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(<argument><expr>(<name>long</name>) <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DateRange</name></type> <name>range</name> =<init> <expr>(<name>DateRange</name>) <call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>minX</name> =<init> <expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>maxX</name> =<init> <expr><call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name>maxX</name> + ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>minX</name> - <name>maxX</name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>minX</name> + ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>maxX</name> - <name>minX</name>)</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>minY</name> =<init> <expr><call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>maxY</name> =<init> <expr><call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name>minY</name> + (((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>maxY</name> - <name>minY</name>))</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>maxY</name> - (((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>maxY</name> - <name>minY</name>))</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Translates a date to Java2D coordinates, based on the range displayed by
     * this axis for the specified data area.
     *
     * @param date  the date.
     * @param area  the rectangle (in Java2D space) where the data is to be
     *              plotted.
     * @param edge  the axis location.
     *
     * @return The coordinate corresponding to the supplied date.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>dateToJava2D</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                               <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{  
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Translates a Java2D coordinate into the corresponding data value.  To 
     * perform this translation, you need to know the area used for plotting 
     * data, and which edge the axis is located on.
     *
     * @param java2DValue  the coordinate in Java2D space.
     * @param area  the rectangle (in Java2D space) where the data is to be 
     *              plotted.
     * @param edge  the axis location.
     *
     * @return A data value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>java2DToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>java2DValue</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>DateRange</name></type> <name>range</name> =<init> <expr>(<name>DateRange</name>) <call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
             <expr_stmt><expr><name>result</name> = <name>axisMax</name> - ((<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) 
                      * (<name>axisMax</name> - <name>axisMin</name>))</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
             <expr_stmt><expr><name>result</name> = <name>axisMin</name> + ((<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) 
                      * (<name>axisMax</name> - <name>axisMin</name>))</expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(<argument><expr>(<name>long</name>) <name>result</name></expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the value of the lowest visible tick on the axis.
     *
     * @param unit  date unit to use.
     *
     * @return The value of the lowest visible tick on the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>calculateLowestVisibleTickValue</name><parameter_list>(<param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>nextStandardDate</name><argument_list>(<argument><expr><call><name>getMinimumDate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the value of the highest visible tick on the axis.
     *
     * @param unit  date unit to use.
     *
     * @return The value of the highest visible tick on the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>calculateHighestVisibleTickValue</name><parameter_list>(<param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>previousStandardDate</name><argument_list>(<argument><expr><call><name>getMaximumDate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the previous "standard" date, for a given date and tick unit.
     *
     * @param date  the reference date.
     * @param unit  the tick unit.
     *
     * @return The previous "standard" date.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Date</name></type> <name>previousStandardDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>milliseconds</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seconds</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minutes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hours</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>months</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>years</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>unit</name>.<name>getCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>current</name> =<init> <expr><call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>unit</name>.<name>getCalendarField</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>value</name> =<init> <expr><name>count</name> * (<name>current</name> / <name>count</name>)</expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><call><name><name>unit</name>.<name>getUnit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

            <case>case <expr>(<name><name>DateTickUnit</name>.<name>MILLISECOND</name></name>)</expr> :
                <expr_stmt><expr><name>years</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>months</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>days</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hours</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>minutes</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>seconds</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>years</name></expr></argument>, <argument><expr><name>months</name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>mm</name> =<init> <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>mm</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr><name>value</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mm</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>mm</name></expr>;</return>

            </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>SECOND</name></name>)</expr> :
                <expr_stmt><expr><name>years</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>months</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>days</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hours</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>minutes</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>START</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>milliseconds</name> = 0</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>milliseconds</name> = 500</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>milliseconds</name> = 999</expr>;</expr_stmt>
                }</block></else></if></else></if>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>years</name></expr></argument>, <argument><expr><name>months</name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>dd</name> =<init> <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>dd</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>, <argument><expr><name>value</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dd</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>dd</name></expr>;</return>

            </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>MINUTE</name></name>)</expr> :
                <expr_stmt><expr><name>years</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>months</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>days</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hours</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>START</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>seconds</name> = 0</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>seconds</name> = 30</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>seconds</name> = 59</expr>;</expr_stmt>
                }</block></else></if></else></if>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>clear</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>years</name></expr></argument>, <argument><expr><name>months</name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>d0</name> =<init> <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>d0</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr><name>value</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d0</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>d0</name></expr>;</return>

            </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>HOUR</name></name>)</expr> :
                <expr_stmt><expr><name>years</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>months</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>days</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>START</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>minutes</name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>seconds</name> = 0</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>minutes</name> = 30</expr>;</expr_stmt>
                    <expr_stmt><expr><name>seconds</name> = 0</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>minutes</name> = 59</expr>;</expr_stmt>
                    <expr_stmt><expr><name>seconds</name> = 59</expr>;</expr_stmt>
                }</block></else></if></else></if>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>clear</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>years</name></expr></argument>, <argument><expr><name>months</name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>d1</name> =<init> <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>d1</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>, <argument><expr><name>value</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d1</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>d1</name></expr>;</return>

            </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>DAY</name></name>)</expr> :
                <expr_stmt><expr><name>years</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>months</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>START</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>hours</name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>minutes</name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>seconds</name> = 0</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>hours</name> = 12</expr>;</expr_stmt>
                    <expr_stmt><expr><name>minutes</name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>seconds</name> = 0</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>hours</name> = 23</expr>;</expr_stmt>
                    <expr_stmt><expr><name>minutes</name> = 59</expr>;</expr_stmt>
                    <expr_stmt><expr><name>seconds</name> = 59</expr>;</expr_stmt>
                }</block></else></if></else></if>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>clear</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>years</name></expr></argument>, <argument><expr><name>months</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// long result = calendar.getTimeInMillis();  </comment>
                    <comment type="line">// won't work with JDK 1.3</comment>
                <decl_stmt><decl><type><name>Date</name></type> <name>d2</name> =<init> <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>d2</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>, <argument><expr><name>value</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d2</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>d2</name></expr>;</return>

            </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>MONTH</name></name>)</expr> :
                <expr_stmt><expr><name>years</name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>clear</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>years</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Month</name></type> <name>month</name> =<init> <expr>new <call><name>Month</name><argument_list>(<argument><expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>standardDate</name> =<init> <expr><call><name>calculateDateForPosition</name><argument_list>(
                        <argument><expr><name>month</name></expr></argument>, <argument><expr><name><name>this</name>.<name>tickMarkPosition</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>millis</name> =<init> <expr><call><name><name>standardDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>millis</name> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>month</name> = (<name>Month</name>) <call><name><name>month</name>.<name>previous</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>standardDate</name> = <call><name>calculateDateForPosition</name><argument_list>(
                            <argument><expr><name>month</name></expr></argument>, <argument><expr><name><name>this</name>.<name>tickMarkPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>standardDate</name></expr>;</return>

            </case><case>case<expr>(<name><name>DateTickUnit</name>.<name>YEAR</name></name>)</expr> :
                <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>START</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>months</name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>days</name> = 1</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>this</name>.<name>tickMarkPosition</name></name> == <name><name>DateTickMarkPosition</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>months</name> = 6</expr>;</expr_stmt>
                    <expr_stmt><expr><name>days</name> = 1</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>months</name> = 11</expr>;</expr_stmt>
                    <expr_stmt><expr><name>days</name> = 31</expr>;</expr_stmt>
                }</block></else></if></else></if>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>clear</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>months</name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>d3</name> =<init> <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>d3</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>, <argument><expr><name>value</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d3</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>d3</name></expr>;</return>

            </case><default>default: <return>return <expr><name>null</name></expr>;</return>

        </default>}</block></switch>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a {@link java.util.Date} corresponding to the specified position
     * within a {@link RegularTimePeriod}.
     *
     * @param period  the period.
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A date.
     */</comment>
    <function><type><specifier>private</specifier> <name>Date</name></type> <name>calculateDateForPosition</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, 
                                          <param><decl><type><name>DateTickMarkPosition</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>position</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'position' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Date</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>position</name> == <name><name>DateTickMarkPosition</name>.<name>START</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>period</name>.<name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>position</name> == <name><name>DateTickMarkPosition</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>period</name>.<name>getMiddleMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>position</name> == <name><name>DateTickMarkPosition</name>.<name>END</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>period</name>.<name>getLastMillisecond</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the first "standard" date (based on the specified field and 
     * units).
     *
     * @param date  the reference date.
     * @param unit  the date tick unit.
     *
     * @return The next "standard" date.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Date</name></type> <name>nextStandardDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Date</name></type> <name>previous</name> =<init> <expr><call><name>previousStandardDate</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>unit</name>.<name>getCalendarField</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>unit</name>.<name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of standard date tick units that uses the default 
     * time zone.  This collection will be used by default, but you are free 
     * to create your own collection if you want to (see the 
     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited 
     * from the {@link ValueAxis} class).
     *
     * @return A collection of standard date tick units.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createStandardDateTickUnits</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>createStandardDateTickUnits</name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of standard date tick units.  This collection will 
     * be used by default, but you are free to create your own collection if 
     * you want to (see the 
     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited 
     * from the {@link ValueAxis} class).
     *
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A collection of standard date tick units.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createStandardDateTickUnits</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>zone</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'zone' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>TickUnits</name></type> <name>units</name> =<init> <expr>new <call><name>TickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// date formatters</comment>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f1</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"HH:mm:ss.SSS"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f2</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"HH:mm:ss"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f3</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"HH:mm"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f4</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"d-MMM, HH:mm"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f5</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"d-MMM"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f6</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"MMM-yyyy"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>f7</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"yyyy"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name><name>f1</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f2</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f3</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f4</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f5</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f6</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f7</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// milliseconds</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>5</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>10</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>25</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>50</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>100</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>250</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>500</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>50</expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// seconds</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>1</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>50</expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>5</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>10</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>30</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// minutes</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>1</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>2</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>5</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>10</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>15</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>20</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>30</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// hours</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>1</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>2</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>4</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>30</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>6</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>12</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// days</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>1</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>2</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>7</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>15</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// months</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>1</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>2</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>DAY</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>3</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>4</expr></argument>,  
                <argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>6</expr></argument>,  
                <argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// years</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>1</expr></argument>,  
                <argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>2</expr></argument>,  
                <argument><expr><name><name>DateTickUnit</name>.<name>MONTH</name></name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>5</expr></argument>,  
                <argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>10</expr></argument>,  
                <argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>25</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>50</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DateTickUnit</name><argument_list>(<argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>100</expr></argument>, 
                <argument><expr><name><name>DateTickUnit</name>.<name>YEAR</name></name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>units</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Rescales the axis to ensure that all data is visible.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no plot, no data</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>ValueAxisPlot</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueAxisPlot</name></type> <name>vap</name> =<init> <expr>(<name>ValueAxisPlot</name>) <name>plot</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>vap</name>.<name>getDataRange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>timeline</name></name> <name>instanceof</name> <name>SegmentedTimeline</name></expr>)</condition><then> <block>{ 
                    <comment type="line">//Timeline hasn't method getStartTime()</comment>
                    <expr_stmt><expr><name>r</name> = new <call><name>DateRange</name><argument_list>(<argument><expr>(
                            (<name>SegmentedTimeline</name>) <name><name>this</name>.<name>timeline</name></name>).<call><name>getStartTime</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr>((<name>SegmentedTimeline</name>) <name><name>this</name>.<name>timeline</name></name>).<call><name>getStartTime</name><argument_list>()</argument_list></call> 
                            + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <block>{
                    <expr_stmt><expr><name>r</name> = new <call><name>DateRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

            <decl_stmt><decl><type><name>long</name></type> <name>upper</name> =<init> <expr><call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(
                    <argument><expr>(<name>long</name>) <call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>lower</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>fixedAutoRange</name> =<init> <expr>(<name>long</name>) <call><name>getFixedAutoRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fixedAutoRange</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <name>upper</name> - <name>fixedAutoRange</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>lower</name> = <call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(<argument><expr>(<name>long</name>) <call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>range</name> =<init> <expr><name>upper</name> - <name>lower</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>minRange</name> =<init> <expr>(<name>long</name>) <call><name>getAutoRangeMinimumSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>range</name> &lt; <name>minRange</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>expand</name> =<init> <expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>minRange</name> - <name>range</name></expr></argument>)</argument_list></call> / 2</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>expand</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>expand</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>upper</name> = <name>upper</name> + <call>(<name>long</name>) <argument_list>(<argument><expr><name>range</name> * <call><name>getUpperMargin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lower</name> = <name>lower</name> - <call>(<name>long</name>) <argument_list>(<argument><expr><name>range</name> * <call><name>getLowerMargin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>upper</name> = <call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lower</name> = <call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DateRange</name></type> <name>dr</name> =<init> <expr>new <call><name>DateRange</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>dr</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param edge  the axis location.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                      <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                      <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectHorizontalAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectVerticalAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Selects an appropriate tick size for the axis.  The strategy is to
     * display as many ticks as possible (selected from a collection of 
     * 'standard' tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param edge  the axis location.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectHorizontalAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>long</name></type> <name>shift</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>timeline</name></name> <name>instanceof</name> <name>SegmentedTimeline</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>shift</name> = ((<name>SegmentedTimeline</name>) <name><name>this</name>.<name>timeline</name></name>).<call><name>getStartTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>zero</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>shift</name> + 0.0</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelWidth</name> 
            =<init> <expr><call><name>estimateMaximumTickLabelWidth</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// start with the current tick unit...</comment>
        <decl_stmt><decl><type><name>TickUnitSource</name></type> <name>tickUnits</name> =<init> <expr><call><name>getStandardTickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TickUnit</name></type> <name>unit1</name> =<init> <expr><call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>shift</name> + <call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit1Width</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>x1</name> - <name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// then extrapolate...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>guess</name> =<init> <expr>(<name>tickLabelWidth</name> / <name>unit1Width</name>) * <call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit2</name> =<init> <expr>(<name>DateTickUnit</name>) <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>guess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>shift</name> + <call><name><name>unit2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit2Width</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>x2</name> - <name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tickLabelWidth</name> = <call><name>estimateMaximumTickLabelWidth</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tickLabelWidth</name> &gt; <name>unit2Width</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>unit2</name> = (<name>DateTickUnit</name>) <call><name><name>tickUnits</name>.<name>getLargerTickUnit</name></name><argument_list>(<argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit2</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Selects an appropriate tick size for the axis.  The strategy is to
     * display as many ticks as possible (selected from a collection of 
     * 'standard' tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the axis location.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectVerticalAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                              <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// start with the current tick unit...</comment>
        <decl_stmt><decl><type><name>TickUnitSource</name></type> <name>tickUnits</name> =<init> <expr><call><name>getStandardTickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>zero</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// start with a unit that is at least 1/10th of the axis length</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>estimate1</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLength</name><argument_list>()</argument_list></call> / 10.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>candidate1</name> 
            =<init> <expr>(<name>DateTickUnit</name>) <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>estimate1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelHeight1</name> =<init> <expr><call><name>estimateMaximumTickLabelHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>candidate1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>candidate1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>candidate1UnitHeight</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>y1</name> - <name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// now extrapolate based on label height and unit height...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>estimate2</name> 
            =<init> <expr>(<name>labelHeight1</name> / <name>candidate1UnitHeight</name>) * <call><name><name>candidate1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>candidate2</name> 
            =<init> <expr>(<name>DateTickUnit</name>) <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>estimate2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelHeight2</name> =<init> <expr><call><name>estimateMaximumTickLabelHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>candidate2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>candidate2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit2Height</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>y2</name> - <name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

       <comment type="line">// make final selection...</comment>
       <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>finalUnit</name></decl>;</decl_stmt>
       <if>if <condition>(<expr><name>labelHeight2</name> &lt; <name>unit2Height</name></expr>)</condition><then> <block>{
           <expr_stmt><expr><name>finalUnit</name> = <name>candidate2</name></expr>;</expr_stmt>
       }</block></then>
       <else>else <block>{
           <expr_stmt><expr><name>finalUnit</name> = (<name>DateTickUnit</name>) <call><name><name>tickUnits</name>.<name>getLargerTickUnit</name></name><argument_list>(<argument><expr><name>candidate2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></else></if>
       <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>finalUnit</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Estimates the maximum width of the tick labels, assuming the specified 
     * tick unit is used.
     * &lt;P&gt;
     * Rather than computing the string bounds of every tick on the axis, we
     * just look at two values: the lower bound and the upper bound for the 
     * axis.  These two values will usually be representative.
     *
     * @param g2  the graphics device.
     * @param unit  the tick unit to use for calculation.
     *
     * @return The estimated maximum width of the tick labels.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>estimateMaximumTickLabelWidth</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                 <param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>tickLabelInsets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>tickLabelInsets</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>tickLabelInsets</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LineMetrics</name></type> <name>lm</name> =<init> <expr><call><name><name>tickLabelFont</name>.<name>getLineMetrics</name></name><argument_list>(<argument><expr>"ABCxyz"</expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// all tick labels have the same width (equal to the height of </comment>
            <comment type="line">// the font)...</comment>
            <expr_stmt><expr><name>result</name> += <call><name><name>lm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// look at lower and upper bounds...</comment>
            <decl_stmt><decl><type><name>DateRange</name></type> <name>range</name> =<init> <expr>(<name>DateRange</name>) <call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Date</name></type> <name>lower</name> =<init> <expr><call><name><name>range</name>.<name>getLowerDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Date</name></type> <name>upper</name> =<init> <expr><call><name><name>range</name>.<name>getUpperDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>lowerStr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>upperStr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DateFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getDateFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>unit</name>.<name>dateToString</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>unit</name>.<name>dateToString</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>w1</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>lowerStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>w2</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>upperStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> += <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Estimates the maximum width of the tick labels, assuming the specified 
     * tick unit is used.
     * &lt;P&gt;
     * Rather than computing the string bounds of every tick on the axis, we 
     * just look at two values: the lower bound and the upper bound for the 
     * axis.  These two values will usually be representative.
     *
     * @param g2  the graphics device.
     * @param unit  the tick unit to use for calculation.
     *
     * @return The estimated maximum width of the tick labels.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>estimateMaximumTickLabelHeight</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                  <param><decl><type><name>DateTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>tickLabelInsets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>tickLabelInsets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>tickLabelInsets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LineMetrics</name></type> <name>lm</name> =<init> <expr><call><name><name>tickLabelFont</name>.<name>getLineMetrics</name></name><argument_list>(<argument><expr>"ABCxyz"</expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// all tick labels have the same width (equal to the height of </comment>
            <comment type="line">// the font)...</comment>
            <expr_stmt><expr><name>result</name> += <call><name><name>lm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// look at lower and upper bounds...</comment>
            <decl_stmt><decl><type><name>DateRange</name></type> <name>range</name> =<init> <expr>(<name>DateRange</name>) <call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Date</name></type> <name>lower</name> =<init> <expr><call><name><name>range</name>.<name>getLowerDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Date</name></type> <name>upper</name> =<init> <expr><call><name><name>range</name>.<name>getUpperDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>lowerStr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>upperStr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DateFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getDateFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>unit</name>.<name>dateToString</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>unit</name>.<name>dateToString</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>w1</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>lowerStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>w2</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>upperStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> += <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     *
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                             <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                             <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                             <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>refreshTicksHorizontal</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>refreshTicksVertical</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Recalculates the ticks for the date axis.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data is to be drawn.
     * @param edge  the location of the axis.
     *
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isAutoTickUnitSelection</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>tickDate</name> =<init> <expr><call><name>calculateLowestVisibleTickValue</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>upperDate</name> =<init> <expr><call><name>getMaximumDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>tickDate</name>.<name>before</name></name><argument_list>(<argument><expr><name>upperDate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{

            <if>if <condition>(<expr>!<call><name>isHiddenValue</name><argument_list>(<argument><expr><call><name><name>tickDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// work out the value, label and position</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DateFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getDateFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>this</name>.<name>tickUnit</name>.<name>dateToString</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>

                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>DateTick</name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, 
                        <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tickDate</name> = <call><name><name>unit</name>.<name>addToDate</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>tickDate</name> = <call><name><name>unit</name>.<name>rollDate</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></else></if>

            <comment type="line">// could add a flag to make the following correction optional...</comment>
            <switch>switch <condition>(<expr><call><name><name>unit</name>.<name>getUnit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

                <case>case <expr>(<name><name>DateTickUnit</name>.<name>MILLISECOND</name></name>)</expr> :
                </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>SECOND</name></name>)</expr> :
                </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>MINUTE</name></name>)</expr> :
                </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>HOUR</name></name>)</expr> :
                </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>DAY</name></name>)</expr> :
                    <break>break;</break>
                </case><case>case <expr>(<name><name>DateTickUnit</name>.<name>MONTH</name></name>)</expr> :
                    <expr_stmt><expr><name>tickDate</name> = <call><name>calculateDateForPosition</name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>,
                            <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>tickMarkPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case<expr>(<name><name>DateTickUnit</name>.<name>YEAR</name></name>)</expr> :
                    <expr_stmt><expr><name>tickDate</name> = <call><name>calculateDateForPosition</name><argument_list>(<argument><expr>new <call><name>Year</name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, 
                            <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>tickMarkPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                </case><default>default: <break>break;</break>

            </default>}</block></switch>

        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Recalculates the ticks for the date axis.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     *
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                        <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                        <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isAutoTickUnitSelection</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>unit</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>tickDate</name> =<init> <expr><call><name>calculateLowestVisibleTickValue</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//Date upperDate = calculateHighestVisibleTickValue(unit);</comment>
        <decl_stmt><decl><type><name>Date</name></type> <name>upperDate</name> =<init> <expr><call><name>getMaximumDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tickDate</name>.<name>before</name></name><argument_list>(<argument><expr><name>upperDate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{

            <if>if <condition>(<expr>!<call><name>isHiddenValue</name><argument_list>(<argument><expr><call><name><name>tickDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// work out the value, label and position</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DateFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getDateFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>this</name>.<name>tickUnit</name>.<name>dateToString</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>

                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>DateTick</name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, 
                        <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tickDate</name> = <call><name><name>unit</name>.<name>addToDate</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>tickDate</name> = <call><name><name>unit</name>.<name>rollDate</name></name><argument_list>(<argument><expr><name>tickDate</name></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location.
     * @param plotArea  the area within which the axes and data should be 
     *                  drawn (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area within which the data should be drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param edge  the location of the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                          <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if the axis is not visible, don't draw it...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// even though the axis is not visible, we need to refresh ticks in</comment>
            <comment type="line">// case the grid is being drawn...</comment>
            <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr><call><name>refreshTicks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>state</name>.<name>setTicks</name></name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>state</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// draw the tick marks and labels...</comment>
        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr><call><name>drawTickMarksAndLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the axis label (note that 'state' is passed in *and* </comment>
        <comment type="line">// returned)...</comment>
        <expr_stmt><expr><name>state</name> = <call><name>drawLabel</name><argument_list>(<argument><expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the current range.
     *
     * @param lowerPercent  the new lower bound.
     * @param upperPercent  the new upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(
            <argument><expr>(<name>long</name>) <call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>length</name> =<init> <expr>(<call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(
                <argument><expr>(<name>long</name>) <call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> 
                - <call><name><name>this</name>.<name>timeline</name>.<name>toTimelineValue</name></name><argument_list>(
                    <argument><expr>(<name>long</name>) <call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>adjusted</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>adjusted</name> = new <call><name>DateRange</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>start</name> 
                    + (<name>length</name> * (1 - <name>upperPercent</name>))</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>start</name> + (<name>length</name> 
                    * (1 - <name>lowerPercent</name>))</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>adjusted</name> = new <call><name>DateRange</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(
                    <argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>start</name> + <name>length</name> * <name>lowerPercent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>this</name>.<name>timeline</name>.<name>toMillisecond</name></name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>start</name> + <name>length</name> 
                    * <name>upperPercent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function> 
    
    <comment type="javadoc">/**
     * Tests this axis for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DateAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DateAxis</name></type> <name>that</name> =<init> <expr>(<name>DateAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnit</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickUnit</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dateFormatOverride</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>dateFormatOverride</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickMarkPosition</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>tickMarkPosition</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>timeline</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>timeline</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getLabel</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getLabel</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>0</expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the object.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if some component of the axis does 
     *         not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>DateAxis</name></type> <name>clone</name> =<init> <expr>(<name>DateAxis</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// 'dateTickUnit' is immutable : no need to clone</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>dateFormatOverride</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>dateFormatOverride</name></name> 
                = (<name>DateFormat</name>) <call><name><name>this</name>.<name>dateFormatOverride</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// 'tickMarkPosition' is immutable : no need to clone</comment>

        <return>return <expr><name>clone</name></expr>;</return>

    }</block></function>
            
}</block></class>
</unit>
