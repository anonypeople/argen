<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\ExtendedCategoryAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * ExtendedCategoryAxis.java
 * -------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 07-Nov-2003 : Version 1 (DG);
 * 07-Jan-2004 : Updated the createLabel() method (DG);
 * 29-Jan-2004 : Added paint attribute (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 21-Mar-2007 : Implemented equals(), clone() and fixed serialization (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlock</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextFragment</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextLine</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * An extended version of the {@link CategoryAxis} class that supports 
 * sublabels on the axis.
 */</comment>
<class><specifier>public</specifier> class <name>ExtendedCategoryAxis</name> <super><extends>extends <name>CategoryAxis</name></extends></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3004429093959826567L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the sublabels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>sublabels</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The sublabel font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>sublabelFont</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The sublabel paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>sublabelPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new axis.
     * 
     * @param label  the axis label.
     */</comment>
    <constructor><specifier>public</specifier> <name>ExtendedCategoryAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sublabels</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sublabelFont</name></name> = new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sublabelPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the font for the sublabels.
     * 
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSubLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getSubLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sublabelFont</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the font for the sublabels and sends an {@link AxisChangeEvent} to
     * all registered listeners.
     * 
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSubLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>sublabelFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the sublabels.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSubLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSubLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sublabelPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint for the sublabels and sends an {@link AxisChangeEvent}
     * to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSubLabelPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>sublabelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a sublabel for a category.
     * 
     * @param category  the category.
     * @param label  the label.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubLabel</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>sublabels</name>.<name>put</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Overrides the default behaviour by adding the sublabel to the text 
     * block that is used for the category label.
     * 
     * @param category  the category.
     * @param width  the width (not used yet).
     * @param edge  the location of the axis.
     * @param g2  the graphics device.
     * 
     * @return A label.
     */</comment>
    <function><type><specifier>protected</specifier> <name>TextBlock</name></type> <name>createLabel</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>float</name></type> <name>width</name></decl></param>, 
                                    <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TextBlock</name></type> <name>label</name> =<init> <expr><call><name><name>super</name>.<name>createLabel</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>(<name>String</name>) <call><name><name>this</name>.<name>sublabels</name>.<name>get</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TextLine</name></type> <name>line</name> =<init> <expr>new <call><name>TextLine</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>this</name>.<name>sublabelFont</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>sublabelPaint</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>label</name>.<name>addLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name> 
                    || <name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TextLine</name></type> <name>line</name> =<init> <expr><call><name><name>label</name>.<name>getLastLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>line</name>.<name>addFragment</name></name><argument_list>(<argument><expr>new <call><name>TextFragment</name><argument_list>(<argument><expr>"  " + <name>s</name></expr></argument>, 
                            <argument><expr><name><name>this</name>.<name>sublabelFont</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>sublabelPaint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if>
        }</block></then></if>
        <return>return <expr><name>label</name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this axis for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ExtendedCategoryAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ExtendedCategoryAxis</name></type> <name>that</name> =<init> <expr>(<name>ExtendedCategoryAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>sublabelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>sublabelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sublabelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>sublabelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>sublabels</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>sublabels</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this axis.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ExtendedCategoryAxis</name></type> <name>clone</name> =<init> <expr>(<name>ExtendedCategoryAxis</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>sublabels</name></name> = new <call><name>HashMap</name><argument_list>(<argument><expr><name><name>this</name>.<name>sublabels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sublabelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sublabelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
