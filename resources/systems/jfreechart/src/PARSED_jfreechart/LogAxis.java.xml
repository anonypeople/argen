<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\LogAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * ------------
 * LogAxis.java
 * ------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 24-Aug-2006 : Version 1 (DG);
 * 22-Mar-2007 : Use defaultAutoArrange attribute (DG);
 * 02-Aug-2007 : Fixed zooming bug, added support for margins (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>FontRenderContext</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>LineMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueAxisPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>

<comment type="javadoc">/**
 * A numerical axis that uses a logarithmic scale.  The class is an 
 * alternative to the {@link LogarithmicAxis} class.
 * 
 * @since 1.0.7
 */</comment>
<class><specifier>public</specifier> class <name>LogAxis</name> <super><extends>extends <name>ValueAxis</name></extends></super> <block>{

    <comment type="javadoc">/** The logarithm base. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>base</name> =<init> <expr>10.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The logarithm of the base value - cached for performance. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>baseLog</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr>10.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**  The smallest value permitted on the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>smallestValue</name> =<init> <expr>1E-100</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The current tick unit. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberTickUnit</name></type> <name>tickUnit</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The override number format. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>numberFormatOverride</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The number of minor ticks per major tick unit. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minorTickCount</name></decl>;</decl_stmt> 
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;LogAxis&lt;/code&gt; with no label.
     */</comment>
    <constructor><specifier>public</specifier> <name>LogAxis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;LogAxis&lt;/code&gt; with the given label.
     * 
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LogAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>,  <argument><expr><call><name>createLogTickUnits</name><argument_list>(<argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDefaultAutoRange</name><argument_list>(<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.01</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickUnit</name></name> = new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1.0</expr></argument>, <argument><expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.#"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickCount</name></name> = 10</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the base for the logarithm calculation.
     * 
     * @return The base for the logarithm calculation.
     * 
     * @see #setBase(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>base</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base for the logarithm calculation and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param base  the base value (must be &gt; 1.0).
     * 
     * @see #getBase()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBase</name><parameter_list>(<param><decl><type><name>double</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>base</name> &lt;= 1.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires 'base' &gt; 1.0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>base</name></name> = <name>base</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseLog</name></name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the smallest value represented by the axis.
     * 
     * @return The smallest value represented by the axis.
     * 
     * @see #setSmallestValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getSmallestValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>smallestValue</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the smallest value represented by the axis and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param value  the value.
     * 
     * @see #getSmallestValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSmallestValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires 'value' &gt; 0.0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>smallestValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the current tick unit.
     * 
     * @return The current tick unit.
     * 
     * @see #setTickUnit(NumberTickUnit)
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberTickUnit</name></type> <name>getTickUnit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickUnit</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tick unit for the axis and sends an {@link AxisChangeEvent} to 
     * all registered listeners.  A side effect of calling this method is that
     * the "auto-select" feature for tick units is switched off (you can 
     * restore it using the {@link ValueAxis#setAutoTickUnitSelection(boolean)}
     * method).
     *
     * @param unit  the new tick unit (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickUnit()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickUnit</name><parameter_list>(<param><decl><type><name>NumberTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick unit for the axis and, if requested, sends an 
     * {@link AxisChangeEvent} to all registered listeners.  In addition, an 
     * option is provided to turn off the "auto-select" feature for tick units 
     * (you can restore it using the 
     * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).
     *
     * @param unit  the new tick unit (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  notify listeners?
     * @param turnOffAutoSelect  turn off the auto-tick selection?
     * 
     * @see #getTickUnit()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickUnit</name><parameter_list>(<param><decl><type><name>NumberTickUnit</name></type> <name>unit</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>, 
                            <param><decl><type><name>boolean</name></type> <name>turnOffAutoSelect</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>unit</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'unit' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickUnit</name></name> = <name>unit</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>turnOffAutoSelect</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setAutoTickUnitSelection</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number format override.  If this is non-null, then it will 
     * be used to format the numbers on the axis.
     *
     * @return The number formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setNumberFormatOverride(NumberFormat)
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getNumberFormatOverride</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>numberFormatOverride</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number format override.  If this is non-null, then it will be 
     * used to format the numbers on the axis.
     *
     * @param formatter  the number formatter (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getNumberFormatOverride()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNumberFormatOverride</name><parameter_list>(<param><decl><type><name>NumberFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>numberFormatOverride</name></name> = <name>formatter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of minor tick marks to display.
     * 
     * @return The number of minor tick marks to display.
     * 
     * @see #setMinorTickCount(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinorTickCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickCount</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the number of minor tick marks to display, and sends an
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param count  the count.
     * 
     * @see #getMinorTickCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>count</name> &lt;= 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires 'count' &gt; 0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickCount</name></name> = <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the log of the given value, using the current base.
     * 
     * @param value  the value.
     * 
     * @return The log of the given value.
     * 
     * @see #calculateValue(double)
     * @see #getBase()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>calculateLog</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> / <name><name>this</name>.<name>baseLog</name></name></expr>;</return>  
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the value from a given log.
     * 
     * @param log  the log value (must be &gt; 0.0).
     * 
     * @return The value with the given log.
     * 
     * @see #calculateLog(double)
     * @see #getBase()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>calculateValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Converts a Java2D coordinate to an axis value, assuming that the
     * axis covers the specified &lt;code&gt;edge&lt;/code&gt; of the &lt;code&gt;area&lt;/code&gt;.
     * 
     * @param java2DValue  the Java2D coordinate.
     * @param area  the area.
     * @param edge  the edge that the axis belongs to.
     * 
     * @return A value along the axis scale.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>java2DToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>java2DValue</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
            <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>double</name></type> <name>log</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>log</name> = <name>axisMax</name> - (<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) 
                    * (<name>axisMax</name> - <name>axisMin</name>)</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>log</name> = <name>axisMin</name> + (<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) 
                    * (<name>axisMax</name> - <name>axisMin</name>)</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts a value on the axis scale to a Java2D coordinate relative to 
     * the given &lt;code&gt;area&lt;/code&gt;, based on the axis running along the 
     * specified &lt;code&gt;edge&lt;/code&gt;.
     * 
     * @param value  the data value.
     * @param area  the area.
     * @param edge  the edge.
     * 
     * @return The Java2D coordinate corresponding to &lt;code&gt;value&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
            <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>value</name> = <call><name>calculateLog</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>max</name> 
                   - ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>min</name> 
                   + ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Configures the axis.  This method is typically called when an axis
     * is assigned to a new plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAutoRange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>autoAdjustRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adjusts the axis range to match the data range that the axis is
     * required to display.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no plot, no data</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>ValueAxisPlot</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueAxisPlot</name></type> <name>vap</name> =<init> <expr>(<name>ValueAxisPlot</name>) <name>plot</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>vap</name>.<name>getDataRange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>r</name> = <call><name>getDefaultAutoRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>smallestValue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>range</name> =<init> <expr><name>upper</name> - <name>lower</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// if fixed auto range, then derive lower bound...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>fixedAutoRange</name> =<init> <expr><call><name>getFixedAutoRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fixedAutoRange</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>upper</name> - <name>fixedAutoRange</name></expr></argument>, <argument><expr><name><name>this</name>.<name>smallestValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">// ensure the autorange is at least &lt;minRange&gt; in size...</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>minRange</name> =<init> <expr><call><name>getAutoRangeMinimumSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>range</name> &lt; <name>minRange</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>expand</name> =<init> <expr>(<name>minRange</name> - <name>range</name>) / 2</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>expand</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>expand</name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// apply the margins - these should apply to the exponent range</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>logUpper</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>logLower</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>logRange</name> =<init> <expr><name>logUpper</name> - <name>logLower</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>logUpper</name> = <name>logUpper</name> + <call><name>getUpperMargin</name><argument_list>()</argument_list></call> * <name>logRange</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>logLower</name> = <name>logLower</name> - <call><name>getLowerMargin</name><argument_list>()</argument_list></call> * <name>logRange</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>upper</name> = <call><name>calculateValue</name><argument_list>(<argument><expr><name>logUpper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lower</name> = <call><name>calculateValue</name><argument_list>(<argument><expr><name>logLower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location (determines where to draw the axis).
     * @param plotArea  the area within which the axes and plot should be drawn.
     * @param dataArea  the area within which the data should be drawn.
     * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, 
            <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// if the axis is not visible, don't draw it...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>state</name> = new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// even though the axis is not visible, we need ticks for the </comment>
            <comment type="line">// gridlines...</comment>
            <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr><call><name>refreshTicks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name><name>state</name>.<name>setTicks</name></name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>state</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>state</name> = <call><name>drawTickMarksAndLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> = <call><name>drawLabel</name><argument_list>(<argument><expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return A list of ticks.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>refreshTicksHorizontal</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>refreshTicksVertical</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of ticks for an axis at the top or bottom of the chart.
     * 
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param edge  the edge.
     * 
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><call><name>isAutoTickUnitSelection</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>current</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>current</name> &lt;= <name>end</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr><name><name>TickType</name>.<name>MAJOR</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>createTickLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// add minor ticks (for gridlines)</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>next</name> =<init> <expr><call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>, <argument><expr><name>current</name> 
                    + <call><name><name>this</name>.<name>tickUnit</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>minorTickCount</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>minorV</name> =<init> <expr><name>v</name> + <name>i</name> * ((<name>next</name> - <name>v</name>) / <name><name>this</name>.<name>minorTickCount</name></name>)</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>minorV</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr><name><name>TickType</name>.<name>MINOR</name></name></expr></argument>, <argument><expr><name>minorV</name></expr></argument>, 
                        <argument><expr>""</expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>current</name> = <name>current</name> + <call><name><name>this</name>.<name>tickUnit</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>ticks</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a list of ticks for an axis at the left or right of the chart.
     * 
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param edge  the edge.
     * 
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><call><name>isAutoTickUnitSelection</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name>calculateLog</name><argument_list>(<argument><expr><call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>current</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>current</name> &lt;= <name>end</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr><name><name>TickType</name>.<name>MINOR</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>createTickLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// add minor ticks (for gridlines)</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>next</name> =<init> <expr><call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>, <argument><expr><name>current</name> 
                    + <call><name><name>this</name>.<name>tickUnit</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>minorTickCount</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>minorV</name> =<init> <expr><name>v</name> + <name>i</name> * ((<name>next</name> - <name>v</name>) / <name><name>this</name>.<name>minorTickCount</name></name>)</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>minorV</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr><name><name>TickType</name>.<name>MINOR</name></name></expr></argument>, <argument><expr><name>minorV</name></expr></argument>, <argument><expr>""</expr></argument>, 
                            <argument><expr><name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>current</name> = <name>current</name> + <call><name><name>this</name>.<name>tickUnit</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>ticks</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param edge  the axis location.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
            <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectHorizontalAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectVerticalAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param edge  the axis location.
     *
     * @since 1.0.7
     */</comment>
   <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectHorizontalAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelWidth</name> =<init> <expr><call><name>estimateMaximumTickLabelWidth</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, 
                <argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// start with the current tick unit...</comment>
        <decl_stmt><decl><type><name>TickUnitSource</name></type> <name>tickUnits</name> =<init> <expr><call><name>getStandardTickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TickUnit</name></type> <name>unit1</name> =<init> <expr><call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit1Width</name> =<init> <expr><call><name>exponentLengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// then extrapolate...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>guess</name> =<init> <expr>(<name>tickLabelWidth</name> / <name>unit1Width</name>) * <call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NumberTickUnit</name></type> <name>unit2</name> =<init> <expr>(<name>NumberTickUnit</name>) 
                <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>guess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit2Width</name> =<init> <expr><call><name>exponentLengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>tickLabelWidth</name> = <call><name>estimateMaximumTickLabelWidth</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tickLabelWidth</name> &gt; <name>unit2Width</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>unit2</name> = (<name>NumberTickUnit</name>) <call><name><name>tickUnits</name>.<name>getLargerTickUnit</name></name><argument_list>(<argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit2</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
   
    <comment type="javadoc">/**
     * Converts a length in data coordinates into the corresponding length in 
     * Java2D coordinates.
     * 
     * @param length  the length.
     * @param area  the plot area.
     * @param edge  the edge along which the axis lies.
     * 
     * @return The length in Java2D coordinates.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>exponentLengthToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>one</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name>calculateValue</name><argument_list>(<argument><expr>1.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>length</name> + 1.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>l</name> - <name>one</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the axis location.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectVerticalAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                              <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelHeight</name> =<init> <expr><call><name>estimateMaximumTickLabelHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// start with the current tick unit...</comment>
        <decl_stmt><decl><type><name>TickUnitSource</name></type> <name>tickUnits</name> =<init> <expr><call><name>getStandardTickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TickUnit</name></type> <name>unit1</name> =<init> <expr><call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unitHeight</name> =<init> <expr><call><name>exponentLengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// then extrapolate...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>guess</name> =<init> <expr>(<name>tickLabelHeight</name> / <name>unitHeight</name>) * <call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>NumberTickUnit</name></type> <name>unit2</name> =<init> <expr>(<name>NumberTickUnit</name>) 
                <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>guess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit2Height</name> =<init> <expr><call><name>exponentLengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>tickLabelHeight</name> = <call><name>estimateMaximumTickLabelHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tickLabelHeight</name> &gt; <name>unit2Height</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>unit2</name> = (<name>NumberTickUnit</name>) <call><name><name>tickUnits</name>.<name>getLargerTickUnit</name></name><argument_list>(<argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit2</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Estimates the maximum tick label height.
     * 
     * @param g2  the graphics device.
     * 
     * @return The maximum height.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>estimateMaximumTickLabelHeight</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>tickLabelInsets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>tickLabelInsets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>tickLabelInsets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> += <call><name><name>tickLabelFont</name>.<name>getLineMetrics</name></name><argument_list>(<argument><expr>"123"</expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Estimates the maximum width of the tick labels, assuming the specified 
     * tick unit is used.
     * &lt;P&gt;
     * Rather than computing the string bounds of every tick on the axis, we 
     * just look at two values: the lower bound and the upper bound for the 
     * axis.  These two values will usually be representative.
     *
     * @param g2  the graphics device.
     * @param unit  the tick unit to use for calculation.
     *
     * @return The estimated maximum width of the tick labels.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>estimateMaximumTickLabelWidth</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                   <param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>tickLabelInsets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>tickLabelInsets</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>tickLabelInsets</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// all tick labels have the same width (equal to the height of the </comment>
            <comment type="line">// font)...</comment>
            <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LineMetrics</name></type> <name>lm</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call>.<call><name>getLineMetrics</name><argument_list>(<argument><expr>"0"</expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> += <call><name><name>lm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// look at lower and upper bounds...</comment>
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>lowerStr</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>upperStr</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NumberFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>unit</name>.<name>valueToString</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>unit</name>.<name>valueToString</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>w1</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>lowerStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>w2</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>upperStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> += <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Zooms in on the current range.
     * 
     * @param lowerPercent  the new lower bound.
     * @param upperPercent  the new upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>log1</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>log2</name> =<init> <expr><call><name>calculateLog</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>length</name> =<init> <expr><name>log2</name> - <name>log1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>adjusted</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>logA</name> =<init> <expr><name>log1</name> + <name>length</name> * (1 - <name>upperPercent</name>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>logB</name> =<init> <expr><name>log1</name> + <name>length</name> * (1 - <name>lowerPercent</name>)</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>adjusted</name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>logA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>logB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>logA</name> =<init> <expr><name>log1</name> + <name>length</name> * <name>lowerPercent</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>logB</name> =<init> <expr><name>log1</name> + <name>length</name> * <name>upperPercent</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>adjusted</name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>logA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>calculateValue</name><argument_list>(<argument><expr><name>logB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></else></if>
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a tick label for the specified value.
     * 
     * @param value  the value.
     * 
     * @return The label.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>createTickLabel</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>numberFormatOverride</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>this</name>.<name>numberFormatOverride</name>.<name>format</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>this</name>.<name>tickUnit</name>.<name>valueToString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this axis for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>LogAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LogAxis</name></type> <name>that</name> =<init> <expr>(<name>LogAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>base</name></name> != <name><name>that</name>.<name>base</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>smallestValue</name></name> != <name><name>that</name>.<name>smallestValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>minorTickCount</name></name> != <name><name>that</name>.<name>minorTickCount</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>minorTickCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>smallestValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>numberFormatOverride</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>numberFormatOverride</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>tickUnit</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a collection of tick units for log (base 10) values.
     * Uses a given Locale to create the DecimalFormats.
     *
     * @param locale the locale to use to represent Numbers.
     *
     * @return A collection of tick units for integer values.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createLogTickUnits</name><parameter_list>(<param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>TickUnits</name></type> <name>units</name> =<init> <expr>new <call><name>TickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>numberFormat</name> =<init> <expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000</expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200000</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20000000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000000</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000000000</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000000.0</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000000.0</expr></argument>,  <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>units</name></expr>;</return>

    }</block></function>
}</block></class>
</unit>
