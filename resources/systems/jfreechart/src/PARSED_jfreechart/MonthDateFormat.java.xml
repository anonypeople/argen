<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\jfreechart\src\org\jfree\chart\axis\MonthDateFormat.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * MonthDateFormat.java
 * --------------------
 * (C) Copyright 2005-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 10-May-2005 : Version 1 (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormatSymbols</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>FieldPosition</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParsePosition</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>GregorianCalendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>Month</name></name>;</import>

<comment type="javadoc">/**
 * A formatter that formats dates to show the initial letter(s) of the month
 * name and, as an option, the year for the first or last month of each year.
 */</comment>
<class><specifier>public</specifier> class <name>MonthDateFormat</name> <super><extends>extends <name>DateFormat</name></extends></super> <block>{
    
    <comment type="javadoc">/** The symbols used for the months. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>months</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Flags that control which months will have the year appended. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name><index>[]</index></type> <name>showYear</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The year formatter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>yearFormatter</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new instance for the default time zone.
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param locale  the locale used to obtain the month 
     *                names (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>(<param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chars  the maximum number of characters to use from the month
     *               names (that are obtained from the date symbols of the
     *               default locale).  If this value is &lt;= 0, the entire 
     *               month name is used in each case.
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>, <param><decl><type><name>int</name></type> <name>chars</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param locale  the locale (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chars  the maximum number of characters to use from the month
     *               names (that are obtained from the date symbols of the
     *               default locale).  If this value is &lt;= 0, the entire 
     *               month name is used in each case.
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>(<param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>, <param><decl><type><name>int</name></type> <name>chars</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new formatter.
     * 
     * @param zone  the time zone used to extract the month and year from dates
     *              passed to this formatter (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param locale  the locale used to determine the month names 
     *                (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chars  the maximum number of characters to use from the month 
     *               names, or zero to indicate that the entire month name 
     *               should be used.
     * @param showYearForJan  a flag that controls whether or not the year is
     *                        appended to the symbol for the first month of
     *                        each year.
     * @param showYearForDec  a flag that controls whether or not the year is
     *                        appended to the symbol for the last month of
     *                        each year.
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>, <param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>, <param><decl><type><name>int</name></type> <name>chars</name></decl></param>, 
                           <param><decl><type><name>boolean</name></type> <name>showYearForJan</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>showYearForDec</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr><name>showYearForJan</name></expr>, <expr>false</expr>, <expr>false</expr>, 
            <expr>false</expr>, <expr>false</expr>, <expr>false</expr>, <expr>false</expr>, <expr>false</expr>, <expr>false</expr>, <expr>false</expr>, <expr>false</expr>, <expr>false</expr>,
            <expr><name>showYearForDec</name></expr>}</block></expr></argument>, <argument><expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"yy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new formatter.
     * 
     * @param zone  the time zone used to extract the month and year from dates
     *              passed to this formatter (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param locale  the locale used to determine the month names 
     *                (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chars  the maximum number of characters to use from the month 
     *               names, or zero to indicate that the entire month name 
     *               should be used.
     * @param showYear  an array of flags that control whether or not the
     *                  year is displayed for a particular month.
     * @param yearFormatter  the year formatter.
     */</comment>
    <constructor><specifier>public</specifier> <name>MonthDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>, <param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>, <param><decl><type><name>int</name></type> <name>chars</name></decl></param>, 
                           <param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>showYear</name></decl></param>, <param><decl><type><name>DateFormat</name></type> <name>yearFormatter</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>locale</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'locale' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>DateFormatSymbols</name></type> <name>dfs</name> =<init> <expr>new <call><name>DateFormatSymbols</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>monthsFromLocale</name> =<init> <expr><call><name><name>dfs</name>.<name>getMonths</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>months</name></name> = new <name><name>String</name><index>[<expr>12</expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 12</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>chars</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>months</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>monthsFromLocale</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr>0</expr></argument>, 
                        <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><name><name>monthsFromLocale</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>this</name>.<name>months</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>monthsFromLocale</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name><name>this</name>.<name>calendar</name></name> = new <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>showYear</name></name> = <name>showYear</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yearFormatter</name></name> = <name>yearFormatter</name></expr>;</expr_stmt> 
        
        <comment type="line">// the following is never used, but it seems that DateFormat requires</comment>
        <comment type="line">// it to be non-null.  It isn't well covered in the spec, refer to </comment>
        <comment type="line">// bug parade 5061189 for more info.</comment>
        <expr_stmt><expr><name><name>this</name>.<name>numberFormat</name></name> = <call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Formats the given date.
     * 
     * @param date  the date.
     * @param toAppendTo  the string buffer.
     * @param fieldPosition  the field position.
     * 
     * @return The formatted date.
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuffer</name></type> <name>format</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>StringBuffer</name></type> <name>toAppendTo</name></decl></param>,
                               <param><decl><type><name>FieldPosition</name></type> <name>fieldPosition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> =<init> <expr><call><name><name>this</name>.<name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>months</name><index>[<expr><name>month</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>showYear</name><index>[<expr><name>month</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>yearFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>toAppendTo</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Parses the given string (not implemented).
     * 
     * @param source  the date string.
     * @param pos  the parse position.
     * 
     * @return &lt;code&gt;null&lt;/code&gt;, as this method has not been implemented.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>parse</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>, <param><decl><type><name>ParsePosition</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Tests this formatter for equality with an arbitrary object.
     * 
     * @param obj  the object.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MonthDateFormat</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MonthDateFormat</name></type> <name>that</name> =<init> <expr>(<name>MonthDateFormat</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>months</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>months</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>showYear</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>showYear</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>yearFormatter</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>yearFormatter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Some test code.
     * 
     * @param args  ignored.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MonthDateFormat</name></type> <name>mdf</name> =<init> <expr>new <call><name>MonthDateFormat</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>UK</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"UK:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>6</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>7</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>9</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>11</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>12</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mdf</name> = new <call><name>MonthDateFormat</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>GERMANY</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"GERMANY:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>6</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>7</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>9</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>11</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>12</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>mdf</name> = new <call><name>MonthDateFormat</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>FRANCE</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"FRANCE:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>6</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>7</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>9</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>11</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>mdf</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Month</name><argument_list>(<argument><expr>12</expr></argument>, <argument><expr>2005</expr></argument>)</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"yyyy"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sdf</name>.<name>setNumberFormat</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
