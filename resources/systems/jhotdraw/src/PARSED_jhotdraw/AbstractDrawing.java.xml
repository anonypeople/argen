<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\AbstractDrawing.java">
    <comment type="block">/*
        * @(#)AbstractDrawing.java 4.1 2007-12-16
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>xml</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>font</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.<name>geom</name>.
            <name>Dimension2DDouble</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * AbstractDrawing.
        *
        * @author Werner Randelshofer
        * @version 4.1 2007-12-16 Drawing hold attributes on its own.
        * &lt;br&gt;4.0 2007-07-17 Adapted to changes in Drawing interface.
        * &lt;br&gt;3.0 2007-05-18 Don't fire UndoableEdit events when Figures
        * are added/removed from a Drawing. The
        * &lt;br&gt;2.2 2006-12-26 Support for InputFormat's and OutputFormat's added.
        * &lt;br&gt;2.1 2006-07-08 Extend AbstractBean.
        * &lt;br&gt;2.0.1 2006-02-06 Did ugly dirty fix for IndexOutOfBoundsException when
        * undoing removal of Figures.
        * &lt;br&gt;2.0 2006-01-14 Changed to support double precision coordinates.
        * &lt;br&gt;1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>AbstractDrawing</name>
        <super>
            <extends>extends
                <name>AbstractAttributedCompositeFigure</name>
            </extends>
            <implements>implements
                <name>Drawing</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>Object</name>
                    </type>
                    <name>lock</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>JPanel</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getTreeLock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>FontRenderContext</name>
                    </type>
                    <name>fontRenderContext</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>LinkedList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>InputFormat</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>inputFormats</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>LinkedList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>InputFormat</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>LinkedList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>OutputFormat</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>outputFormats</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>LinkedList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>OutputFormat</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Creates a new instance. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>AbstractDrawing</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addUndoableEditListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEditListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>listenerList</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>UndoableEditListener</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>l</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeUndoableEditListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEditListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>listenerList</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>UndoableEditListener</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>l</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Notify all listenerList that have registered interest for
                * notification on this event type.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fireUndoableEditHappened</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEdit</name>
                            </type>
                            <name>edit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>UndoableEditEvent</name>
                            </type>
                            <name>event</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>listenerList</name>.
                                        <name>getListenerCount</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Notify all listeners that have registered interest for</comment>
                                <comment type="line">// Guaranteed to return a non-null array</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                            <index>[]</index>
                                        </type>
                                        <name>listeners</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>listenerList</name>.
                                                        <name>getListenerList</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// Process the listeners last to first, notifying</comment>
                                <comment type="line">// those that are interested in this event</comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name><name>listeners</name>.
                                                        <name>length</name>
                                                    </name>
                                                    - 2
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>i</name>
                                            -= 2
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>event</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>event</name>
                                                            = new
                                                            <call>
                                                                <name>UndoableEditEvent</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>this</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>edit</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>listeners</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name><name>UndoableEditListener</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>((<name>UndoableEditListener</name>)
                                                            <name>
                                                                <name>listeners</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                        + 1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            ).
                                                            <call>
                                                                <name>undoableEditHappened</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>event</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>FontRenderContext</name>
                </type>
                <name>getFontRenderContext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fontRenderContext</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFontRenderContext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FontRenderContext</name>
                            </type>
                            <name>frc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fontRenderContext</name>
                            =
                            <name>frc</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DOMInput</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>in</name>.
                                    <name>openElement</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"figures"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>in</name>.
                                        <name>getElementCount</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Figure</name>
                                    </type>
                                    <name>f</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>add</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>f</name>
                                                    = (<name>Figure</name>)
                                                    <call>
                                                        <name><name>in</name>.
                                                            <name>readObject</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>in</name>.
                                    <name>closeElement</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DOMOutput</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>openElement</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"figures"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Figure</name>
                                </type>
                                <name>f</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name>getChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>writeObject</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>f</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>closeElement</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The drawing view synchronizes on the lock when drawing a drawing.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getLock</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>lock</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addInputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>inputFormats</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>format</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addOutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>outputFormats</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>format</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                        + ".addOutputFormat(" + <name>format</name> + ")"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutputFormats</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>util</name>.
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>OutputFormat</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>formats</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outputFormats</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>LinkedList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>OutputFormat</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>formats</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInputFormats</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>util</name>.
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>InputFormat</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>formats</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>inputFormats</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>LinkedList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>InputFormat</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>formats</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>java</name>.<name>util</name>.
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>InputFormat</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </name>
                </type>
                <name>getInputFormats</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>inputFormats</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>java</name>.<name>util</name>.
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>OutputFormat</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </name>
                </type>
                <name>getOutputFormats</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                        + ".getOutputFormats size:" +
                                                        <call>
                                                            <name><name>outputFormats</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>outputFormats</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Drawing</name>
                </type>
                <name>getDrawing</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*@Override
                public Rectangle2D.Double getDrawingArea() {
                Rectangle2D.Double drawingArea;

                Dimension2DDouble canvasSize = getCanvasSize();
                if (canvasSize != null) {
                drawingArea = new Rectangle2D.Double(
                0d, 0d,
                canvasSize.width, canvasSize.height);
                } else {
                drawingArea = super.getDrawingArea();
                drawingArea.add(0d, 0d);
                /*drawingArea = new Rectangle2D.Double(
                0d, 0d,
                canvasSize.width, canvasSize.height);* /
                }
                return drawingArea;
                }*/
            </comment>
            }
        </block>
    </class>
</unit>
