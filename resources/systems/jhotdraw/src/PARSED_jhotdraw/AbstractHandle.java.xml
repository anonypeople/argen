<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\AbstractHandle.java">
    <comment type="block">/*
        * @(#)AbstractHandle.java 1.0 14. November 2003
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * AbstractHandle.
        *
        * @author Werner Randelshofer
        * @version 1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>AbstractHandle</name>
        <super>
            <implements>implements <name>Handle</name>,
                <name>FigureListener</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Figure</name>
                    </type>
                    <name>owner</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>DrawingView</name>
                    </type>
                    <name>view</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>EventListenerList</name>
                    </type>
                    <name>listenerList</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>EventListenerList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The bounds of the abstract handle.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Rectangle</name>
                    </type>
                    <name>bounds</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Creates a new instance. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>AbstractHandle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>owner</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"owner must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>owner</name>
                            </name>
                            =
                            <name>owner</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>addFigureListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/** FIXME - Get this form the drawing view. */</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>int</name>
                </type>
                <name>getHandlesize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>7</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Adds a listener for this handle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addHandleListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HandleListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>listenerList</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>HandleListener</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>l</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Removes a listener for this handle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeHandleListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HandleListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>listenerList</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>HandleListener</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>l</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>getOwner</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>owner</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>view</name>
                            </name>
                            =
                            <name>view</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DrawingView</name>
                </type>
                <name>getView</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>view</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Notify all listenerList that have registered interest for
                * notification on this event type.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>fireAreaInvalidated</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>invalidatedArea</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>HandleEvent</name>
                            </type>
                            <name>event</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Notify all listeners that have registered interest for</comment>
                    <comment type="line">// Guaranteed to return a non-null array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>listeners</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>listenerList</name>.
                                            <name>getListenerList</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Process the listeners last to first, notifying</comment>
                    <comment type="line">// those that are interested in this event</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>listeners</name>.
                                            <name>length</name>
                                        </name>
                                        -2
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&gt;=0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>-=2
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>listeners</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name><name>HandleListener</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Lazily create the event:</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>event</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>event</name>
                                                        = new
                                                        <call>
                                                            <name>HandleEvent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>invalidatedArea</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>((<name>HandleListener</name>)
                                                <name>
                                                    <name>listeners</name>
                                                    <index>[
                                                        <expr><name>i</name>+1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ).
                                                <call>
                                                    <name>areaInvalidated</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>event</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Notify all listenerList that have registered interest for
                * notification on this event type.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>fireUndoableEditHappened</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEdit</name>
                            </type>
                            <name>edit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>view</name>.
                                    <name>getDrawing</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>fireUndoableEditHappened</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>edit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Notify all listenerList that have registered interest for
                * notification on this event type.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>fireHandleRequestRemove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>invalidatedArea</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>HandleEvent</name>
                            </type>
                            <name>event</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Notify all listeners that have registered interest for</comment>
                    <comment type="line">// Guaranteed to return a non-null array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>listeners</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>listenerList</name>.
                                            <name>getListenerList</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Process the listeners last to first, notifying</comment>
                    <comment type="line">// those that are interested in this event</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>listeners</name>.
                                            <name>length</name>
                                        </name>
                                        -2
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&gt;=0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>-=2
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>listeners</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name><name>HandleListener</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Lazily create the event:</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>event</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>event</name>
                                                        = new
                                                        <call>
                                                            <name>HandleEvent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>invalidatedArea</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>((<name>HandleListener</name>)
                                                <name>
                                                    <name>listeners</name>
                                                    <index>[
                                                        <expr><name>i</name>+1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ).
                                                <call>
                                                    <name>handleRequestRemove</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>event</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Notify all listenerList that have registered interest for
                * notification on this event type.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>fireHandleRequestSecondaryHandles</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>HandleEvent</name>
                            </type>
                            <name>event</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Notify all listeners that have registered interest for</comment>
                    <comment type="line">// Guaranteed to return a non-null array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>listeners</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>listenerList</name>.
                                            <name>getListenerList</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Process the listeners last to first, notifying</comment>
                    <comment type="line">// those that are interested in this event</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>listeners</name>.
                                            <name>length</name>
                                        </name>
                                        -2
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&gt;=0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>-=2
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>listeners</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name><name>HandleListener</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Lazily create the event:</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>event</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>event</name>
                                                        = new
                                                        <call>
                                                            <name>HandleEvent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>((<name>HandleListener</name>)
                                                <name>
                                                    <name>listeners</name>
                                                    <index>[
                                                        <expr><name>i</name>+1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ).
                                                <call>
                                                    <name>handleRequestSecondaryHandles</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>event</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Draws this handle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>draw</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>drawCircle</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>g</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Color</name>.
                                                <name>white</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Color</name>.
                                                <name>black</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>drawCircle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>fill</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>stroke</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBounds</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fill</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setColor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fill</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>fillOval</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>x</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>y</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>width</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>stroke</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setStroke</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>BasicStroke</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setColor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>stroke</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>drawOval</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>x</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>y</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>width</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>drawRectangle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>fill</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>stroke</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBounds</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fill</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setColor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fill</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>fill</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>r</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>stroke</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setStroke</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>BasicStroke</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setColor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>stroke</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>draw</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>r</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>drawDiamond</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>fill</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>stroke</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBounds</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>r</name>.
                                    <name>grow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Polygon</name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Polygon</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>addPoint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>addPoint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>addPoint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>addPoint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>addPoint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fill</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setColor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fill</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>fill</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>stroke</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setStroke</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>BasicStroke</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>setColor</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>stroke</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>g</name>.
                                                <name>draw</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>p</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getBounds</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>contains</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>invalidate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>bounds</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>dispose</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>removeFigureListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>owner</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sent when a region used by the figure needs to be repainted.
                * The implementation of this method assumes that the handle
                * is located on the bounds of the figure or inside the figure.
                * If the handle is located elsewhere this method must be reimpleted
                * by the subclass.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>areaInvalidated</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>evt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>updateBounds</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sent when a figure was added.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>figureAdded</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Empty</comment>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Sent when a figure was removed.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>figureRemoved</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Empty</comment>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Sent when a figure requests to be removed.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>figureRequestRemove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Empty</comment>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Sent when the bounds or shape of a figure has changed.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>figureChanged</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>evt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>updateBounds</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a cursor for the handle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Cursor</name>
                </type>
                <name>getCursor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Cursor</name>.
                                    <name>getPredefinedCursor</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Cursor</name>.
                                                <name>MOVE_CURSOR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true, if the given handle is an instance of the same
                * class or of a subclass of this handle,.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isCombinableWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Handle</name>
                            </type>
                            <name>handle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getClass</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isAssignableFrom</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>handle</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>keyTyped</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>KeyEvent</name>
                            </type>
                            <name>evt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>keyReleased</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>KeyEvent</name>
                            </type>
                            <name>evt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>keyPressed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>KeyEvent</name>
                            </type>
                            <name>evt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Rectangle</name>
                </type>
                <name>getBounds</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bounds</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>bounds</name>
                                        =
                                        <call>
                                            <name>basicGetBounds</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>Rectangle</name>)
                            <call>
                                <name><name>bounds</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Rectangle</name>
                </type>
                <name>getDrawingArea</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBounds</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>r</name>.
                                    <name>grow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// grow by two pixels to take antialiasing into account</comment>
                    <return>return
                        <expr>
                            <name>r</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>Rectangle</name>
                </type>
                <name>basicGetBounds</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>updateBounds</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>newBounds</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>basicGetBounds</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>bounds</name>
                                == <name>null</name> || !
                                <call>
                                    <name><name>newBounds</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>bounds</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>bounds</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>fireAreaInvalidated</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getDrawingArea</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>bounds</name>
                                        =
                                        <name>newBounds</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>fireAreaInvalidated</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>getDrawingArea</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Tracks a double click.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackDoubleClick</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>attributeChanged</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>viewTransformChanged</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>invalidate</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Handle</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createSecondaryHandles</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>emptyList</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getToolTipText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>figureHandlesChanged</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureEvent</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
