<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\app\Application.java">
    <comment type="block">/*
        * @(#)Application.java 2.0 2007-12-24
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>app</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * An Application handles the lifecycle of {@link View}s and provides windows
        * to present them on screen. Depending on the document interface style
        * used by the Application, the Application can handle multiple Views
        * at the same time, or only one.
        * &lt;p&gt;
        * Typical document interface styles are the Single Document Interface (SDI),
        * the Multiple Document Interface (MDI) and the Mac OS X Application Document
        * Interface (OSX).
        * &lt;p&gt;
        * Typical usage of this class:
        * &lt;pre&gt;
        * public class MyMainClass {
        * public static void main(String[] args) {
        * Application app = new DefaultADIApplication();
        * DefaultApplicationModel model = new DefaultApplicationModel();
        * model.setName("MyAppliciation");
        * model.setVersion("1.0");
        * model.setCopyright("Copyright 2006 (c) Werner Randelshofer. All Rights Reserved.");
        * model.setViewClassName("org.jhotdraw.myapplication.MyView");
        * app.setModel(model);
        * app.launch(args);
        * }
        * &lt;/pre&gt;
        *
        * @author Werner Randelshofer
        * @version 2.0 2007-12-24 Renamed method getCurrentView to getActiveView.
        * &lt;br&gt;1.0 October 4, 2005 Created.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Application</name>
        <block>{
            <comment type="javadoc">/**
                * The property name of the activeView property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ACTIVE_VIEW_PROPERTY</name> =
                    <init>
                        <expr>"activeView"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Launches the application from the main method.
                * This method is typically invoked on the main Thread.
                * This will invoke configure() on the current thread and then
                * init() and start() on the AWT Event Dispatcher Thread.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>launch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Configures the application using the provided arguments array.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>configure</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Initializes the application.
                * &lt;code&gt;configure()&lt;/code&gt; should have been invoked before the application
                * is inited. Alternatively an application can be configured using setter
                * methods.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>init</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Starts the application.
                * This usually creates a new view, and adds it to the application.
                * &lt;code&gt;init()&lt;/code&gt; must have been invoked before the application is started.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>start</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Stops the application without saving any unsaved views.
                * &lt;code&gt;init()&lt;/code&gt; must have been invoked before the application is stopped.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>stop</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Creates a new view for this application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>View</name>
                </type>
                <name>createView</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a view to this application.
                * Fires a "documentCount" property change event.
                * Invokes method setApplication(this) on the view object.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>View</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a view from this application and removes it from the users
                * view.
                * Fires a "documentCount" property change event.
                * Invokes method setApplication(null) on the view object.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>View</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Shows a view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>show</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>View</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Hides a view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>hide</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>View</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * This is a convenience method for removing a view and disposing it.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>dispose</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>View</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a read only collection view of the views of this application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>View</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>views</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the active view. This is used for OSXApplication and
                * MDIApplication which share actions among multiple View instances.
                * Active view may be become null, if the
                * application has no view.
                * &lt;p&gt;
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>View</name>
                </type>
                <name>getActiveView</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the enabled state of the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEnabled</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the enabled state of the application.
                *
                * The enabled state is used to prevent parallel invocation of actions
                * on the application. If an action consists of a sequential part and a
                * concurrent part, it must disable the application only for the sequential
                * part.
                *
                * Actions that act on the application must check in their actionPerformed
                * method whether the application is enabled.
                * If the application is disabled, they must do nothing.
                * If the application is enabled, they must disable the application,
                * perform the action and then enable the application again.
                *
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEnabled</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a property change listener.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addPropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a property change listener.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removePropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the name of the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the version of the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getVersion</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the copyright of the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getCopyright</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the application model.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ApplicationModel</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the application model.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ApplicationModel</name>
                </type>
                <name>getModel</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if this application shares tools among multiple views.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSharingToolsAmongViews</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the application component.
                * This may return null, if the application is not represented by a component
                * of its own on the user interface.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Component</name>
                </type>
                <name>getComponent</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the recently opened files.
                * By convention, this is an immutable list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>java</name>.<name>util</name>.
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>File</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </name>
                </type>
                <name>recentFiles</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Appends a file to the list of recent files.
                * This fires a property change event for the property "recentFiles".
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addRecentFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Clears the list of recent files.
                * This fires a property change event for the property "recentFiles".
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clearRecentFiles</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a palette window to the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addPalette</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Window</name>
                            </type>
                            <name>palette</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes a palette window from the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removePalette</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Window</name>
                            </type>
                            <name>palette</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a (regular) window to the application.
                *
                * @param window The window.
                * @param view The View to which this window is associated, or null,
                * if the window is associated to the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addWindow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Window</name>
                            </type>
                            <name>window</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>View</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes a (regular) window from the application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeWindow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Window</name>
                            </type>
                            <name>window</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
