<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\AttributeKeys.java">
    <comment type="block">/*
        * @(#)AttributeKeys.java 1.4 2007-12-16
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * Defines AttributeKeys used by the Figures in this package as well as some
        * helper methods.
        * &lt;p&gt;
        * If you are developing an applications that uses a different set or an
        * extended set of attributes, it is best, to create a new AttributeKeys class,
        * and to define all needed AttributeKeys as static variables in there.
        *
        * @author Werner Randelshofer
        * @version 1.4 2007-12-16 Added CANVAS_FILL_COLOR.
        * &lt;br&gt;1.3 2006-12-09 Streamlined to better support SVG.
        * &lt;br&gt;1.2 2006-07-09 Stroke dash factor added.
        * &lt;br&gt;1.1 2006-06-07 Changed all values to double.
        * &lt;br&gt;1.0 23. 3. 2006 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>AttributeKeys</name>
        <block>{
            <comment type="javadoc">/**
                * Canvas fill color. The value of this attribute is a Color object.
                * This attribute is used by a Drawing object to specify the color of the canvas.
                * The default value is white.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Color</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>CANVAS_FILL_COLOR</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AttributeKey</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Color</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"backgroundColor"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Color</name>.
                                                <name>white</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Canvas fill color opacity. The value of this attribute is a Double object.
                * This is a value between 0 and 1 whereas 0 is translucent and 1 is fully opaque.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>CANVAS_FILL_OPACITY</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AttributeKey</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Double</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"backgroundOpacity"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1d</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Figure fill color. The value of this attribute is a Color object.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Color</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>FILL_COLOR</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AttributeKey</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Color</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"fillColor"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Color</name>.
                                                <name>white</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Close BezierFigure. The value of this attribute is a Boolean object.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>CLOSED</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AttributeKey</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Boolean</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"closed"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Fill BezierFigure. The value of this attribute is a Boolean object.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>FILL_OPEN_PATH</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AttributeKey</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Boolean</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"fillOpenPath"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <enum>
                <specifier>public</specifier>
                <specifier>static</specifier> enum <name>WindingRule</name>
                <block>{
                    <comment type="javadoc">/**
                        * If WINDING_RULE is set to this value, an even-odd winding rule
                        * is used for determining the interior of a path.
                        */
                    </comment>
                    <expr>
                        <name>EVEN_ODD</name>
                    </expr>
                    ,
                    <comment type="javadoc">/**
                        * If WINDING_RULE is set to this value, a non-zero winding rule
                        * is used for determining the interior of a path.
                        */
                    </comment>
                    <expr>
                        <name>NON_ZERO</name>
                    </expr>
                    }
                </block>

                <comment type="javadoc">/**
                    * Fill under stroke. The value of this attribute is a Boolean object.
                    */
                </comment>
                public final static
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>WindingRule</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <name>WINDING_RULE</name> = new
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>WindingRule</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ("windingRule",
                <name><name>WindingRule</name>.
                    <name>EVEN_ODD</name>
                </name>
                , false
            </enum>
            )
        </block>
        ;
    </class>

    <enum>
        <specifier>public</specifier>
        <specifier>static</specifier> enum <name>Underfill</name>
        <block>{
            <comment type="javadoc">/**
                * If FILL_UNDER_STROKE is set to this value, the area under the
                * stroke will not be filled.
                */
            </comment>
            <expr>
                <name>NONE</name>
            </expr>
            ,
            <comment type="javadoc">/**
                * If FILL_UNDER_STROKE is set to this value, the area under the stroke
                * is filled to the center of the stroke. This is the default behavior
                * of Graphics2D.fill(Shape), Graphics2D.draw(Shape) when using the
                * same shape object.
                */
            </comment>
            <expr>
                <name>CENTER</name>
            </expr>
            ,
            <comment type="javadoc">/**
                * If FILL_UNDER_STROKE is set to this value, the area under the
                * stroke will be filled.
                */
            </comment>
            <expr>
                <name>FULL</name>
            </expr>
            }
        </block>

        <comment type="javadoc">/**
            * Fill under stroke. The value of this attribute is a Boolean object.
            */
        </comment>
        public final static
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>Underfill</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <name>FILL_UNDER_STROKE</name> = new
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>Underfill</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        ("fillUnderStroke",
        <name><name>Underfill</name>.
            <name>CENTER</name>
        </name>
        , false
    </enum>
    )
    <empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
        * Stroke color. The value of this attribute is a Color object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Color</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_COLOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Color</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeColor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Color</name>.
                                        <name>black</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Stroke width. A double used to construct a BasicStroke or the
        * outline of a DoubleStroke.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_WIDTH</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeWidth"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>1d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Factor for the stroke inner width. This is a double. The default value
        * is 2.
        *
        * @deprecated This is not flexible enough. Lets replace this with a
        * STROKE_STRIPES_ARRAY&lt;Double[]&gt; and a IS_STROKE_STRIPES_FACTOR.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_INNER_WIDTH_FACTOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"innerStrokeWidthFactor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>2d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Stroke join. One of the BasicStroke.JOIN_... values used to
        * construct a BasicStroke.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Integer</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_JOIN</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Integer</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeJoin"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>BasicStroke</name>.
                                        <name>JOIN_MITER</name>
                                    </name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Stroke join. One of the BasicStroke.CAP_... values used to
        * construct a BasicStroke.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Integer</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_CAP</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Integer</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeCap"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>BasicStroke</name>.
                                        <name>CAP_BUTT</name>
                                    </name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Stroke miter limit factor. A double multiplied by total stroke width,
        * used to construct the miter limit of a BasicStroke.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_MITER_LIMIT</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeMiterLimitFactor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>3d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * A boolean used to indicate whether STROKE_MITER_LIMIT is a factor of
        * STROKE_WIDTH, or whether it represents an absolute value.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Boolean</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>IS_STROKE_MITER_LIMIT_FACTOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"isStrokeMiterLimitFactor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>true</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * An array of doubles used to specify the dash pattern in
        * a BasicStroke;
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>double</name>
                            <index>[]</index>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_DASHES</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>double</name>
                                        <index>[]</index>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeDashes"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * A double used to specify the starting phase of the stroke dashes.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_DASH_PHASE</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeDashPhase"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>0d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * A boolean used to indicate whether STROKE_DASHES and STROKE_DASH_PHASE
        * shall be interpreted as factors of STROKE_WIDTH, or whether they are
        * absolute values.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Boolean</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>IS_STROKE_DASH_FACTOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"isStrokeDashFactor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>true</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>


    <enum>
        <specifier>public</specifier>
        <specifier>static</specifier> enum <name>StrokeType</name>
        <block>{
            <comment type="javadoc">/**
                * If STROKE_TYPE is set to this value, a BasicStroke instance is used
                * for stroking.
                */
            </comment>
            <expr>
                <name>BASIC</name>
            </expr>
            ,
            <comment type="javadoc">/**
                * If STROKE_TYPE is set to this value, a DoubleStroke instance is used
                * for stroking.
                * @deprecated This is not flexible enough. Lets replace this with
                * STRIPED. for example to support for striped strokes.
                */
            </comment>
            <expr>
                <name>DOUBLE</name>
            </expr>
            }
        </block>

        <comment type="javadoc">/**
            * Stroke type. The value of this attribute is either VALUE_STROKE_TYPE_BASIC
            * or VALUE_STROKE_TYPE_DOUBLE.
            * FIXME - Type should be an enumeration.
            */
        </comment>
        public final static
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>StrokeType</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <name>STROKE_TYPE</name> = new
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>StrokeType</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        ("strokeType",
        <name><name>StrokeType</name>.
            <name>BASIC</name>
        </name>
        , false
    </enum>
    )
    <empty_stmt>;</empty_stmt>

    <enum>
        <specifier>public</specifier>
        <specifier>static</specifier> enum <name>StrokePlacement</name>
        <block>{
            <comment type="javadoc">/**
                * If STROKE_PLACEMENT is set to this value, the stroke is centered
                * on the path.
                */
            </comment>
            <expr>
                <name>CENTER</name>
            </expr>
            ,
            <comment type="javadoc">/**
                * If STROKE_PLACEMENT is set to this value, the stroke is placed
                * inside of a closed path.
                */
            </comment>
            <expr>
                <name>INSIDE</name>
            </expr>
            ,
            <comment type="javadoc">/**
                * If STROKE_PLACEMENT is set to this value, the stroke is placed
                * outside of a closed path.
                */
            </comment>
            <expr>
                <name>OUTSIDE</name>
            </expr>
            }
        </block>
        <comment type="javadoc">/**
            * Stroke placement. The value is either StrokePlacement.CENTER,
            * StrokePlacement.INSIDE or StrokePlacement.OUTSIDE.
            * This only has effect for closed paths. On open paths, the stroke
            * is always centered on the path.
            * &lt;p&gt;
            * The default value is StrokePlacement.CENTER.
            */
        </comment>
        public final static
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>StrokePlacement</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <name>STROKE_PLACEMENT</name> = new
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>StrokePlacement</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        ("strokePlacement",
        <name><name>StrokePlacement</name>.
            <name>CENTER</name>
        </name>
        , false
    </enum>
    )
    <empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
        * The value of this attribute is a String object, which is used to
        * display the text of the figure.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>TEXT</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"text"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * Text color. The value of this attribute is a Color object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Color</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>TEXT_COLOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Color</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"textColor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Color</name>.
                                        <name>black</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Text shadow color. The value of this attribute is a Color object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Color</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>TEXT_SHADOW_COLOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Color</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"textShadowColor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Text shadow offset. The value of this attribute is a Dimension2DDouble object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Dimension2DDouble</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>TEXT_SHADOW_OFFSET</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Dimension2DDouble</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"textShadowOffset"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <call>
                                        <name>Dimension2DDouble</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1d</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>1d</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * The value of this attribute is a Font object, which is used as a prototype
        * to create the font for the text.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Font</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FONT_FACE</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Font</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fontFace"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <call>
                                        <name>Font</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"VERDANA"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Font</name>.
                                                        <name>PLAIN</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>10</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * The value of this attribute is a double object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FONT_SIZE</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fontSize"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>12d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * The value of this attribute is a Boolean object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Boolean</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FONT_BOLD</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fontBold"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * The value of this attribute is a Boolean object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Boolean</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FONT_ITALIC</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fontItalic"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * The value of this attribute is a Boolean object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Boolean</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FONT_UNDERLINE</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Boolean</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fontUnderlined"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * The value of this attribute is a Liner object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Liner</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>BEZIER_PATH_LAYOUTER</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Liner</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"bezierPathLayouter"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>LineDecoration</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>END_DECORATION</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>LineDecoration</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"endDecoration"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>LineDecoration</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>START_DECORATION</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>LineDecoration</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"startDecoration"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * The value of this attribute is a Insets2D.Double object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name><name>Insets2D</name>.
                                <name>Double</name>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>DECORATOR_INSETS</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name><name>Insets2D</name>.
                                        <name>Double</name>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"decoratorInsets"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <call>
                                        <name><name>Insets2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * The value of this attribute is a Insets2D.Double object.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name><name>Insets2D</name>.
                                <name>Double</name>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>LAYOUT_INSETS</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name><name>Insets2D</name>.
                                        <name>Double</name>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"borderInsets"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <call>
                                        <name><name>Insets2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <enum>
        <specifier>public</specifier>
        <specifier>static</specifier> enum <name>Orientation</name>
        <block>{
            <expr>
                <name>NORTH</name>
            </expr>
            ,
            <expr>
                <name>NORTH_EAST</name>
            </expr>
            ,
            <expr>
                <name>EAST</name>
            </expr>
            ,
            <expr>
                <name>SOUTH_EAST</name>
            </expr>
            ,
            <expr>
                <name>SOUTH</name>
            </expr>
            ,
            <expr>
                <name>SOUTH_WEST</name>
            </expr>
            ,
            <expr>
                <name>WEST</name>
            </expr>
            ,
            <expr>
                <name>NORTH_WEST</name>
            </expr>
            }
        </block>

        <comment type="javadoc">/**
            * Specifies the transform of a Figure.
            */
        </comment>
        public final static
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>AffineTransform</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <name>TRANSFORM</name>
        = new
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>AffineTransform</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        ("transform", <name>null</name>, true
    </enum>
    )
    <empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
        * Specifies the orientation of a Figure.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Orientation</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>ORIENTATION</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Orientation</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"orientation"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Orientation</name>.
                                        <name>NORTH</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * A set with all attributes defined by this class.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>Set</name>
                    <argument_list>&lt;
                        <argument>
                            <name>AttributeKey</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>supportedAttributes</name>
        </decl>
        ;
    </decl_stmt>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>Map</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        ,
                        <argument>
                            <name>AttributeKey</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>supportedAttributeMap</name>
        </decl>
        ;
    </decl_stmt>
    static
    <block>{
        <decl_stmt>
            <decl>
                <type>
                    <name>
                        <name>HashSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>AttributeKey</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>as</name> =
                <init>
                    <expr>new
                        <call>
                            <name>
                                <name>HashSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>AttributeKey</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                </init>
            </decl>
            ;
        </decl_stmt>
        <expr_stmt>
            <expr>
                <call>
                    <name><name>as</name>.
                        <name>addAll</name>
                    </name>
                    <argument_list>(
                        <argument>
                            <expr>
                                <call>
                                    <name><name>Arrays</name>.
                                        <name>asList</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>new
                                                <name>
                                                    <name>AttributeKey</name>
                                                    <index>[]</index>
                                                </name>
                                                <block>{
                                                    <expr>
                                                        <name>FILL_COLOR</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>FILL_UNDER_STROKE</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_COLOR</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_WIDTH</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_INNER_WIDTH_FACTOR</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_JOIN</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_CAP</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_MITER_LIMIT</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_DASHES</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_DASH_PHASE</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_TYPE</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>STROKE_PLACEMENT</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>TEXT</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>TEXT_COLOR</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>TEXT_SHADOW_COLOR</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>TEXT_SHADOW_OFFSET</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>TRANSFORM</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>FONT_FACE</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>FONT_SIZE</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>FONT_BOLD</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>FONT_ITALIC</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>FONT_UNDERLINE</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>BEZIER_PATH_LAYOUTER</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>END_DECORATION</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>START_DECORATION</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>DECORATOR_INSETS</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>ORIENTATION</name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>WINDING_RULE</name>
                                                    </expr>
                                                    ,
                                                    }
                                                </block>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                        </argument>
                        )
                    </argument_list>
                </call>
            </expr>
            ;
        </expr_stmt>
        <expr_stmt>
            <expr>
                <name>supportedAttributes</name>
                =
                <call>
                    <name><name>Collections</name>.
                        <name>unmodifiableSet</name>
                    </name>
                    <argument_list>(
                        <argument>
                            <expr>
                                <name>as</name>
                            </expr>
                        </argument>
                        )
                    </argument_list>
                </call>
            </expr>
            ;
        </expr_stmt>
        <decl_stmt>
            <decl>
                <type>
                    <name>
                        <name>HashMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            ,
                            <argument>
                                <name>AttributeKey</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>am</name> =
                <init>
                    <expr>new
                        <call>
                            <name>
                                <name>HashMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>AttributeKey</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                </init>
            </decl>
            ;
        </decl_stmt>
        <for>for (
            <init>
                <decl>
                    <type>
                        <name>AttributeKey</name>
                    </type>
                    <name>a</name>:
                    <range>
                        <expr>
                            <name>as</name>
                        </expr>
                    </range>
                </decl>
            </init>
            )
            <block>{
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>am</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>a</name>.
                                                <name>getKey</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>a</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>
        </for>
        <expr_stmt>
            <expr>
                <name>supportedAttributeMap</name>
                =
                <call>
                    <name><name>Collections</name>.
                        <name>unmodifiableMap</name>
                    </name>
                    <argument_list>(
                        <argument>
                            <expr>
                                <name>am</name>
                            </expr>
                        </argument>
                        )
                    </argument_list>
                </call>
            </expr>
            ;
        </expr_stmt>
        }
    </block>


    <comment type="javadoc">/**
        * Convenience method for computing the total stroke width from the
        * STROKE_WIDTH, STROKE_INNER_WIDTH and STROKE_TYPE attributes.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>double</name>
        </type>
        <name>getStrokeTotalWidth</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <switch>switch
                <condition>(
                    <expr>
                        <call>
                            <name><name>STROKE_TYPE</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <block>{
                    <case>case
                        <expr>
                            <name>BASIC</name>
                        </expr>
                        :
                    </case>
                    <default>default :
                        <return>return
                            <expr>
                                <call>
                                    <name><name>STROKE_WIDTH</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        <comment type="line">// break; not reached</comment>
                    </default>
                    <case>case
                        <expr>
                            <name>DOUBLE</name>
                        </expr>
                        :
                        <return>return
                            <expr>
                                <call>
                                    <name><name>STROKE_WIDTH</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                * (1d +
                                <call>
                                    <name><name>STROKE_INNER_WIDTH_FACTOR</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                )
                            </expr>
                            ;
                        </return>
                        <comment type="line">// break; not reached</comment>
                    </case>
                    }
                </block>
            </switch>
            }
        </block>
    </function>
    <comment type="javadoc">/**
        * Convenience method for computing the total stroke miter limit from the
        * STROKE_MITER_LIMIT, and IS_STROKE_MITER_LIMIT factor.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>double</name>
        </type>
        <name>getStrokeTotalMiterLimit</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>IS_STROKE_MITER_LIMIT_FACTOR</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>STROKE_MITER_LIMIT</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                *
                                <call>
                                    <name><name>STROKE_WIDTH</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>STROKE_MITER_LIMIT</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </else>
            </if>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>Stroke</name>
        </type>
        <name>getStroke</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>strokeWidth</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>STROKE_WIDTH</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>float</name>
                    </type>
                    <name>miterLimit</name> =
                    <init>
                        <expr>(<name>float</name>)
                            <call>
                                <name>getStrokeTotalMiterLimit</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>dashFactor</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>IS_STROKE_DASH_FACTOR</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? <name>strokeWidth</name> : 1d
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                        <index>[]</index>
                    </type>
                    <name>ddashes</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>STROKE_DASHES</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>float</name>
                        <index>[]</index>
                    </type>
                    <name>dashes</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>ddashes</name>
                        !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>dashes</name>
                                = new
                                <name>
                                    <name>float</name>
                                    <index>[
                                        <expr>
                                            <name><name>ddashes</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        <for>for (
                            <init>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name>=
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </init>
                            <condition>
                                <expr>
                                    <name>i</name>
                                    &lt;
                                    <name><name>dashes</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                                ;
                            </condition>
                            <incr>
                                <expr><name>i</name>++
                                </expr>
                            </incr>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>dashes</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <call>(<name>float</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>ddashes</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        *
                                                        <name>dashFactor</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </for>
                        }
                    </block>
                </then>
            </if>
            <switch>switch
                <condition>(
                    <expr>
                        <call>
                            <name><name>STROKE_TYPE</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <block>{
                    <case>case
                        <expr>
                            <name>BASIC</name>
                        </expr>
                        :
                    </case>
                    <default>default :
                        <return>return
                            <expr>new
                                <call>
                                    <name>BasicStroke</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>float</name>)
                                                <name>strokeWidth</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>STROKE_CAP</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>STROKE_JOIN</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>miterLimit</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>dashes</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>(<name>float</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>STROKE_DASH_PHASE</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>f</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                *
                                                                <name>dashFactor</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        <comment type="line">//not reached</comment>

                    </default>
                    <case>case
                        <expr>
                            <name>DOUBLE</name>
                        </expr>
                        :
                        <return>return
                            <expr>new
                                <call>
                                    <name>DoubleStroke</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>(<name>float</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>STROKE_INNER_WIDTH_FACTOR</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>f</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                *
                                                                <name>strokeWidth</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>(<name>float</name>)
                                                <name>strokeWidth</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>STROKE_CAP</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>STROKE_JOIN</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>miterLimit</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>dashes</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>(<name>float</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>STROKE_DASH_PHASE</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>f</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                .
                                                                <call>
                                                                    <name>floatValue</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                *
                                                                <name>dashFactor</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        <comment type="line">//not reached</comment>
                    </case>
                    }
                </block>
            </switch>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>Font</name>
        </type>
        <name>getFont</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>Font</name>
                    </type>
                    <name>prototype</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>FONT_FACE</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>prototype</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name>getFontStyle</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        !=
                        <name><name>Font</name>.
                            <name>PLAIN</name>
                        </name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>prototype</name>.
                                        <name>deriveFont</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name>getFontStyle</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>FONT_SIZE</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>floatValue</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>prototype</name>.
                                        <name>deriveFont</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>FONT_SIZE</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>f</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>floatValue</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </else>
            </if>
            }
        </block>
    </function>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>int</name>
        </type>
        <name>getFontStyle</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>style</name> =
                    <init>
                        <expr>
                            <name><name>Font</name>.
                                <name>PLAIN</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>FONT_BOLD</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <expr_stmt>
                        <expr>
                            <name>style</name>
                            |=
                            <name><name>Font</name>.
                                <name>BOLD</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>FONT_ITALIC</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <expr_stmt>
                        <expr>
                            <name>style</name>
                            |=
                            <name><name>Font</name>.
                                <name>ITALIC</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                </then>
            </if>
            <return>return
                <expr>
                    <name>style</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    <comment type="javadoc">/**
        * Returns the distance, that a Rectangle needs to grow (or shrink) to
        * fill its shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION
        * attributes of a figure.
        * The value returned is the number of units that need to be grown (or shrunk)
        * perpendicular to a stroke on an outline of the shape.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>double</name>
        </type>
        <name>getPerpendicularFillGrowth</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>grow</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>strokeWidth</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>AttributeKeys</name>.
                                    <name>getStrokeTotalWidth</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>StrokePlacement</name>
                    </type>
                    <name>placement</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>STROKE_PLACEMENT</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <switch>switch
                <condition>(
                    <expr>
                        <call>
                            <name><name>FILL_UNDER_STROKE</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <block>{
                    <case>case
                        <expr>
                            <name>FULL</name>
                        </expr>
                        :
                        <switch>switch
                            <condition>(
                                <expr>
                                    <name>placement</name>
                                </expr>
                                )
                            </condition>
                            <block>{
                                <case>case
                                    <expr>
                                        <name>INSIDE</name>
                                    </expr>
                                    :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = 0f
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </case>
                                <case>case
                                    <expr>
                                        <name>OUTSIDE</name>
                                    </expr>
                                    :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            =
                                            <name>strokeWidth</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </case>
                                <case>case
                                    <expr>
                                        <name>CENTER</name>
                                    </expr>
                                    :
                                </case>
                                <default>default :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = <name>strokeWidth</name> / 2d
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </default>
                                }
                            </block>
                        </switch>
                        <break>break;</break>
                    </case>
                    <case>case
                        <expr>
                            <name>NONE</name>
                        </expr>
                        :
                        <switch>switch
                            <condition>(
                                <expr>
                                    <name>placement</name>
                                </expr>
                                )
                            </condition>
                            <block>{
                                <case>case
                                    <expr>
                                        <name>INSIDE</name>
                                    </expr>
                                    :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = -
                                            <name>strokeWidth</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </case>
                                <case>case
                                    <expr>
                                        <name>OUTSIDE</name>
                                    </expr>
                                    :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = 0f
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </case>
                                <case>case
                                    <expr>
                                        <name>CENTER</name>
                                    </expr>
                                    :
                                </case>
                                <default>default :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = <name>strokeWidth</name> / -2d
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </default>
                                }
                            </block>
                        </switch>
                        <break>break;</break>
                    </case>
                    <case>case
                        <expr>
                            <name>CENTER</name>
                        </expr>
                        :
                    </case>
                    <default>default :
                        <switch>switch
                            <condition>(
                                <expr>
                                    <name>placement</name>
                                </expr>
                                )
                            </condition>
                            <block>{
                                <case>case
                                    <expr>
                                        <name>INSIDE</name>
                                    </expr>
                                    :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = <name>strokeWidth</name> / -2d
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </case>
                                <case>case
                                    <expr>
                                        <name>OUTSIDE</name>
                                    </expr>
                                    :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = <name>strokeWidth</name> / 2d
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </case>
                                <case>case
                                    <expr>
                                        <name>CENTER</name>
                                    </expr>
                                    :
                                </case>
                                <default>default :
                                    <expr_stmt>
                                        <expr>
                                            <name>grow</name>
                                            = 0d
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                </default>
                                }
                            </block>
                        </switch>
                        <break>break;</break>
                    </default>
                    }
                </block>
            </switch>
            <return>return
                <expr>
                    <name>grow</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    <comment type="javadoc">/**
        * Returns the distance, that a Rectangle needs to grow (or shrink) to
        * draw (aka stroke) its shape as specified by the FILL_UNDER_STROKE and
        * STROKE_POSITION attributes of a figure.
        * The value returned is the number of units that need to be grown (or shrunk)
        * perpendicular to a stroke on an outline of the shape.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>double</name>
        </type>
        <name>getPerpendicularDrawGrowth</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>grow</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>strokeWidth</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>AttributeKeys</name>.
                                    <name>getStrokeTotalWidth</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <switch>switch
                <condition>(
                    <expr>
                        <call>
                            <name><name>STROKE_PLACEMENT</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <block>{
                    <case>case
                        <expr>
                            <name>INSIDE</name>
                        </expr>
                        :
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                = <name>strokeWidth</name> / -2d
                            </expr>
                            ;
                        </expr_stmt>
                        <break>break;</break>
                    </case>
                    <case>case
                        <expr>
                            <name>OUTSIDE</name>
                        </expr>
                        :
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                = <name>strokeWidth</name> / 2d
                            </expr>
                            ;
                        </expr_stmt>
                        <break>break;</break>
                    </case>
                    <case>case
                        <expr>
                            <name>CENTER</name>
                        </expr>
                        :
                    </case>
                    <default>default :
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                = 0f
                            </expr>
                            ;
                        </expr_stmt>
                        <break>break;</break>
                    </default>
                    }
                </block>
            </switch>
            <return>return
                <expr>
                    <name>grow</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    <comment type="javadoc">/**
        * Returns the distance, that a Rectangle needs to grow (or shrink) to
        * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION
        * attributes of a figure.
        * The value returned is the number of units that need to be grown (or shrunk)
        * perpendicular to a stroke on an outline of the shape.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>double</name>
        </type>
        <name>getPerpendicularHitGrowth</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>grow</name>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>STROKE_COLOR</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                =
                                <call>
                                    <name>getPerpendicularFillGrowth</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>double</name>
                                </type>
                                <name>strokeWidth</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>AttributeKeys</name>.
                                                <name>getStrokeTotalWidth</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>f</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                =
                                <call>
                                    <name>getPerpendicularDrawGrowth</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                + <name>strokeWidth</name> / 2d
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </else>
            </if>
            <return>return
                <expr>
                    <name>grow</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    }
</unit>
