<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\io\Base64.java">
    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>io</name>
        </name>
        ;
    </package>
    <comment type="javadoc">/**
        * Encodes and decodes to and from Base64 notation.
        *
        * &lt;p&gt;
        * Change Log:
        * &lt;/p&gt;
        * &lt;ul&gt;
        * &lt;li&gt;v2.1 - Cleaned up javadoc comments and unused variables and methods. Added
        * some convenience methods for reading and writing to and from files.&lt;/li&gt;
        * &lt;li&gt;v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on systems
        * with other encodings (like EBCDIC).&lt;/li&gt;
        * &lt;li&gt;v2.0.1 - Fixed an error when decoding a single byte, that is, when the
        * encoded data was a single byte.&lt;/li&gt;
        * &lt;li&gt;v2.0 - I got rid of methods that used booleans to set options.
        * Now everything is more consolidated and cleaner. The code now detects
        * when data that's being decoded is gzip-compressed and will decompress it
        * automatically. Generally things are cleaner. You'll probably have to
        * change some method calls that you were making to support the new
        * options format (&lt;tt&gt;int&lt;/tt&gt;s that you "OR" together).&lt;/li&gt;
        * &lt;li&gt;v1.5.1 - Fixed bug when decompressing and decoding to a
        * byte[] using &lt;tt&gt;decode( String s, boolean gzipCompressed )&lt;/tt&gt;.
        * Added the ability to "suspend" encoding in the Output Stream so
        * you can turn on and off the encoding if you need to embed base64
        * data in an otherwise "normal" stream (like an XML file).&lt;/li&gt;
        * &lt;li&gt;v1.5 - Output stream pases on flush() command but doesn't do anything itself.
        * This helps when using GZIP streams.
        * Added the ability to GZip-compress objects before encoding them.&lt;/li&gt;
        * &lt;li&gt;v1.4 - Added helper methods to read/write files.&lt;/li&gt;
        * &lt;li&gt;v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.&lt;/li&gt;
        * &lt;li&gt;v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input stream
        * where last buffer being read, if not completely full, was not returned.&lt;/li&gt;
        * &lt;li&gt;v1.3.4 - Fixed when "improperly padded stream" error was thrown at the wrong time.&lt;/li&gt;
        * &lt;li&gt;v1.3.3 - Fixed I/O streams which were totally messed up.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;
        * I am placing this code in the Public Domain. Do with it as you will.
        * This software comes with no guarantees or warranties but with
        * plenty of well-wishing instead!
        * Please visit &lt;a href="http://iharder.net/base64"&gt;http://iharder.net/base64&lt;/a&gt;
        * periodically to check for updates or to contribute improvements.
        * &lt;/p&gt;
        *
        * @author Robert Harder
        * @author rob@iharder.net
        * @version 2.1
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>Base64</name>
        <block>{

            <comment type="block">/* ******** P U B L I C F I E L D S ******** */</comment>


            <comment type="javadoc">/** No options specified. Value is zero. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>NO_OPTIONS</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Specify encoding. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>ENCODE</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** Specify decoding. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>DECODE</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** Specify that data should be gzip-compressed. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>GZIP</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** Don't break lines when encoding (violates strict Base64 specification) */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>DONT_BREAK_LINES</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="block">/* ******** P R I V A T E F I E L D S ******** */</comment>


            <comment type="javadoc">/** Maximum line length (76) of Base64 output. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_LINE_LENGTH</name> =
                    <init>
                        <expr>76</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** The equals sign (=) as a byte. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                    </type>
                    <name>EQUALS_SIGN</name> =
                    <init>
                        <expr>(<name>byte</name>)'='
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** The new line character (\n) as a byte. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                    </type>
                    <name>NEW_LINE</name> =
                    <init>
                        <expr>(<name>byte</name>)'\n'
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** Preferred encoding. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>PREFERRED_ENCODING</name> =
                    <init>
                        <expr>"UTF-8"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/** The 64 valid Base64 values. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>ALPHABET</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>_NATIVE_ALPHABET</name> =
                    <init>
                        <comment type="block">/* May be something funny like EBCDIC */</comment>
                        <expr>
                            <block>{
                                <expr>(<name>byte</name>)'A'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'B'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'C'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'D'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'E'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'F'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'G'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'H'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'I'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'J'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'K'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'L'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'M'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'N'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'O'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'P'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'Q'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'R'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'S'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'T'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'U'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'V'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'W'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'X'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'Y'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'Z'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'a'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'b'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'c'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'d'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'e'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'f'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'g'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'h'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'i'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'j'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'k'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'l'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'m'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'n'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'o'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'p'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'q'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'r'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'s'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'t'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'u'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'v'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'w'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'x'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'y'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'z'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'0'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'1'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'2'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'3'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'4'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'5'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'6'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'7'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'8'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'9'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'+'
                                </expr>
                                ,
                                <expr>(<name>byte</name>)'/'
                                </expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Determine which ALPHABET to use. */</comment>
            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>byte</name>
                            <index>[]</index>
                        </type>
                        <name>__bytes</name>
                    </decl>
                    ;
                </decl_stmt>
                <try>try
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>__bytes</name>
                                = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".
                                <call>
                                    <name>getBytes</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>PREFERRED_ENCODING</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                    <comment type="line">// end try</comment>
                    <catch>catch (
                        <param>
                            <decl>
                                <type>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>UnsupportedEncodingException</name>
                                    </name>
                                </type>
                                <name>use</name>
                            </decl>
                        </param>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>__bytes</name>
                                    =
                                    <name>_NATIVE_ALPHABET</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Fall back to native encoding</comment>
                            }
                        </block>
                    </catch>
                </try>
                <comment type="line">// end catch</comment>
                <expr_stmt>
                    <expr>
                        <name>ALPHABET</name>
                        =
                        <name>__bytes</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>
            <comment type="line">// end static</comment>


            <comment type="javadoc">/**
                * Translates a Base64 value to either its 6-bit reconstruction value
                * or a negative number indicating some other meaning.
                **/
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>DECODABET</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>
                                    -9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 0 - 8</comment>
                                <expr>-5</expr>,<expr>-5</expr>,
                                <comment type="line">// Whitespace: Tab and Linefeed</comment>
                                <expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 11 - 12</comment>
                                <expr>-5</expr>,
                                <comment type="line">// Whitespace: Carriage Return</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>
                                    -9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>
                                    -9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 14 - 26</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 27 - 31</comment>
                                <expr>-5</expr>,
                                <comment type="line">// Whitespace: Space</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>
                                    -9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 33 - 42</comment>
                                <expr>62</expr>,
                                <comment type="line">// Plus sign at decimal 43</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 44 - 46</comment>
                                <expr>63</expr>,
                                <comment type="line">// Slash at decimal 47</comment>
                                <expr>52</expr>,<expr>53</expr>,<expr>54</expr>,<expr>55</expr>,<expr>56</expr>,<expr>
                                    57</expr>,<expr>58</expr>,<expr>59</expr>,<expr>60</expr>,<expr>61</expr>,
                                <comment type="line">// Numbers zero through nine</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 58 - 60</comment>
                                <expr>-1</expr>,
                                <comment type="line">// Equals sign at decimal 61</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,
                                <comment type="line">// Decimal 62 - 64</comment>
                                <expr>0</expr>,<expr>1</expr>,<expr>2</expr>,<expr>3</expr>,<expr>4</expr>,<expr>
                                    5</expr>,<expr>6</expr>,<expr>7</expr>,<expr>8</expr>,<expr>9</expr>,<expr>10</expr>,<expr>
                                    11</expr>,<expr>12</expr>,<expr>13</expr>,
                                <comment type="line">// Letters 'A' through 'N'</comment>
                                <expr>14</expr>,<expr>15</expr>,<expr>16</expr>,<expr>17</expr>,<expr>18</expr>,<expr>
                                    19</expr>,<expr>20</expr>,<expr>21</expr>,<expr>22</expr>,<expr>23</expr>,<expr>
                                    24</expr>,<expr>25</expr>,
                                <comment type="line">// Letters 'O' through 'Z'</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>
                                    -9</expr>,
                                <comment type="line">// Decimal 91 - 96</comment>
                                <expr>26</expr>,<expr>27</expr>,<expr>28</expr>,<expr>29</expr>,<expr>30</expr>,<expr>
                                    31</expr>,<expr>32</expr>,<expr>33</expr>,<expr>34</expr>,<expr>35</expr>,<expr>
                                    36</expr>,<expr>37</expr>,<expr>38</expr>,
                                <comment type="line">// Letters 'a' through 'm'</comment>
                                <expr>39</expr>,<expr>40</expr>,<expr>41</expr>,<expr>42</expr>,<expr>43</expr>,<expr>
                                    44</expr>,<expr>45</expr>,<expr>46</expr>,<expr>47</expr>,<expr>48</expr>,<expr>
                                    49</expr>,<expr>50</expr>,<expr>51</expr>,
                                <comment type="line">// Letters 'n' through 'z'</comment>
                                <expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>,<expr>-9</expr>
                                <comment type="line">// Decimal 123 - 126</comment>
                                <comment type="block">/*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 127 - 139
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 140 - 152
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 153 - 165
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 166 - 178
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 179 - 191
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 192 - 204
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 205 - 217
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 218 - 230
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 231 - 243
                                    -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9 // Decimal 244 - 255 */
                                </comment>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// I think I end up not using the BAD_ENCODING indicator.</comment>
            <comment type="line">//private final static byte BAD_ENCODING = -9; // Indicates error in encoding</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                    </type>
                    <name>WHITE_SPACE_ENC</name> =
                    <init>
                        <expr>-5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Indicates white space in encoding</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>byte</name>
                    </type>
                    <name>EQUALS_SIGN_ENC</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Indicates equals sign in encoding</comment>


            <comment type="javadoc">/** Defeats instantiation. */</comment>
            <constructor>
                <specifier>private</specifier>
                <name>Base64</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>


            <comment type="block">/* ******** E N C O D I N G M E T H O D S ******** */</comment>


            <comment type="javadoc">/**
                * Encodes up to the first three bytes of array &lt;var&gt;threeBytes&lt;/var&gt;
                * and returns a four-byte array in Base64 notation.
                * The actual number of significant bytes in your array is
                * given by &lt;var&gt;numSigBytes&lt;/var&gt;.
                * The array &lt;var&gt;threeBytes&lt;/var&gt; needs only be as big as
                * &lt;var&gt;numSigBytes&lt;/var&gt;.
                * Code can reuse a byte array by passing a four-byte array as &lt;var&gt;b4&lt;/var&gt;.
                *
                * @param b4 A reusable byte array to reduce array instantiation
                * @param threeBytes the array to convert
                * @param numSigBytes the number of significant bytes in your array
                * @return four byte array in Base64 notation.
                * @since 1.5.1
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode3to4</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>b4</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>threeBytes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numSigBytes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>encode3to4</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>threeBytes</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numSigBytes</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>b4</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>b4</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encode3to4</comment>


            <comment type="javadoc">/**
                * Encodes up to three bytes of the array &lt;var&gt;source&lt;/var&gt;
                * and writes the resulting four Base64 bytes to &lt;var&gt;destination&lt;/var&gt;.
                * The source and destination arrays can be manipulated
                * anywhere along their length by specifying
                * &lt;var&gt;srcOffset&lt;/var&gt; and &lt;var&gt;destOffset&lt;/var&gt;.
                * This method does not check to make sure your arrays
                * are large enough to accomodate &lt;var&gt;srcOffset&lt;/var&gt; + 3 for
                * the &lt;var&gt;source&lt;/var&gt; array or &lt;var&gt;destOffset&lt;/var&gt; + 4 for
                * the &lt;var&gt;destination&lt;/var&gt; array.
                * The actual number of significant bytes in your array is
                * given by &lt;var&gt;numSigBytes&lt;/var&gt;.
                *
                * @param source the array to convert
                * @param srcOffset the index where conversion begins
                * @param numSigBytes the number of significant bytes in your array
                * @param destination the array to hold the conversion
                * @param destOffset the index where output will be put
                * @return the &lt;var&gt;destination&lt;/var&gt; array
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode3to4</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>srcOffset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numSigBytes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>destination</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>destOffset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// 1 2 3</comment>
                    <comment type="line">// 01234567890123456789012345678901 Bit position</comment>
                    <comment type="line">// --------000000001111111122222222 Array position from threeBytes</comment>
                    <comment type="line">// --------| || || || | Six bit groups to index ALPHABET</comment>
                    <comment type="line">// &gt;&gt;18 &gt;&gt;12 &gt;&gt; 6 &gt;&gt; 0 Right shift necessary</comment>
                    <comment type="line">// 0x3f 0x3f 0x3f Additional AND</comment>

                    <comment type="line">// Create buffer with zero-padding if there are only one or two</comment>
                    <comment type="line">// significant bytes passed in the array.</comment>
                    <comment type="line">// We have to shift left 24 in order to flush out the 1's that appear</comment>
                    <comment type="line">// when Java treats a value as negative that is cast from a byte to an int.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>inBuff</name> =
                            <init>
                                <expr>( <name>numSigBytes</name> &gt; 0 ? ((
                                    <name>
                                        <name>source</name>
                                        <index>[
                                            <expr>
                                                <name>srcOffset</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &lt;&lt; 24) &gt;&gt;&gt; 8) : 0 )
                                    | ( <name>numSigBytes</name> &gt; 1 ? ((
                                    <name>
                                        <name>source</name>
                                        <index>[
                                            <expr>
                                                <name>srcOffset</name>
                                                + 1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &lt;&lt; 24) &gt;&gt;&gt; 16) : 0 )
                                    | ( <name>numSigBytes</name> &gt; 2 ? ((
                                    <name>
                                        <name>source</name>
                                        <index>[
                                            <expr>
                                                <name>srcOffset</name>
                                                + 2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &lt;&lt; 24) &gt;&gt;&gt; 24) : 0 )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <switch>switch
                        <condition>(
                            <expr>
                                <name>numSigBytes</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>3</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 18)
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 12) &amp; 0x3f
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 2
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 6) &amp; 0x3f
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 3
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name>       ) &amp; 0x3f
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>destination</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case <expr>2</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 18)
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 12) &amp; 0x3f
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 2
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 6) &amp; 0x3f
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 3
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>EQUALS_SIGN</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>destination</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case <expr>1</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 18)
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>ALPHABET</name>
                                            <index>[
                                                <expr>(<name>inBuff</name> &gt;&gt;&gt; 12) &amp; 0x3f
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 2
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>EQUALS_SIGN</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                    + 3
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>EQUALS_SIGN</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>destination</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <default>default:
                                <return>return
                                    <expr>
                                        <name>destination</name>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    <comment type="line">// end switch</comment>
                    }
                </block>
            </function>
            <comment type="line">// end encode3to4</comment>


            <comment type="javadoc">/**
                * Serializes an object and returns the Base64-encoded
                * version of that serialized object. If the object
                * cannot be serialized or there is another error,
                * the method will return &lt;tt&gt;null&lt;/tt&gt;.
                * The object is not GZip-compressed before being encoded.
                *
                * @param serializableObject The object to encode
                * @return The Base64-encoded object
                * @since 1.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>Serializable</name>
                                </name>
                            </type>
                            <name>serializableObject</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>encodeObject</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>serializableObject</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>NO_OPTIONS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encodeObject</comment>


            <comment type="javadoc">/**
                * Serializes an object and returns the Base64-encoded
                * version of that serialized object. If the object
                * cannot be serialized or there is another error,
                * the method will return &lt;tt&gt;null&lt;/tt&gt;.
                * &lt;p&gt;
                * Valid options:&lt;pre&gt;
                * GZIP: gzip-compresses object before encoding it.
                * DONT_BREAK_LINES: don't break lines at 76 characters
                * &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
                * &lt;/pre&gt;
                * &lt;p&gt;
                * Example: &lt;code&gt;encodeObject( myObj, Base64.GZIP )&lt;/code&gt; or
                * &lt;p&gt;
                * Example: &lt;code&gt;encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )&lt;/code&gt;
                *
                * @param serializableObject The object to encode
                * @param options Specified options
                * @return The Base64-encoded object
                * @see Base64#GZIP
                * @see Base64#DONT_BREAK_LINES
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>Serializable</name>
                                </name>
                            </type>
                            <name>serializableObject</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Streams</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>ByteArrayOutputStream</name>
                                </name>
                            </type>
                            <name>baos</name>  =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>OutputStream</name>
                                </name>
                            </type>
                            <name>b64os</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>ObjectOutputStream</name>
                                </name>
                            </type>
                            <name>oos</name>   =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>util</name>.<name>zip</name>.
                                    <name>GZIPOutputStream</name>
                                </name>
                            </type>
                            <name>gzos</name>  =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Isolate options</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>gzip</name>           =
                            <init>
                                <expr>(<name>options</name> &amp; <name>GZIP</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>dontBreakLines</name> =
                            <init>
                                <expr>(<name>options</name> &amp; <name>DONT_BREAK_LINES</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <try>try
                        <block>{
                            <comment type="line">// ObjectOutputStream -&gt; (GZIP) -&gt; Base64 -&gt;
                                ByteArrayOutputStream
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>baos</name>
                                    = new
                                    <call>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>ByteArrayOutputStream</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b64os</name>
                                    = new
                                    <call>
                                        <name><name>Base64</name>.
                                            <name>OutputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>baos</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ENCODE</name>
                                                    |
                                                    <name>dontBreakLines</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// GZip?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>gzip</name>
                                        ==
                                        <name>GZIP</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>gzos</name>
                                                = new
                                                <call>
                                                    <name><name>java</name>.<name>util</name>.<name>zip</name>.
                                                        <name>GZIPOutputStream</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>b64os</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>oos</name>
                                                = new
                                                <call>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>ObjectOutputStream</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>gzos</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// end if: gzip</comment>
                                <else>else
                                    <expr_stmt>
                                        <expr>
                                            <name>oos</name>
                                            = new
                                            <call>
                                                <name><name>java</name>.<name>io</name>.
                                                    <name>ObjectOutputStream</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>b64os</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>oos</name>.
                                            <name>writeObject</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>serializableObject</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>IOException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>e</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch</comment>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>oos</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>gzos</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>b64os</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>baos</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    <comment type="line">// end finally</comment>

                    <comment type="line">// Return value according to relevant encoding.</comment>
                    <try>try
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name>String</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>baos</name>.
                                                            <name>toByteArray</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>PREFERRED_ENCODING</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>UnsupportedEncodingException</name>
                                        </name>
                                    </type>
                                    <name>uue</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>String</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>baos</name>.
                                                                <name>toByteArray</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    <comment type="line">// end catch</comment>

                    }
                </block>
            </function>
            <comment type="line">// end encode</comment>


            <comment type="javadoc">/**
                * Encodes a byte array into Base64 notation.
                * Does not GZip-compress data.
                *
                * @param source The data to convert
                * @since 1.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>encodeBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>source</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>source</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>NO_OPTIONS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encodeBytes</comment>


            <comment type="javadoc">/**
                * Encodes a byte array into Base64 notation.
                * &lt;p&gt;
                * Valid options:&lt;pre&gt;
                * GZIP: gzip-compresses object before encoding it.
                * DONT_BREAK_LINES: don't break lines at 76 characters
                * &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
                * &lt;/pre&gt;
                * &lt;p&gt;
                * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP )&lt;/code&gt; or
                * &lt;p&gt;
                * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )&lt;/code&gt;
                *
                *
                * @param source The data to convert
                * @param options Specified options
                * @see Base64#GZIP
                * @see Base64#DONT_BREAK_LINES
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>encodeBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>source</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>source</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>options</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encodeBytes</comment>


            <comment type="javadoc">/**
                * Encodes a byte array into Base64 notation.
                * Does not GZip-compress data.
                *
                * @param source The data to convert
                * @param off Offset in array where conversion should begin
                * @param len Length of data to convert
                * @since 1.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>encodeBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>source</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>off</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>NO_OPTIONS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encodeBytes</comment>


            <comment type="javadoc">/**
                * Encodes a byte array into Base64 notation.
                * &lt;p&gt;
                * Valid options:&lt;pre&gt;
                * GZIP: gzip-compresses object before encoding it.
                * DONT_BREAK_LINES: don't break lines at 76 characters
                * &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
                * &lt;/pre&gt;
                * &lt;p&gt;
                * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP )&lt;/code&gt; or
                * &lt;p&gt;
                * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )&lt;/code&gt;
                *
                *
                * @param source The data to convert
                * @param off Offset in array where conversion should begin
                * @param len Length of data to convert
                * @param options Specified options
                * @see Base64#GZIP
                * @see Base64#DONT_BREAK_LINES
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>options</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Isolate options</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>dontBreakLines</name> =
                            <init>
                                <expr>( <name>options</name> &amp; <name>DONT_BREAK_LINES</name> )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>gzip</name>           =
                            <init>
                                <expr>( <name>options</name> &amp; <name>GZIP</name>   )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Compress?</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>gzip</name>
                                ==
                                <name>GZIP</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name><name>java</name>.<name>io</name>.
                                                <name>ByteArrayOutputStream</name>
                                            </name>
                                        </type>
                                        <name>baos</name>  =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name><name>java</name>.<name>util</name>.<name>zip</name>.
                                                <name>GZIPOutputStream</name>
                                            </name>
                                        </type>
                                        <name>gzos</name>  =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name><name>Base64</name>.
                                                <name>OutputStream</name>
                                            </name>
                                        </type>
                                        <name>b64os</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>


                                <try>try
                                    <block>{
                                        <comment type="line">// GZip -&gt; Base64 -&gt; ByteArray</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>baos</name>
                                                = new
                                                <call>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>ByteArrayOutputStream</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>b64os</name>
                                                = new
                                                <call>
                                                    <name><name>Base64</name>.
                                                        <name>OutputStream</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>baos</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>ENCODE</name>
                                                                |
                                                                <name>dontBreakLines</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>gzos</name>
                                                = new
                                                <call>
                                                    <name><name>java</name>.<name>util</name>.<name>zip</name>.
                                                        <name>GZIPOutputStream</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>b64os</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>gzos</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>source</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>off</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>len</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>gzos</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <comment type="line">// end try</comment>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>IOException</name>
                                                    </name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>printStackTrace</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </catch>
                                    <comment type="line">// end catch</comment>
                                    <finally>finally
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>gzos</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>Exception</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{}</block>
                                                </catch>
                                            </try>
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>b64os</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>Exception</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{}</block>
                                                </catch>
                                            </try>
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>baos</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>Exception</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{}</block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                <comment type="line">// end finally</comment>

                                <comment type="line">// Return value according to relevant encoding.</comment>
                                <try>try
                                    <block>{
                                        <return>return
                                            <expr>new
                                                <call>
                                                    <name>String</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>baos</name>.
                                                                        <name>toByteArray</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>PREFERRED_ENCODING</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <comment type="line">// end try</comment>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>UnsupportedEncodingException</name>
                                                    </name>
                                                </type>
                                                <name>uue</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <call>
                                                        <name>String</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>baos</name>.
                                                                            <name>toByteArray</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                <comment type="line">// end catch</comment>
                                }
                            </block>
                        </then>
                        <comment type="line">// end if: compress</comment>

                        <comment type="line">// Else, don't compress. Better not to use streams at all then.</comment>
                        <else>else
                            <block>{
                                <comment type="line">// Convert option to boolean in way that code likes it.</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                        </type>
                                        <name>breakLines</name> =
                                        <init>
                                            <expr>
                                                <name>dontBreakLines</name>
                                                == 0
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>len43</name>   =
                                        <init>
                                            <expr>
                                                <name>len</name>
                                                * 4 / 3
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </type>
                                        <name>outBuff</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>byte</name>
                                                    <index>[
                                                        <expr>( <name>len43</name> )
                                                            <comment type="line">// Main 4:3</comment>
                                                            + ( (<name>len</name> % 3) &gt; 0 ? 4 : 0 )
                                                            <comment type="line">// Account for padding</comment>
                                                            + (<name>breakLines</name> ? ( <name>len43</name> / <name>
                                                                MAX_LINE_LENGTH
                                                            </name> ) : 0)
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// New lines</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>d</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>len2</name> =
                                        <init>
                                            <expr>
                                                <name>len</name>
                                                - 2
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>lineLength</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for( <init>;</init>
                                    <condition>
                                        <expr>
                                            <name>d</name>
                                            &lt;
                                            <name>len2</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>d</name>+=3
                                        </expr>
                                        ,
                                        <expr><name>e</name>+=4
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>encode3to4</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>source</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr><name>d</name>+
                                                                <name>off</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>3</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>outBuff</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>lineLength</name>
                                                += 4
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>breakLines</name>
                                                    &amp;&amp; <name>lineLength</name> ==
                                                    <name>MAX_LINE_LENGTH</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>outBuff</name>
                                                                <index>[
                                                                    <expr><name>e</name>+4
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <name>NEW_LINE</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr><name>e</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lineLength</name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <comment type="line">// end if: end of line</comment>
                                        }
                                    </block>
                                </for>
                                <comment type="line">// en dfor: each piece of array</comment>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>d</name>
                                            &lt;
                                            <name>len</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>encode3to4</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>source</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr><name>d</name>+
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                    -
                                                                    <name>d</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>outBuff</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>e</name>
                                                    += 4
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// end if: some padding needed</comment>


                                <comment type="line">// Return value according to relevant encoding.</comment>
                                <try>try
                                    <block>{
                                        <return>return
                                            <expr>new
                                                <call>
                                                    <name>String</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>outBuff</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>PREFERRED_ENCODING</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <comment type="line">// end try</comment>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>UnsupportedEncodingException</name>
                                                    </name>
                                                </type>
                                                <name>uue</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <call>
                                                        <name>String</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>outBuff</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                <comment type="line">// end catch</comment>

                                }
                            </block>
                        </else>
                    </if>
                    <comment type="line">// end else: don't compress</comment>

                    }
                </block>
            </function>
            <comment type="line">// end encodeBytes</comment>


            <comment type="block">/* ******** D E C O D I N G M E T H O D S ******** */</comment>


            <comment type="javadoc">/**
                * Decodes four bytes from array &lt;var&gt;source&lt;/var&gt;
                * and writes the resulting bytes (up to three of them)
                * to &lt;var&gt;destination&lt;/var&gt;.
                * The source and destination arrays can be manipulated
                * anywhere along their length by specifying
                * &lt;var&gt;srcOffset&lt;/var&gt; and &lt;var&gt;destOffset&lt;/var&gt;.
                * This method does not check to make sure your arrays
                * are large enough to accomodate &lt;var&gt;srcOffset&lt;/var&gt; + 4 for
                * the &lt;var&gt;source&lt;/var&gt; array or &lt;var&gt;destOffset&lt;/var&gt; + 3 for
                * the &lt;var&gt;destination&lt;/var&gt; array.
                * This method returns the actual number of bytes that
                * were converted from the Base64 encoding.
                *
                *
                * @param source the array to convert
                * @param srcOffset the index where conversion begins
                * @param destination the array to hold the conversion
                * @param destOffset the index where output will be put
                * @return the number of decoded bytes converted
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>decode4to3</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>srcOffset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>destination</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>destOffset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Example: Dk==</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>source</name>
                                    <index>[
                                        <expr>
                                            <name>srcOffset</name>
                                            + 2
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                ==
                                <name>EQUALS_SIGN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Two ways to do the same thing. Don't know which way I like
                                    best.
                                </comment>
                                <comment type="line">//int outBuff = ( ( DECODABET[ source[ srcOffset ] ] &lt;&lt; 24 )
                                    &gt;&gt;&gt; 6 )
                                </comment>
                                <comment type="line">// | ( ( DECODABET[ source[ srcOffset + 1] ] &lt;&lt; 24 ) &gt;&gt;&gt;
                                    12 );
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>outBuff</name> =
                                        <init>
                                            <expr>( (
                                                <name>
                                                    <name>DECODABET</name>
                                                    <index>[
                                                        <expr>
                                                            <name>
                                                                <name>source</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>srcOffset</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                &amp; 0xFF ) &lt;&lt; 18 )
                                                | ( (
                                                <name>
                                                    <name>DECODABET</name>
                                                    <index>[
                                                        <expr>
                                                            <name>
                                                                <name>source</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>srcOffset</name>
                                                                        + 1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                &amp; 0xFF ) &lt;&lt; 12 )
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>destination</name>
                                            <index>[
                                                <expr>
                                                    <name>destOffset</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <call>(<name>byte</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>outBuff</name>
                                                        &gt;&gt;&gt; 16
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>1</expr>;
                                </return>
                                }
                            </block>
                        </then>

                        <comment type="line">// Example: DkL=</comment>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>source</name>
                                            <index>[
                                                <expr>
                                                    <name>srcOffset</name>
                                                    + 3
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>EQUALS_SIGN</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Two ways to do the same thing. Don't know which way I
                                            like best.
                                        </comment>
                                        <comment type="line">//int outBuff = ( ( DECODABET[ source[ srcOffset ] ] &lt;&lt;
                                            24 ) &gt;&gt;&gt; 6 )
                                        </comment>
                                        <comment type="line">// | ( ( DECODABET[ source[ srcOffset + 1 ] ] &lt;&lt; 24 )
                                            &gt;&gt;&gt; 12 )
                                        </comment>
                                        <comment type="line">// | ( ( DECODABET[ source[ srcOffset + 2 ] ] &lt;&lt; 24 )
                                            &gt;&gt;&gt; 18 );
                                        </comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>outBuff</name> =
                                                <init>
                                                    <expr>( (
                                                        <name>
                                                            <name>DECODABET</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>
                                                                        <name>source</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>srcOffset</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        &amp; 0xFF ) &lt;&lt; 18 )
                                                        | ( (
                                                        <name>
                                                            <name>DECODABET</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>
                                                                        <name>source</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>srcOffset</name>
                                                                                + 1
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        &amp; 0xFF ) &lt;&lt; 12 )
                                                        | ( (
                                                        <name>
                                                            <name>DECODABET</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>
                                                                        <name>source</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>srcOffset</name>
                                                                                + 2
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        &amp; 0xFF ) &lt;&lt; 6 )
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>destination</name>
                                                    <index>[
                                                        <expr>
                                                            <name>destOffset</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>(<name>byte</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>outBuff</name>
                                                                &gt;&gt;&gt; 16
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>destination</name>
                                                    <index>[
                                                        <expr>
                                                            <name>destOffset</name>
                                                            + 1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>(<name>byte</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>outBuff</name>
                                                                &gt;&gt;&gt; 8
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return <expr>2</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>

                                <comment type="line">// Example: DkLE</comment>
                                <else>else
                                    <block>{
                                        <try>try
                                            <block>{
                                                <comment type="line">// Two ways to do the same thing. Don't know which
                                                    way I like best.
                                                </comment>
                                                <comment type="line">//int outBuff = ( ( DECODABET[ source[ srcOffset ]
                                                    ] &lt;&lt; 24 ) &gt;&gt;&gt; 6 )
                                                </comment>
                                                <comment type="line">// | ( ( DECODABET[ source[ srcOffset + 1 ] ] &lt;&lt;
                                                    24 ) &gt;&gt;&gt; 12 )
                                                </comment>
                                                <comment type="line">// | ( ( DECODABET[ source[ srcOffset + 2 ] ] &lt;&lt;
                                                    24 ) &gt;&gt;&gt; 18 )
                                                </comment>
                                                <comment type="line">// | ( ( DECODABET[ source[ srcOffset + 3 ] ] &lt;&lt;
                                                    24 ) &gt;&gt;&gt; 24 );
                                                </comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>outBuff</name> =
                                                        <init>
                                                            <expr>( (
                                                                <name>
                                                                    <name>DECODABET</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>srcOffset</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &amp; 0xFF ) &lt;&lt; 18 )
                                                                | ( (
                                                                <name>
                                                                    <name>DECODABET</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>srcOffset</name>
                                                                                        + 1
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &amp; 0xFF ) &lt;&lt; 12 )
                                                                | ( (
                                                                <name>
                                                                    <name>DECODABET</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>srcOffset</name>
                                                                                        + 2
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &amp; 0xFF ) &lt;&lt; 6)
                                                                | ( (
                                                                <name>
                                                                    <name>DECODABET</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>srcOffset</name>
                                                                                        + 3
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &amp; 0xFF ) )
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>


                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>destination</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>destOffset</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>outBuff</name>
                                                                        &gt;&gt; 16
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>destination</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>destOffset</name>
                                                                    + 1
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>outBuff</name>
                                                                        &gt;&gt; 8
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>destination</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>destOffset</name>
                                                                    + 2
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>outBuff</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                <return>return <expr>3</expr>;
                                                </return>
                                                }
                                            </block>
                                            <catch>catch(
                                                <param>
                                                    <decl>
                                                        <type>
                                                            <name>Exception</name>
                                                        </type>
                                                        <name>e</name>
                                                    </decl>
                                                </param>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>""+
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>srcOffset</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            + ": " + (
                                                                            <name>
                                                                                <name>DECODABET</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>
                                                                                            <name>source</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>srcOffset
                                                                                                    </name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            )
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>""+
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr><name>srcOffset</name>+1
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            + ": " + (
                                                                            <name>
                                                                                <name>DECODABET</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>
                                                                                            <name>source</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>srcOffset
                                                                                                    </name>
                                                                                                    + 1
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            )
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>""+
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr><name>srcOffset</name>+2
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            + ": " + (
                                                                            <name>
                                                                                <name>DECODABET</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>
                                                                                            <name>source</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>srcOffset
                                                                                                    </name>
                                                                                                    + 2
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            )
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>""+
                                                                            <name>
                                                                                <name>source</name>
                                                                                <index>[
                                                                                    <expr><name>srcOffset</name>+3
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            + ": " + (
                                                                            <name>
                                                                                <name>DECODABET</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>
                                                                                            <name>source</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>srcOffset
                                                                                                    </name>
                                                                                                    + 3
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            )
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return <expr>-1</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </catch>
                                        </try>
                                        <comment type="line">//e nd catch</comment>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// end decodeToBytes</comment>


            <comment type="javadoc">/**
                * Very low-level access to decoding ASCII characters in
                * the form of a byte array. Does not support automatically
                * gunzipping or any other "fancy" features.
                *
                * @param source The Base64 encoded data
                * @param off The offset of where to begin decoding
                * @param len The length of characters to decode
                * @return decoded data
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>decode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len34</name>   =
                            <init>
                                <expr>
                                    <name>len</name>
                                    * 3 / 4
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>outBuff</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>len34</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Upper limit on size of output</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>outBuffPosn</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>b4</name>        =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[<expr>4</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b4Posn</name>    =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>         =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>sbiCrop</name>   =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>sbiDecode</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <expr>
                                <name>i</name>
                                =
                                <name>off</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt; <name>off</name>+
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>sbiCrop</name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>source</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    &amp; 0x7f
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Only the low seven bits</comment>
                            <expr_stmt>
                                <expr>
                                    <name>sbiDecode</name>
                                    =
                                    <name>
                                        <name>DECODABET</name>
                                        <index>[
                                            <expr>
                                                <name>sbiCrop</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>sbiDecode</name>
                                        &gt;=
                                        <name>WHITE_SPACE_ENC</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <comment type="line">// White space, Equals sign or better</comment>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>sbiDecode</name>
                                                    &gt;=
                                                    <name>EQUALS_SIGN_ENC</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>b4</name>
                                                                <index>[
                                                                    <expr><name>b4Posn</name>++
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <name>sbiCrop</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>b4Posn</name>
                                                                &gt; 3
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>outBuffPosn</name>
                                                                        +=
                                                                        <call>
                                                                            <name>decode4to3</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b4</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>outBuff</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>outBuffPosn</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>b4Posn</name>
                                                                        = 0
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>

                                                                <comment type="line">// If that was the equals sign,
                                                                    break out of 'for' loop
                                                                </comment>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>sbiCrop</name>
                                                                            ==
                                                                            <name>EQUALS_SIGN</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <break>break;</break>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <comment type="line">// end if: quartet built</comment>

                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <comment type="line">// end if: equals sign or better</comment>

                                        }
                                    </block>
                                </then>
                                <comment type="line">// end if: white space, equals sign or better</comment>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>err</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Bad Base64 input character at " + <name>i</name> + ":
                                                                " +
                                                                <name>
                                                                    <name>source</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                + "(decimal)"
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                            <comment type="line">// end else:</comment>
                            }
                        </block>
                    </for>
                    <comment type="line">// each input character</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>outBuffPosn</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>outBuff</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>out</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outBuffPosn</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>out</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end decode</comment>


            <comment type="javadoc">/**
                * Decodes data from Base64 notation, automatically
                * detecting gzip-compressed data and decompressing it.
                *
                * @param s the string to decode
                * @return the decoded data
                * @since 1.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>decode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>bytes</name>
                                    =
                                    <call>
                                        <name><name>s</name>.
                                            <name>getBytes</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>PREFERRED_ENCODING</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>UnsupportedEncodingException</name>
                                        </name>
                                    </type>
                                    <name>uee</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>bytes</name>
                                        =
                                        <call>
                                            <name><name>s</name>.
                                                <name>getBytes</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    <comment type="line">// end catch</comment>
                    <comment type="line">//&lt;/change&gt;</comment>

                    <comment type="line">// Decode</comment>
                    <expr_stmt>
                        <expr>
                            <name>bytes</name>
                            =
                            <call>
                                <name>decode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bytes</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>bytes</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>


                    <comment type="line">// Check to see if it's gzip-compressed</comment>
                    <comment type="line">// GZIP Magic Two-Byte Number: 0x8b1f (35615)</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>bytes</name>
                                != <name>null</name> &amp;&amp;
                                <name><name>bytes</name>.
                                    <name>length</name>
                                </name>
                                &gt;= 4
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>head</name> =
                                        <init>
                                            <expr>((<name>int</name>)
                                                <name>
                                                    <name>bytes</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                &amp; 0xff) | ((
                                                <name>
                                                    <name>bytes</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                                &lt;&lt; 8) &amp; 0xff00)
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>
                                                GZIPInputStream</name>.
                                                <name>GZIP_MAGIC</name>
                                            </name>
                                            ==
                                            <name>head</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name><name>java</name>.<name>io</name>.
                                                            <name>ByteArrayInputStream</name>
                                                        </name>
                                                    </type>
                                                    <name>bais</name> =
                                                    <init>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name><name>java</name>.<name>util</name>.<name>zip</name>.
                                                            <name>GZIPInputStream</name>
                                                        </name>
                                                    </type>
                                                    <name>gzis</name> =
                                                    <init>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name><name>java</name>.<name>io</name>.
                                                            <name>ByteArrayOutputStream</name>
                                                        </name>
                                                    </type>
                                                    <name>baos</name> =
                                                    <init>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>byte</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>buffer</name> =
                                                    <init>
                                                        <expr>new
                                                            <name>
                                                                <name>byte</name>
                                                                <index>[<expr>2048</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>length</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>

                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>baos</name>
                                                            = new
                                                            <call>
                                                                <name><name>java</name>.<name>io</name>.
                                                                    <name>ByteArrayOutputStream</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>bais</name>
                                                            = new
                                                            <call>
                                                                <name><name>java</name>.<name>io</name>.
                                                                    <name>ByteArrayInputStream</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>bytes</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>gzis</name>
                                                            = new
                                                            <call>
                                                                <name><name>java</name>.<name>util</name>.<name>
                                                                    zip</name>.
                                                                    <name>GZIPInputStream</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>bais</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <while>while
                                                        <condition>(
                                                            <expr>( <name>length</name> =
                                                                <call>
                                                                    <name><name>gzis</name>.
                                                                        <name>read</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>buffer</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ) &gt;= 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>baos</name>.
                                                                            <name>write</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>buffer</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>0</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>length</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </while>
                                                    <comment type="line">// end while: reading input</comment>

                                                    <comment type="line">// No error? Get new bytes.</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>bytes</name>
                                                            =
                                                            <call>
                                                                <name><name>baos</name>.
                                                                    <name>toByteArray</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    }
                                                </block>
                                                <comment type="line">// end try</comment>
                                                <catch>catch(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name><name>java</name>.<name>io</name>.
                                                                    <name>IOException</name>
                                                                </name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// Just return originally-decoded bytes
                                                        </comment>
                                                        }
                                                    </block>
                                                </catch>
                                                <comment type="line">// end catch</comment>
                                                <finally>finally
                                                    <block>{
                                                        <try>try
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>baos</name>.
                                                                                <name>close</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                            <catch>catch(
                                                                <param>
                                                                    <decl>
                                                                        <type>
                                                                            <name>Exception</name>
                                                                        </type>
                                                                        <name>e</name>
                                                                    </decl>
                                                                </param>
                                                                )
                                                                <block>{}</block>
                                                            </catch>
                                                        </try>
                                                        <try>try
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>gzis</name>.
                                                                                <name>close</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                            <catch>catch(
                                                                <param>
                                                                    <decl>
                                                                        <type>
                                                                            <name>Exception</name>
                                                                        </type>
                                                                        <name>e</name>
                                                                    </decl>
                                                                </param>
                                                                )
                                                                <block>{}</block>
                                                            </catch>
                                                        </try>
                                                        <try>try
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>bais</name>.
                                                                                <name>close</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                            <catch>catch(
                                                                <param>
                                                                    <decl>
                                                                        <type>
                                                                            <name>Exception</name>
                                                                        </type>
                                                                        <name>e</name>
                                                                    </decl>
                                                                </param>
                                                                )
                                                                <block>{}</block>
                                                            </catch>
                                                        </try>
                                                        }
                                                    </block>
                                                </finally>
                                            </try>
                                            <comment type="line">// end finally</comment>

                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// end if: gzipped</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// end if: bytes.length &gt;= 2</comment>

                    <return>return
                        <expr>
                            <name>bytes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end decode</comment>


            <comment type="javadoc">/**
                * Attempts to decode Base64 data and deserialize a Java
                * Object within. Returns &lt;tt&gt;null&lt;/tt&gt; if there was an error.
                *
                * @param encodedObject The Base64 data to decode
                * @return The decoded and deserialized object
                * @since 1.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>decodeToObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encodedObject</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Decode and gunzip if necessary</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>objBytes</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>decode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>encodedObject</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>ByteArrayInputStream</name>
                                </name>
                            </type>
                            <name>bais</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>ObjectInputStream</name>
                                </name>
                            </type>
                            <name>ois</name>  =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>bais</name>
                                    = new
                                    <call>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>ByteArrayInputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>objBytes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>ois</name>
                                    = new
                                    <call>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>ObjectInputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bais</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>obj</name>
                                    =
                                    <call>
                                        <name><name>ois</name>.
                                            <name>readObject</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>IOException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>e</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>obj</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>lang</name>.
                                            <name>ClassNotFoundException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>e</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>obj</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch</comment>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>bais</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>ois</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    <comment type="line">// end finally</comment>

                    <return>return
                        <expr>
                            <name>obj</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end decodeObject</comment>


            <comment type="javadoc">/**
                * Convenience method for encoding data to a file.
                *
                * @param dataToEncode byte array of data to encode in base64 form
                * @param filename Filename for saving encoded data
                * @return &lt;tt&gt;true&lt;/tt&gt; if successful, &lt;tt&gt;false&lt;/tt&gt; otherwise
                *
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>encodeToFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>dataToEncode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>success</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Base64</name>.
                                    <name>OutputStream</name>
                                </name>
                            </type>
                            <name>bos</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>bos</name>
                                    = new
                                    <call>
                                        <name><name>Base64</name>.
                                            <name>OutputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name><name>java</name>.<name>io</name>.
                                                            <name>FileOutputStream</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>filename</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Base64</name>.
                                                        <name>ENCODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>bos</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>dataToEncode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>success</name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>IOException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{

                                <expr_stmt>
                                    <expr>
                                        <name>success</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch: IOException</comment>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>bos</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    <comment type="line">// end finally</comment>

                    <return>return
                        <expr>
                            <name>success</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encodeToFile</comment>


            <comment type="javadoc">/**
                * Convenience method for decoding data to a file.
                *
                * @param dataToDecode Base64-encoded data as a string
                * @param filename Filename for saving decoded data
                * @return &lt;tt&gt;true&lt;/tt&gt; if successful, &lt;tt&gt;false&lt;/tt&gt; otherwise
                *
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>decodeToFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>dataToDecode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>success</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Base64</name>.
                                    <name>OutputStream</name>
                                </name>
                            </type>
                            <name>bos</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>bos</name>
                                    = new
                                    <call>
                                        <name><name>Base64</name>.
                                            <name>OutputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name><name>java</name>.<name>io</name>.
                                                            <name>FileOutputStream</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>filename</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Base64</name>.
                                                        <name>DECODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>bos</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>dataToDecode</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>PREFERRED_ENCODING</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>success</name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>IOException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>success</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch: IOException</comment>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>bos</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    <comment type="line">// end finally</comment>

                    <return>return
                        <expr>
                            <name>success</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end decodeToFile</comment>


            <comment type="javadoc">/**
                * Convenience method for reading a base64-encoded
                * file and decoding it.
                *
                * @param filename Filename for reading encoded data
                * @return decoded byte array or null if unsuccessful
                *
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>decodeFromFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>decodedData</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Base64</name>.
                                    <name>InputStream</name>
                                </name>
                            </type>
                            <name>bis</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// Set up some useful variables</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>File</name>
                                        </name>
                                    </type>
                                    <name>file</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name><name>java</name>.<name>io</name>.
                                                    <name>File</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>filename</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>buffer</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name>   =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>numBytes</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="line">// Check for size of file</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>file</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt;
                                        <name><name>Integer</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>err</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"File is too big for this convenience method (" +
                                                                <call>
                                                                    <name><name>file</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                + " bytes)."
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// end if: file too big for int index</comment>
                            <expr_stmt>
                                <expr>
                                    <name>buffer</name>
                                    = new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>(<name>int</name>)
                                                <call>
                                                    <name><name>file</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Open a stream</comment>
                            <expr_stmt>
                                <expr>
                                    <name>bis</name>
                                    = new
                                    <call>
                                        <name><name>Base64</name>.
                                            <name>InputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name><name>java</name>.<name>io</name>.
                                                            <name>BufferedInputStream</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <call>
                                                                        <name><name>java</name>.<name>io</name>.
                                                                            <name>FileInputStream</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>file</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Base64</name>.
                                                        <name>DECODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Read until done</comment>
                            <while>while
                                <condition>(
                                    <expr>( <name>numBytes</name> =
                                        <call>
                                            <name><name>bis</name>.
                                                <name>read</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>buffer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>length</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>4096</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ) &gt;= 0
                                    </expr>
                                    )
                                </condition>
                                <expr_stmt>
                                    <expr>
                                        <name>length</name>
                                        +=
                                        <name>numBytes</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                            </while>

                            <comment type="line">// Save in a variable to return</comment>
                            <expr_stmt>
                                <expr>
                                    <name>decodedData</name>
                                    = new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>length</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>buffer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>decodedData</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>IOException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>err</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Error decoding from file " +
                                                        <name>filename</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch: IOException</comment>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>bis</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    <comment type="line">// end finally</comment>

                    <return>return
                        <expr>
                            <name>decodedData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end decodeFromFile</comment>


            <comment type="javadoc">/**
                * Convenience method for reading a binary file
                * and base64-encoding it.
                *
                * @param filename Filename for reading binary data
                * @return base64-encoded string or null if unsuccessful
                *
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encodeFromFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encodedData</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Base64</name>.
                                    <name>InputStream</name>
                                </name>
                            </type>
                            <name>bis</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// Set up some useful variables</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>File</name>
                                        </name>
                                    </type>
                                    <name>file</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name><name>java</name>.<name>io</name>.
                                                    <name>File</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>filename</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>buffer</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>byte</name>
                                                <index>[
                                                    <expr>
                                                        <call>(<name>int</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>file</name>.
                                                                                <name>length</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        * 1.4
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name>   =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>numBytes</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="line">// Open a stream</comment>
                            <expr_stmt>
                                <expr>
                                    <name>bis</name>
                                    = new
                                    <call>
                                        <name><name>Base64</name>.
                                            <name>InputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name><name>java</name>.<name>io</name>.
                                                            <name>BufferedInputStream</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <call>
                                                                        <name><name>java</name>.<name>io</name>.
                                                                            <name>FileInputStream</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>file</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Base64</name>.
                                                        <name>ENCODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Read until done</comment>
                            <while>while
                                <condition>(
                                    <expr>( <name>numBytes</name> =
                                        <call>
                                            <name><name>bis</name>.
                                                <name>read</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>buffer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>length</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>4096</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ) &gt;= 0
                                    </expr>
                                    )
                                </condition>
                                <expr_stmt>
                                    <expr>
                                        <name>length</name>
                                        +=
                                        <name>numBytes</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                            </while>

                            <comment type="line">// Save in a variable to return</comment>
                            <expr_stmt>
                                <expr>
                                    <name>encodedData</name>
                                    = new
                                    <call>
                                        <name>String</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>buffer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Base64</name>.
                                                        <name>PREFERRED_ENCODING</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                        <comment type="line">// end try</comment>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>IOException</name>
                                        </name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>err</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Error encoding from file " +
                                                        <name>filename</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <comment type="line">// end catch: IOException</comment>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>bis</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{}</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    <comment type="line">// end finally</comment>

                    <return>return
                        <expr>
                            <name>encodedData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// end encodeFromFile</comment>


            <comment type="block">/* ******** I N N E R C L A S S I N P U T S T R E A M ******** */</comment>


            <comment type="javadoc">/**
                * A {@link Base64.InputStream} will read data from another
                * &lt;tt&gt;java.io.InputStream&lt;/tt&gt;, given in the constructor,
                * and encode/decode to/from Base64 notation on the fly.
                *
                * @see Base64
                * @since 1.3
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class <name>InputStream</name>
                <super>
                    <extends>extends <name>java</name>.<name>io</name>.
                        <name>FilterInputStream</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>encode</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Encoding or decoding</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>position</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Current position in the buffer</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>buffer</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Small buffer holding converted data</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>bufferLength</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Length of buffer (3 or 4)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>numSigBytes</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Number of meaningful bytes in the buffer</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>lineLength</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>breakLines</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Break lines at less than 80 characters</comment>


                    <comment type="javadoc">/**
                        * Constructs a {@link Base64.InputStream} in DECODE mode.
                        *
                        * @param in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.
                        * @since 1.3
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>InputStream</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>InputStream</name>
                                        </name>
                                    </type>
                                    <name>in</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>this</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>in</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>DECODE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// end constructor</comment>


                    <comment type="javadoc">/**
                        * Constructs a {@link Base64.InputStream} in
                        * either ENCODE or DECODE mode.
                        * &lt;p&gt;
                        * Valid options:&lt;pre&gt;
                        * ENCODE or DECODE: Encode or Decode as data is read.
                        * DONT_BREAK_LINES: don't break lines at 76 characters
                        * (only meaningful when encoding)
                        * &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
                        * &lt;/pre&gt;
                        * &lt;p&gt;
                        * Example: &lt;code&gt;new Base64.InputStream( in, Base64.DECODE )&lt;/code&gt;
                        *
                        *
                        * @param in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.
                        * @param options Specified options
                        * @see Base64#ENCODE
                        * @see Base64#DECODE
                        * @see Base64#DONT_BREAK_LINES
                        * @since 2.0
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>InputStream</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>InputStream</name>
                                        </name>
                                    </type>
                                    <name>in</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>in</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>breakLines</name>
                                    </name>
                                    = (<name>options</name> &amp; <name>DONT_BREAK_LINES</name>) !=
                                    <name>DONT_BREAK_LINES</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>encode</name>
                                    </name>
                                    = (<name>options</name> &amp; <name>ENCODE</name>) ==
                                    <name>ENCODE</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>bufferLength</name>
                                    </name>
                                    = <name>encode</name> ? 4 : 3
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>buffer</name>
                                    </name>
                                    = new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>bufferLength</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>position</name>
                                    </name>
                                    = -1
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>lineLength</name>
                                    </name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// end constructor</comment>

                    <comment type="javadoc">/**
                        * Reads enough of the input stream to convert
                        * to/from Base64 and returns the next byte.
                        *
                        * @return next byte
                        * @since 1.3
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>read</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <comment type="line">// Do we need to get data?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>position</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>encode</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>byte</name>
                                                                <index>[]</index>
                                                            </type>
                                                            <name>b3</name> =
                                                            <init>
                                                                <expr>new
                                                                    <name>
                                                                        <name>byte</name>
                                                                        <index>[<expr>3</expr>]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>numBinaryBytes</name> =
                                                            <init>
                                                                <expr>0</expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <for>for(
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt; 3
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr><name>i</name>++
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <try>try
                                                                <block>{
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>b</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>in</name>.
                                                                                            <name>read</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>

                                                                    <comment type="line">// If end of stream, b is -1.
                                                                    </comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>b</name>
                                                                                &gt;= 0
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>
                                                                                            <name>b3</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                        = (<name>byte</name>)
                                                                                        <name>b</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr><name>numBinaryBytes</name>++
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <comment type="line">// end if: not end of stream
                                                                    </comment>

                                                                    }
                                                                </block>
                                                                <comment type="line">// end try: read</comment>
                                                                <catch>catch(
                                                                    <param>
                                                                        <decl>
                                                                            <type>
                                                                                <name><name>java</name>.<name>io</name>.
                                                                                    <name>IOException</name>
                                                                                </name>
                                                                            </type>
                                                                            <name>e</name>
                                                                        </decl>
                                                                    </param>
                                                                    )
                                                                    <block>{
                                                                        <comment type="line">// Only a problem if we got
                                                                            no data at all.
                                                                        </comment>
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                    == 0
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <throw>throw
                                                                                    <expr>
                                                                                        <name>e</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </throw>
                                                                            </then>
                                                                        </if>

                                                                        }
                                                                    </block>
                                                                </catch>
                                                            </try>
                                                            <comment type="line">// end catch</comment>
                                                            }
                                                        </block>
                                                    </for>
                                                    <comment type="line">// end for: each needed input byte</comment>

                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>numBinaryBytes</name>
                                                                &gt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>encode3to4</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b3</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>numBinaryBytes</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>buffer</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>position</name>
                                                                        = 0
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>numSigBytes</name>
                                                                        = 4
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <comment type="line">// end if: got data</comment>
                                                        <else>else
                                                            <block>{
                                                                <return>return <expr>-1</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    <comment type="line">// end else</comment>
                                                    }
                                                </block>
                                            </then>
                                            <comment type="line">// end if: encoding</comment>

                                            <comment type="line">// Else decoding</comment>
                                            <else>else
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>byte</name>
                                                                <index>[]</index>
                                                            </type>
                                                            <name>b4</name> =
                                                            <init>
                                                                <expr>new
                                                                    <name>
                                                                        <name>byte</name>
                                                                        <index>[<expr>4</expr>]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>i</name> =
                                                            <init>
                                                                <expr>0</expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <for>for(
                                                        <init>
                                                            <expr>
                                                                <name>i</name>
                                                                = 0
                                                            </expr>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt; 4
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr><name>i</name>++
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <comment type="line">// Read four "meaningful" bytes:
                                                            </comment>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>b</name> =
                                                                    <init>
                                                                        <expr>0</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <do>do
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>b</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>in</name>.
                                                                                    <name>read</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                                while
                                                                <condition>(
                                                                    <expr>
                                                                        <name>b</name>
                                                                        &gt;= 0 &amp;&amp;
                                                                        <name>
                                                                            <name>DECODABET</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                    &amp; 0x7f
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        &lt;=
                                                                        <name>WHITE_SPACE_ENC</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                ;
                                                            </do>

                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>b</name>
                                                                        &lt; 0
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <break>break;</break>
                                                                </then>
                                                            </if>
                                                            <comment type="line">// Reads a -1 if end of stream
                                                            </comment>

                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>
                                                                        <name>b4</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    = (<name>byte</name>)
                                                                    <name>b</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </for>
                                                    <comment type="line">// end for: each needed input byte</comment>

                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>i</name>
                                                                == 4
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>numSigBytes</name>
                                                                        =
                                                                        <call>
                                                                            <name>decode4to3</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b4</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>buffer</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>position</name>
                                                                        = 0
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <comment type="line">// end if: got four characters</comment>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>i</name>
                                                                        == 0
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <return>return <expr>-1</expr>;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <comment type="line">// end else if: also padded
                                                                    correctly
                                                                </comment>
                                                                <else>else
                                                                    <block>{
                                                                        <comment type="line">// Must have broken out
                                                                            from above.
                                                                        </comment>
                                                                        <throw>throw
                                                                            <expr>new
                                                                                <call>
                                                                                    <name><name>java</name>.<name>
                                                                                        io</name>.
                                                                                        <name>IOException</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"Improperly padded
                                                                                                Base64 input."
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                        }
                                                                    </block>
                                                                </else>
                                                            </if>
                                                        </else>
                                                    </if>
                                                    <comment type="line">// end</comment>

                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <comment type="line">// end else: decode</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// end else: get data</comment>

                            <comment type="line">// Got data?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>position</name>
                                        &gt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// End of relevant data?</comment>
                                        <if>if
                                            <condition>( <comment type="block">/*!encode &amp;&amp;*/</comment>
                                                <expr>
                                                    <name>position</name>
                                                    &gt;=
                                                    <name>numSigBytes</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <return>return <expr>-1</expr>;
                                                </return>
                                            </then>
                                        </if>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>encode</name>
                                                    &amp;&amp; <name>breakLines</name> &amp;&amp; <name>lineLength
                                                </name> &gt;=
                                                    <name>MAX_LINE_LENGTH</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lineLength</name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return <expr>'\n'</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <comment type="line">// end if</comment>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>lineLength</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">// This isn't important when decoding</comment>
                                                    <comment type="line">// but throwing an extra "if" seems</comment>
                                                    <comment type="line">// just as wasteful.</comment>

                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>b</name> =
                                                            <init>
                                                                <expr>
                                                                    <name>
                                                                        <name>buffer</name>
                                                                        <index>[
                                                                            <expr><name>position</name>++
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>

                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>position</name>
                                                                &gt;=
                                                                <name>bufferLength</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>position</name>
                                                                    = -1
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </then>
                                                    </if>

                                                    <return>return
                                                        <expr>
                                                            <name>b</name>
                                                            &amp; 0xFF
                                                        </expr>
                                                        ;
                                                    </return>
                                                    <comment type="line">// This is how you "cast" a byte that's
                                                    </comment>
                                                    <comment type="line">// intended to be unsigned.</comment>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <comment type="line">// end else</comment>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// end if: position &gt;= 0</comment>

                                <comment type="line">// Else error</comment>
                                <else>else
                                    <block>{
                                        <comment type="line">// When JDK1.4 is more accepted, use an assertion here.
                                        </comment>
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>IOException</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Error in Base64 code reading stream."</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </else>
                            </if>
                            <comment type="line">// end else</comment>
                            }
                        </block>
                    </function>
                    <comment type="line">// end read</comment>


                    <comment type="javadoc">/**
                        * Calls {@link #read()} repeatedly until the end of stream
                        * is reached or &lt;var&gt;len&lt;/var&gt; bytes are read.
                        * Returns number of bytes read into array or -1 if
                        * end of stream is encountered.
                        *
                        * @param dest array to hold values
                        * @param off offset for array
                        * @param len max number of bytes to read into array
                        * @return bytes read into array or -1 if end of stream is encountered.
                        * @since 1.3
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>read</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>dest</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>off</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>len</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>b</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for(
                                <init>
                                    <expr>
                                        <name>i</name>
                                        = 0
                                    </expr>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>len</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>b</name>
                                            =
                                            <call>
                                                <name>read</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <comment type="line">//if( b &lt; 0 &amp;&amp; i == 0 )</comment>
                                    <comment type="line">// return -1;</comment>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>b</name>
                                                &gt;= 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>dest</name>
                                                        <index>[
                                                            <expr>
                                                                <name>off</name>
                                                                +
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    = (<name>byte</name>)
                                                    <name>b</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>i</name>
                                                        == 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <return>return <expr>-1</expr>;
                                                    </return>
                                                </then>
                                                <else>else
                                                    <break>break;</break>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                    <comment type="line">// Out of 'for' loop</comment>
                                    }
                                </block>
                            </for>
                            <comment type="line">// end for: each byte read</comment>
                            <return>return
                                <expr>
                                    <name>i</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// end read</comment>

                    }
                </block>
            </class>
            <comment type="line">// end inner class InputStream</comment>


            <comment type="block">/* ******** I N N E R C L A S S O U T P U T S T R E A M ******** */</comment>


            <comment type="javadoc">/**
                * A {@link Base64.OutputStream} will write data to another
                * &lt;tt&gt;java.io.OutputStream&lt;/tt&gt;, given in the constructor,
                * and encode/decode to/from Base64 notation on the fly.
                *
                * @see Base64
                * @since 1.3
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class <name>OutputStream</name>
                <super>
                    <extends>extends <name>java</name>.<name>io</name>.
                        <name>FilterOutputStream</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>encode</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>position</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>buffer</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>bufferLength</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>lineLength</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>breakLines</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>b4</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Scratch used in a few places</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>suspendEncoding</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructs a {@link Base64.OutputStream} in ENCODE mode.
                        *
                        * @param out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.
                        * @since 1.3
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>OutputStream</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>OutputStream</name>
                                        </name>
                                    </type>
                                    <name>out</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>this</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>out</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ENCODE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// end constructor</comment>


                    <comment type="javadoc">/**
                        * Constructs a {@link Base64.OutputStream} in
                        * either ENCODE or DECODE mode.
                        * &lt;p&gt;
                        * Valid options:&lt;pre&gt;
                        * ENCODE or DECODE: Encode or Decode as data is read.
                        * DONT_BREAK_LINES: don't break lines at 76 characters
                        * (only meaningful when encoding)
                        * &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
                        * &lt;/pre&gt;
                        * &lt;p&gt;
                        * Example: &lt;code&gt;new Base64.OutputStream( out, Base64.ENCODE )&lt;/code&gt;
                        *
                        * @param out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.
                        * @param options Specified options.
                        * @see Base64#ENCODE
                        * @see Base64#DECODE
                        * @see Base64#DONT_BREAK_LINES
                        * @since 1.3
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>OutputStream</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name><name>java</name>.<name>io</name>.
                                            <name>OutputStream</name>
                                        </name>
                                    </type>
                                    <name>out</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>options</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>out</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>breakLines</name>
                                    </name>
                                    = (<name>options</name> &amp; <name>DONT_BREAK_LINES</name>) !=
                                    <name>DONT_BREAK_LINES</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>encode</name>
                                    </name>
                                    = (<name>options</name> &amp; <name>ENCODE</name>) ==
                                    <name>ENCODE</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>bufferLength</name>
                                    </name>
                                    = <name>encode</name> ? 3 : 4
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>buffer</name>
                                    </name>
                                    = new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>bufferLength</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>position</name>
                                    </name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>lineLength</name>
                                    </name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>suspendEncoding</name>
                                    </name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>b4</name>
                                    </name>
                                    = new
                                    <name>
                                        <name>byte</name>
                                        <index>[<expr>4</expr>]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// end constructor</comment>


                    <comment type="javadoc">/**
                        * Writes the byte to the output stream after
                        * converting to/from Base64 notation.
                        * When encoding, bytes are buffered three
                        * at a time before the output stream actually
                        * gets a write() call.
                        * When decoding, bytes are buffered four
                        * at a time.
                        *
                        * @param theByte the byte to write
                        * @since 1.3
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>write</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>theByte</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <comment type="line">// Encoding suspended?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>suspendEncoding</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>super</name>.<name>out</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>theByte</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// end if: supsended</comment>

                            <comment type="line">// Encode?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>encode</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>buffer</name>
                                                    <index>[
                                                        <expr><name>position</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = (<name>byte</name>)
                                                <name>theByte</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>position</name>
                                                    &gt;=
                                                    <name>bufferLength</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <comment type="line">// Enough to encode.</comment>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>out</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name>encode3to4</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>b4</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>buffer</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>bufferLength</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lineLength</name>
                                                            += 4
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>breakLines</name>
                                                                &amp;&amp; <name>lineLength</name> &gt;=
                                                                <name>MAX_LINE_LENGTH</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>out</name>.
                                                                                <name>write</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>NEW_LINE</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>lineLength</name>
                                                                        = 0
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <comment type="line">// end if: end of line</comment>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>position</name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <comment type="line">// end if: enough to output</comment>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// end if: encoding</comment>

                                <comment type="line">// Else, Decoding</comment>
                                <else>else
                                    <block>{
                                        <comment type="line">// Meaningful Base64 character?</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>DECODABET</name>
                                                        <index>[
                                                            <expr>
                                                                <name>theByte</name>
                                                                &amp; 0x7f
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    &gt;
                                                    <name>WHITE_SPACE_ENC</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>buffer</name>
                                                                <index>[
                                                                    <expr><name>position</name>++
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            = (<name>byte</name>)
                                                            <name>theByte</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>position</name>
                                                                &gt;=
                                                                <name>bufferLength</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <comment type="line">// Enough to output.</comment>
                                                            <block>{
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>int</name>
                                                                        </type>
                                                                        <name>len</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>Base64</name>.
                                                                                        <name>decode4to3</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>buffer</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>0</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>b4</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>0</expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>out</name>.
                                                                                <name>write</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b4</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>0</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>len</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <comment type="line">//out.write( Base64.decode4to3(
                                                                    buffer ) );
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>position</name>
                                                                        = 0
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <comment type="line">// end if: enough to output</comment>
                                                    }
                                                </block>
                                            </then>
                                            <comment type="line">// end if: meaningful base64 character</comment>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>
                                                                <name>DECODABET</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>theByte</name>
                                                                        &amp; 0x7f
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            !=
                                                            <name>WHITE_SPACE_ENC</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <throw>throw
                                                                <expr>new
                                                                    <call>
                                                                        <name><name>java</name>.<name>io</name>.
                                                                            <name>IOException</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"Invalid character in Base64
                                                                                    data."
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        <comment type="line">// end else: not white space either</comment>
                                        }
                                    </block>
                                </else>
                            </if>
                            <comment type="line">// end else: decoding</comment>
                            }
                        </block>
                    </function>
                    <comment type="line">// end write</comment>


                    <comment type="javadoc">/**
                        * Calls {@link #write(int)} repeatedly until &lt;var&gt;len&lt;/var&gt;
                        * bytes are written.
                        *
                        * @param theBytes array from which to read bytes
                        * @param off offset for array
                        * @param len max number of bytes to read into array
                        * @since 1.3
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>write</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>theBytes</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>off</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>len</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <comment type="line">// Encoding suspended?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>suspendEncoding</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>super</name>.<name>out</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>theBytes</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>off</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>len</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// end if: supsended</comment>

                            <for>for(
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>len</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>write</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>theBytes</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>off</name>
                                                                        +
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <comment type="line">// end for: each byte written</comment>

                            }
                        </block>
                    </function>
                    <comment type="line">// end write</comment>


                    <comment type="javadoc">/**
                        * Method added by PHIL. [Thanks, PHIL. -Rob]
                        * This pads the buffer without closing the stream.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>flushBase64</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>position</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>encode</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>out</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name>encode3to4</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>b4</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>buffer</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>position</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>position</name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <comment type="line">// end if: encoding</comment>
                                            <else>else
                                                <block>{
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name><name>java</name>.<name>io</name>.
                                                                    <name>IOException</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"Base64 input not properly padded."</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <comment type="line">// end else: decoding</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// end if: buffer partially full</comment>

                            }
                        </block>
                    </function>
                    <comment type="line">// end flush</comment>


                    <comment type="javadoc">/**
                        * Flushes and closes (I think, in the superclass) the stream.
                        *
                        * @since 1.3
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>close</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <comment type="line">// 1. Ensure that pending characters are written</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>flushBase64</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// 2. Actually close the stream</comment>
                            <comment type="line">// Base class both flushes and closes.</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>close</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>buffer</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>out</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// end close</comment>


                    <comment type="javadoc">/**
                        * Suspends encoding of the stream.
                        * May be helpful if you need to embed a piece of
                        * base640-encoded data in a stream.
                        *
                        * @since 1.5.1
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>suspendEncoding</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name><name>java</name>.<name>io</name>.
                                        <name>IOException</name>
                                    </name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>flushBase64</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>suspendEncoding</name>
                                    </name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// end suspendEncoding</comment>


                    <comment type="javadoc">/**
                        * Resumes encoding of the stream.
                        * May be helpful if you need to embed a piece of
                        * base640-encoded data in a stream.
                        *
                        * @since 1.5.1
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>resumeEncoding</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>suspendEncoding</name>
                                    </name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// end resumeEncoding</comment>


                    }
                </block>
            </class>
            <comment type="line">// end inner class OutputStream</comment>


            }
        </block>
    </class>
    <comment type="line">// end class Base64</comment>
</unit>
