<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\BezierLabelLocator.java">
    <comment type="block">/*
        * @(#)PolyLineDecorationLocator.java 1.0 3. Februar 2004
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>xml</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * This locator locates a position relative to a polyline.
        * The position is chosen in a way, which is suitable for labeling the polyline.
        * The preferredSize of the label is used to determine its location.
        *
        * @author Werner Randelshofer
        * @version 2.0 2006-01-14 Changed to support double precison coordinates.
        * &lt;br&gt;1.0 3. Februar 2004 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>BezierLabelLocator</name>
        <super>
            <implements>implements <name>Locator</name>,
                <name>DOMStorable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>double</name>
                    </type>
                    <name>relativePosition</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>double</name>
                    </type>
                    <name>angle</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>double</name>
                    </type>
                    <name>distance</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new instance.
                * This constructor is for use by DOMStorable only.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>BezierLabelLocator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>
            <comment type="javadoc">/** Creates a new locator.
                *
                * @param relativePosition The relative position of the label on the polyline.
                * 0.0 specifies the start of the polyline, 1.0 the
                * end of the polyline. Values between 0.0 and 1.0 are relative positions
                * on the polyline.
                * @param angle The angle of the distance vector.
                * @param distance The length of the distance vector.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>BezierLabelLocator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>relativePosition</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>distance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>relativePosition</name>
                            </name>
                            =
                            <name>relativePosition</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>angle</name>
                            </name>
                            =
                            <name>angle</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>distance</name>
                            </name>
                            =
                            <name>distance</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>locate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getRelativePoint</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>BezierFigure</name>)
                                            <name>owner</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>locate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>label</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>relativePoint</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getRelativeLabelPoint</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>BezierFigure</name>)
                                                    <name>owner</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>label</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>relativePoint</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a Point2D.Double on the polyline that is at the provided relative position.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getRelativePoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BezierFigure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>point</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>owner</name>.
                                            <name>getPointOnPath</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>float</name>)
                                                    <name>relativePosition</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>3</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>nextPoint</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>owner</name>.
                                            <name>getPointOnPath</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>relativePosition</name> &lt; 0.5) ? (<name>float</name>) <name>
                                                    relativePosition
                                                </name> + 0.1f : (<name>float</name>) <name>relativePosition</name> -
                                                    0.1f
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>3</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>dir</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>atan2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>nextPoint</name>.
                                                        <name>y</name>
                                                    </name>
                                                    -
                                                    <name><name>point</name>.
                                                        <name>y</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>nextPoint</name>.
                                                        <name>x</name>
                                                    </name>
                                                    -
                                                    <name><name>point</name>.
                                                        <name>x</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>relativePosition</name>
                                &gt;= 0.5
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>dir</name>
                                        +=
                                        <name><name>Math</name>.
                                            <name>PI</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>alpha</name> =
                            <init>
                                <expr>
                                    <name>dir</name>
                                    +
                                    <name>angle</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>Point2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>point</name>.
                                                        <name>x</name>
                                                    </name>
                                                    + <name>distance</name> *
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>cos</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>alpha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>point</name>.
                                                        <name>y</name>
                                                    </name>
                                                    + <name>distance</name> *
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>sin</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>alpha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Double</name>.
                                        <name>isNaN</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>p</name>.
                                                    <name>x</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>p</name>
                                    =
                                    <name>point</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>p</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns a Point2D.Double on the polyline that is at the provided relative position.
                * XXX - Implement this and move it to BezierPath
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getRelativeLabelPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BezierFigure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>label</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Get a point on the path an the next point on the path</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>point</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>owner</name>.
                                            <name>getPointOnPath</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>float</name>)
                                                    <name>relativePosition</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>3</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>point</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name><name>Point2D</name>.
                                                <name>Double</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>nextPoint</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>owner</name>.
                                            <name>getPointOnPath</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>relativePosition</name> &lt; 0.5) ? (<name>float</name>) <name>
                                                    relativePosition
                                                </name> + 0.1f : (<name>float</name>) <name>relativePosition</name> -
                                                    0.1f
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>3</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>dir</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>atan2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>nextPoint</name>.
                                                        <name>y</name>
                                                    </name>
                                                    -
                                                    <name><name>point</name>.
                                                        <name>y</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>nextPoint</name>.
                                                        <name>x</name>
                                                    </name>
                                                    -
                                                    <name><name>point</name>.
                                                        <name>x</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>relativePosition</name>
                                &gt;= 0.5
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>dir</name>
                                        +=
                                        <name><name>Math</name>.
                                            <name>PI</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>alpha</name> =
                            <init>
                                <expr>
                                    <name>dir</name>
                                    +
                                    <name>angle</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>Point2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>point</name>.
                                                        <name>x</name>
                                                    </name>
                                                    + <name>distance</name> *
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>cos</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>alpha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>point</name>.
                                                        <name>y</name>
                                                    </name>
                                                    + <name>distance</name> *
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>sin</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>alpha</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Double</name>.
                                        <name>isNaN</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>p</name>.
                                                    <name>x</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>p</name>
                                    =
                                    <name>point</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Dimension2DDouble</name>
                            </type>
                            <name>labelDim</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>label</name>.
                                            <name>getPreferredSize</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>relativePosition</name>
                                == 0.5 &amp;&amp;
                                <name><name>p</name>.
                                    <name>x</name>
                                </name>
                                &gt;=
                                <name><name>point</name>.
                                    <name>x</name>
                                </name>
                                - <name>distance</name> / 2 &amp;&amp;
                                <name><name>p</name>.
                                    <name>x</name>
                                </name>
                                &lt;=
                                <name><name>point</name>.
                                    <name>x</name>
                                </name>
                                + <name>distance</name> / 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>p</name>.
                                                <name>y</name>
                                            </name>
                                            &gt;=
                                            <name><name>point</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// South East</comment>
                                            <return>return
                                                <expr>new
                                                    <call>
                                                        <name><name>Point2D</name>.
                                                            <name>Double</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>p</name>.
                                                                        <name>x</name>
                                                                    </name>
                                                                    -
                                                                    <name><name>labelDim</name>.
                                                                        <name>width</name>
                                                                    </name>
                                                                    / 2
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>p</name>.
                                                                        <name>y</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// North East</comment>
                                            <return>return
                                                <expr>new
                                                    <call>
                                                        <name><name>Point2D</name>.
                                                            <name>Double</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>p</name>.
                                                                        <name>x</name>
                                                                    </name>
                                                                    -
                                                                    <name><name>labelDim</name>.
                                                                        <name>width</name>
                                                                    </name>
                                                                    / 2
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>p</name>.
                                                                        <name>y</name>
                                                                    </name>
                                                                    -
                                                                    <name><name>labelDim</name>.
                                                                        <name>height</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>p</name>.
                                                <name>x</name>
                                            </name>
                                            &gt;=
                                            <name><name>point</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>p</name>.
                                                            <name>y</name>
                                                        </name>
                                                        &gt;=
                                                        <name><name>point</name>.
                                                            <name>y</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// South East</comment>
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>x</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>y</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// North East</comment>
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>x</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>y</name>
                                                                                </name>
                                                                                -
                                                                                <name><name>labelDim</name>.
                                                                                    <name>height</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>p</name>.
                                                            <name>y</name>
                                                        </name>
                                                        &gt;=
                                                        <name><name>point</name>.
                                                            <name>y</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// South West</comment>
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>x</name>
                                                                                </name>
                                                                                -
                                                                                <name><name>labelDim</name>.
                                                                                    <name>width</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>y</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// North West</comment>
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>x</name>
                                                                                </name>
                                                                                -
                                                                                <name><name>labelDim</name>.
                                                                                    <name>width</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>p</name>.
                                                                                    <name>y</name>
                                                                                </name>
                                                                                -
                                                                                <name><name>labelDim</name>.
                                                                                    <name>height</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    <comment type="block">/*
                        int percentage = (int) (relativePosition * 100);

                        int segment; // relative segment
                        Point2D.Double segPoint; // relative Point2D.Double on the segment
                        int nPoints = owner.getPointCount();
                        Point2D.Double[] Points = owner.getPoints();

                        if (nPoints &lt; 2) return new Point2D.Double(0, 0);

                        switch (percentage) {
                        case 0 :
                        segment = 0;
                        segPoint = owner.getStartPoint();
                        break;
                        case 100 :
                        segment = owner.getPointCount() - 2;
                        segPoint = owner.getEndPoint();
                        break;
                        default :
                        double totalLength = 0d;
                        double[] segLength = new double[nPoints - 1];
                        for (int i=1; i &lt; nPoints; i++) {
                        segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);
                        totalLength += segLength[i-1];
                        }
                        double relativeProgress = percentage * totalLength / 101d;
                        segment = 0;
                        double segMin = 0d;
                        for (segment=0; segment &lt; segLength.length - 1; segment++) {
                        if (segMin + segLength[segment] &gt; relativeProgress) break;
                        segMin += segLength[segment];
                        }

                        // Compute the relative Point2D.Double on the line
                        segPoint = new Point2D.Double();
                        relativeProgress -= segMin;
                        segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) +
                        Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);
                        segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) +
                        Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);

                        break;
                        }

                        Dimension2DDouble labelDim = label.getPreferredSize();

                        Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment +
                        1].x, Points[segment + 1].y);
                        double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x -
                        Points[segment].x);
                        double alpha = dir + angle;

                        Point2D.Double p = new Point2D.Double(
                        (int) (segPoint.x + distance * Math.cos(alpha)),
                        (int) (segPoint.y + distance * Math.sin(alpha))
                        );

                        if (p.x &gt;= segPoint.x) {
                        if (p.y &gt;= segPoint.y) {
                        // South East
                        return new Point2D.Double(p.x, p.y);
                        } else {
                        // North East
                        return new Point2D.Double(p.x, p.y - labelDim.height);
                        }
                        } else {
                        if (p.y &gt;= segPoint.y) {
                        // South West
                        return new Point2D.Double(p.x - labelDim.width, p.y);
                        } else {
                        // North West
                        return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);
                        }
                        }*/
                    </comment>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DOMInput</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>relativePosition</name>
                            =
                            <call>
                                <name><name>in</name>.
                                    <name>getAttribute</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"relativePosition"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0d</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>angle</name>
                            =
                            <call>
                                <name><name>in</name>.
                                    <name>getAttribute</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"angle"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0d</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>distance</name>
                            =
                            <call>
                                <name><name>in</name>.
                                    <name>getAttribute</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"distance"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DOMOutput</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>addAttribute</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"relativePosition"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>relativePosition</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>addAttribute</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"angle"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>angle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>addAttribute</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"distance"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>distance</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
