<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\xml\css\CSSParser.java">
    <comment type="block">/*
        * @(#)CSSLoader.java 1.0 6. Juni 2006
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        *
        * Original code taken from article "Swing and CSS" by Joshua Marinacci 10/14/2003
        * http://today.java.net/pub/a/today/2003/10/14/swingcss.html
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.<name>xml</name>.
            <name>css</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * Parsers a Cascading Style Sheet (CSS).
        * &lt;pre&gt;
        * IDENT {ident}
        * ATKEYWORD @{ident}
        * STRING {string}
        * INVALID {invalid}
        * HASH #{name}
        * NUMBER {num}
        * PERCENTAGE {num}%
        * DIMENSION {num}{ident}
        * URI url\({w}{string}{w}\)
        * |url\({w}([!#$%&amp;*-~]|{nonascii}|{escape})*{w}\)
        * UNICODE-RANGE U\+[0-9A-F?]{1,6}(-[0-9A-F]{1,6})?
        * CDO &lt;!--
        * CDC --&gt;
        * ; ;
        * { \{
        * } \}
        * ( \(
        * ) \)
        * [ \[
        * ] \]
        * S [ \t\r\n\f]+
        * COMMENT \/\*[^*]*\*+([^/*][^*]*\*+)*\/
        * FUNCTION {ident}\(
        * INCLUDES ~=
        * DASHMATCH |=
        * DELIM any other character not matched by the above rules, and neither a single nor a double quote
        *
        *
        * stylesheet : [ CDO | CDC | S | statement ]*;
        * statement : ruleset | at-rule;
        * at-rule : ATKEYWORD S* any* [ block | ';' S* ];
        * block : '{' S* [ any | block | ATKEYWORD S* | ';' S* ]* '}' S*;
        * ruleset : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
        * selector : any+;
        * declaration : DELIM? property S* ':' S* value;
        * property : IDENT;
        * value : [ any | block | ATKEYWORD S* ]+;
        * any : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
        * | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
        * | DASHMATCH | FUNCTION S* any* ')'
        * | '(' S* any* ')' | '[' S* any* ']' ] S*;
        * &lt;/pre&gt;
        *
        * @author Werner Randelshofer
        * @version 1.0 6. Juni 2006 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CSSParser</name>
        <block>{
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>css</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StyleManager</name>
                            </type>
                            <name>rm</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>parse</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>StringReader</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>css</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rm</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>css</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StyleManager</name>
                            </type>
                            <name>rm</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StreamTokenizer</name>
                            </type>
                            <name>tt</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StreamTokenizer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>css</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>resetSyntax</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>wordChars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'a'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'z'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>wordChars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'A'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'Z'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>wordChars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'0'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'9'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>wordChars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>128 + 32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>255</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>whitespaceChars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>' '</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>commentChar</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'/'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>slashStarComments</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>parseStylesheet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tt</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rm</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>parseStylesheet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StreamTokenizer</name>
                            </type>
                            <name>tt</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StyleManager</name>
                            </type>
                            <name>rm</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>tt</name>.
                                        <name>nextToken</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>StreamTokenizer</name>.
                                    <name>TT_EOF</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>tt</name>.
                                            <name>pushBack</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>parseRuleset</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tt</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>parseRuleset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StreamTokenizer</name>
                            </type>
                            <name>tt</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StyleManager</name>
                            </type>
                            <name>rm</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// parse selector list</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>selectors</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>parseSelectorList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>tt</name>.
                                        <name>nextToken</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != '{'
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IOException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Ruleset '{' missing for "+
                                                    <name>selectors</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declarations</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>parseDeclarationMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>tt</name>.
                                        <name>nextToken</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != '}'
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IOException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Ruleset '}' missing for "+
                                                    <name>selectors</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>String</name>
                                </type>
                                <name>selector</name> :
                                <range>
                                    <expr>
                                        <name>selectors</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>rm</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>CSSRule</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>selector</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>declarations</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// System.out.println("CSSParser.add("+selector+","+declarations);
                            </comment>

                            <comment type="block">/*
                                for (Map.Entry&lt;String,String&gt; entry : declarations.entrySet()) {
                                rm.add(new CSSRule(selector, entry.getKey(), entry.getValue()));
                                }*/
                            </comment>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>parseSelectorList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StreamTokenizer</name>
                            </type>
                            <name>tt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>LinkedList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>LinkedList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>selector</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>needsWhitespace</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>tt</name>.
                                        <name>nextToken</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>StreamTokenizer</name>.
                                    <name>TT_EOF</name>
                                </name>
                                &amp;&amp;
                                <name><name>tt</name>.
                                    <name>ttype</name>
                                </name>
                                != '{'
                            </expr>
                            )
                        </condition>
                        <block>{

                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name><name>StreamTokenizer</name>.
                                                <name>TT_WORD</name>
                                            </name>
                                        </expr>
                                        :
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>needsWhitespace</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>selector</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>' '</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>selector</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>tt</name>.
                                                                    <name>sval</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>needsWhitespace</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case <expr>','</expr> :
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>list</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>selector</name>.
                                                                        <name>toString</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>selector</name>.
                                                        <name>setLength</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>needsWhitespace</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <default>default :
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>needsWhitespace</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>selector</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>' '</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>selector</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>char</name>)
                                                                <name><name>tt</name>.
                                                                    <name>ttype</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>needsWhitespace</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>selector</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>list</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>selector</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>pushBack</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//System.out.println("selectors:"+list);</comment>
                    <return>return
                        <expr>
                            <name>list</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            ,
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>parseDeclarationMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StreamTokenizer</name>
                            </type>
                            <name>tt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>HashMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>HashMap</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <do>do
                        <block>{
                            <comment type="line">// Parse key</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>key</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>StringBuilder</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>tt</name>.
                                                <name>nextToken</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        !=
                                        <name><name>StreamTokenizer</name>.
                                            <name>TT_EOF</name>
                                        </name>
                                        &amp;&amp;
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        != '}' &amp;&amp;
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        != ':' &amp;&amp;
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        != ';'
                                    </expr>
                                    )
                                </condition>
                                <block>{

                                    <switch>switch
                                        <condition>(
                                            <expr>
                                                <name><name>tt</name>.
                                                    <name>ttype</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <case>case
                                                <expr>
                                                    <name><name>StreamTokenizer</name>.
                                                        <name>TT_WORD</name>
                                                    </name>
                                                </expr>
                                                :
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>key</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>tt</name>.
                                                                            <name>sval</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </case>
                                            <default>default :
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>key</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>char</name>)
                                                                        <name><name>tt</name>.
                                                                            <name>ttype</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </default>
                                            }
                                        </block>
                                    </switch>
                                    }
                                </block>
                            </while>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        == '}' &amp;&amp;
                                        <call>
                                            <name><name>key</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{ <break>break;</break> }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        != ':'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>IOException</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"Declaration ':' missing for "+
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                </then>
                            </if>

                            <comment type="line">// Parse value</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>StringBuilder</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>needsWhitespace</name> =
                                    <init>
                                        <expr>false</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>tt</name>.
                                                <name>nextToken</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        !=
                                        <name><name>StreamTokenizer</name>.
                                            <name>TT_EOF</name>
                                        </name>
                                        &amp;&amp;
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        != ';' &amp;&amp;
                                        <name><name>tt</name>.
                                            <name>ttype</name>
                                        </name>
                                        != '}'
                                    </expr>
                                    )
                                </condition>
                                <block>{

                                    <switch>switch
                                        <condition>(
                                            <expr>
                                                <name><name>tt</name>.
                                                    <name>ttype</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <case>case
                                                <expr>
                                                    <name><name>StreamTokenizer</name>.
                                                        <name>TT_WORD</name>
                                                    </name>
                                                </expr>
                                                :
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>needsWhitespace</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>value</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>' '</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>value</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>tt</name>.
                                                                            <name>sval</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>needsWhitespace</name>
                                                        = true
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </case>
                                            <default>default :
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>value</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>char</name>)
                                                                        <name><name>tt</name>.
                                                                            <name>ttype</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>needsWhitespace</name>
                                                        = false
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                            </default>
                                            }
                                        </block>
                                    </switch>
                                    }
                                </block>
                            </while>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>map</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>key</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>value</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">//System.out.println(" declaration: "+key+":"+value);</comment>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>
                                <name><name>tt</name>.
                                    <name>ttype</name>
                                </name>
                                != '}' &amp;&amp;
                                <name><name>tt</name>.
                                    <name>ttype</name>
                                </name>
                                !=
                                <name><name>StreamTokenizer</name>.
                                    <name>TT_EOF</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        ;
                    </do>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tt</name>.
                                    <name>pushBack</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>map</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="block">/*
                public static void main(String[] args) {
                InputStreamReader in = null;
                try {
                CSSLoader l = new CSSLoader();
                in = new InputStreamReader(CSSLoader.class.getResourceAsStream("/test.css"));
                l.load(in, new StyleManager());
                } catch (Exception e) {
                e.printStackTrace();
                } finally {
                try { if (in != null) in.close(); } catch (IOException e) {}
                }
                }*/
            </comment>
            }
        </block>
    </class>
</unit>
