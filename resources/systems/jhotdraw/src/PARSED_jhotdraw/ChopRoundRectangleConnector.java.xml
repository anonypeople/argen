<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\ChopRoundRectangleConnector.java">
    <comment type="block">/*
        * @(#)ChopRoundRectangleConnector.java 2.1 2006-12-23
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import static
        <name><name>org</name>.<name>jhotdraw</name>.<name>draw</name>.
            <name>AttributeKeys</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * A ChopRoundRectangleConnector locates a connection Point2D.Double by
        * chopping the connection at the horizontal and vertica lines defined by the
        * display box of a RoundRectangleFigure.
        *
        * @author Werner Randelshofer
        * @version 2.2 2006-12-23 Renamed from ChopRoundRectConnector to
        * ChopRoundRectangleConnector.
        * &lt;br&gt;2.0 2006-01-14 Changed to support double precison coordinates.
        * &lt;br&gt;1.0 2004-03-02 Derived from class ShortestDistanceConnector of
        * JHotDraw 6.0b1.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ChopRoundRectangleConnector</name>
        <super>
            <extends>extends
                <name>ChopRectangleConnector</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Only used for DOMStorable input.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ChopRoundRectangleConnector</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>public</specifier>
                <name>ChopRoundRectangleConnector</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>owner</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>chop</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>target</name>
                            =
                            <call>
                                <name>getConnectorTarget</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>target</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RoundRectangleFigure</name>
                            </type>
                            <name>rrf</name> =
                            <init>
                                <expr>(<name>RoundRectangleFigure</name>)
                                    <name>target</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>outer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>rrf</name>.
                                            <name>getBounds</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>grow</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>STROKE_PLACEMENT</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>target</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>CENTER</name>
                                </expr>
                                :
                            </case>
                            <default>default :
                                <expr_stmt>
                                    <expr>
                                        <name>grow</name>
                                        =
                                        <call>
                                            <name><name>AttributeKeys</name>.
                                                <name>getStrokeTotalWidth</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>target</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        / 2d
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </default>
                            <case>case
                                <expr>
                                    <name>OUTSIDE</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>grow</name>
                                        =
                                        <call>
                                            <name><name>AttributeKeys</name>.
                                                <name>getStrokeTotalWidth</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>target</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>INSIDE</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>grow</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            }
                        </block>
                    </switch>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Geom</name>.
                                    <name>grow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>outer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>grow</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>grow</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>inner</name> =
                            <init>
                                <expr>(
                                    <name><name>Rectangle2D</name>.
                                        <name>Double</name>
                                    </name>
                                    )
                                    <call>
                                        <name><name>outer</name>.
                                            <name>clone</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>gw</name> =
                            <init>
                                <expr>-(
                                    <call>
                                        <name><name>rrf</name>.
                                            <name>getArcWidth</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + <name>grow</name> * 2) / 2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>gh</name> =
                            <init>
                                <expr>-(
                                    <call>
                                        <name><name>rrf</name>.
                                            <name>getArcHeight</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + <name>grow</name> *2) / 2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>inner</name>.
                                <name>x</name>
                            </name>
                            -=
                            <name>gw</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>inner</name>.
                                <name>y</name>
                            </name>
                            -=
                            <name>gh</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>inner</name>.
                                <name>width</name>
                            </name>
                            += <name>gw</name> * 2
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>inner</name>.
                                <name>height</name>
                            </name>
                            += <name>gh</name> * 2
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Geom</name>.
                                            <name>pointToAngle</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>from</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Geom</name>.
                                            <name>angleToPoint</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Geom</name>.
                                                            <name>pointToAngle</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>outer</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>from</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>p</name>.
                                    <name>x</name>
                                </name>
                                ==
                                <name><name>outer</name>.
                                    <name>x</name>
                                </name>
                                ||
                                <name><name>p</name>.
                                    <name>x</name>
                                </name>
                                ==
                                <name><name>outer</name>.
                                    <name>x</name>
                                </name>
                                +
                                <name><name>outer</name>.
                                    <name>width</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>p</name>.
                                            <name>y</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>Math</name>.
                                                <name>min</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Math</name>.
                                                                <name>max</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>p</name>.
                                                                            <name>y</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>inner</name>.
                                                                            <name>y</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>inner</name>.
                                                            <name>y</name>
                                                        </name>
                                                        +
                                                        <name><name>inner</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>p</name>.
                                            <name>x</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>Math</name>.
                                                <name>min</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Math</name>.
                                                                <name>max</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>p</name>.
                                                                            <name>x</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>inner</name>.
                                                                            <name>x</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>inner</name>.
                                                            <name>x</name>
                                                        </name>
                                                        +
                                                        <name><name>inner</name>.
                                                            <name>width</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>p</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
