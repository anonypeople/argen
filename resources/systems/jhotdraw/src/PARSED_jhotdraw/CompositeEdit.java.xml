<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\undo\CompositeEdit.java">
    <comment type="block">/*
        * @(#)CompositeModel.java 1.1 2006-06-20
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>undo</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * This is basically the same like javax.swing.undo.CompoundEdit but
        * it has a slightly different behaviour:
        * The compound edit ends, when it is added to itself. This way it
        * can be fired two times to an UndoManager: The first time, when
        * a sequence of compuondable edits starts, end the last time, when
        * the sequence is over.
        * &lt;p&gt;
        * For example:
        * &lt;pre&gt;
        * // fire CompositeEdit at start of sequence
        * CompositeEdit ce = new CompositeEdit();
        * fireUndoableEditEvent(ce);
        *
        * ...fire edits which shall compounded here...
        *
        * // fire CompositeEdit at end of sequence again, to end it.
        * fireUndoableEditEvent(ce);
        * &lt;/pre&gt;
        *
        * @author Werner Randelshofer
        * @version 1.1 2006-06-20 Method setSignificant added.
        * &lt;br&gt;1.0 2001-01-01 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CompositeEdit</name>
        <super>
            <extends>extends
                <name>CompoundEdit</name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>presentationName</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>isSignificant</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>isVerbose</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setVerbose</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>isVerbose</name>
                            =
                            <name>b</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Creates new CompositeEdit.
                * Which uses CompoundEdit.getPresentatioName.
                *
                * @see javax.swing.undo.CompoundEdit#getPresentationName()
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CompositeEdit</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>isSignificant</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="javadoc">/**
                * Creates new CompositeEdit.
                * Which uses CompoundEdit.getPresentatioName.
                *
                * @see javax.swing.undo.CompoundEdit#getPresentationName()
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CompositeEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isSignificant</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>isSignificant</name>
                            </name>
                            =
                            <name>isSignificant</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="javadoc">/**
                * Creates new CompositeEdit.
                * Which uses the given presentation name.
                * If the presentation name is null, then CompoundEdit.getPresentatioName
                * is used.
                * @see javax.swing.undo.CompoundEdit#getPresentationName()
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CompositeEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>presentationName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>presentationName</name>
                            </name>
                            =
                            <name>presentationName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>isSignificant</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="javadoc">/**
                * Creates new CompositeEdit.
                * Which uses the given presentation name.
                * If the presentation name is null, then CompoundEdit.getPresentatioName
                * is used.
                * @see javax.swing.undo.CompoundEdit#getPresentationName()
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CompositeEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>presentationName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isSignificant</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>presentationName</name>
                            </name>
                            =
                            <name>presentationName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>isSignificant</name>
                            </name>
                            =
                            <name>isSignificant</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the presentation name.
                * If the presentation name is null, then CompoundEdit.getPresentatioName
                * is returned.
                * @see javax.swing.undo.CompoundEdit#getPresentationName()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPresentationName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>presentationName</name> != <name>null</name>) ? <name>presentationName</name> :
                            <call>
                                <name><name>super</name>.
                                    <name>getPresentationName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns the undo presentation name.
                * If the presentation name is null, then CompoundEdit.getUndoPresentationName
                * is returned.
                * @see javax.swing.undo.CompoundEdit#getUndoPresentationName()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getUndoPresentationName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>presentationName</name> != <name>null</name>) ?
                            <call>
                                <name><name>UndoRedoManager</name>.
                                    <name>getLabels</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"undo"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            +" "+<name>presentationName</name> :
                            <call>
                                <name><name>super</name>.
                                    <name>getUndoPresentationName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns the redo presentation name.
                * If the presentation name is null, then CompoundEdit.getRedoPresentationName
                * is returned.
                * @see javax.swing.undo.CompoundEdit#getRedoPresentationName()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getRedoPresentationName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>presentationName</name> != <name>null</name>) ?
                            <call>
                                <name><name>UndoRedoManager</name>.
                                    <name>getLabels</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"redo"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            +" "+<name>presentationName</name> :
                            <call>
                                <name><name>super</name>.
                                    <name>getRedoPresentationName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If this edit is inProgress, accepts anEdit and returns
                * true.
                *
                * &lt;p&gt;The last edit added to this CompositeEdit is given a
                * chance to addEdit(anEdit). If it refuses (returns false), anEdit is
                * given a chance to replaceEdit the last edit. If anEdit returns
                * false here, it is added to edits.&lt;/p&gt;
                *
                * &lt;p&gt;If the CompositeEdit is added to itself, then method end()
                * is called, and true is returned.&lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>addEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEdit</name>
                            </type>
                            <name>anEdit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>anEdit</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>end</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isInProgress</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &amp;&amp; (<name>anEdit</name>
                                        <name>instanceof</name>
                                        <name>CompositeEdit</name>)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>super</name>.
                                                        <name>addEdit</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>anEdit</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns false if this edit is insignificant - for example one
                * that maintains the user's selection, but does not change
                * any model state.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSignificant</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>isSignificant</name>) ?
                            <call>
                                <name><name>super</name>.
                                    <name>isSignificant</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            : false
                        </expr>
                        ;
                    </return>
                    <comment type="line">//return isSignificant;</comment>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSignificant</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>isSignificant</name>
                            =
                            <name>newValue</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
