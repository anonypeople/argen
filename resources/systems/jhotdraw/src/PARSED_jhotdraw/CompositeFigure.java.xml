<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\CompositeFigure.java">
    <comment type="block">/*
        * @(#)CompositeFigure.java 2.0.1 2007-12-20
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * A CompositeFigure is composed of several child Figures.
        * A CompositeFigure can be laid out using a Layouter.
        *
        * @author Werner Randelshofer
        * @version 2.1 2007-12-20 Clarified purpose of basicAdd/basicRemove methods.
        * Added method indexOf.
        * &lt;br&gt;2.0 2007-07-17 Added support for CompositeFigureListener.
        * CompositeFigure is now streamlined with the java.util.List&lt;Figure&gt;
        * interface.
        * &lt;br&gt;1.0 27. Januar 2006 Created.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>CompositeFigure</name>
        <super>
            <extends>extends
                <name>Figure</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * The value of this attribute is a Insets2D.Double object.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name><name>Insets2D</name>.
                                        <name>Double</name>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>LAYOUT_INSETS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AttributeKey</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name><name>Insets2D</name>.
                                                <name>Double</name>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"layoutInsets"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name><name>Insets2D</name>.
                                                    <name>Double</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Adds a child to the figure.
                * &lt;p&gt;
                * This is a convenience method for {@code add(getChildCount(), child);}
                * &lt;p&gt;
                * This method calls {@code figureAdded} on all registered
                * {@code CompositeFigureListener}s.
                *
                * @return {@code true} if this CompositeFigure changed as a result of the
                * call
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a child to the figure at the specified index.
                * &lt;p&gt;
                * This method calls {@code figureAdded} on all registered
                * {@code CompositeFigureListener}s.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a child to the figure without firing events.
                * &lt;p&gt;
                * This method can be used to reinsert a child figure which has been
                * temporarily removed from this CompositeFigure (for example to reorder
                * the sequence of the children) and to efficiently build a drawing from
                * an {@link InputFormat}.
                *
                * This is a convenience method for calling
                * {@code basicAdd(getChildCount(), child);}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicAdd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a child to the figure at the specified index without
                * firing events.
                * &lt;p&gt;
                * This method can be used to reinsert a child figure which has been
                * temporarily removed from this CompositeFigure (for example to reorder
                * the sequence of the children) and to efficiently build a drawing from
                * an {@link InputFormat}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicAdd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes the specified child.
                * Returns true, if the Figure contained the removed child.
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code removeChild(getChildren().indexOf(child));}
                * &lt;p&gt;
                * This method calls {@code figureRemoved} on all registered
                * {@code CompositeFigureListener}'s.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes the child at the specified index.
                * Returns the removed child figure.
                * &lt;p&gt;
                * Calls {@code figureRemoved} on all registered
                * {@code CompositeFigureListener}'s.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>removeChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes all children from the composite figure.
                * &lt;p&gt;
                * This is a convenience method for
                * {@code while(getChildCount() &gt; 0) removeChild(0); }
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeAllChildren</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Removes the specified child without firing events.
                * &lt;p&gt;
                * This method can be used to temporarily remove a child from this
                * CompositeFigure (for example to reorder the sequence of the children).
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code basicRemove(indexOf(child));}.
                * &lt;p&gt;
                * Returns the index of the removed figure. Returns -1 if the
                * figure was not a child of this CompositeFigure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>basicRemove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes the child at the specified index without firing events.
                * &lt;p&gt;
                * This method can be used to temporarily remove a child from this
                * CompositeFigure (for example to reorder the sequence of the children).
                * &lt;p&gt;
                * Returns the removed child figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>basicRemoveChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes all children from the composite figure without firing events.
                * &lt;p&gt;
                * This method can be used to temporarily remove a child from this
                * CompositeFigure (for example to reorder the sequence of the children).
                * &lt;p&gt;
                * This is a convenience method for
                * {@code while(getChildCount() &gt; 0) basicRemoveChild(0); }
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicRemoveAllChildren</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns an unchangeable list view on the children.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>java</name>.<name>util</name>.
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Figure</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </name>
                </type>
                <name>getChildren</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of children.
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code getChildren().size();}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getChildCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the child figure at the specified index.
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code getChildren().get(index);}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>getChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the index of the specified child.
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code getChildren().indexOf(index);}.
                *
                * @return The index of the child, or -1 if the specified figure is not
                * a child of this CompositeFigure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns true if this composite figure contains the specified figure.
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code getChildren().contains(f);}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Get a Layouter object which encapsulated a layout
                * algorithm for this figure. Typically, a Layouter
                * accesses the child components of this figure and arranges
                * their graphical presentation.
                *
                * @return layout strategy used by this figure
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Layouter</name>
                </type>
                <name>getLayouter</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * A layout algorithm is used to define how the child components
                * should be laid out in relation to each other. The task for
                * layouting the child components for presentation is delegated
                * to a Layouter which can be plugged in at runtime.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>layout</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Set a Layouter object which encapsulated a layout
                * algorithm for this figure. Typically, a Layouter
                * accesses the child components of this figure and arranges
                * their graphical presentation. It is a good idea to set
                * the Layouter in the protected initialize() method
                * so it can be recreated if a GraphicalCompositeFigure is
                * read and restored from a StorableInput stream.
                *
                *
                * @param newValue encapsulation of a layout algorithm.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLayouter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Layouter</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a listener for this composite figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addCompositeFigureListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CompositeFigureListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a listener from this composite figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeCompositeFigureListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CompositeFigureListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
