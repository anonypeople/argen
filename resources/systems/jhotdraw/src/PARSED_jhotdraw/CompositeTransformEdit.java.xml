<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\CompositeTransformEdit.java">
    <comment type="block">/*
        * @(#)CompositeTransformEdit.java 1.0 2006-01-21
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * CompositeTransformEdit.
        *
        * @author Werner Randelshofer
        * @version 1.0 2006-01-21 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CompositeTransformEdit</name>
        <super>
            <extends>extends
                <name>AbstractUndoableEdit</name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>AbstractFigure</name>
                    </type>
                    <name>owner</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>AffineTransform</name>
                    </type>
                    <name>tx</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * True if this edit has never received &lt;code&gt;end&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>inProgress</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Creates a new instance. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>CompositeTransformEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AbstractFigure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>tx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>owner</name>
                            </name>
                            =
                            <name>owner</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>tx</name>
                            </name>
                            = (<name>AffineTransform</name>)
                            <call>
                                <name><name>tx</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <empty_stmt>;</empty_stmt>
                    <expr_stmt>
                        <expr>
                            <name>inProgress</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPresentationName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>"Figur transformieren"</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>addEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEdit</name>
                            </type>
                            <name>anEdit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>anEdit</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>end</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <name>inProgress</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>anEdit</name>.
                                                            <name>die</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>replaceEdit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEdit</name>
                            </type>
                            <name>anEdit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="block">/*
                        if (anEdit instanceof CompositeTransformEdit) {
                        CompositeTransformEdit that = (CompositeTransformEdit) anEdit;
                        if (that.owner == this.owner) {
                        this.tx.concatenate(that.tx);
                        that.die();
                        return true;
                        }
                        }*/
                    </comment>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>redo</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CannotRedoException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>redo</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>willChange</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>transform</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tx</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>changed</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>undo</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CannotUndoException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>undo</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>willChange</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>owner</name>.
                                            <name>transform</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>tx</name>.
                                                            <name>createInverse</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoninvertibleTransformException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ex</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>owner</name>.
                                    <name>changed</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns true if this edit is in progress--that is, it has not
                * received end. This generally means that edits are still being
                * added to it.
                *
                * @see #end
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isInProgress</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>inProgress</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Sets &lt;code&gt;inProgress&lt;/code&gt; to false.
                *
                * @see #canUndo
                * @see #canRedo
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>end</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>inProgress</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns false if &lt;code&gt;isInProgress&lt;/code&gt; or if super
                * returns false.
                *
                * @see #isInProgress
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canUndo</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name>isInProgress</name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>super</name>.
                                    <name>canUndo</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns false if &lt;code&gt;isInProgress&lt;/code&gt; or if super
                * returns false.
                *
                * @see #isInProgress
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canRedo</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name>isInProgress</name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>super</name>.
                                    <name>canRedo</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
