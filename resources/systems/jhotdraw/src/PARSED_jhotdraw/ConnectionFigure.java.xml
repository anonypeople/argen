<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\ConnectionFigure.java">
    <comment type="block">/*
        * @(#)ConnectionFigure.java 3.0 2007-05-18
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * A {@code ConnectionFigure} draws a connection between two {@link Connector}s.
        * A ConnectionFigure knows its start and end Connector.
        * A ConnectionFigure can be laid out using a {@link Liner}.
        *
        * @see Connector
        * @see Liner
        *
        * @author Werner Randelshofer
        * @version 3.0 2007-05-18 Methods canConnect use now Connector objects as
        * parameters instead of Figure objects. Removed method connectsSame. Added
        * support for BezierPath.Node's.
        * &lt;br&gt;2.1 2007-02-09 Method setLiner renamed.
        * &lt;br&gt;2.0 2006-01-14 Changed to support double precision coordinates.
        * &lt;br&gt;1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>ConnectionFigure</name>
        <super>
            <extends>extends
                <name>Figure</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// DRAWING</comment>
            <comment type="line">// SHAPE AND BOUNDS</comment>
            <comment type="line">// ATTRIBUTES</comment>
            <comment type="line">// EDITING</comment>
            <comment type="line">// CONNECTING</comment>
            <comment type="javadoc">/**
                * Sets the start {@code Connector} of the connection.
                * Set this to null to disconnect the start connection.
                * @param start the start Connector of the connection
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStartConnector</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Connector</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the start {@code Connector}.
                * Returns null, if there is no start connection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Connector</name>
                </type>
                <name>getStartConnector</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the end Connector of the connection.
                * Set this to null to disconnect the end connection.
                * @param end the end Connector of the connection
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEndConnector</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Connector</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the end Connector.
                * Returns null, if there is no end connection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Connector</name>
                </type>
                <name>getEndConnector</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Updates the start and end point of the figure and fires figureChanged
                * events.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>updateConnection</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if this ConnectionFigure can connect the specified
                * {@code Connector}s.
                * Implement this method to constrain the allowed connections between figures.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canConnect</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Connector</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Connector</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Checks if this {@code ConnectionFigure} can be connect to the specified
                * {@code Connector}.
                * This is used to provide an early feedback to the user, when he/she
                * creates a new connection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canConnect</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Connector</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the start point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStartPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the end point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEndPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the specified point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the node count.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNodeCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the specified point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the specified node.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>BezierPath</name>.
                        <name>Node</name>
                    </name>
                </type>
                <name>getNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the specified node.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>BezierPath</name>.
                                    <name>Node</name>
                                </name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the start point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getStartPoint</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the end point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getEndPoint</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the start figure of the connection.
                * This is a convenience method for doing getStartConnector().getOwner()
                * and handling null cases.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>getStartFigure</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the end figure of the connection.
                * This is a convenience method for doing getEndConnector().getOwner()
                * and handling null cases.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>getEndFigure</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="line">// COMPOSITE FIGURES</comment>
            <comment type="javadoc">/**
                * Get a Liner object which encapsulated a lineout
                * algorithm for this figure. Typically, a Liner
                * accesses the child components of this figure and arranges
                * their graphical presentation.
                *
                * @return lineout strategy used by this figure
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Liner</name>
                </type>
                <name>getLiner</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Set a Liner object which encapsulated a lineout
                * algorithm for this figure. Typically, a Liner
                * accesses the child components of this figure and arranges
                * their graphical presentation.
                *
                * @param newValue encapsulation of a lineout algorithm.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLiner</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Liner</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * A lineout algorithm is used to define how the child components
                * should be laid out in relation to each other. The task for
                * lineouting the child components for presentation is delegated
                * to a Liner which can be plugged in at runtime.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>lineout</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="line">// CLONING</comment>
            <comment type="line">// EVENT HANDLING</comment>
            }
        </block>
    </class>
</unit>
