<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\net\n3\nanoxml\ContentReader.java">
    <comment type="block">/* ContentReader.java NanoXML/Java
        *
        * $Revision: 1.4 $
        * $Date: 2002/01/04 21:03:28 $
        * $Name: RELEASE_2_2_1 $
        *
        * This file is part of NanoXML 2 for Java.
        * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
        *
        * This software is provided 'as-is', without any express or implied warranty.
        * In no event will the authors be held liable for any damages arising from the
        * use of this software.
        *
        * Permission is granted to anyone to use this software for any purpose,
        * including commercial applications, and to alter it and redistribute it
        * freely, subject to the following restrictions:
        *
        * 1. The origin of this software must not be misrepresented; you must not
        * claim that you wrote the original software. If you use this software in
        * a product, an acknowledgment in the product documentation would be
        * appreciated but is not required.
        *
        * 2. Altered source versions must be plainly marked as such, and must not be
        * misrepresented as being the original software.
        *
        * 3. This notice may not be removed or altered from any source distribution.
        */
    </comment>

    <package>package
        <name><name>net</name>.<name>n3</name>.
            <name>nanoxml</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * This reader reads data from another reader until a new element has
        * been encountered.
        *
        * @author Marc De Scheemaecker
        * @version $Name: RELEASE_2_2_1 $, $Revision: 1.4 $
        */
    </comment>
    <class>class
        <name>ContentReader</name>
        <super>
            <extends>extends
                <name>Reader</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The encapsulated reader.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>IXMLReader</name>
                    </type>
                    <name>reader</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Buffer.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>buffer</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Pointer into the buffer.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>bufferIndex</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The entity resolver.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>IXMLEntityResolver</name>
                    </type>
                    <name>resolver</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Creates the reader.
                *
                * @param reader the encapsulated reader
                * @param resolver the entity resolver
                * @param buffer data that has already been read from &lt;code&gt;reader&lt;/code&gt;
                */
            </comment>
            <constructor>
                <name>ContentReader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IXMLEntityResolver</name>
                            </type>
                            <name>resolver</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>reader</name>
                            </name>
                            =
                            <name>reader</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>resolver</name>
                            </name>
                            =
                            <name>resolver</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>buffer</name>
                            </name>
                            =
                            <name>buffer</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>bufferIndex</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Cleans up the object when it's destroyed.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>finalize</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Throwable</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>reader</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>resolver</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>buffer</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>finalize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Reads a block of data.
                *
                * @param outputBuffer where to put the read data
                * @param offset first position in buffer to put the data
                * @param size maximum number of chars to read
                *
                * @return the number of chars read, or -1 if at EOF
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>outputBuffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>charsRead</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferLength</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>buffer</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>(<name>offset</name> + <name>size</name>) &gt;
                                        <name><name>outputBuffer</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>size</name>
                                                =
                                                <name><name>outputBuffer</name>.
                                                    <name>length</name>
                                                </name>
                                                -
                                                <name>offset</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <while>while
                                <condition>(
                                    <expr>
                                        <name>charsRead</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>str</name> =
                                            <init>
                                                <expr>""</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch</name>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>bufferIndex</name>
                                                </name>
                                                &gt;=
                                                <name>bufferLength</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>str</name>
                                                        =
                                                        <call>
                                                            <name><name>XMLUtil</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>reader</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>'&amp;'</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ch</name>
                                                        =
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ch</name>
                                                        =
                                                        <call>
                                                            <name><name>this</name>.<name>buffer</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>bufferIndex</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>bufferIndex</name>
                                                        </name>
                                                        ++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>outputBuffer</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>charsRead</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <name>ch</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr><name>charsRead</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <continue>continue;</continue>
                                                <comment type="line">// don't interprete chars in the buffer</comment>
                                                }
                                            </block>
                                        </else>
                                    </if>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ch</name>
                                                == '&lt;'
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.<name>reader</name>.
                                                                <name>unread</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch</name> == '&amp;') &amp;&amp; (
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                &gt; 1)
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            == '#'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ch</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>XMLUtil</name>.
                                                                            <name>processCharLiteral</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>str</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>XMLUtil</name>.
                                                                            <name>processEntity</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>str</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>reader</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>resolver</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <continue>continue;</continue>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputBuffer</name>
                                                <index>[
                                                    <expr>
                                                        <name>charsRead</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>ch</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr><name>charsRead</name>++
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>charsRead</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>charsRead</name>
                                                = -1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <return>return
                                <expr>
                                    <name>charsRead</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLParseException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getMessage</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Skips remaining data and closes the stream.
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferLength</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>buffer</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>;</init>
                                <condition>;</condition>
                                <incr/>)
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>str</name> =
                                            <init>
                                                <expr>""</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch</name>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>bufferIndex</name>
                                                </name>
                                                &gt;=
                                                <name>bufferLength</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>str</name>
                                                        =
                                                        <call>
                                                            <name><name>XMLUtil</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>reader</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>'&amp;'</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ch</name>
                                                        =
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ch</name>
                                                        =
                                                        <call>
                                                            <name><name>this</name>.<name>buffer</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>bufferIndex</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>bufferIndex</name>
                                                        </name>
                                                        ++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <continue>continue;</continue>
                                                <comment type="line">// don't interprete chars in the buffer</comment>
                                                }
                                            </block>
                                        </else>
                                    </if>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ch</name>
                                                == '&lt;'
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.<name>reader</name>.
                                                                <name>unread</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch</name> == '&amp;') &amp;&amp; (
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                &gt; 1)
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            != '#'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>XMLUtil</name>.
                                                                            <name>processEntity</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>str</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>reader</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>resolver</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLParseException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getMessage</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
