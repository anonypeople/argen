<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\DragHandle.java">
    <comment type="block">/*
        * @(#)DragHandle.java 1.0 July 24, 2007
        *
        * Copyright (c) 2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * A handle that changes the location of the owning figure, the handle
        * covers all visible points of the figure.
        * &lt;p&gt;
        * Usually, DragHandle is not needed, because of the {@link DragTracker}
        * in the SelectionTool. Use a (subclass of) DragHandle, if you want
        * to implement figure specific drag behavior. A CompositeFigure can
        * create DragHandle's for all its child figures, to support dragging
        * of child figures without having to decompose the CompositeFigure.
        *
        * @author Werner Randelshofer
        * @version 1.0 July 24, 2007 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>DragHandle</name>
        <super>
            <extends>extends
                <name>AbstractHandle</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * The previously handled x and y coordinates.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name><name>Point2D</name>.
                            <name>Double</name>
                        </name>
                    </type>
                    <name>oldPoint</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Creates a new instance. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>DragHandle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>owner</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>owner</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Draws nothing.
                * Drag Handles have no visual appearance of their own.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>draw</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>oldPoint</name>
                            =
                            <call>
                                <name><name>view</name>.
                                    <name>getConstrainer</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>constrainPoint</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>view</name>.
                                                    <name>viewToDrawing</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>anchor</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackStep</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>lead</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>f</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getOwner</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>newPoint</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>view</name>.
                                            <name>getConstrainer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>constrainPoint</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>view</name>.
                                                            <name>viewToDrawing</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>lead</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>tx</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>AffineTransform</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tx</name>.
                                    <name>translate</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>newPoint</name>.
                                                <name>x</name>
                                            </name>
                                            -
                                            <name><name>oldPoint</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>newPoint</name>.
                                                <name>y</name>
                                            </name>
                                            -
                                            <name><name>oldPoint</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>f</name>.
                                    <name>willChange</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>f</name>.
                                    <name>transform</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tx</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>f</name>.
                                    <name>changed</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>oldPoint</name>
                            =
                            <name>newPoint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>lead</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>tx</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>AffineTransform</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tx</name>.
                                    <name>translate</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>lead</name>.
                                                <name>x</name>
                                            </name>
                                            -
                                            <name><name>anchor</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>lead</name>.
                                                <name>y</name>
                                            </name>
                                            -
                                            <name><name>anchor</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>LinkedList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>draggedFigures</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>LinkedList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Figure</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>draggedFigures</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getOwner</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>dropPoint</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getView</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>viewToDrawing</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lead</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>dropTarget</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getView</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getDrawing</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>findFigureExcept</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>dropPoint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>draggedFigures</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>dropTarget</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                        </type>
                                        <name>snapBack</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>dropTarget</name>.
                                                        <name>handleDrop</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>dropPoint</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>draggedFigures</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getView</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>snapBack</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>tx</name>
                                                    = new
                                                    <call>
                                                        <name>AffineTransform</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>tx</name>.
                                                            <name>translate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>anchor</name>.
                                                                        <name>x</name>
                                                                    </name>
                                                                    -
                                                                    <name><name>lead</name>.
                                                                        <name>x</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>anchor</name>.
                                                                        <name>y</name>
                                                                    </name>
                                                                    -
                                                                    <name><name>lead</name>.
                                                                        <name>y</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>Figure</name>
                                                        </type>
                                                        <name>f</name> :
                                                        <range>
                                                            <expr>
                                                                <name>draggedFigures</name>
                                                            </expr>
                                                        </range>
                                                    </decl>
                                                </init>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>f</name>.
                                                                    <name>willChange</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>f</name>.
                                                                    <name>transform</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tx</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>f</name>.
                                                                    <name>changed</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>fireUndoableEditHappened</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <call>
                                                                        <name>TransformEdit</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>getOwner</name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>tx</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>fireUndoableEditHappened</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>TransformEdit</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>getOwner</name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>tx</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getOwner</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>contains</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getView</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>viewToDrawing</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>p</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Rectangle</name>
                </type>
                <name>basicGetBounds</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getView</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>drawingToView</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getOwner</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getDrawingArea</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns a cursor for the handle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Cursor</name>
                </type>
                <name>getCursor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Cursor</name>.
                                    <name>getPredefinedCursor</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Cursor</name>.
                                                <name>HAND_CURSOR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

</unit>
