<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\Drawing.java">
    <comment type="block">/*
        * @(#)Drawing.java 3.0 2007-07-17
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>xml</name>
        </name>
        .*;
    </import>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Graphics2D</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>font</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * A drawing holds figures. It can draw its figures, and it can find
        * them on its drawing area.
        * &lt;br&gt;
        * A drawing notifies listeners when a figure is added or removed,
        * and when its drawing area needs to be repainted.
        * &lt;p&gt;
        * The drawing object is used by figure handles and editing tools
        * to fire undoable edit events. This way, undoable edit listeners only need to
        * register on a drawing in order to receive all undoable edit
        * events related to a drawing.
        * &lt;p&gt;
        * A drawing can have a number of input formats and output formats,
        * allowing to load and save the drawing, and to copy and paste figures
        * into the clipboard.
        *
        * @author Werner Randelshofer
        * @version 3.0 2007-07-17 Refactored Drawing from an independent interface
        * into an interface that extends from CompositeFigure.
        * &lt;br&gt;2.4 2007-05-21 Added add-methods with index to the interface.
        * &lt;br&gt;2.3 2007-05-16 Added method findFigureBehind.
        * &lt;br&gt;2.2 2007-04-09 Methods setCanvasSize, getCanvasSize added.
        * &lt;br&gt;2.1 2006-12-31 Changed to return lists instead of collections.
        * &lt;br&gt;2.0 2006-01-14 Changed to support double precision coordinates.
        * &lt;br&gt;1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Drawing</name>
        <super>
            <extends>extends <name>CompositeFigure</name>, <name>Serializable</name>,
                <name>DOMStorable</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Adds a figure to the drawing.
                * The drawing sends an {@code addNotify} message to the figure
                * after it has been added.
                *
                * @see Figure#addNotify
                *
                * @param figure to be added to the drawing
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a figure to the drawing.
                * The drawing sends an {@code addNotify} message to the figure
                * after it has been added.
                *
                * @see Figure#addNotify
                *
                * @param index The z-index of the figure.
                * @param figure to be added to the drawing
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a collection of figures to the drawing.
                * The drawing sends an {@code addNotify} message to each figure
                * after it has been added.
                *
                * @see Figure#addNotify
                *
                * @param figures to be added to the drawing
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a collection of figures to the drawing.
                * The drawing sends an {@code addNotify} message to each figure
                * after it has been added.
                *
                * @see Figure#addNotify
                *
                * @param index The z-index of the figure.
                * @param figures to be added to the drawing
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a figure from the drawing.
                * The drawing sends a {@code removeNotify} message to the figure
                * before it is removed.
                *
                * @see Figure#removeNotify
                *
                * @param figure that is part of the drawing and should be removed
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes the specified figures from the drawing.
                * The drawing sends a {@code removeNotify} message to each figure
                * before it is removed.
                *
                * @see Figure#removeNotify
                *
                * @param figures A collection of figures which are part of the drawing
                * and should be removed
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a figure temporarily from the drawing.
                *
                * @see #basicAdd(Figure)
                *
                * @param figure that is part of the drawing and should be removed
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>basicRemove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Removes the specified figures temporarily from the drawing.
                *
                * @see #basicAddAll(int, Collection)
                * @param figures A collection of figures which are part of the drawing
                * and should be removed
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicRemoveAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Reinserts a figure which was temporarily removed using basicRemove.
                * &lt;p&gt;
                * This is a convenience method for calling
                * {@code basicAdd(size(), figure)}.
                *
                * @param figure that is part of the drawing and should be removed
                * @see #basicRemove(Figure)
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicAdd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Reinserts a figure which was temporarily removed using basicRemove.
                *
                * @see #basicRemove(Figure)
                * @param figure that is part of the drawing and should be removed
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicAdd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the index of the specified figure.
                *
                * Returns -1 if the Figure is not directly contained in this Drawing, for
                * example if the Figure is a child of a CompositeFigure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Reinserts the specified figures which were temporarily removed from
                * the drawing.
                *
                *
                * @param index The insertion index.
                * @param figures A collection of figures which are part of the drawing
                * and should be reinserted.
                * @see #basicRemoveAll(Collection)
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>basicAddAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Draws all the figures from back to front.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>draw</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Draws only the figures in the supplied set.
                * /
                * void draw(Graphics2D g, ArrayList figures);
                */
            </comment>

            <comment type="javadoc">/**
                * Returns all figures that lie within or intersect the specified
                * bounds. The figures are returned in Z-order from back to front.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>findFigures</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>bounds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns all figures that lie within the specified
                * bounds. The figures are returned in Z-order from back to front.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>findFiguresWithin</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>bounds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the figures of the drawing.
                * @return A Collection of Figure's.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getChildren</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of figures in this drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getChildCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Finds a top level Figure. Use this call for hit detection that
                * should not descend into the figure's children.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Figure</name>
                </type>
                <name>findFigure</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Finds a top level Figure. Use this call for hit detection that
                * should not descend into the figure's children.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Figure</name>
                </type>
                <name>findFigureExcept</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>ignore</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Finds a top level Figure. Use this call for hit detection that
                * should not descend into the figure's children.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Figure</name>
                </type>
                <name>findFigureExcept</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>ignore</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Finds a top level Figure which is behind the specified Figure.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Figure</name>
                </type>
                <name>findFigureBehind</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Finds a top level Figure which is behind the specified Figures.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Figure</name>
                </type>
                <name>findFigureBehind</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns a list of the figures in Z-Order from front to back.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getFiguresFrontToBack</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Finds a figure but descends into a figure's
                * children. Use this method to implement &lt;i&gt;click-through&lt;/i&gt;
                * hit detection, that is, you want to detect the inner most
                * figure containing the given point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>findFigureInside</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sends a figure to the back of the drawing.
                *
                * @param figure that is part of the drawing
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>sendToBack</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Brings a figure to the front.
                *
                * @param figure that is part of the drawing
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>bringToFront</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a copy of the provided collection which is sorted
                * in z order from back to front.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>sort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a listener for undooable edit events.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addUndoableEditListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEditListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a listener for undoable edit events.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeUndoableEditListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEditListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Notify all listenerList that have registered interest for
                * notification on this event type.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fireUndoableEditHappened</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UndoableEdit</name>
                            </type>
                            <name>edit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the font render context used to do text leyout and text drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>FontRenderContext</name>
                </type>
                <name>getFontRenderContext</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the font render context used to do text leyout and text drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFontRenderContext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FontRenderContext</name>
                            </type>
                            <name>frc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the lock object on which all threads acting in Figures in this
                * drawing synchronize to prevent race conditions.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getLock</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Adds an input format to the drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addInputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds an output format to the drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addOutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets input formats for the Drawing in order of preferred formats.
                * &lt;p&gt;
                * The input formats are used for loading the Drawing from a file and for
                * pasting Figures from the clipboard into the Drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInputFormats</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>InputFormat</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>formats</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets input formats for the Drawing in order of preferred formats.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>InputFormat</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getInputFormats</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets output formats for the Drawing in order of preferred formats.
                * &lt;p&gt;
                * The output formats are used for saving the Drawing into a file and for
                * cutting and copying Figures from the Drawing into the clipboard.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutputFormats</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>OutputFormat</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>formats</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets output formats for the Drawing in order of preferred formats.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>OutputFormat</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getOutputFormats</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the canvas size for this drawing.
                * &lt;p&gt;
                * If &lt;code&gt;canvasSize&lt;/code&gt; is &lt;/code&gt;null&lt;/code&gt;, the size of the canvas
                * is expected to be adjusted dynamically to fit the drawing areas of all
                * figures contained in the drawing.
                * &lt;p&gt;
                * This is a bound property.
                *
                * @param canvasSize The canvas size, or null.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCanvasSize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Dimension2DDouble</name>
                            </type>
                            <name>canvasSize</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the canvas size of this drawing.
                * If null is returned, the canvas size needs to be adjusted dynamically
                * to fit the drawing areas of all figures contained in the drawing.
                *
                * @return The canvas size, or null.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Dimension2DDouble</name>
                </type>
                <name>getCanvasSize</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// ATTRIBUTES</comment>
            <comment type="javadoc">/**
                * Sets an attribute of the Drawing without firing events.
                * AttributeKey name and semantics are defined by the class implementing
                * the Drawing interface.
                * &lt;p&gt;
                * Use &lt;code&gt;AttributeKey.set&lt;/code&gt; for typesafe access to this
                * method.
                * /
                public void setAttribute(AttributeKey key, Object value);
                /**
                * Gets an attribute from the Drawing.
                * &lt;p&gt;
                * Use &lt;code&gt;AttributeKey.get()&lt;/code&gt; for typesafe access to this method.
                *
                * @see AttributeKey#get
                *
                * @return Returns the attribute value. If the Drawing does not have an
                * attribute with the specified key, returns key.getDefaultValue().
                * /
                public Object getAttribute(AttributeKey key);
                /**
                * Returns a view to all attributes of this drawing.
                * By convention, an unmodifiable map is returned.
                * /
                public Map&lt;AttributeKey, Object&gt; getAttributes();

                /**
                * Gets data which can be used to restore the attributes of the drawing
                * after a setAttribute has been applied to it.
                *
                * @see #basicSetAttribue(AttributeKey,Object)
                * /
                public Object getAttributesRestoreData();
                /**
                * Restores the attributes of the drawing to a previously stored state.
                * /
                public void restoreAttributesTo(Object restoreData);
                */
            </comment>
            }
        </block>
    </class>

</unit>
