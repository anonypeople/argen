<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\DrawingEditor.java">
    <comment type="block">/*
        * @(#)DrawingEditor.java 2.4 2007-12-25
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * DrawingEditor defines the interface for coordinating
        * the different objects that participate in a drawing editor.
        * &lt;p&gt;
        * For applications with a single document interface (SDI) there is typically
        * one DrawingEditor instance per document window. So that each window
        * can have its own toolbars and drawing palettes.
        * &lt;p&gt;
        * For applications with a Windows-style multiple document interface (MDI) there
        * is typically one DrawingEditor instance per parent window. All document
        * windows within a parent window share the toolbars and drawing palettes
        * provided be the parent window.
        * &lt;p&gt;
        * For applications with a Mac OS X-style application document interface (OSX)
        * there is typically a single DrawingEditor instance for the application. All
        * document windows within the application share a single set of toolbars and
        * drawing palettes.
        *
        * @author Werner Randelshofer
        * @version 2.4 2007-12-25 Renamed PROP_CURRENT_VIEW to ACTIVE_VIEW_PROPERTY.
        * &lt;br&gt;2.3 2007-05-26 Streamlined methods setActiveView, setFocusedView, getActiveView
        * into setActiveView, getActiveView.
        * &lt;br&gt;2.2 2007-04-16 Added method getDefaultAttributes
        * &lt;br&gt;2.1 2006-03-15 Support for enabled state added.
        * &lt;br&gt;2.0 2006-02-13 Revised to support multiple drawing views.
        * &lt;br&gt;1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>DrawingEditor</name>
        <block>{
            <comment type="javadoc">/**
                * The property name for the active view Property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ACTIVE_VIEW_PROPERTY</name> =
                    <init>
                        <expr>"activeView"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Gets the editor's current drawing.
                * /
                Drawing getDrawing();
                /**
                * Sets the editor's current drawing.
                * /
                void setDrawing(Drawing drawing);
                */
            </comment>
            <comment type="javadoc">/**
                * Adds a drawing view to the editor.
                * The editor invokes addNotify on the view, and it registers its tool
                * as an event listener on the view.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a drawing view from the editor.
                * The editor invokes removeNotify on the view, and it unregisters its tool
                * on the view.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets all drawing views associated with this editor.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>DrawingView</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getDrawingViews</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the editor's active drawing view.
                * This can be null, if the editor has no views.
                */
            </comment>
            <function_decl>
                <type>
                    <name>DrawingView</name>
                </type>
                <name>getActiveView</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the editor's active drawing view.
                * This can be set to null, if the editor has no views.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setActiveView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Calls deactivate on the previously active tool of this drawing editor.
                * Calls activate on the provided tool.
                * Forwards all mouse, mouse moation and keyboard events that occur on the
                * DrawingView to the provided tool.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setTool</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Tool</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the current tool.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Tool</name>
                </type>
                <name>getTool</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the cursor on the view(s) of the drawing editor.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setCursor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Cursor</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Finds a handle at the given coordinates.
                * @return A handle, null if no handle is found.
                * /
                public Handle findHandle(Point p);
                */
            </comment>

            <comment type="javadoc">/**
                * Finds a drawing view.
                * This is used by Tool to identify the view of which it has received
                * an event.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>DrawingView</name>
                </type>
                <name>findView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Container</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets a default attribute of the editor.
                * The default attribute will be used by creation tools, to create a new
                * figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDefaultAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AttributeKey</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets a default attribute from the editor.
                * The default attribute will be used by creation tools, to create a new
                * figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getDefaultAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AttributeKey</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Applies the default attributes to the specified figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>applyDefaultAttributesTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns an immutable Map with the default attributes of this editor.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>AttributeKey</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getDefaultAttributes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the enabled state of the drawing editor.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEnabled</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the enabled state of the drawing editor.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEnabled</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addPropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removePropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
