<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\DrawingView.java">
    <comment type="block">/*
        * @(#)DrawingView.java 4.3 2007-12-25
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * A DrawingView paints a {@link Drawing} on a JComponent.
        * &lt;p&gt;
        * To support editing, a DrawingView can paint {@link Handle}s and
        * the current {@link Tool} of the {@link DrawingEditor} on top of the
        * drawing. It can render a {@link Constrainer} below the drawing.
        * &lt;p&gt;
        * Tools can register mouse and key listeners on the DrawingView.
        * &lt;p&gt;
        * A DrawingView can paint the drawing with a scale factor. It supports
        * conversion between scaled view coordinates and drawing coordinates.
        *
        *
        * @author Werner Randelshofer
        * @version 4.3 2007-12-25 Renamed property names from PROP_â¦ to â¦_PROPERTY.
        * &lt;br&gt;4.2 2007-09-12 The DrawingView is now responsible for
        * holding the Constrainer objects which affect editing on this view.
        * &lt;br&gt;4.1 2007-05-15 getSelectedFigures returns a Set instead of a
        * Collection.
        * &lt;br&gt;4.0 2006-12-03 Replaced operation getContainer by getComponent.
        * &lt;br&gt;3.1 2006-03-15 Support for enabled state added.
        * &lt;br&gt;3.0 2006-02-20 Changed to share a single DrawingEditor by multiple
        * views.
        * &lt;br&gt;2.0 2006-01-14 Changed to support double precision coordinates.
        * &lt;br&gt;1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>DrawingView</name>
        <block>{
            <comment type="javadoc">/**
                * This constant is used to identify the drawing property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>DRAWING_PROPERTY</name> =
                    <init>
                        <expr>"drawing"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the cursor property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>CURSOR_PROPERTY</name> =
                    <init>
                        <expr>"cursor"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the constrainer property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>CONSTRAINER_PROPERTY</name> =
                    <init>
                        <expr>"constrainer"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the visible constrainer property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>VISIBLE_CONSTRAINER_PROPERTY</name> =
                    <init>
                        <expr>"visibleConstrainer"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the invisible constrainer property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>INVISIBLE_CONSTRAINER_PROPERTY</name> =
                    <init>
                        <expr>"invisibleConstrainer"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the constrainer visible property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>CONSTRAINER_VISIBLE_PROPERTY</name> =
                    <init>
                        <expr>"constrainerVisible"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the scale factor property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>SCALE_FACTOR_PROPERTY</name> =
                    <init>
                        <expr>"scaleFactor"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the handle detail level property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>HANDLE_DETAIL_LEVEL_PROPERTY</name> =
                    <init>
                        <expr>"handleDetailLevel"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant is used to identify the enabled property of the DrawingView.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ENABLED_PROPERTY</name> =
                    <init>
                        <expr>"enabled"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Gets the drawing.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Drawing</name>
                </type>
                <name>getDrawing</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets and installs another drawing in the view.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDrawing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Drawing</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the cursor of the DrawingView.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCursor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Cursor</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Test whether a given figure is selected.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFigureSelected</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>checkFigure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a figure to the current selection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addToSelection</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a collection of figures to the current selection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addToSelection</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a figure from the selection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeFromSelection</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If a figure isn't selected it is added to the selection.
                * Otherwise it is removed from the selection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>toggleSelection</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Clears the current selection.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clearSelection</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Selects all figures.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>selectAll</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the selected figures. Returns an empty set, if no figures are selected.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getSelectedFigures</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the number of selected figures.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getSelectionCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Finds a handle at the given coordinates.
                * @return A handle, null if no handle is found.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Handle</name>
                </type>
                <name>findHandle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets compatible handles.
                * @return A collection containing the handle and all compatible handles.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Handle</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCompatibleHandles</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Handle</name>
                            </type>
                            <name>handle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Finds a figure at the given point.
                * @return A figure, null if no figure is found.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>findFigure</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns all figures that lie within or intersect the specified
                * bounds. The figures are returned in Z-order from back to front.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>findFigures</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns all figures that lie within the specified
                * bounds. The figures are returned in Z-order from back to front.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>findFiguresWithin</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Informs the view that it has been added to the specified editor.
                * The view must draw the tool of the editor, if getActiveView() of the
                * editor returns the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addNotify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingEditor</name>
                            </type>
                            <name>editor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Informs the view that it has been removed from the specified editor.
                * The view must not draw the tool from the editor anymore.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeNotify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingEditor</name>
                            </type>
                            <name>editor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>addMouseListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MouseListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>removeMouseListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MouseListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>addKeyListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>KeyListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>removeKeyListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>KeyListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>addMouseMotionListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MouseMotionListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>removeMouseMotionListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MouseMotionListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Add a listener for selection changes in this DrawingView.
                * @param fsl jhotdraw.framework.FigureSelectionListener
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addFigureSelectionListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureSelectionListener</name>
                            </type>
                            <name>fsl</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Remove a listener for selection changes in this DrawingView.
                * @param fsl jhotdraw.framework.FigureSelectionListener
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeFigureSelectionListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureSelectionListener</name>
                            </type>
                            <name>fsl</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>requestFocus</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Converts drawing coordinates to view coordinates.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Point</name>
                </type>
                <name>drawingToView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Converts view coordinates to drawing coordinates.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>viewToDrawing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Converts drawing coordinates to view coordinates.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Rectangle</name>
                </type>
                <name>drawingToView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Converts view coordinates to drawing coordinates.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Rectangle2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>viewToDrawing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the current constrainer of this view.
                * If isConstrainerVisible is true, this method returns getVisibleConstrainer,
                * otherwise it returns getInvisibleConstrainer.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Constrainer</name>
                </type>
                <name>getConstrainer</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the editor's constrainer for this view, for use, when the
                * visible constrainer is turned on.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setVisibleConstrainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Constrainer</name>
                            </type>
                            <name>constrainer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the editor's constrainer for this view, for use, when the
                * visible constrainer is turned on.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Constrainer</name>
                </type>
                <name>getVisibleConstrainer</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the editor's constrainer for this view, for use, when the
                * visible constrainer is turned off.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInvisibleConstrainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Constrainer</name>
                            </type>
                            <name>constrainer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the editor's constrainer for this view, for use, when the
                * visible constrainer is turned off.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Constrainer</name>
                </type>
                <name>getInvisibleConstrainer</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Changes between a visible Constrainer and an invisible Constrainer.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setConstrainerVisible</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if the visible Constrainer is in use, returns false,
                * if the invisible Constrainer is in use.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isConstrainerVisible</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the JComponent of the drawing view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>JComponent</name>
                </type>
                <name>getComponent</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets an transform which can be used to convert
                * drawing coordinates to view coordinates.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>AffineTransform</name>
                </type>
                <name>getDrawingToViewTransform</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the scale factor of the drawing view.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>getScaleFactor</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the scale factor of the drawing view.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setScaleFactor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The detail level of the handles.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setHandleDetailLevel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the detail level of the handles.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getHandleDetailLevel</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the enabled state of the drawing view.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEnabled</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the enabled state of the drawing view.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEnabled</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addPropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removePropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
