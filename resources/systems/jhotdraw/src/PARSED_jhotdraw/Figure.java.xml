<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\Figure.java">
    <comment type="block">/*
        * @(#)Figure.java 7.0 2008-02-13
        *
        * Copyright (c) 1996-2008 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>undo</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.<name>xml</name>.
            <name>DOMStorable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A Figure knows its bounds and it can draw itself. A figure is an element of a
        * {@link Drawing}.
        * &lt;p&gt;
        * A figure has a set of {@link Handle}s to manipulate its shape or attributes. A figure
        * has one or more {@link Connector}s that define how to locate a connection point.
        * &lt;p&gt;
        * Figures can have an open ended set of attributes. An attribute is identified
        * by an {@link AttributeKey}.
        * &lt;p&gt;
        * Specialized subinterfaces of Figure allow to compose a figure from
        * several figures, to connect a figure to other figures, to hold text or
        * an image, and to layout a figure.
        *
        *
        * @author Werner Randelshofer
        * @version 7.0.1 2008-02-13 Fixed comments on
        * setAttribute and getAttribute methods.
        * &lt;br&gt;7.0 2008-02-13 Huw Jones: Added method isTransformable.
        * &lt;br&gt;6.0 2007-12-19 Removed method invalidate.
        * &lt;br&gt;5.0 2007-07-24 Removed method isSelectable and added
        * isSelectable and isRemovable instead.
        * &lt;br&gt;4.2 2007-05-19 Removed setConnectorsVisible, isConnectorsVisible
        * method due to changes in Connector interface.
        * &lt;br&gt;4.1 2007-05-18 Removed addUndoableEditListener,
        * removeUndoableEditListener methods. They are not needed anymore, due to
        * the removal of the basicSet methods for undoable attributes.
        * &lt;br&gt;4.0 2007-05-12 Replaced set.../basicSet... design for undoable attributes
        * by setAttribute/getAttributesRestoreData/restoreAttributesTo design.
        * &lt;br&gt;3.1 2007-04-14 Method handleMouseClick is now required to consume
        * an event, if it returns true.
        * &lt;br&gt;3.0 2006-01-20 Reworked for J2SE 1.5.
        * @see Drawing
        * @see Handle
        * @see Connector
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Figure</name>
        <super>
            <extends>extends <name>Cloneable</name>, <name>Serializable</name>,
                <name>DOMStorable</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// DRAWING</comment>
            <comment type="javadoc">/**
                * Draws the figure.
                *
                * @param g The Graphics2D to draw to.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>draw</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the layer number of the figure.
                * The layer is used to determine the z-ordering of a figure inside of a
                * drawing. Figures with a higher layer number are drawn after figures
                * with a lower number.
                * The z-order of figures within the same layer is determined by the
                * sequence the figures were added to a drawing. Figures added later to
                * a drawn after figures which have been added before.
                * If a figure changes its layer, it must fire a
                * &lt;code&gt;FigureListener.figureChanged&lt;/code&gt; event to
                * its figure listeners.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLayer</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * A Figure is only drawn by a CompositeFigure, if it is visible.
                * Layouter's should ignore invisible figures too.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isVisible</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="line">// BOUNDS</comment>
            <comment type="javadoc">/**
                * Sets the logical and untransformed bounds of the figure.
                * &lt;p&gt;
                * This is used by Tool's which create a new Figure and by Tool's which
                * connect a Figure to another Figure.
                * &lt;p&gt;
                * This is a basic operation which does not fire events. Use the following
                * code sequence, if you need event firing:
                * &lt;pre&gt;
                * aFigure.willChange();
                * aFigure.setBounds(...);
                * aFigure.changed();
                * &lt;/pre&gt;
                *
                *
                * @param start the start point of the bounds
                * @param end the end point of the bounds
                * @see #getBounds
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setBounds</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the untransformed logical start point of the bounds.
                *
                *
                *
                * @see #setBounds
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getStartPoint</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the untransformed logical end point of the bounds.
                *
                *
                *
                * @see #setBounds
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getEndPoint</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the untransformed logicalbounds of the figure as a Rectangle.
                * The handle bounds are used by Handle objects for adjusting the
                * figure and for aligning the figure on a grid.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Rectangle2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getBounds</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the drawing area of the figure as a Rectangle.
                * The drawing area is used to improve the performance of GraphicView, for
                * example for clipping of repaints and for clipping of mouse events.
                * &lt;p&gt;
                * The drawing area needs to be large enough, to take line width, line caps
                * and other decorations into account that exceed the bounds of the Figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>Rectangle2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>getDrawingArea</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The preferred size is used by Layouter to determine the preferred
                * size of a Figure. For most Figure's this is the same as the
                * dimensions returned by getBounds.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Dimension2DDouble</name>
                </type>
                <name>getPreferredSize</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Checks if a point is contained by the figure.
                * &lt;p&gt;
                * This is used for hit testing by Tool's.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="line">// TRANSFORMING</comment>
            <comment type="javadoc">/**
                * Gets data which can be used to restore the transformation of the figure
                * without loss of precision, after a transform has been applied to it.
                *
                *
                * @see #transform(AffineTransform)
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getTransformRestoreData</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Restores the transform of the figure to a previously stored state.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>restoreTransformTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>restoreData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Transforms the shape of the Figure. Transformations using double
                * precision arithmethics are inherently lossy operations. Therefore it is
                * recommended to use getTransformRestoreData() restoreTransformTo() to
                * provide lossless undo/redo functionality.
                * &lt;p&gt;
                * This is a basic operation which does not fire events. Use the following
                * code sequence, if you need event firing:
                * &lt;pre&gt;
                * aFigure.willChange();
                * aFigure.transform(...);
                * aFigure.changed();
                * &lt;/pre&gt;
                *
                *
                * @param tx The transformation.
                * @see #getTransformRestoreData
                * @see #restoreTransformTo
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>tx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// ATTRIBUTES</comment>
            <comment type="javadoc">/**
                * Sets an attribute of the figure and calls attributeChanged on all
                * registered FigureListener's.
                * &lt;p&gt;
                * This method is not typesafe, you should never call it directly, use
                * &lt;code&gt;AttributeKey.set&lt;/code&gt; instead.
                *
                * @see AttributeKey#set
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AttributeKey</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets an attribute from the Figure.
                * &lt;p&gt;
                * This method is not typesafe, you should never call it directly, use
                * &lt;code&gt;AttributeKey.get&lt;/code&gt; instead.
                *
                * @see AttributeKey#get
                *
                * @return Returns the attribute value. If the Figure does not have an
                * attribute with the specified key, returns key.getDefaultValue().
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AttributeKey</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view to all attributes of this figure.
                * By convention, an unmodifiable map is returned.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>AttributeKey</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getAttributes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets data which can be used to restore the attributes of the figure
                * after a setAttribute has been applied to it.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getAttributesRestoreData</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Restores the attributes of the figure to a previously stored state.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>restoreAttributesTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>restoreData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// EDITING</comment>
            <comment type="javadoc">/**
                * Returns true, if the user may select this figure.
                * If this operation returns false, Tool's should not select this
                * figure on behalf of the user.
                * &lt;p&gt;
                * Please note, that even if this method returns false, the Figure
                * may become part of a selection for other reasons. For example,
                * if the Figure is part of a GroupFigure, then the Figure is
                * indirectly part of the selection, when the user selects the
                * GroupFigure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSelectable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if the user may remove this figure.
                * If this operation returns false, Tool's should not remove this
                * figure on behalf of the user.
                * &lt;p&gt;
                * Please note, that even if this method returns false, the Figure
                * may be removed from the Drawing for other reasons. For example,
                * if the Figure is used to display a warning message, the Figure
                * can be removed from the Drawing, when the warning message is
                * no longer relevant.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isRemovable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if the user may transform this figure.
                * If this operation returns false, Tool's should not transform this
                * figure on behalf of the user.
                * &lt;p&gt;
                * Please note, that even if this method returns false, the Figure
                * may be transformed for other reasons. For example, if the Figure takes
                * part in an animation.
                *
                * @see #transform
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTransformable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Creates handles used to manipulate the figure.
                *
                * @param detailLevel The detail level of the handles. Usually this is 0 for
                * bounding box handles and 1 for point handles.
                * @return a Collection of handles
                * @see Handle
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Handle</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createHandles</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>detailLevel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a cursor for the specified location.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Cursor</name>
                </type>
                <name>getCursor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a collection of Action's for the specified location on the figure.
                *
                * &lt;p&gt;The collection may contain null entries. These entries are used
                * interpreted as separators in the popup menu.
                * &lt;p&gt;Actions can use the property Figure.ACTION_SUBMENU to specify a
                * submenu.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Action</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getActions</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a specialized tool for the specified location.
                * &lt;p&gt;Returns null, if no specialized tool is available.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Tool</name>
                </type>
                <name>getTool</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a tooltip for the specified location on the figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getToolTipText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// CONNECTING</comment>
            <comment type="javadoc">/**
                * Checks if this Figure can be connected.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canConnect</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets a connector for this figure at the given location.
                * A figure can have different connectors at different locations.
                *
                * @param p the location of the connector.
                * @param prototype The prototype used to create a connection or null if
                * unknown. This allows for specific connectors for different
                * connection figures.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Connector</name>
                </type>
                <name>findConnector</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ConnectionFigure</name>
                            </type>
                            <name>prototype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets a compatible connector.
                * If the provided connector is part of this figure, return the connector.
                * If the provided connector is part of another figure, return a connector
                * with the same semantics for this figure.
                * Return null, if no compatible connector is available.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Connector</name>
                </type>
                <name>findCompatibleConnector</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Connector</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isStartConnector</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns all connectors of this Figure for the specified prototype of
                * a ConnectionFigure.
                * &lt;p&gt;
                * This is used by connection tools and connection handles
                * to visualize the connectors when the user is about to
                * create a ConnectionFigure to this Figure.
                *
                * @param prototype The prototype used to create a connection or null if
                * unknown. This allows for specific connectors for different
                * connection figures.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Connector</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getConnectors</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ConnectionFigure</name>
                            </type>
                            <name>prototype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// COMPOSITE FIGURES</comment>
            <comment type="javadoc">/**
                * Checks whether the given figure is contained in this figure.
                * A figure includes itself.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>includes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Figure</name>
                            </type>
                            <name>figure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the figure that contains the given point.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>findFigureInside</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a decompositon of a figure into its parts.
                * A figure is considered as a part of itself.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Figure</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getDecomposition</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// CLONING</comment>
            <comment type="javadoc">/**
                * Returns a clone of the figure, with clones of all aggregated figures,
                * such as chilrend and decorators. The cloned figure does not clone
                * the list of FigureListeners from its original.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * After cloning a collection of figures, the ConnectionFigures contained
                * in this collection still connect to the original figures instead of
                * to the clones.
                * Using This operation and providing a map, which maps from the original
                * collection of figures to the new collection, connections can be remapped
                * to the new figures.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>remap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>oldToNew</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// EVENT HANDLING</comment>
            <comment type="javadoc">/**
                * Informs a figure, that it has been added to a drawing.
                * The figure must inform all FigureListeners that it has been added.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addNotify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Drawing</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Informs a figure, that it has been removed from a drawing.
                * The figure must inform all FigureListeners that it has been removed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeNotify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Drawing</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Informs that a Figure is about to change its shape.
                * &lt;p&gt;
                * &lt;code&gt;willChange&lt;/code&gt; and &lt;code&gt;changed&lt;/code&gt; are typically used
                * as pairs before and after invoking one or multiple basic-methods on
                * the Figure.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>willChange</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Informs that a Figure changed its shape.
                * This fires a &lt;code&gt;FigureListener.figureChanged&lt;/code&gt;
                * event for the current display bounds of the figure.
                *
                * @see #willChange()
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>changed</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Fires a &lt;code&gt;FigureListener.figureRequestRemove&lt;/code&gt; event.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>requestRemove</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Handles a drop.
                *
                * @param p The location of the mouse event.
                * @param droppedFigures The dropped figures.
                * @param view The drawing view which is the source of the mouse event.
                * @return Returns true, if the figures should snap back to the location
                * they were dragged from.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>handleDrop</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>droppedFigures</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Handles a mouse click.
                *
                * @param p The location of the mouse event.
                * @param evt The mouse event.
                * @param view The drawing view which is the source of the mouse event.
                *
                * @return Returns true, if the event was consumed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>handleMouseClick</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MouseEvent</name>
                            </type>
                            <name>evt</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a listener for FigureEvent's.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addFigureListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a listener for FigureEvent's.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeFigureListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FigureListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
