<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\geom\Geom.java">
    <comment type="block">/*
        * @(#)Geom.java 2.2 2006-07-04
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        ï¿½
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>geom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * Some geometric utilities.
        *
        * @version 2.2 2006-07-04 Method grow(Rectangle2D.Double) added.
        * &lt;br&gt;2.1 2006-01-20 Support for double precision coordinates enhanced.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>Geom</name>
        <block>{

            <constructor>
                <specifier>private</specifier>
                <name>Geom</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            <comment type="line">// never instantiated</comment>

            <comment type="javadoc">/**
                * Tests if a point is on a line.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>lineContainsPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>px</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>py</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lineContainsPoint</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>y1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>y2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>px</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>py</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>3d</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Tests if a point is on a line.
                * &lt;p&gt;changed Werner Randelshofer 2003-11-26
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>lineContainsPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>px</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>py</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Rectangle</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Point</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>x1</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>y1</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>r</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>y2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>r</name>.
                                    <name>grow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>2</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>(<name>int</name>)
                                                            <call>
                                                                <name><name>Math</name>.
                                                                    <name>ceil</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tolerance</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>2</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>(<name>int</name>)
                                                            <call>
                                                                <name><name>Math</name>.
                                                                    <name>ceil</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tolerance</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>r</name>.
                                        <name>contains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>px</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>py</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>a</name>, <name>b</name>, <name>x</name>,
                            <name>y</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>x1</name>
                                ==
                                <name>x2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <call>
                                            <name><name>Math</name>.
                                                <name>abs</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>px</name>
                                                        -
                                                        <name>x1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &lt;= <name>tolerance</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>y1</name>
                                ==
                                <name>y2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <call>
                                            <name><name>Math</name>.
                                                <name>abs</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>py</name>
                                                        -
                                                        <name>y1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &lt;= <name>tolerance</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>a</name>
                            =
                            <call>(<name>double</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>y1</name>
                                            -
                                            <name>y2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            /
                            <call>(<name>double</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x1</name>
                                            -
                                            <name>x2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b</name>
                            = (<name>double</name>)<name>y1</name> - <name>a</name> * (<name>double</name>)
                            <name>x1</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>x</name>
                            = (<name>py</name> - <name>b</name>) /
                            <name>a</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>y</name>
                            = <name>a</name> * <name>px</name> +
                            <name>b</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>(
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>abs</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                            -
                                                            <name>px</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>abs</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>y</name>
                                                            -
                                                            <name>py</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;= <name>tolerance</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Tests if a point is on a line.
                * &lt;p&gt;changed Werner Randelshofer 2003-11-26
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>lineContainsPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>px</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>py</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>Rectangle2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x1</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>y1</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>r</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>y2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>grow</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>max</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>2</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>(<name>int</name>)
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>ceil</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>tolerance</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>x</name>
                            </name>
                            -=
                            <name>grow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>y</name>
                            </name>
                            -=
                            <name>grow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>width</name>
                            </name>
                            += <name>grow</name> * 2
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>height</name>
                            </name>
                            += <name>grow</name> * 2
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>r</name>.
                                        <name>contains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>px</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>py</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>a</name>, <name>b</name>, <name>x</name>,
                            <name>y</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>x1</name>
                                ==
                                <name>x2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <call>
                                            <name><name>Math</name>.
                                                <name>abs</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>px</name>
                                                        -
                                                        <name>x1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &lt;= <name>tolerance</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>y1</name>
                                ==
                                <name>y2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <call>
                                            <name><name>Math</name>.
                                                <name>abs</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>py</name>
                                                        -
                                                        <name>y1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &lt;= <name>tolerance</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>a</name>
                            =
                            <call>(<name>double</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>y1</name>
                                            -
                                            <name>y2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            /
                            <call>(<name>double</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x1</name>
                                            -
                                            <name>x2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b</name>
                            = (<name>double</name>)<name>y1</name> - <name>a</name> * (<name>double</name>)
                            <name>x1</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>x</name>
                            = (<name>py</name> - <name>b</name>) /
                            <name>a</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>y</name>
                            = <name>a</name> * <name>px</name> +
                            <name>b</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>(
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>abs</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                            -
                                                            <name>px</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>abs</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>y</name>
                                                            -
                                                            <name>py</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;= <name>tolerance</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The bitmask that indicates that a point lies above the rectangle. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OUT_TOP</name> =
                    <init>
                        <expr>
                            <name><name>Rectangle2D</name>.
                                <name>OUT_TOP</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The bitmask that indicates that a point lies below the rectangle. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OUT_BOTTOM</name> =
                    <init>
                        <expr>
                            <name><name>Rectangle2D</name>.
                                <name>OUT_BOTTOM</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The bitmask that indicates that a point lies to the left of the rectangle. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OUT_LEFT</name> =
                    <init>
                        <expr>
                            <name><name>Rectangle2D</name>.
                                <name>OUT_LEFT</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The bitmask that indicates that a point lies to the right of the rectangle. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OUT_RIGHT</name> =
                    <init>
                        <expr>
                            <name><name>Rectangle2D</name>.
                                <name>OUT_RIGHT</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the direction OUT_TOP, OUT_BOTTOM, OUT_LEFT, OUT_RIGHT from
                * one point to another one.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>direction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>direction</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>vx</name> =
                            <init>
                                <expr>
                                    <name>x2</name>
                                    -
                                    <name>x1</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>vy</name> =
                            <init>
                                <expr>
                                    <name>y2</name>
                                    -
                                    <name>y1</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>vy</name>
                                &lt; <name>vx</name> &amp;&amp; <name>vx</name> &gt; -
                                <name>vy</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>direction</name>
                                        =
                                        <name>OUT_RIGHT</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>vy</name>
                                        &gt; <name>vx</name> &amp;&amp; <name>vy</name> &gt; -
                                        <name>vx</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>direction</name>
                                                =
                                                <name>OUT_TOP</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>vx</name>
                                                &lt; <name>vy</name> &amp;&amp; <name>vx</name> &lt; -
                                                <name>vy</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>direction</name>
                                                        =
                                                        <name>OUT_LEFT</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>direction</name>
                                                        =
                                                        <name>OUT_BOTTOM</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>direction</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns the direction OUT_TOP, OUT_BOTTOM, OUT_LEFT, OUT_RIGHT from
                * one point to another one.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>direction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>direction</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>vx</name> =
                            <init>
                                <expr>
                                    <name>x2</name>
                                    -
                                    <name>x1</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>vy</name> =
                            <init>
                                <expr>
                                    <name>y2</name>
                                    -
                                    <name>y1</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>vy</name>
                                &lt; <name>vx</name> &amp;&amp; <name>vx</name> &gt; -
                                <name>vy</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>direction</name>
                                        =
                                        <name>OUT_RIGHT</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>vy</name>
                                        &gt; <name>vx</name> &amp;&amp; <name>vy</name> &gt; -
                                        <name>vx</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>direction</name>
                                                =
                                                <name>OUT_TOP</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>vx</name>
                                                &lt; <name>vy</name> &amp;&amp; <name>vx</name> &lt; -
                                                <name>vy</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>direction</name>
                                                        =
                                                        <name>OUT_LEFT</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>direction</name>
                                                        =
                                                        <name>OUT_BOTTOM</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>direction</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * This method computes a binary OR of the appropriate mask values
                * indicating, for each side of Rectangle r1, whether or not the
                * Rectangle r2 is on the same side of the edge as the rest
                * of this Rectangle.
                *
                *
                *
                *
                *
                *
                *
                *
                * @return the logical OR of all appropriate out codes OUT_RIGHT, OUT_LEFT, OUT_BOTTOM,
                * OUT_TOP.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>outcode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>outcode</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>r2</name>.
                                    <name>x</name>
                                </name>
                                &gt;
                                <name><name>r1</name>.
                                    <name>x</name>
                                </name>
                                +
                                <name><name>r1</name>.
                                    <name>width</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>outcode</name>
                                    =
                                    <name>OUT_RIGHT</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>r2</name>.
                                            <name>x</name>
                                        </name>
                                        +
                                        <name><name>r2</name>.
                                            <name>width</name>
                                        </name>
                                        &lt;
                                        <name><name>r1</name>.
                                            <name>x</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>outcode</name>
                                            =
                                            <name>OUT_LEFT</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>r2</name>.
                                    <name>y</name>
                                </name>
                                &gt;
                                <name><name>r1</name>.
                                    <name>y</name>
                                </name>
                                +
                                <name><name>r1</name>.
                                    <name>height</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>outcode</name>
                                    |=
                                    <name>OUT_BOTTOM</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>r2</name>.
                                            <name>y</name>
                                        </name>
                                        +
                                        <name><name>r2</name>.
                                            <name>height</name>
                                        </name>
                                        &lt;
                                        <name><name>r1</name>.
                                            <name>y</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>outcode</name>
                                            |=
                                            <name>OUT_TOP</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>outcode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * This method computes a binary OR of the appropriate mask values
                * indicating, for each side of Rectangle r1, whether or not the
                * Rectangle r2 is on the same side of the edge as the rest
                * of this Rectangle.
                *
                *
                *
                *
                *
                *
                *
                *
                * @return the logical OR of all appropriate out codes OUT_RIGHT, OUT_LEFT, OUT_BOTTOM,
                * OUT_TOP.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>outcode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>outcode</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>r2</name>.
                                    <name>x</name>
                                </name>
                                &gt;
                                <name><name>r1</name>.
                                    <name>x</name>
                                </name>
                                +
                                <name><name>r1</name>.
                                    <name>width</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>outcode</name>
                                    =
                                    <name>OUT_RIGHT</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>r2</name>.
                                            <name>x</name>
                                        </name>
                                        +
                                        <name><name>r2</name>.
                                            <name>width</name>
                                        </name>
                                        &lt;
                                        <name><name>r1</name>.
                                            <name>x</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>outcode</name>
                                            =
                                            <name>OUT_LEFT</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>r2</name>.
                                    <name>y</name>
                                </name>
                                &gt;
                                <name><name>r1</name>.
                                    <name>y</name>
                                </name>
                                +
                                <name><name>r1</name>.
                                    <name>height</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>outcode</name>
                                    |=
                                    <name>OUT_BOTTOM</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>r2</name>.
                                            <name>y</name>
                                        </name>
                                        +
                                        <name><name>r2</name>.
                                            <name>height</name>
                                        </name>
                                        &lt;
                                        <name><name>r1</name>.
                                            <name>y</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>outcode</name>
                                            |=
                                            <name>OUT_TOP</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>outcode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>south</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>south</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>center</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>center</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns a point on the edge of the bezier path which crosses the line
                * from the center of the bezier path to the specified point.
                * If no edge crosses the line, the nearest C0 control point is returned.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>chop</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Shape</name>
                            </type>
                            <name>shape</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Rectangle2D</name>
                            </type>
                            <name>bounds</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>shape</name>.
                                            <name>getBounds2D</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>ctr</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>Point2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>bounds</name>.
                                                            <name>getCenterX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>bounds</name>.
                                                            <name>getCenterY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Chopped point</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>cx</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>cy</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <name><name>Double</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Try for points along edge</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>PathIterator</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>shape</name>.
                                            <name>getPathIterator</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>AffineTransform</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>coords</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[<expr>6</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>i</name>.
                                            <name>currentSegment</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>coords</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>prevX</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>coords</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>prevY</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>coords</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>moveToX</name> =
                            <init>
                                <expr>
                                    <name>prevX</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>moveToY</name> =
                            <init>
                                <expr>
                                    <name>prevY</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>i</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (<init>;</init>
                        <condition>
                            <expr>!
                                <call>
                                    <name><name>i</name>.
                                        <name>isDone</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <call>
                                    <name><name>i</name>.
                                        <name>next</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>i</name>.
                                                <name>currentSegment</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>coords</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name><name>PathIterator</name>.
                                                <name>SEG_MOVETO</name>
                                            </name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>moveToX</name>
                                                =
                                                <name>
                                                    <name>coords</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>moveToY</name>
                                                =
                                                <name>
                                                    <name>coords</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>PathIterator</name>.
                                                <name>SEG_CLOSE</name>
                                            </name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>coords</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                =
                                                <name>moveToX</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>coords</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                                =
                                                <name>moveToY</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    }
                                </block>
                            </switch>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name><name>Point2D</name>.
                                            <name>Double</name>
                                        </name>
                                    </type>
                                    <name>chop</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Geom</name>.
                                                    <name>intersect</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>prevX</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>prevY</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>coords</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>coords</name>
                                                                <index>[<expr>1</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>p</name>.
                                                                <name>x</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>p</name>.
                                                                <name>y</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>ctr</name>.
                                                                <name>x</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>ctr</name>.
                                                                <name>y</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>chop</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>double</name>
                                                </type>
                                                <name>cl</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Geom</name>.
                                                                <name>length2</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>chop</name>.
                                                                            <name>x</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>chop</name>.
                                                                            <name>y</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>p</name>.
                                                                            <name>x</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>p</name>.
                                                                            <name>y</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>cl</name>
                                                    &lt;
                                                    <name>len</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>len</name>
                                                            =
                                                            <name>cl</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>cx</name>
                                                            =
                                                            <name><name>chop</name>.
                                                                <name>x</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>cy</name>
                                                            =
                                                            <name><name>chop</name>.
                                                                <name>y</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>prevX</name>
                                    =
                                    <name>
                                        <name>coords</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>prevY</name>
                                    =
                                    <name>
                                        <name>coords</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="block">/*
                        if (isClosed() &amp;&amp; size() &gt; 1) {
                        Node first = get(0);
                        Node last = get(size() - 1);
                        Point2D.Double chop = Geom.intersect(
                        first.x[0], first.y[0],
                        last.x[0], last.y[0],
                        p.x, p.y,
                        ctr.x, ctr.y
                        );
                        if (chop != null) {
                        double cl = Geom.length2(chop.x, chop.y, p.x, p.y);
                        if (cl &lt; len) {
                        len = cl;
                        cx = chop.x;
                        cy = chop.y;
                        }
                        }
                        }*/
                    </comment>


                    <comment type="line">// if none found, pick closest vertex</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                ==
                                <name><name>Double</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>i</name>
                                        =
                                        <call>
                                            <name><name>shape</name>.
                                                <name>getPathIterator</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>AffineTransform</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (<init>;</init>
                                    <condition>
                                        <expr>!
                                            <call>
                                                <name><name>i</name>.
                                                    <name>isDone</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <call>
                                                <name><name>i</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>i</name>.
                                                        <name>currentSegment</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>coords</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>double</name>
                                                </type>
                                                <name>l</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Geom</name>.
                                                                <name>length2</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>ctr</name>.
                                                                            <name>x</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>ctr</name>.
                                                                            <name>y</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>coords</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>coords</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>l</name>
                                                    &lt;
                                                    <name>len</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>len</name>
                                                            =
                                                            <name>l</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>cx</name>
                                                            =
                                                            <name>
                                                                <name>coords</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>cy</name>
                                                            =
                                                            <name>
                                                                <name>coords</name>
                                                                <index>[<expr>1</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cx</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>west</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>west</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>east</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>east</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                            / 2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>north</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>north</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                            /2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constains a value to the given range.
                * @return the constrained value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>range</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>min</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &lt;
                                <name>min</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>value</name>
                                        =
                                        <name>min</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &gt;
                                <name>max</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>value</name>
                                        =
                                        <name>max</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Constains a value to the given range.
                * @return the constrained value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>range</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>min</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &lt;
                                <name>min</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>value</name>
                                        =
                                        <name>min</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &gt;
                                <name>max</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>value</name>
                                        =
                                        <name>max</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the square distance between two points.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>length2</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>x2</name>-<name>x1</name>)*(<name>x2</name>-<name>x1</name>) + (<name>
                            y2</name>-<name>y1</name>)*(<name>y2</name>-<name>y1</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the distance between to points
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>length</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>long</name>)
                            <call>
                                <name><name>Math</name>.
                                    <name>sqrt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>length2</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>y1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>x2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>y2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the square distance between two points.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>length2</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>x2</name>-<name>x1</name>)*(<name>x2</name>-<name>x1</name>) + (<name>
                            y2</name>-<name>y1</name>)*(<name>y2</name>-<name>y1</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the distance between to points
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>length</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>sqrt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>length2</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>y1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>x2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>y2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Gets the distance between to points
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>length</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>sqrt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>length2</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>p1</name>.
                                                                <name>x</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>p1</name>.
                                                                <name>y</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>p2</name>.
                                                                <name>x</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>p2</name>.
                                                                <name>y</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Caps the line defined by p1 and p2 by the number of units
                * specified by radius.
                * @return A new end point for the line.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>cap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>radius</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name> =
                            <init>
                                <expr>
                                    <name><name>Math</name>.
                                        <name>PI</name>
                                    </name>
                                    /2 -
                                    <call>
                                        <name><name>Math</name>.
                                            <name>atan2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>p2</name>.
                                                        <name>x</name>
                                                    </name>
                                                    -
                                                    <name><name>p1</name>.
                                                        <name>x</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>p2</name>.
                                                        <name>y</name>
                                                    </name>
                                                    -
                                                    <name><name>p1</name>.
                                                        <name>y</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p3</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>Point2D</name>.
                                            <name>Double</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>p2</name>.
                                                        <name>x</name>
                                                    </name>
                                                    + <name>radius</name> *
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>cos</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>angle</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>p2</name>.
                                                        <name>y</name>
                                                    </name>
                                                    + <name>radius</name> *
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>sin</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>angle</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>p3</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the angle of a point relative to a rectangle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>pointToAngle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>px</name> =
                            <init>
                                <expr>
                                    <name><name>p</name>.
                                        <name>x</name>
                                    </name>
                                    - (
                                    <name><name>r</name>.
                                        <name>x</name>
                                    </name>
                                    +
                                    <name><name>r</name>.
                                        <name>width</name>
                                    </name>
                                    /2)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>py</name> =
                            <init>
                                <expr>
                                    <name><name>p</name>.
                                        <name>y</name>
                                    </name>
                                    - (
                                    <name><name>r</name>.
                                        <name>y</name>
                                    </name>
                                    +
                                    <name><name>r</name>.
                                        <name>height</name>
                                    </name>
                                    /2)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>atan2</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr><name>py</name>*
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>px</name>*
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Gets the angle of a point relative to a rectangle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>pointToAngle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>px</name> =
                            <init>
                                <expr>
                                    <name><name>p</name>.
                                        <name>x</name>
                                    </name>
                                    - (
                                    <name><name>r</name>.
                                        <name>x</name>
                                    </name>
                                    +
                                    <name><name>r</name>.
                                        <name>width</name>
                                    </name>
                                    /2)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>py</name> =
                            <init>
                                <expr>
                                    <name><name>p</name>.
                                        <name>y</name>
                                    </name>
                                    - (
                                    <name><name>r</name>.
                                        <name>y</name>
                                    </name>
                                    +
                                    <name><name>r</name>.
                                        <name>height</name>
                                    </name>
                                    /2)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>atan2</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr><name>py</name>*
                                            <name><name>r</name>.
                                                <name>width</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>px</name>*
                                            <name><name>r</name>.
                                                <name>height</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the angle of the specified line.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>angle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>atan2</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>y2</name>
                                            -
                                            <name>y1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x2</name>
                                            -
                                            <name>x1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the point on a rectangle that corresponds to the given angle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>angleToPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>si</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>sin</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>co</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>cos</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>0.0001</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>y</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>abs</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>si</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt;
                                <name>e</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>x</name>=
                                        <call>(<name>int</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>(1.0 + <name>co</name>/
                                                        <call>
                                                            <name><name>Math</name>.
                                                                <name>abs</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>si</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        )/2.0 *
                                                        <name><name>r</name>.
                                                            <name>width</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>x</name>=
                                        <call>
                                            <name>range</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>width</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>co</name>
                                        &gt;= 0.0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>x</name>=
                                                <name><name>r</name>.
                                                    <name>width</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>abs</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>co</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt;
                                <name>e</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>y</name>=
                                        <call>(<name>int</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>(1.0 + <name>si</name>/
                                                        <call>
                                                            <name><name>Math</name>.
                                                                <name>abs</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>co</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        )/2.0 *
                                                        <name><name>r</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>y</name>=
                                        <call>
                                            <name>range</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>y</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>si</name>
                                        &gt;= 0.0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>y</name>=
                                                <name><name>r</name>.
                                                    <name>height</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name>y</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Gets the point on a rectangle that corresponds to the given angle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>angleToPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>si</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>sin</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>co</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>cos</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>0.0001</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>y</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>abs</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>si</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt;
                                <name>e</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>x</name>= (1.0 + <name>co</name>/
                                        <call>
                                            <name><name>Math</name>.
                                                <name>abs</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>si</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )/2.0 *
                                        <name><name>r</name>.
                                            <name>width</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>x</name>
                                        =
                                        <call>
                                            <name>range</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>width</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>co</name>
                                        &gt;= 0.0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>x</name>
                                                =
                                                <name><name>r</name>.
                                                    <name>width</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>abs</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>co</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt;
                                <name>e</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>y</name>
                                        = (1.0 + <name>si</name>/
                                        <call>
                                            <name><name>Math</name>.
                                                <name>abs</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>co</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )/2.0 *
                                        <name><name>r</name>.
                                            <name>height</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>y</name>
                                        =
                                        <call>
                                            <name>range</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>r</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>y</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>si</name>
                                        &gt;= 0.0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>y</name>
                                                =
                                                <name><name>r</name>.
                                                    <name>height</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>r</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name>y</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts a polar to a point
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>polarToPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fx</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>si</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>sin</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>co</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>cos</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>fx</name>*<name>co</name>+0.5
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>fy</name>*<name>si</name>+0.5
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Converts a polar to a point
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>polarToPoint2D</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fx</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>si</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>sin</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>co</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>cos</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr><name>fx</name>*<name>co</name>+0.5
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>fy</name>*<name>si</name>+0.5
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the point on an oval that corresponds to the given angle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>ovalAngleToPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>center</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Geom</name>.
                                            <name>center</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>r</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Geom</name>.
                                            <name>polarToPoint</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>r</name>.
                                                        <name>width</name>
                                                    </name>
                                                    /2
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>r</name>.
                                                        <name>height</name>
                                                    </name>
                                                    /2
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Point</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>center</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>p</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>center</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>p</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Gets the point on an oval that corresponds to the given angle.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>ovalAngleToPoint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>angle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>center</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Geom</name>.
                                            <name>center</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>r</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Geom</name>.
                                            <name>polarToPoint2D</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>angle</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>r</name>.
                                                        <name>width</name>
                                                    </name>
                                                    /2
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>r</name>.
                                                        <name>height</name>
                                                    </name>
                                                    /2
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>center</name>.
                                                <name>x</name>
                                            </name>
                                            +
                                            <name><name>p</name>.
                                                <name>x</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>center</name>.
                                                <name>y</name>
                                            </name>
                                            +
                                            <name><name>p</name>.
                                                <name>y</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Standard line intersection algorithm
                * Return the point of intersection if it exists, else null
                **/
            </comment>
            <comment type="line">// from Doug Lea's PolygonFigure</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Point</name>
                </type>
                <name>intersect</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xa</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 1 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ya</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 1 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xb</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 2 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>yb</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 2 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xc</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 1 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>yc</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 1 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xd</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 2 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>yd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// line 2 point 2 y</comment>

                    <comment type="line">// source: http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html</comment>
                    <comment type="line">// eq: for lines AB and CD</comment>
                    <comment type="line">// (YA-YC)(XD-XC)-(XA-XC)(YD-YC)</comment>
                    <comment type="line">// r = ----------------------------- (eqn 1)</comment>
                    <comment type="line">// (XB-XA)(YD-YC)-(YB-YA)(XD-XC)</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// (YA-YC)(XB-XA)-(XA-XC)(YB-YA)</comment>
                    <comment type="line">// s = ----------------------------- (eqn 2)</comment>
                    <comment type="line">// (XB-XA)(YD-YC)-(YB-YA)(XD-XC)</comment>
                    <comment type="line">// XI = XA + r(XB-XA)</comment>
                    <comment type="line">// YI = YA + r(YB-YA)</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>denom</name> =
                            <init>
                                <expr>((<name>xb</name> - <name>xa</name>) * (<name>yd</name> - <name>yc</name>) - (<name>
                                    yb
                                </name> - <name>ya</name>) * (<name>xd</name> - <name>xc</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>rnum</name> =
                            <init>
                                <expr>((<name>ya</name> - <name>yc</name>) * (<name>xd</name> - <name>xc</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>yd</name> - <name>yc</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>denom</name>
                                == 0.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// parallel</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>rnum</name>
                                            == 0.0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// coincident; pick one end of first line</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>(<name>xa</name> &lt; <name>xb</name> &amp;&amp; (<name>xb
                                                    </name> &lt; <name>xc</name> || <name>xb</name> &lt; <name>xd</name>))
                                                        ||
                                                        (<name>xa</name> &gt; <name>xb</name> &amp;&amp; (<name>xb
                                                        </name> &gt; <name>xc</name> || <name>xb</name> &gt; <name>
                                                            xd</name>))
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name>Point</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>xb</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>yb</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name>Point</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>xa</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ya</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <name>rnum</name>
                                    /
                                    <name>denom</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>snum</name> =
                            <init>
                                <expr>((<name>ya</name> - <name>yc</name>) * (<name>xb</name> - <name>xa</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>yb</name> - <name>ya</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>
                                    <name>snum</name>
                                    /
                                    <name>denom</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>0.0 &lt;= <name>r</name> &amp;&amp; <name>r</name> &lt;= 1.0 &amp;&amp; 0.0 &lt;= <name>
                                s
                            </name> &amp;&amp; <name>s</name> &lt;= 1.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>px</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>xa</name>
                                                                + (<name>xb</name> - <name>xa</name>) *
                                                                <name>r</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>py</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ya</name>
                                                                + (<name>yb</name> - <name>ya</name>) *
                                                                <name>r</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>Point</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>px</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>py</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Standard line intersection algorithm
                * Return the point of intersection if it exists, else null
                **/
            </comment>
            <comment type="line">// from Doug Lea's PolygonFigure</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>intersect</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xa</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 1 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>ya</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 1 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xb</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 2 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yb</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 2 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xc</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 1 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yc</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 1 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xd</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 2 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// line 2 point 2 y</comment>

                    <comment type="line">// source: http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html</comment>
                    <comment type="line">// eq: for lines AB and CD</comment>
                    <comment type="line">// (YA-YC)(XD-XC)-(XA-XC)(YD-YC)</comment>
                    <comment type="line">// r = ----------------------------- (eqn 1)</comment>
                    <comment type="line">// (XB-XA)(YD-YC)-(YB-YA)(XD-XC)</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// (YA-YC)(XB-XA)-(XA-XC)(YB-YA)</comment>
                    <comment type="line">// s = ----------------------------- (eqn 2)</comment>
                    <comment type="line">// (XB-XA)(YD-YC)-(YB-YA)(XD-XC)</comment>
                    <comment type="line">// XI = XA + r(XB-XA)</comment>
                    <comment type="line">// YI = YA + r(YB-YA)</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>denom</name> =
                            <init>
                                <expr>((<name>xb</name> - <name>xa</name>) * (<name>yd</name> - <name>yc</name>) - (<name>
                                    yb
                                </name> - <name>ya</name>) * (<name>xd</name> - <name>xc</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>rnum</name> =
                            <init>
                                <expr>((<name>ya</name> - <name>yc</name>) * (<name>xd</name> - <name>xc</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>yd</name> - <name>yc</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>denom</name>
                                == 0.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// parallel</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>rnum</name>
                                            == 0.0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// coincident; pick one end of first line</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>(<name>xa</name> &lt; <name>xb</name> &amp;&amp; (<name>xb
                                                    </name> &lt; <name>xc</name> || <name>xb</name> &lt; <name>xd</name>))
                                                        ||
                                                        (<name>xa</name> &gt; <name>xb</name> &amp;&amp; (<name>xb
                                                        </name> &gt; <name>xc</name> || <name>xb</name> &gt; <name>
                                                            xd</name>))
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>xb</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>yb</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>xa</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ya</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <name>rnum</name>
                                    /
                                    <name>denom</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>snum</name> =
                            <init>
                                <expr>((<name>ya</name> - <name>yc</name>) * (<name>xb</name> - <name>xa</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>yb</name> - <name>ya</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>
                                    <name>snum</name>
                                    /
                                    <name>denom</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>0.0 &lt;= <name>r</name> &amp;&amp; <name>r</name> &lt;= 1.0 &amp;&amp; 0.0 &lt;= <name>
                                s
                            </name> &amp;&amp; <name>s</name> &lt;= 1.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>px</name> =
                                        <init>
                                            <expr>
                                                <name>xa</name>
                                                + (<name>xb</name> - <name>xa</name>) *
                                                <name>r</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>py</name> =
                                        <init>
                                            <expr>
                                                <name>ya</name>
                                                + (<name>yb</name> - <name>ya</name>) *
                                                <name>r</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name><name>Point2D</name>.
                                                <name>Double</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>px</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>py</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name><name>Point2D</name>.
                        <name>Double</name>
                    </name>
                </type>
                <name>intersect</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xa</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 1 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>ya</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 1 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xb</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 2 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yb</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 1 point 2 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xc</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 1 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yc</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 1 y</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xd</name>
                        </decl>
                    </param>
                    ,
                    <comment type="line">// line 2 point 2 x</comment>
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yd</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>limit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// line 2 point 2 y</comment>

                    <comment type="line">// source: http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html</comment>
                    <comment type="line">// eq: for lines AB and CD</comment>
                    <comment type="line">// (YA-YC)(XD-XC)-(XA-XC)(YD-YC)</comment>
                    <comment type="line">// r = ----------------------------- (eqn 1)</comment>
                    <comment type="line">// (XB-XA)(YD-YC)-(YB-YA)(XD-XC)</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// (YA-YC)(XB-XA)-(XA-XC)(YB-YA)</comment>
                    <comment type="line">// s = ----------------------------- (eqn 2)</comment>
                    <comment type="line">// (XB-XA)(YD-YC)-(YB-YA)(XD-XC)</comment>
                    <comment type="line">// XI = XA + r(XB-XA)</comment>
                    <comment type="line">// YI = YA + r(YB-YA)</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>denom</name> =
                            <init>
                                <expr>((<name>xb</name> - <name>xa</name>) * (<name>yd</name> - <name>yc</name>) - (<name>
                                    yb
                                </name> - <name>ya</name>) * (<name>xd</name> - <name>xc</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>rnum</name> =
                            <init>
                                <expr>((<name>ya</name> - <name>yc</name>) * (<name>xd</name> - <name>xc</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>yd</name> - <name>yc</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>denom</name>
                                == 0.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// parallel</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>rnum</name>
                                            == 0.0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// coincident; pick one end of first line</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>(<name>xa</name> &lt; <name>xb</name> &amp;&amp; (<name>xb
                                                    </name> &lt; <name>xc</name> || <name>xb</name> &lt; <name>xd</name>))
                                                        ||
                                                        (<name>xa</name> &gt; <name>xb</name> &amp;&amp; (<name>xb
                                                        </name> &gt; <name>xc</name> || <name>xb</name> &gt; <name>
                                                            xd</name>))
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>xb</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>yb</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return
                                                            <expr>new
                                                                <call>
                                                                    <name><name>Point2D</name>.
                                                                        <name>Double</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>xa</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ya</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <name>rnum</name>
                                    /
                                    <name>denom</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>snum</name> =
                            <init>
                                <expr>((<name>ya</name> - <name>yc</name>) * (<name>xb</name> - <name>xa</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>yb</name> - <name>ya</name>))
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>
                                    <name>snum</name>
                                    /
                                    <name>denom</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>0.0 &lt;= <name>r</name> &amp;&amp; <name>r</name> &lt;= 1.0 &amp;&amp; 0.0 &lt;= <name>
                                s
                            </name> &amp;&amp; <name>s</name> &lt;= 1.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>px</name> =
                                        <init>
                                            <expr>
                                                <name>xa</name>
                                                + (<name>xb</name> - <name>xa</name>) *
                                                <name>r</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>py</name> =
                                        <init>
                                            <expr>
                                                <name>ya</name>
                                                + (<name>yb</name> - <name>ya</name>) *
                                                <name>r</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name><name>Point2D</name>.
                                                <name>Double</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>px</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>py</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>px</name> =
                                        <init>
                                            <expr>
                                                <name>xa</name>
                                                + (<name>xb</name> - <name>xa</name>) *
                                                <name>r</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>py</name> =
                                        <init>
                                            <expr>
                                                <name>ya</name>
                                                + (<name>yb</name> - <name>ya</name>) *
                                                <name>r</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>length</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xa</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>ya</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>px</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>py</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt;= <name>limit</name> ||
                                            <call>
                                                <name>length</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xb</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>yb</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>px</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>py</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt;= <name>limit</name> ||
                                            <call>
                                                <name>length</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xc</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>yc</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>px</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>py</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt;= <name>limit</name> ||
                                            <call>
                                                <name>length</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xd</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>yd</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>px</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>py</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt;=
                                            <name>limit</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <call>
                                                        <name><name>Point2D</name>.
                                                            <name>Double</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>px</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>py</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * compute distance of point from line segment, or
                * Double.MAX_VALUE if perpendicular projection is outside segment; or
                * If pts on line are same, return distance from point
                **/
            </comment>
            <comment type="line">// from Doug Lea's PolygonFigure</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>distanceFromLine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xa</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ya</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xb</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>yb</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xc</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>yc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{


                    <comment type="line">// source:http://vision.dai.ed.ac.uk/andrewfg/c-g-a-faq.html#q7</comment>
                    <comment type="line">//Let the point be C (XC,YC) and the line be AB (XA,YA) to (XB,YB).</comment>
                    <comment type="line">//The length of the</comment>
                    <comment type="line">// line segment AB is L:</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// ___________________</comment>
                    <comment type="line">// | 2 2</comment>
                    <comment type="line">// L = \| (XB-XA) + (YB-YA)</comment>
                    <comment type="line">//and</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// (YA-YC)(YA-YB)-(XA-XC)(XB-XA)</comment>
                    <comment type="line">// r = -----------------------------</comment>
                    <comment type="line">// L**2</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// (YA-YC)(XB-XA)-(XA-XC)(YB-YA)</comment>
                    <comment type="line">// s = -----------------------------</comment>
                    <comment type="line">// L**2</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// Let I be the point of perpendicular projection of C onto AB, the</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// XI=XA+r(XB-XA)</comment>
                    <comment type="line">// YI=YA+r(YB-YA)</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// Distance from A to I = r*L</comment>
                    <comment type="line">// Distance from C to I = s*L</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// If r &lt; 0 I is on backward extension of AB</comment>
                    <comment type="line">// If r&gt;1 I is on ahead extension of AB</comment>
                    <comment type="line">// If 0&lt;=r&lt;=1 I is on AB</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// If s &lt; 0 C is left of AB (you can just check the numerator)</comment>
                    <comment type="line">// If s&gt;0 C is right of AB</comment>
                    <comment type="line">// If s=0 C is on AB</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>xdiff</name> =
                            <init>
                                <expr>
                                    <name>xb</name>
                                    -
                                    <name>xa</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ydiff</name> =
                            <init>
                                <expr>
                                    <name>yb</name>
                                    -
                                    <name>ya</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>l2</name> =
                            <init>
                                <expr>
                                    <name>xdiff</name>
                                    * <name>xdiff</name> + <name>ydiff</name> *
                                    <name>ydiff</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>l2</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Geom</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>xa</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ya</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>xc</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>yc</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>rnum</name> =
                            <init>
                                <expr>(<name>ya</name> - <name>yc</name>) * (<name>ya</name> - <name>yb</name>) - (<name>
                                    xa
                                </name> - <name>xc</name>) * (<name>xb</name> - <name>xa</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>r</name> =
                            <init>
                                <expr>
                                    <name>rnum</name>
                                    /
                                    <name>l2</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>r</name>
                                &lt; 0.0 || <name>r</name> &gt; 1.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Double</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xi</name> =
                            <init>
                                <expr>
                                    <name>xa</name>
                                    + <name>r</name> *
                                    <name>xdiff</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yi</name> =
                            <init>
                                <expr>
                                    <name>ya</name>
                                    + <name>r</name> *
                                    <name>ydiff</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xd</name> =
                            <init>
                                <expr>
                                    <name>xc</name>
                                    -
                                    <name>xi</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>yd</name> =
                            <init>
                                <expr>
                                    <name>yc</name>
                                    -
                                    <name>yi</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>sqrt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>xd</name>
                                            * <name>xd</name> + <name>yd</name> *
                                            <name>yd</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    <comment type="block">/*
                        for directional version, instead use
                        double snum = (ya-yc) * (xb-xa) - (xa-xc) * (yb-ya);
                        double s = snum / l2;

                        double l = Math.sqrt((double)l2);
                        return = s * l;
                        */
                    </comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Resizes the &lt;code&gt;Rectangle2D.Double&lt;/code&gt; both horizontally and vertically.
                * &lt;p&gt;
                * This method modifies the &lt;code&gt;Rectangle2D.Double&lt;/code&gt; so that it is
                * &lt;code&gt;h&lt;/code&gt; units larger on both the left and right side,
                * and &lt;code&gt;v&lt;/code&gt; units larger at both the top and bottom.
                * &lt;p&gt;
                * The new &lt;code&gt;Rectangle2D.Double&lt;/code&gt; has (&lt;code&gt;x&amp;nbsp;-&amp;nbsp;h&lt;/code&gt;,
                * &lt;code&gt;y&amp;nbsp;-&amp;nbsp;v&lt;/code&gt;) as its top-left corner, a
                * width of
                * &lt;code&gt;width&lt;/code&gt;&amp;nbsp;&lt;code&gt;+&lt;/code&gt;&amp;nbsp;&lt;code&gt;2h&lt;/code&gt;,
                * and a height of
                * &lt;code&gt;height&lt;/code&gt;&amp;nbsp;&lt;code&gt;+&lt;/code&gt;&amp;nbsp;&lt;code&gt;2v&lt;/code&gt;.
                * &lt;p&gt;
                * If negative values are supplied for &lt;code&gt;h&lt;/code&gt; and
                * &lt;code&gt;v&lt;/code&gt;, the size of the &lt;code&gt;Rectangle2D.Double&lt;/code&gt;
                * decreases accordingly.
                * The &lt;code&gt;grow&lt;/code&gt; method does not check whether the resulting
                * values of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are
                * non-negative.
                * @param h the horizontal expansion
                * @param v the vertical expansion
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>grow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>Rectangle2D</name>.
                                    <name>Double</name>
                                </name>
                            </type>
                            <name>r</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>h</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>v</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>x</name>
                            </name>
                            -=
                            <name>h</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>y</name>
                            </name>
                            -=
                            <name>v</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>width</name>
                            </name>
                            += <name>h</name> * 2d
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>r</name>.
                                <name>height</name>
                            </name>
                            += <name>v</name> * 2d
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

</unit>
