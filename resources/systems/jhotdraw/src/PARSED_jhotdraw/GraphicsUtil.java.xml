<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\apache\batik\ext\awt\image\GraphicsUtil.java">
    <comment type="block">/*

        Copyright 2001-2004 The Apache Software Foundation

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>batik</name>.<name>ext</name>.<name>awt</name>.
            <name>image</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Composite</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Graphics2D</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>GraphicsConfiguration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>GraphicsDevice</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Point</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Rectangle</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>RenderingHints</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Shape</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>color</name>.
            <name>ColorSpace</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>AffineTransform</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>Rectangle2D</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>BufferedImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>ColorModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>ComponentSampleModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBuffer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBufferByte</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBufferInt</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBufferShort</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBufferUShort</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DirectColorModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>Raster</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>RenderedImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>SampleModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>SinglePixelPackedSampleModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>WritableRaster</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>renderable</name>.
            <name>RenderContext</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>renderable</name>.
            <name>RenderableImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>Reference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>WeakReference</name>
        </name>
        ;
    </import>
    <comment type="block">/*
        import org.apache.batik.ext.awt.RenderingHintsKeyExt;
        import org.apache.batik.ext.awt.image.renderable.PaintRable;
        import org.apache.batik.ext.awt.image.rendered.AffineRed;
        import org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed;
        import org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;
        import org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;
        import org.apache.batik.ext.awt.image.rendered.CachableRed;
        import org.apache.batik.ext.awt.image.rendered.FormatRed;
        import org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed;
        import org.apache.batik.ext.awt.image.rendered.TranslateRed;
        */
    </comment>

    <comment type="javadoc">/**
        * Set of utility methods for Graphics.
        * These generally bypass broken methods in Java2D or provide tweaked
        * implementations.
        *
        * @author &lt;a href="mailto:Thomas.DeWeeese@Kodak.com"&gt;Thomas DeWeese&lt;/a&gt;
        * @version $Id: GraphicsUtil.java,v 1.36 2005/03/27 08:58:32 cam Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>GraphicsUtil</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <name>AffineTransform</name>
                    </type>
                    <name>IDENTITY</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>AffineTransform</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Standard prebuilt Linear_sRGB color model with no alpha.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>Linear_sRGB</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>24</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x00FF0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0000FF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x000000FF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Standard prebuilt Linear_sRGB color model with premultiplied alpha.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>Linear_sRGB_Pre</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x00FF0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0000FF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x000000FF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Standard prebuilt Linear_sRGB color model with unpremultiplied alpha.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>Linear_sRGB_Unpre</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x00FF0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0000FF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x000000FF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Standard prebuilt sRGB color model with no alpha.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>sRGB</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>24</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x00FF0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0000FF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x000000FF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Standard prebuilt sRGB color model with premultiplied alpha.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>sRGB_Pre</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x00FF0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0000FF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x000000FF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Standard prebuilt sRGB color model with unpremultiplied alpha.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>sRGB_Unpre</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x00FF0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0000FF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x000000FF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Method that returns either Linear_sRGB_Pre or Linear_sRGB_UnPre
                * based on premult flag.
                * @param premult True if the ColorModel should have premultiplied alpha.
                * @return a ColorMdoel with Linear sRGB colorSpace and
                * the alpha channel set in accordance with
                * &lt;tt&gt;premult&lt;/tt&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ColorModel</name>
                </type>
                <name>makeLinear_sRGBCM</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>premult</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>premult</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>Linear_sRGB_Pre</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>Linear_sRGB_Unpre</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructs a BufferedImage with a linear sRGB colorModel, and alpha.
                * @param width The desired width of the BufferedImage
                * @param height The desired height of the BufferedImage
                * @param premult The desired state of alpha premultiplied
                * @return The requested BufferedImage.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BufferedImage</name>
                </type>
                <name>makeLinearBufferedImage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>width</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>height</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>premult</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>makeLinear_sRGBCM</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>premult</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cm</name>.
                                            <name>createCompatibleWritableRaster</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>width</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>height</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>BufferedImage</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cm</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>wr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>premult</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Creates a new raster that has a &lt;b&gt;copy&lt;/b&gt; of the data in
                * &lt;tt&gt;ras&lt;/tt&gt;. This is highly optimized for speed. There is
                * no provision for changing any aspect of the SampleModel.
                *
                * This method should be used when you need to change the contents
                * of a Raster that you do not "own" (ie the result of a
                * &lt;tt&gt;getData&lt;/tt&gt; call).
                * @param ras The Raster to copy.
                * @return A writable copy of &lt;tt&gt;ras&lt;/tt&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>WritableRaster</name>
                </type>
                <name>copyRaster</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Raster</name>
                            </type>
                            <name>ras</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>copyRaster</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ras</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Creates a new raster that has a &lt;b&gt;copy&lt;/b&gt; of the data in
                * &lt;tt&gt;ras&lt;/tt&gt;. This is highly optimized for speed. There is
                * no provision for changing any aspect of the SampleModel.
                * However you can specify a new location for the returned raster.
                *
                * This method should be used when you need to change the contents
                * of a Raster that you do not "own" (ie the result of a
                * &lt;tt&gt;getData&lt;/tt&gt; call).
                *
                * @param ras The Raster to copy.
                *
                * @param minX The x location for the upper left corner of the
                * returned WritableRaster.
                *
                * @param minY The y location for the upper left corner of the
                * returned WritableRaster.
                *
                * @return A writable copy of &lt;tt&gt;ras&lt;/tt&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>WritableRaster</name>
                </type>
                <name>copyRaster</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Raster</name>
                            </type>
                            <name>ras</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>minX</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>minY</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Raster</name>.
                                            <name>createWritableRaster</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ras</name>.
                                                            <name>getSampleModel</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Point</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>ret</name>
                            =
                            <call>
                                <name><name>ret</name>.
                                    <name>createWritableChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getSampleModelTranslateX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getSampleModelTranslateY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getWidth</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getHeight</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>minX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>minY</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Use System.arraycopy to copy the data between the two...</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBuffer</name>
                            </type>
                            <name>srcDB</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ras</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBuffer</name>
                            </type>
                            <name>retDB</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ret</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>srcDB</name>.
                                        <name>getDataType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <call>
                                    <name><name>retDB</name>.
                                        <name>getDataType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"New DataBuffer doesn't match original"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>   =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>srcDB</name>.
                                            <name>getSize</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>banks</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>srcDB</name>.
                                            <name>getNumBanks</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>offsets</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>srcDB</name>.
                                            <name>getOffsets</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>b</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>b</name>&lt;
                                <name>banks</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>b</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>srcDB</name>.
                                                <name>getDataType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_BYTE</name>
                                            </name>
                                        </expr>
                                        :
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferByte</name>
                                                    </type>
                                                    <name>srcDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferByte</name>)
                                                            <name>srcDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferByte</name>
                                                    </type>
                                                    <name>retDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferByte</name>)
                                                            <name>retDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.
                                                            <name>arraycopy</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>srcDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>retDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                        :
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferInt</name>
                                                    </type>
                                                    <name>srcDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferInt</name>)
                                                            <name>srcDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferInt</name>
                                                    </type>
                                                    <name>retDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferInt</name>)
                                                            <name>retDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.
                                                            <name>arraycopy</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>srcDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>retDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_SHORT</name>
                                            </name>
                                        </expr>
                                        :
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferShort</name>
                                                    </type>
                                                    <name>srcDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferShort</name>)
                                                            <name>srcDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferShort</name>
                                                    </type>
                                                    <name>retDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferShort</name>)
                                                            <name>retDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.
                                                            <name>arraycopy</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>srcDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>retDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_USHORT</name>
                                            </name>
                                        </expr>
                                        :
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferUShort</name>
                                                    </type>
                                                    <name>srcDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferUShort</name>)
                                                            <name>srcDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>DataBufferUShort</name>
                                                    </type>
                                                    <name>retDBT</name> =
                                                    <init>
                                                        <expr>(<name>DataBufferUShort</name>)
                                                            <name>retDB</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.
                                                            <name>arraycopy</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>srcDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>retDBT</name>.
                                                                            <name>getData</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>offsets</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>b</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </case>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Coerces &lt;tt&gt;ras&lt;/tt&gt; to be writable. The returned Raster continues to
                * reference the DataBuffer from ras, so modifications to the returned
                * WritableRaster will be seen in ras.&lt;p&gt;
                *
                * This method should only be used if you need a WritableRaster due to
                * an interface (such as to construct a BufferedImage), but have no
                * intention of modifying the contents of the returned Raster. If
                * you have any doubt about other users of the data in &lt;tt&gt;ras&lt;/tt&gt;,
                * use copyRaster (above).
                * @param ras The raster to make writable.
                * @return A Writable version of ras (shares DataBuffer with
                * &lt;tt&gt;ras&lt;/tt&gt;).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>WritableRaster</name>
                </type>
                <name>makeRasterWritable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Raster</name>
                            </type>
                            <name>ras</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>makeRasterWritable</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ras</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Coerces &lt;tt&gt;ras&lt;/tt&gt; to be writable. The returned Raster continues to
                * reference the DataBuffer from ras, so modifications to the returned
                * WritableRaster will be seen in ras.&lt;p&gt;
                *
                * You can specify a new location for the returned WritableRaster, this
                * is especially useful for constructing BufferedImages which require
                * the Raster to be at (0,0).
                *
                * This method should only be used if you need a WritableRaster due to
                * an interface (such as to construct a BufferedImage), but have no
                * intention of modifying the contents of the returned Raster. If
                * you have any doubt about other users of the data in &lt;tt&gt;ras&lt;/tt&gt;,
                * use copyRaster (above).
                *
                * @param ras The raster to make writable.
                *
                * @param minX The x location for the upper left corner of the
                * returned WritableRaster.
                *
                * @param minY The y location for the upper left corner of the
                * returned WritableRaster.
                *
                * @return A Writable version of &lt;tT&gt;ras&lt;/tt&gt; with it's upper left
                * hand coordinate set to minX, minY (shares it's DataBuffer
                * with &lt;tt&gt;ras&lt;/tt&gt;).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>WritableRaster</name>
                </type>
                <name>makeRasterWritable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Raster</name>
                            </type>
                            <name>ras</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>minX</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>minY</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Raster</name>.
                                            <name>createWritableRaster</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ras</name>.
                                                            <name>getSampleModel</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ras</name>.
                                                            <name>getDataBuffer</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Point</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>ret</name>
                            =
                            <call>
                                <name><name>ret</name>.
                                    <name>createWritableChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getSampleModelTranslateX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getMinY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getSampleModelTranslateY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getWidth</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ras</name>.
                                                    <name>getHeight</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>minX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>minY</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Create a new ColorModel with it's alpha premultiplied state matching
                * newAlphaPreMult.
                * @param cm The ColorModel to change the alpha premult state of.
                * @param newAlphaPreMult The new state of alpha premult.
                * @return A new colorModel that has isAlphaPremultiplied()
                * equal to newAlphaPreMult.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ColorModel</name>
                </type>
                <name>coerceColorModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newAlphaPreMult</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>cm</name>.
                                        <name>isAlphaPremultiplied</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>newAlphaPreMult</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>cm</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Easiest way to build proper colormodel for new Alpha state...</comment>
                    <comment type="line">// Eventually this should switch on known ColorModel types and</comment>
                    <comment type="line">// only fall back on this hack when the CM type is unknown.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cm</name>.
                                            <name>createCompatibleWritableRaster</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>cm</name>.
                                    <name>coerceData</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>wr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newAlphaPreMult</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Coerces data within a bufferedImage to match newAlphaPreMult,
                * Note that this can not change the colormodel of bi so you
                *
                * @param wr The raster to change the state of.
                * @param cm The colormodel currently associated with data in wr.
                * @param newAlphaPreMult The desired state of alpha Premult for raster.
                * @return A new colormodel that matches newAlphaPreMult.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ColorModel</name>
                </type>
                <name>coerceData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newAlphaPreMult</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// System.out.println("CoerceData: " + cm.isAlphaPremultiplied() +</comment>
                    <comment type="line">// " Out: " + newAlphaPreMult);</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>cm</name>.
                                        <name>hasAlpha</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <comment type="line">// Nothing to do no alpha channel</comment>
                            <return>return
                                <expr>
                                    <name>cm</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>cm</name>.
                                        <name>isAlphaPremultiplied</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>newAlphaPreMult</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <comment type="line">// nothing to do alpha state matches...</comment>
                            <return>return
                                <expr>
                                    <name>cm</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// System.out.println("CoerceData: " + wr.getSampleModel());</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>newAlphaPreMult</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>multiplyAlpha</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>wr</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>divideAlpha</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>wr</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name>coerceColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cm</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newAlphaPreMult</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>multiplyAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>is_BYTE_COMP_Data</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getSampleModel</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>mult_BYTE_COMP_Data</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>wr</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>is_INT_PACK_Data</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>wr</name>.
                                                                <name>getSampleModel</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>mult_INT_PACK_Data</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>wr</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>pixel</name> =
                                                <init>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>bands</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>wr</name>.
                                                                <name>getNumBands</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>float</name>
                                                </type>
                                                <name>norm</name> =
                                                <init>
                                                    <expr>1f/255f</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>x0</name>, <name>x1</name>, <name>y0</name>, <name>
                                                y1</name>, <name>a</name>,
                                                <name>b</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>float</name>
                                                </type>
                                                <name>alpha</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>x0</name>
                                                =
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getMinX</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>x1</name>
                                                = <name>x0</name>+
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getWidth</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>y0</name>
                                                =
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getMinY</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>y1</name>
                                                = <name>y0</name>+
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getHeight</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>y</name>=
                                                    <init>
                                                        <expr>
                                                            <name>y0</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr><name>y</name>&lt;
                                                    <name>y1</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>y</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>x</name>=
                                                        <init>
                                                            <expr>
                                                                <name>x0</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr><name>x</name>&lt;
                                                        <name>x1</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>x</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pixel</name>
                                                            =
                                                            <call>
                                                                <name><name>wr</name>.
                                                                    <name>getPixel</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>x</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>y</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>pixel</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>a</name>
                                                            =
                                                            <name>
                                                                <name>pixel</name>
                                                                <index>[
                                                                    <expr><name>bands</name>-1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>a</name> &gt;= 0) &amp;&amp; (<name>a</name> &lt;
                                                                255)
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>alpha</name>
                                                                        = <name>a</name>*
                                                                        <name>norm</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <for>for (
                                                                    <init>
                                                                        <expr><name>b</name>=0
                                                                        </expr>
                                                                        ;
                                                                    </init>
                                                                    <condition>
                                                                        <expr><name>b</name>&lt;<name>bands</name>-1
                                                                        </expr>
                                                                        ;
                                                                    </condition>
                                                                    <incr>
                                                                        <expr><name>b</name>++
                                                                        </expr>
                                                                    </incr>
                                                                    )
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>
                                                                                <name>pixel</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>b</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            =
                                                                            <call>(<name>int</name>)
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>
                                                                                                <name>pixel</name>
                                                                                                <index>[
                                                                                                    <expr>
                                                                                                        <name>b</name>
                                                                                                    </expr>
                                                                                                    ]
                                                                                                </index>
                                                                                            </name>
                                                                                            *<name>alpha</name>+0.5f
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                </for>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>wr</name>.
                                                                                <name>setPixel</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>x</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>y</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>pixel</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                        </for>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>divideAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>is_BYTE_COMP_Data</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getSampleModel</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>divide_BYTE_COMP_Data</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>wr</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>is_INT_PACK_Data</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>wr</name>.
                                                                <name>getSampleModel</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>divide_INT_PACK_Data</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>wr</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>x0</name>, <name>x1</name>, <name>y0</name>, <name>
                                                y1</name>, <name>a</name>,
                                                <name>b</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>float</name>
                                                </type>
                                                <name>ialpha</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>bands</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>wr</name>.
                                                                <name>getNumBands</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>pixel</name> =
                                                <init>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>x0</name>
                                                =
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getMinX</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>x1</name>
                                                = <name>x0</name>+
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getWidth</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>y0</name>
                                                =
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getMinY</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>y1</name>
                                                = <name>y0</name>+
                                                <call>
                                                    <name><name>wr</name>.
                                                        <name>getHeight</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>y</name>=
                                                    <init>
                                                        <expr>
                                                            <name>y0</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr><name>y</name>&lt;
                                                    <name>y1</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>y</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>x</name>=
                                                        <init>
                                                            <expr>
                                                                <name>x0</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr><name>x</name>&lt;
                                                        <name>x1</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>x</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pixel</name>
                                                            =
                                                            <call>
                                                                <name><name>wr</name>.
                                                                    <name>getPixel</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>x</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>y</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>pixel</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>a</name>
                                                            =
                                                            <name>
                                                                <name>pixel</name>
                                                                <index>[
                                                                    <expr><name>bands</name>-1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>a</name> &gt; 0) &amp;&amp; (<name>a</name> &lt;
                                                                255)
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ialpha</name>
                                                                        = 255/(<name>float</name>)
                                                                        <name>a</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <for>for (
                                                                    <init>
                                                                        <expr><name>b</name>=0
                                                                        </expr>
                                                                        ;
                                                                    </init>
                                                                    <condition>
                                                                        <expr><name>b</name>&lt;<name>bands</name>-1
                                                                        </expr>
                                                                        ;
                                                                    </condition>
                                                                    <incr>
                                                                        <expr><name>b</name>++
                                                                        </expr>
                                                                    </incr>
                                                                    )
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>
                                                                                <name>pixel</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>b</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            =
                                                                            <call>(<name>int</name>)
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>
                                                                                                <name>pixel</name>
                                                                                                <index>[
                                                                                                    <expr>
                                                                                                        <name>b</name>
                                                                                                    </expr>
                                                                                                    ]
                                                                                                </index>
                                                                                            </name>
                                                                                            *<name>ialpha</name>+0.5f
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                </for>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>wr</name>.
                                                                                <name>setPixel</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>x</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>y</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>pixel</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                        </for>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>is_INT_PACK_Data</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SampleModel</name>
                            </type>
                            <name>sm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>requireAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Check ColorModel is of type DirectColorModel</comment>
                    <if>if
                        <condition>(
                            <expr>!(<name>sm</name>
                                <name>instanceof</name>
                                <name>SinglePixelPackedSampleModel</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Check transfer type</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>sm</name>.
                                        <name>getDataType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>DataBuffer</name>.
                                    <name>TYPE_INT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SinglePixelPackedSampleModel</name>
                            </type>
                            <name>sppsm</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>sppsm</name>
                            = (<name>SinglePixelPackedSampleModel</name>)
                            <name>sm</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>masks</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>sppsm</name>.
                                            <name>getBitMasks</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>masks</name>.
                                    <name>length</name>
                                </name>
                                == 3
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>requireAlpha</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>masks</name>.
                                            <name>length</name>
                                        </name>
                                        != 4
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>false</expr>;
                                    </return>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>masks</name>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </name>
                                != 0x00ff0000
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>masks</name>
                                    <index>[<expr>1</expr>]
                                    </index>
                                </name>
                                != 0x0000ff00
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>masks</name>
                                    <index>[<expr>2</expr>]
                                    </index>
                                </name>
                                != 0x000000ff
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>(
                                <name><name>masks</name>.
                                    <name>length</name>
                                </name>
                                == 4) &amp;&amp;
                                (
                                <name>
                                    <name>masks</name>
                                    <index>[<expr>3</expr>]
                                    </index>
                                </name>
                                != 0xff000000)
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>is_BYTE_COMP_Data</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SampleModel</name>
                            </type>
                            <name>sm</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Check ColorModel is of type DirectColorModel</comment>
                    <if>if
                        <condition>(
                            <expr>!(<name>sm</name>
                                <name>instanceof</name>
                                <name>ComponentSampleModel</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Check transfer type</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>sm</name>.
                                        <name>getDataType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>DataBuffer</name>.
                                    <name>TYPE_BYTE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>divide_INT_PACK_Data</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// System.out.println("Divide Int");</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SinglePixelPackedSampleModel</name>
                            </type>
                            <name>sppsm</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>sppsm</name>
                            = (<name>SinglePixelPackedSampleModel</name>)
                            <call>
                                <name><name>wr</name>.
                                    <name>getSampleModel</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>width</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getWidth</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>scanStride</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>sppsm</name>.
                                            <name>getScanlineStride</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBufferInt</name>
                            </type>
                            <name>db</name> =
                            <init>
                                <expr>(<name>DataBufferInt</name>)
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>base</name>
                            =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>db</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>sppsm</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pixel</name>, <name>a</name>,
                            <name>aFP</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Access the pixel data array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>
                                <name>pixels</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>db</name>.
                                            <name>getBankData</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>y</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>y</name>&lt;
                                <call>
                                    <name><name>wr</name>.
                                        <name>getHeight</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>y</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>sp</name> =
                                    <init>
                                        <expr>
                                            <name>base</name>
                                            + <name>y</name>*
                                            <name>scanStride</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>
                                            <name>sp</name>
                                            +
                                            <name>width</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>sp</name>
                                        &lt;
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>pixel</name>
                                            =
                                            <name>
                                                <name>pixels</name>
                                                <index>[
                                                    <expr>
                                                        <name>sp</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>a</name>
                                            = <name>pixel</name>&gt;&gt;&gt;24
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr><name>a</name>&lt;=0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>pixels</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>sp</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = 0x00FFFFFF
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr><name>a</name>&lt;255
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>aFP</name>
                                                                = (0x00FF0000/<name>a</name>)
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>
                                                                    <name>pixels</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>sp</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                =
                                                                ((<name>a</name> &lt;&lt; 24) |
                                                                (((((<name>pixel</name>&amp;0xFF0000)&gt;&gt;16)*<name>
                                                                aFP</name>)&amp;0xFF0000) ) |
                                                                (((((<name>pixel</name>&amp;0x00FF00)&gt;&gt;8) *<name>
                                                                aFP</name>)&amp;0xFF0000)&gt;&gt;8 ) |
                                                                (((((<name>pixel</name>&amp;0x0000FF)) *<name>aFP</name>)&amp;0xFF0000)&gt;&gt;16))
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                    <expr_stmt>
                                        <expr><name>sp</name>++
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>mult_INT_PACK_Data</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// System.out.println("Multiply Int: " + wr);</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SinglePixelPackedSampleModel</name>
                            </type>
                            <name>sppsm</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>sppsm</name>
                            = (<name>SinglePixelPackedSampleModel</name>)
                            <call>
                                <name><name>wr</name>.
                                    <name>getSampleModel</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>width</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getWidth</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>scanStride</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>sppsm</name>.
                                            <name>getScanlineStride</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBufferInt</name>
                            </type>
                            <name>db</name> =
                            <init>
                                <expr>(<name>DataBufferInt</name>)
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>base</name>
                            =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>db</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>sppsm</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Access the pixel data array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>
                                <name>pixels</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>db</name>.
                                            <name>getBankData</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>y</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>y</name>&lt;
                                <call>
                                    <name><name>wr</name>.
                                        <name>getHeight</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>y</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>sp</name> =
                                    <init>
                                        <expr>
                                            <name>base</name>
                                            + <name>y</name>*
                                            <name>scanStride</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>
                                            <name>sp</name>
                                            +
                                            <name>width</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>sp</name>
                                        &lt;
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>pixel</name> =
                                            <init>
                                                <expr>
                                                    <name>
                                                        <name>pixels</name>
                                                        <index>[
                                                            <expr>
                                                                <name>sp</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>a</name> =
                                            <init>
                                                <expr><name>pixel</name>&gt;&gt;&gt;24
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>a</name>&gt;=0) &amp;&amp; (<name>a</name>&lt;255)
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>pixels</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>sp</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = ((<name>a</name> &lt;&lt; 24) |
                                                        ((((<name>pixel</name>&amp;0xFF0000)*<name>a</name>)&gt;&gt;8)&amp;0xFF0000)
                                                        |
                                                        ((((<name>pixel</name>&amp;0x00FF00)*<name>a</name>)&gt;&gt;8)&amp;0x00FF00)
                                                        |
                                                        ((((<name>pixel</name>&amp;0x0000FF)*<name>a</name>)&gt;&gt;8)&amp;0x0000FF))
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr><name>sp</name>++
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>divide_BYTE_COMP_Data</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// System.out.println("Multiply Int: " + wr);</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ComponentSampleModel</name>
                            </type>
                            <name>csm</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>csm</name>
                            = (<name>ComponentSampleModel</name>)
                            <call>
                                <name><name>wr</name>.
                                    <name>getSampleModel</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>width</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getWidth</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>scanStride</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getScanlineStride</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>pixStride</name>  =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getPixelStride</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>bandOff</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getBandOffsets</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBufferByte</name>
                            </type>
                            <name>db</name> =
                            <init>
                                <expr>(<name>DataBufferByte</name>)
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>base</name>
                            =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>db</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aOff</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>bandOff</name>
                                        <index>[
                                            <expr>
                                                <name><name>bandOff</name>.
                                                    <name>length</name>
                                                </name>
                                                -1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bands</name> =
                            <init>
                                <expr>
                                    <name><name>bandOff</name>.
                                        <name>length</name>
                                    </name>
                                    -1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b</name>,
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Access the pixel data array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                            </type>
                            <name>
                                <name>pixels</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>db</name>.
                                            <name>getBankData</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>y</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>y</name>&lt;
                                <call>
                                    <name><name>wr</name>.
                                        <name>getHeight</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>y</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>sp</name> =
                                    <init>
                                        <expr>
                                            <name>base</name>
                                            + <name>y</name>*
                                            <name>scanStride</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>
                                            <name>sp</name>
                                            + <name>width</name>*
                                            <name>pixStride</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>sp</name>
                                        &lt;
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>a</name>
                                            =
                                            <name>
                                                <name>pixels</name>
                                                <index>[
                                                    <expr><name>sp</name>+
                                                        <name>aOff</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &amp;0xFF
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr><name>a</name>==0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <for>for (
                                                    <init>
                                                        <expr><name>b</name>=0
                                                        </expr>
                                                        ;
                                                    </init>
                                                    <condition>
                                                        <expr><name>b</name>&lt;
                                                            <name>bands</name>
                                                        </expr>
                                                        ;
                                                    </condition>
                                                    <incr>
                                                        <expr><name>b</name>++
                                                        </expr>
                                                    </incr>
                                                    )
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>pixels</name>
                                                                <index>[
                                                                    <expr><name>sp</name>+
                                                                        <name>
                                                                            <name>bandOff</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            = (<name>byte</name>)0xFF
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </for>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr><name>a</name>&lt;255
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>aFP</name> =
                                                                <init>
                                                                    <expr>(0x00FF0000/<name>a</name>)
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <for>for (
                                                            <init>
                                                                <expr><name>b</name>=0
                                                                </expr>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>b</name>&lt;
                                                                    <name>bands</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>b</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>i</name>
                                                                        = <name>sp</name>+
                                                                        <name>
                                                                            <name>bandOff</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>b</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>pixels</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        =
                                                                        <call>(<name>byte</name>)
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>((
                                                                                        <name>
                                                                                            <name>pixels</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                        &amp;0xFF)*<name>aFP</name>)&gt;&gt;&gt;16
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                    <expr_stmt>
                                        <expr><name>sp</name>+=
                                            <name>pixStride</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>mult_BYTE_COMP_Data</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>wr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// System.out.println("Multiply Int: " + wr);</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ComponentSampleModel</name>
                            </type>
                            <name>csm</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>csm</name>
                            = (<name>ComponentSampleModel</name>)
                            <call>
                                <name><name>wr</name>.
                                    <name>getSampleModel</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>width</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getWidth</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>scanStride</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getScanlineStride</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>pixStride</name>  =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getPixelStride</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>bandOff</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getBandOffsets</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBufferByte</name>
                            </type>
                            <name>db</name> =
                            <init>
                                <expr>(<name>DataBufferByte</name>)
                                    <call>
                                        <name><name>wr</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>base</name>
                            =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>db</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>csm</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateX</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getMinY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>wr</name>.
                                                            <name>getSampleModelTranslateY</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aOff</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>bandOff</name>
                                        <index>[
                                            <expr>
                                                <name><name>bandOff</name>.
                                                    <name>length</name>
                                                </name>
                                                -1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bands</name> =
                            <init>
                                <expr>
                                    <name><name>bandOff</name>.
                                        <name>length</name>
                                    </name>
                                    -1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b</name>,
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Access the pixel data array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                            </type>
                            <name>
                                <name>pixels</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>db</name>.
                                            <name>getBankData</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>y</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>y</name>&lt;
                                <call>
                                    <name><name>wr</name>.
                                        <name>getHeight</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>y</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>sp</name> =
                                    <init>
                                        <expr>
                                            <name>base</name>
                                            + <name>y</name>*
                                            <name>scanStride</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>
                                            <name>sp</name>
                                            + <name>width</name>*
                                            <name>pixStride</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>sp</name>
                                        &lt;
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>a</name>
                                            =
                                            <name>
                                                <name>pixels</name>
                                                <index>[
                                                    <expr><name>sp</name>+
                                                        <name>aOff</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &amp;0xFF
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr><name>a</name>!=0xFF
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <for>for (
                                                <init>
                                                    <expr><name>b</name>=0
                                                    </expr>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr><name>b</name>&lt;
                                                        <name>bands</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>b</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>i</name>
                                                            = <name>sp</name>+
                                                            <name>
                                                                <name>bandOff</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>b</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>pixels</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <call>(<name>byte</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>((
                                                                            <name>
                                                                                <name>pixels</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            &amp;0xFF)*<name>a</name>)&gt;&gt;8
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr><name>sp</name>+=
                                            <name>pixStride</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="block">/*
                This is skanky debugging code that might be useful in the future:

                if (count == 33) {
                String label = "sub [" + x + ", " + y + "]: ";
                org.ImageDisplay.showImage
                (label, subBI);
                org.ImageDisplay.printImage
                (label, subBI,
                new Rectangle(75-iR.x, 90-iR.y, 32, 32));

                }


                // if ((count++ % 50) == 10)
                // org.ImageDisplay.showImage("foo: ", subBI);


                Graphics2D realG2D = g2d;
                while (realG2D instanceof sun.java2d.ProxyGraphics2D) {
                realG2D = ((sun.java2d.ProxyGraphics2D)realG2D).getDelegate();
                }
                if (realG2D instanceof sun.awt.image.BufferedImageGraphics2D) {
                count++;
                if (count == 34) {
                RenderedImage ri;
                ri = ((sun.awt.image.BufferedImageGraphics2D)realG2D).bufImg;
                // g2d.setComposite(SVGComposite.OVER);
                // org.ImageDisplay.showImage("Bar: " + count, cr);
                org.ImageDisplay.printImage("Bar: " + count, cr,
                new Rectangle(75, 90, 32, 32));

                org.ImageDisplay.showImage ("Foo: " + count, ri);
                org.ImageDisplay.printImage("Foo: " + count, ri,
                new Rectangle(75, 90, 32, 32));

                System.out.println("BI: " + ri);
                System.out.println("BISM: " + ri.getSampleModel());
                System.out.println("BICM: " + ri.getColorModel());
                System.out.println("BICM class: " + ri.getColorModel().getClass());
                System.out.println("BICS: " + ri.getColorModel().getColorSpace());
                System.out.println
                ("sRGB CS: " +
                ColorSpace.getInstance(ColorSpace.CS_sRGB));
                System.out.println("G2D info");
                System.out.println("\tComposite: " + g2d.getComposite());
                System.out.println("\tTransform" + g2d.getTransform());
                java.awt.RenderingHints rh = g2d.getRenderingHints();
                java.util.Set keys = rh.keySet();
                java.util.Iterator iter = keys.iterator();
                while (iter.hasNext()) {
                Object o = iter.next();

                System.out.println("\t" + o.toString() + " -&gt; " +
                rh.get(o).toString());
                }

                ri = cr;
                System.out.println("RI: " + ri);
                System.out.println("RISM: " + ri.getSampleModel());
                System.out.println("RICM: " + ri.getColorModel());
                System.out.println("RICM class: " + ri.getColorModel().getClass());
                System.out.println("RICS: " + ri.getColorModel().getColorSpace());
                }
                }
                */
            </comment>

            }
        </block>
    </class>
</unit>
