<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\Handle.java">
    <comment type="block">/*
        * @(#)Handle.java 2.0 2006-01-14
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>event</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * Handles are used to change a figure by direct manipulation.
        * Handles know their owning figure and they provide methods to
        * locate the handle on the figure and to track changes.
        * &lt;p&gt;
        * Handles are used for user interaction. Unlike figures, a handle works with
        * the user interface coordinates of the DrawingView. The user interface
        * coordinates are expressed in integer pixels.
        * &lt;p&gt;
        * A Handle forwards UndoableEdit events to the Drawing object onto which it
        * is performing changes.
        *
        * @author Werner Randelshofer
        * @version 2.0 2006-01-14 Changed to support double precision coordinates.
        * &lt;br&gt;1.0 2003-12-01 Derived from JHotDraw 5.4b1.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Handle</name>
        <super>
            <extends>extends
                <name>KeyListener</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Returns the owner of this handle.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Figure</name>
                </type>
                <name>getOwner</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Sets the view of the handle.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DrawingView</name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Adds a listener for this handle.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addHandleListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HandleListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a listener for this handle.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>removeHandleListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HandleListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the bounding box of the handle.
                * Note: The bounding box must be returned in the coordinate
                * system of the DrawingView.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Rectangle</name>
                </type>
                <name>getBounds</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Returns the drawing area of the handle.
                * Note: The drawing area must be returned in the coordinate
                * system of the DrawingView.
                */
            </comment>
            <function_decl>
                <type>
                    <name>Rectangle</name>
                </type>
                <name>getDrawingArea</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Tests if a point is contained in the handle.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Draws this handle.
                * Note: The handle is drawn with the coordinate system of
                * the DrawingView.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>draw</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Graphics2D</name>
                            </type>
                            <name>g</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Invalidates the handle. This method informs its listeners
                * that its current display box is invalid and should be
                * refreshed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>invalidate</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Disposes the resources aquired by the handler.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>dispose</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a cursor for the handle.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Cursor</name>
                </type>
                <name>getCursor</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if this handle is combinable with the specified handle.
                * This method is used to determine, if multiple handles need to be tracked,
                * when more than one figure is selected.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isCombinableWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Handle</name>
                            </type>
                            <name>handle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Tracks the start of the interaction. The default implementation
                * does nothing.
                * @param anchor the position where the interaction started
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Tracks a step of the interaction.
                * @param anchor the position where the interaction started
                * @param lead the current position
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackStep</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>lead</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Tracks the end of the interaction.
                * @param anchor the position where the interaction started
                * @param lead the current position
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>lead</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Tracks a double click.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trackDoubleClick</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>modifiersEx</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * This method is invoked by the drawing view, when its transform
                * has changed. This means, that DrawingView.viewToDrawing and
                * DrawingView.drawingToView will return different values than they
                * did before.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>viewTransformChanged</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Creates secondary handles.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Handle</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createSecondaryHandles</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Returns a tooltip for the specified location.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getToolTipText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
