<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\net\n3\nanoxml\IXMLParser.java">
    <comment type="block">/* IXMLParser.java NanoXML/Java
        *
        * $Revision: 1.3 $
        * $Date: 2002/01/04 21:03:28 $
        * $Name: RELEASE_2_2_1 $
        *
        * This file is part of NanoXML 2 for Java.
        * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
        *
        * This software is provided 'as-is', without any express or implied warranty.
        * In no event will the authors be held liable for any damages arising from the
        * use of this software.
        *
        * Permission is granted to anyone to use this software for any purpose,
        * including commercial applications, and to alter it and redistribute it
        * freely, subject to the following restrictions:
        *
        * 1. The origin of this software must not be misrepresented; you must not
        * claim that you wrote the original software. If you use this software in
        * a product, an acknowledgment in the product documentation would be
        * appreciated but is not required.
        *
        * 2. Altered source versions must be plainly marked as such, and must not be
        * misrepresented as being the original software.
        *
        * 3. This notice may not be removed or altered from any source distribution.
        */
    </comment>

    <package>package
        <name><name>net</name>.<name>n3</name>.
            <name>nanoxml</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * IXMLParser is the core parser of NanoXML.
        *
        * @author Marc De Scheemaecker
        * @version $Name: RELEASE_2_2_1 $, $Revision: 1.3 $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>IXMLParser</name>
        <block>{

            <comment type="javadoc">/**
                * Sets the reader from which the parser retrieves its data.
                *
                * @param reader the reader.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setReader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the reader from which the parser retrieves its data.
                *
                * @return the reader.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>IXMLReader</name>
                </type>
                <name>getReader</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the builder which creates the logical structure of the XML data.
                *
                * @param builder the builder.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLBuilder</name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the builder which creates the logical structure of the XML data.
                *
                * @return the builder.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>IXMLBuilder</name>
                </type>
                <name>getBuilder</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the validator that validates the XML data.
                *
                * @param validator the validator.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValidator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLValidator</name>
                            </type>
                            <name>validator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the validator that validates the XML data.
                *
                * @return the validator.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>IXMLValidator</name>
                </type>
                <name>getValidator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the entity resolver.
                *
                * @param resolver the non-null resolver.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setResolver</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLEntityResolver</name>
                            </type>
                            <name>resolver</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the entity resolver.
                *
                * @return the non-null resolver.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>IXMLEntityResolver</name>
                </type>
                <name>getResolver</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Parses the data and lets the builder create the logical data structure.
                * The method returns the result of &lt;I&gt;getResult&lt;/I&gt; of the builder. if an
                * error occurred while reading or parsing the data, the method may throw
                * an XMLException.
                *
                * @see net.n3.nanoxml.IXMLBuilder#getResult
                *
                * @return the logical structure built by the builder.
                *
                * @throws net.n3.nanoxml.XMLException
                * if an error occurred reading or parsing the data
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>parse</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
