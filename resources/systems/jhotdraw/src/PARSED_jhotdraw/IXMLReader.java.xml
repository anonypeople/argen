<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\net\n3\nanoxml\IXMLReader.java">
    <comment type="block">/* IXMLReader.java NanoXML/Java
        *
        * $Revision: 1.4 $
        * $Date: 2002/01/04 21:03:28 $
        * $Name: RELEASE_2_2_1 $
        *
        * This file is part of NanoXML 2 for Java.
        * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
        *
        * This software is provided 'as-is', without any express or implied warranty.
        * In no event will the authors be held liable for any damages arising from the
        * use of this software.
        *
        * Permission is granted to anyone to use this software for any purpose,
        * including commercial applications, and to alter it and redistribute it
        * freely, subject to the following restrictions:
        *
        * 1. The origin of this software must not be misrepresented; you must not
        * claim that you wrote the original software. If you use this software in
        * a product, an acknowledgment in the product documentation would be
        * appreciated but is not required.
        *
        * 2. Altered source versions must be plainly marked as such, and must not be
        * misrepresented as being the original software.
        *
        * 3. This notice may not be removed or altered from any source distribution.
        */
    </comment>

    <package>package
        <name><name>net</name>.<name>n3</name>.
            <name>nanoxml</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>FileNotFoundException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>net</name>.
            <name>MalformedURLException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * IXMLReader reads the data to be parsed.
        *
        * @author Marc De Scheemaecker
        * @version $Name: RELEASE_2_2_1 $, $Revision: 1.4 $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>IXMLReader</name>
        <block>{

            <comment type="javadoc">/**
                * Reads a character.
                *
                * @return the character
                *
                * @throws java.io.IOException
                * If no character could be read.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>char</name>
                </type>
                <name>read</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns true if the current stream has no more characters left to be
                * read.
                *
                * @throws java.io.IOException
                * If an I/O error occurred.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>atEOFOfCurrentStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns true if there are no more characters left to be read.
                *
                * @throws java.io.IOException
                * If an I/O error occurred.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>atEOF</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Pushes the last character read back to the stream.
                *
                * @param ch the character to push back.
                *
                * @throws java.io.IOException
                * If an I/O error occurred.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unread</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the line number of the data in the current stream.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLineNr</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Opens a stream from a public and system ID.
                *
                * @param publicID the public ID, which may be null.
                * @param systemID the system ID, which is never null.
                *
                * @throws java.net.MalformedURLException
                * If the system ID does not contain a valid URL.
                * @throws java.io.FileNotFoundException
                * If the system ID refers to a local file which does not exist.
                * @throws java.io.IOException
                * If an error occurred opening the stream.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Reader</name>
                </type>
                <name>openStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURLException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>FileNotFoundException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Starts a new stream from a Java reader. The new stream is used
                * temporary to read data from. If that stream is exhausted, control
                * returns to the "parent" stream.
                *
                * @param reader the reader to read the new data from.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startNewStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Starts a new stream from a Java reader. The new stream is used
                * temporary to read data from. If that stream is exhausted, control
                * returns to the parent stream.
                *
                * @param reader the non-null reader to read the new data from
                * @param isInternalEntity true if the reader is produced by resolving
                * an internal entity
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startNewStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isInternalEntity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the current "level" of the stream on the stack of streams.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getStreamLevel</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the system ID of the current stream.
                *
                * @param systemID the system ID.
                *
                * @throws java.net.MalformedURLException
                * If the system ID does not contain a valid URL.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSystemID</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>MalformedURLException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Sets the public ID of the current stream.
                *
                * @param publicID the public ID.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPublicID</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicID</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the current system ID.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSystemID</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Returns the current public ID.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPublicID</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
