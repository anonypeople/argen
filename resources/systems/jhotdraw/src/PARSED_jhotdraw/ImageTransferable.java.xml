<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\gui\datatransfer\ImageTransferable.java">
    <comment type="block">/*
        * @(#)ImageTransferable.java 2.0 2008-03-20
        *
        * Copyright (c) 1996-2008 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.<name>gui</name>.
            <name>datatransfer</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.<name>util</name>.
            <name>Images</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>datatransfer</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>imageio</name>.
            <name>ImageIO</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A Transferable with an Image as its transfer class.
        *
        * @author Werner Randelshofer
        * @version 2.0 2008-03-20 Explicitly export images in PNG format, to circumvent
        * image clipboard issues on Mac OS X 10.5.2.
        * &lt;br&gt;1.0 January 2, 2007 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ImageTransferable</name>
        <super>
            <implements>implements
                <name>Transferable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Image</name>
                    </type>
                    <name>image</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>DataFlavor</name>
                    </type>
                    <name>IMAGE_PNG_FLAVOR</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <try>try
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>IMAGE_PNG_FLAVOR</name>
                                = new
                                <call>
                                    <name>DataFlavor</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"image/png"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                    <catch>catch (
                        <param>
                            <decl>
                                <type>
                                    <name>Exception</name>
                                </type>
                                <name>e</name>
                            </decl>
                        </param>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>InternalError</name>
                                    </type>
                                    <name>error</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>InternalError</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"Unable to crate image/png data flavor"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>error</name>.
                                            <name>initCause</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <throw>throw
                                <expr>
                                    <name>error</name>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </catch>
                </try>
                }
            </block>

            <comment type="javadoc">/** Creates a new instance. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ImageTransferable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Image</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>image</name>
                            </name>
                            =
                            <name>image</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDataFlavorSupported</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DataFlavor</name>
                            </type>
                            <name>flavor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>flavor</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>DataFlavor</name>.
                                                <name>imageFlavor</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>flavor</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_PNG_FLAVOR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getTransferData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DataFlavor</name>
                            </type>
                            <name>flavor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>UnsupportedFlavorException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="block">/*if (! isDataFlavorSupported(flavor)) {
                        throw new UnsupportedFlavorException(flavor);
                        }*/
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>flavor</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>DataFlavor</name>.
                                                    <name>imageFlavor</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>image</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>flavor</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>IMAGE_PNG_FLAVOR</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>ByteArrayOutputStream</name>
                                                </type>
                                                <name>buf</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>ByteArrayOutputStream</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>ImageIO</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>Images</name>.
                                                                        <name>toBufferedImage</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>image</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"PNG"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>buf</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>new
                                                <call>
                                                    <name>ByteArrayInputStream</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>buf</name>.
                                                                        <name>toByteArray</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>

                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>UnsupportedFlavorException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>flavor</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DataFlavor</name>
                    <index>[]</index>
                </type>
                <name>getTransferDataFlavors</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>DataFlavor</name>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <name><name>DataFlavor</name>.
                                        <name>imageFlavor</name>
                                    </name>
                                </expr>
                                ,
                                <expr>
                                    <name>IMAGE_PNG_FLAVOR</name>
                                </expr>
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
