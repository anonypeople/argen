<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\samples\teddy\JEditorArea.java">
    <comment type="block">/*
        * @(#)JEditorArea.java 1.0 October 10, 2005
        *
        * Copyright (c) 2005 Werner Randelshofer
        * Staldenmattweg 2, Immensee, CH-6405, Switzerland.
        * All rights reserved.
        *
        * This software is the confidential and proprietary information of
        * Werner Randelshofer. ("Confidential Information"). You shall not
        * disclose such Confidential Information and shall use it only in
        * accordance with the terms of the license agreement you entered into
        * with Werner Randelshofer.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.<name>samples</name>.
            <name>teddy</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.<name>samples</name>.<name>teddy</name>.
            <name>text</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>text</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * A happy marriage between JTextArea and JEditorPane.
        *
        * @author Werner Randelshofer
        * @version 1.0 October 10, 2005 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>JEditorArea</name>
        <super>
            <extends>extends
                <name>JEditorPane</name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>wrap</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Creates a new instance. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>JEditorArea</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setEditorKit</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>StyledEditorKit</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initComponents</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StyledEditorKit</name>
                </type>
                <name>getStyledEditorKit</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>StyledEditorKit</name>)
                            <call>
                                <name>getEditorKit</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the line-wrapping policy of the text area. If set
                * to true the lines will be wrapped if they are too long
                * to fit within the allocated width. If set to false,
                * the lines will always be unwrapped. A &lt;code&gt;PropertyChange&lt;/code&gt;
                * event ("lineWrap") is fired when the policy is changed.
                * By default this property is false.
                *
                * @param newValue indicates if lines should be wrapped
                * @see #getLineWrap
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLineWrap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>oldValue</name> =
                            <init>
                                <expr>
                                    <name>wrap</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>oldValue</name>
                                !=
                                <name>newValue</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>wrap</name>
                                        </name>
                                        =
                                        <name>newValue</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>firePropertyChange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"lineWrap"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oldValue</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newValue</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>rebuildView</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the line-wrapping policy of the text area. If set
                * to true the lines will be wrapped if they are too long
                * to fit within the allocated width. If set to false,
                * the lines will always be unwrapped.
                *
                * @return if lines will be wrapped
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getLineWrap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>wrap</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if a viewport should always force the width of this
                * Scrollable to match the width of the viewport. This is implemented
                * to return true if the line wrapping policy is true, and false
                * if lines are not being wrapped.
                *
                * @return true if a viewport should force the Scrollables width
                * to match its own.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getScrollableTracksViewportWidth</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>wrap</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>rebuildView</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>revalidate</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>repaint</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Replaces text from the indicated start to end position with the
                * new text specified. Does nothing if the model is null. Simply
                * does a delete if the new string is null or empty.
                * &lt;p&gt;
                * This method is thread safe, although most Swing methods
                * are not. Please see
                * &lt;A HREF="http://java.sun.com/products/jfc/swingdoc-archive/threads.html"&gt;Threads
                * and Swing&lt;/A&gt; for more information.
                *
                * @param str the text to use as the replacement
                * @param start the start position &gt;= 0
                * @param end the end position &gt;= start
                * @exception IllegalArgumentException if part of the range is an
                * invalid position in the model
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>replaceRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &lt;
                                <name>start</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"end before start"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getDocument</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>doc</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>doc</name>
                                                    <name>instanceof</name>
                                                    <name>AbstractDocument</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>((<name>AbstractDocument</name>)<name>doc</name>).
                                                            <call>
                                                                <name>replace</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>end</name>
                                                                            -
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>str</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>doc</name>.
                                                                    <name>remove</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>end</name>
                                                                            -
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>doc</name>.
                                                                    <name>insertString</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>str</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>BadLocationException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>IllegalArgumentException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>e</name>.
                                                                            <name>getMessage</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Translates an offset into the components text to a
                * line number.
                *
                * @param offset the offset &gt;= 0
                * @return the line number &gt;= 0
                * @exception BadLocationException thrown if the offset is
                * less than zero or greater than the document length.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLineOfOffset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>BadLocationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getDocument</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>BadLocationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Can't translate offset to line"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>-1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>offset</name>
                                        &gt;
                                        <call>
                                            <name><name>doc</name>.
                                                <name>getLength</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>BadLocationException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Can't translate offset to line"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>doc</name>.
                                                                        <name>getLength</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                +1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Element</name>
                                                </type>
                                                <name>map</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getDocument</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getDefaultRootElement</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>map</name>.
                                                        <name>getElementIndex</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>offset</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines the offset of the start of the given line.
                *
                * @param line the line number to translate &gt;= 0
                * @return the offset &gt;= 0
                * @exception BadLocationException thrown if the line is
                * less than zero or greater or equal to the number of
                * lines contained in the document (as reported by
                * getLineCount).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLineStartOffset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>line</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>BadLocationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getDocument</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>map</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>doc</name>.
                                            <name>getDefaultRootElement</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>map</name>.
                                            <name>getElementCount</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//int lineCount = getLineCount();</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>line</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>BadLocationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Negative line"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>-1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>line</name>
                                        &gt;=
                                        <name>lineCount</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>BadLocationException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"No such line"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>doc</name>.
                                                                        <name>getLength</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                +1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Element</name>
                                                </type>
                                                <name>lineElem</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>map</name>.
                                                                <name>getElement</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>line</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>lineElem</name>.
                                                        <name>getStartOffset</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/** This method is called from within the constructor to
                * initialize the form.
                * WARNING: Do NOT modify this code. The content of this method is
                * always regenerated by the Form Editor.
                */
            </comment>
            <comment type="line">// &lt;editor-fold defaultstate="collapsed" desc=" Generated Code "&gt;//GEN-BEGIN:initComponents</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initComponents</name>
                <parameter_list>()</parameter_list>
                <block>{

                    }
                </block>
            </function>
            <comment type="line">// &lt;/editor-fold&gt;//GEN-END:initComponents</comment>


            <comment type="line">// Variables declaration - do not modify//GEN-BEGIN:variables</comment>
            <comment type="line">// End of variables declaration//GEN-END:variables</comment>

            }
        </block>
    </class>
</unit>
