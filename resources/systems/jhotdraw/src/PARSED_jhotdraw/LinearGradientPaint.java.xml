<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\apache\batik\ext\awt\LinearGradientPaint.java">
    <comment type="block">/*

        Copyright 2001-2003 The Apache Software Foundation

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>batik</name>.<name>ext</name>.
            <name>awt</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Color</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>PaintContext</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Rectangle</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>RenderingHints</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>AffineTransform</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>NoninvertibleTransformException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>Point2D</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>Rectangle2D</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>ColorModel</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The &lt;code&gt;LinearGradientPaint&lt;/code&gt; class provides a way to fill
        * a {@link java.awt.Shape} with a linear color gradient pattern. The user may
        * specify 2 or more gradient colors, and this paint will provide an
        * interpolation between each color. The user also specifies start and end
        * points which define where in user space the color gradient should begin
        * and end.
        * &lt;p&gt;
        * The user must provide an array of floats specifying how to distribute the
        * colors along the gradient. These values should range from 0.0 to 1.0 and
        * act like keyframes along the gradient (they mark where the gradient should
        * be exactly a particular color).
        * &lt;p&gt;
        * For example:
        * &lt;br&gt;
        * &lt;code&gt;
        * &lt;p&gt;
        * Point2D start = new Point2D.Float(0, 0);&lt;br&gt;
        * Point2D end = new Point2D.Float(100,100);&lt;br&gt;
        * float[] dist = {0.0, 0.2, 1.0};&lt;br&gt;
        * Color[] colors = {Color.red, Color.white, Color.blue};&lt;br&gt;
        * LinearGradientPaint p = new LinearGradientPaint(start, end, dist, colors);
        * &lt;/code&gt;
        *&lt;p&gt;
        * This code will create a LinearGradientPaint which interpolates between
        * red and white for the first 20% of the gradient and between white and blue
        * for the remaining 80%.
        *
        * &lt;p&gt; In the event that the user does not set the first keyframe value equal
        * to 0 and the last keyframe value equal to 1, keyframes will be created at
        * these positions and the first and last colors will be replicated there.
        * So, if a user specifies the following arrays to construct a gradient:&lt;br&gt;
        * {Color.blue, Color.red}, {.3, .7}&lt;br&gt;
        * this will be converted to a gradient with the following keyframes:
        * {Color.blue, Color.blue, Color.red, Color.red}, {0, .3, .7, 1}
        *
        * &lt;p&gt;
        * The user may also select what action the LinearGradientPaint should take
        * when filling color outside the start and end points. If no cycle method is
        * specified, NO_CYCLE will be chosen by default, so the endpoint colors
        * will be used to fill the remaining area.
        *
        * &lt;p&gt; The following image demonstrates the options NO_CYCLE and REFLECT.
        *
        * &lt;p&gt;
        * &lt;img src = "cyclic.jpg"&gt;
        *
        * &lt;p&gt; The colorSpace parameter allows the user to specify in which colorspace
        * the interpolation should be performed, default sRGB or linearized RGB.
        *
        *
        * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans
        * @author &lt;a href="mailto:vincent.hardy@eng.sun.com"&gt;Vincent Hardy&lt;/a&gt;
        * @version $Id: LinearGradientPaint.java,v 1.6 2005/03/27 08:58:32 cam Exp $
        * @see java.awt.Paint
        * @see java.awt.Graphics2D#setPaint
        *
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>LinearGradientPaint</name>
        <super>
            <extends>extends
                <name>MultipleGradientPaint</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** Gradient start and end points. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Point2D</name>
                    </type>
                    <name>start</name>,
                    <name>end</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**&lt;p&gt;
                * Constructs an &lt;code&gt;LinearGradientPaint&lt;/code&gt; with the default
                * NO_CYCLE repeating method and SRGB colorspace.
                *
                * @param startX the x coordinate of the gradient axis start point
                * in user space
                *
                * @param startY the y coordinate of the gradient axis start point
                * in user space
                *
                * @param endX the x coordinate of the gradient axis end point
                * in user space
                *
                * @param endY the y coordinate of the gradient axis end point
                * in user space
                *
                * @param fractions numbers ranging from 0.0 to 1.0 specifying the
                * distribution of colors along the gradient
                *
                * @param colors array of colors corresponding to each fractional value
                *
                *
                * @throws IllegalArgumentException if start and end points are the
                * same points, or if fractions.length != colors.length, or if colors
                * is less than 2 in size.
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>LinearGradientPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>startX</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>startY</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>endX</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>endY</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name><name>Point2D</name>.
                                                    <name>Float</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>startX</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>startY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name><name>Point2D</name>.
                                                    <name>Float</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>endX</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>endY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>NO_CYCLE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>SRGB</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**&lt;p&gt;
                * Constructs an &lt;code&gt;LinearGradientPaint&lt;/code&gt; with default SRGB
                * colorspace.
                *
                * @param startX the x coordinate of the gradient axis start point
                * in user space
                *
                * @param startY the y coordinate of the gradient axis start point
                * in user space
                *
                * @param endX the x coordinate of the gradient axis end point
                * in user space
                *
                * @param endY the y coordinate of the gradient axis end point
                * in user space
                *
                * @param fractions numbers ranging from 0.0 to 1.0 specifying the
                * distribution of colors along the gradient
                *
                * @param colors array of colors corresponding to each fractional value
                *
                * @param cycleMethod either NO_CYCLE, REFLECT, or REPEAT
                *
                * @throws IllegalArgumentException if start and end points are the
                * same points, or if fractions.length != colors.length, or if colors
                * is less than 2 in size.
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>LinearGradientPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>startX</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>startY</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>endX</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>endY</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CycleMethodEnum</name>
                            </type>
                            <name>cycleMethod</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name><name>Point2D</name>.
                                                    <name>Float</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>startX</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>startY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name><name>Point2D</name>.
                                                    <name>Float</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>endX</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>endY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cycleMethod</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>SRGB</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**&lt;p&gt;
                * Constructs a &lt;code&gt;LinearGradientPaint&lt;/code&gt; with the default
                * NO_CYCLE repeating method and SRGB colorspace.
                *
                * @param start the gradient axis start &lt;code&gt;Point&lt;/code&gt; in user space
                *
                * @param end the gradient axis end &lt;code&gt;Point&lt;/code&gt; in user space
                *
                * @param fractions numbers ranging from 0.0 to 1.0 specifying the
                * distribution of colors along the gradient
                *
                * @param colors array of colors corresponding to each fractional value
                *
                * @throws NullPointerException if one of the points is null
                *
                * @throws IllegalArgumentException if start and end points are the
                * same points, or if fractions.length != colors.length, or if colors
                * is less than 2 in size.
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>LinearGradientPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point2D</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point2D</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>NO_CYCLE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>SRGB</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**&lt;p&gt;
                * Constructs a &lt;code&gt;LinearGradientPaint&lt;/code&gt;.
                *
                * @param start the gradient axis start &lt;code&gt;Point&lt;/code&gt; in user space
                *
                * @param end the gradient axis end &lt;code&gt;Point&lt;/code&gt; in user space
                *
                * @param fractions numbers ranging from 0.0 to 1.0 specifying the
                * distribution of colors along the gradient
                *
                * @param colors array of colors corresponding to each fractional value
                *
                * @param cycleMethod either NO_CYCLE, REFLECT, or REPEAT
                *
                * @param colorSpace which colorspace to use for interpolation,
                * either SRGB or LINEAR_RGB
                *
                * @throws NullPointerException if one of the points is null
                *
                * @throws IllegalArgumentException if start and end points are the
                * same points, or if fractions.length != colors.length, or if colors
                * is less than 2 in size.
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>LinearGradientPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point2D</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point2D</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CycleMethodEnum</name>
                            </type>
                            <name>cycleMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ColorSpaceEnum</name>
                            </type>
                            <name>colorSpace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cycleMethod</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colorSpace</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>AffineTransform</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>

            <comment type="javadoc">/**&lt;p&gt;
                * Constructs a &lt;code&gt;LinearGradientPaint&lt;/code&gt;.
                *
                * @param start the gradient axis start &lt;code&gt;Point&lt;/code&gt; in user space
                *
                * @param end the gradient axis end &lt;code&gt;Point&lt;/code&gt; in user space
                *
                * @param fractions numbers ranging from 0.0 to 1.0 specifying the
                * distribution of colors along the gradient
                *
                * @param colors array of colors corresponding to each fractional value
                *
                * @param cycleMethod either NO_CYCLE, REFLECT, or REPEAT
                *
                * @param colorSpace which colorspace to use for interpolation,
                * either SRGB or LINEAR_RGB
                *
                * @param gradientTransform transform to apply to the gradient
                *
                * @throws NullPointerException if one of the points is null,
                * or gradientTransform is null
                *
                * @throws IllegalArgumentException if start and end points are the
                * same points, or if fractions.length != colors.length, or if colors
                * is less than 2 in size.
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>LinearGradientPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Point2D</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Point2D</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CycleMethodEnum</name>
                            </type>
                            <name>cycleMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ColorSpaceEnum</name>
                            </type>
                            <name>colorSpace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>gradientTransform</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cycleMethod</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colorSpace</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>gradientTransform</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Check input parameters</comment>
                    <comment type="line">//</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                == <name>null</name> || <name>end</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Start and end points must be" +
                                                        "non-null"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>start</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>end</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Start point cannot equal" +
                                                        "endpoint"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//copy the points...</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>start</name>
                            </name>
                            = (<name>Point2D</name>)
                            <call>
                                <name><name>start</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>end</name>
                            </name>
                            = (<name>Point2D</name>)
                            <call>
                                <name><name>end</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates and returns a PaintContext used to generate the color pattern,
                * for use by the internal rendering engine.
                *
                * @param cm {@link ColorModel} that receives
                * the &lt;code&gt;Paint&lt;/code&gt; data. This is used only as a hint.
                *
                * @param deviceBounds the device space bounding box of the
                * graphics primitive being rendered
                *
                * @param userBounds the user space bounding box of the
                * graphics primitive being rendered
                *
                * @param transform the {@link AffineTransform} from user
                * space into device space
                *
                * @param hints the hints that the context object uses to choose
                * between rendering alternatives
                *
                * @return the {@link PaintContext} that generates color patterns.
                *
                * @see PaintContext
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>PaintContext</name>
                </type>
                <name>createContext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>deviceBounds</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle2D</name>
                            </type>
                            <name>userBounds</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>transform</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RenderingHints</name>
                            </type>
                            <name>hints</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// Can't modify the transform passed in...</comment>
                    <expr_stmt>
                        <expr>
                            <name>transform</name>
                            = new
                            <call>
                                <name>AffineTransform</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>transform</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//incorporate the gradient transform</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>transform</name>.
                                    <name>concatenate</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>gradientTransform</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <try>try
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name>LinearGradientPaintContext</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cm</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>deviceBounds</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>userBounds</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>transform</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>hints</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>end</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fractions</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getColors</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>cycleMethod</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>colorSpace</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>

                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name>NoninvertibleTransformException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>e</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"transform should be" +
                                                        "invertible"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the start point of the gradient axis
                * @return a {@link Point2D} object that is a copy of the point
                * that anchors the first color of this
                * &lt;code&gt;LinearGradientPaint&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Point2D</name>
                </type>
                <name>getStartPoint</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>start</name>.
                                                    <name>getX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>start</name>.
                                                    <name>getY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns a copy of the end point of the gradient axis
                * @return a {@link Point2D} object that is a copy of the point
                * that anchors the last color of this
                * &lt;code&gt;LinearGradientPaint&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Point2D</name>
                </type>
                <name>getEndPoint</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>Point2D</name>.
                                    <name>Double</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>end</name>.
                                                    <name>getX</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>end</name>.
                                                    <name>getY</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>


</unit>
