<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\apache\batik\ext\awt\MultipleGradientPaint.java">
    <comment type="block">/*

        Copyright 2001,2003 The Apache Software Foundation

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>batik</name>.<name>ext</name>.
            <name>awt</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Color</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Paint</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>AffineTransform</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/** This is the superclass for Paints which use a multiple color
        * gradient to fill in their raster. It provides storage for variables and
        * enumerated values common to LinearGradientPaint and RadialGradientPaint.
        *
        *
        * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans
        * @author &lt;a href="mailto:vincent.hardy@eng.sun.com"&gt;Vincent Hardy&lt;/a&gt;
        * @version $Id: MultipleGradientPaint.java,v 1.7 2005/03/27 08:58:32 cam Exp $
        *
        */
    </comment>

    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>MultipleGradientPaint</name>
        <super>
            <implements>implements
                <name>Paint</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** Transparency. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>transparency</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Gradient keyframe values in the range 0 to 1. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>float</name>
                        <index>[]</index>
                    </type>
                    <name>fractions</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Gradient colors. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Color</name>
                        <index>[]</index>
                    </type>
                    <name>colors</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Transform to apply to gradient. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>AffineTransform</name>
                    </type>
                    <name>gradientTransform</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The method to use when painting out of the gradient bounds. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>CycleMethodEnum</name>
                    </type>
                    <name>cycleMethod</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The colorSpace in which to perform the interpolation. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ColorSpaceEnum</name>
                    </type>
                    <name>colorSpace</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Inner class to allow for typesafe enumerated ColorSpace values. */</comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class <name>ColorSpaceEnum</name>
                <block>{
                    }
                </block>
            </class>

            <comment type="javadoc">/** Inner class to allow for typesafe enumerated CycleMethod values. */</comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class <name>CycleMethodEnum</name>
                <block>{
                    }
                </block>
            </class>

            <comment type="javadoc">/** Indicates (if the gradient starts or ends inside the target region)
                * to use the terminal colors to fill the remaining area. (default)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CycleMethodEnum</name>
                    </type>
                    <name>NO_CYCLE</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CycleMethodEnum</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Indicates (if the gradient starts or ends inside the target region),
                * to cycle the gradient colors start-to-end, end-to-start to fill the
                * remaining area.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CycleMethodEnum</name>
                    </type>
                    <name>REFLECT</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CycleMethodEnum</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Indicates (if the gradient starts or ends inside the target region),
                * to cycle the gradient colors start-to-end, start-to-end to fill the
                * remaining area.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CycleMethodEnum</name>
                    </type>
                    <name>REPEAT</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CycleMethodEnum</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Indicates that the color interpolation should occur in sRGB space.
                * (default)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>ColorSpaceEnum</name>
                    </type>
                    <name>SRGB</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ColorSpaceEnum</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Indicates that the color interpolation should occur in linearized
                * RGB space.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>ColorSpaceEnum</name>
                    </type>
                    <name>LINEAR_RGB</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ColorSpaceEnum</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Superclass constructor, typical user should never have to call this.
                *
                * @param fractions numbers ranging from 0.0 to 1.0 specifying the
                * distribution of colors along the gradient
                *
                * @param colors array of colors corresponding to each fractional value
                *
                * @param cycleMethod either NO_CYCLE, REFLECT, or REPEAT
                *
                * @param colorSpace which colorspace to use for interpolation,
                * either SRGB or LINEAR_RGB
                *
                * @param gradientTransform transform to apply to the gradient
                *
                * @throws NullPointerException if arrays are null, or
                * gradientTransform is null
                *
                * @throws IllegalArgumentException if fractions.length != colors.length,
                * or if colors is less than 2 in size, or if an enumerated value is bad.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MultipleGradientPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CycleMethodEnum</name>
                            </type>
                            <name>cycleMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ColorSpaceEnum</name>
                            </type>
                            <name>colorSpace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>gradientTransform</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fractions</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Fractions array cannot be " +
                                                        "null"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>colors</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Colors array cannot be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fractions</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>colors</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Colors and fractions must " +
                                                        "have equal size"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>colors</name>.
                                    <name>length</name>
                                </name>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"User must specify at least " +
                                                        "2 colors"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>(<name>colorSpace</name> != <name>LINEAR_RGB</name>) &amp;&amp;
                                (<name>colorSpace</name> != <name>SRGB</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Invalid colorspace for " +
                                                        "interpolation."
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>(<name>cycleMethod</name> != <name>NO_CYCLE</name>) &amp;&amp;
                                (<name>cycleMethod</name> != <name>REFLECT</name>) &amp;&amp;
                                (<name>cycleMethod</name> != <name>REPEAT</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Invalid cycle method."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>gradientTransform</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Gradient transform cannot be "+
                                                        "null."
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//copy the fractions array</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fractions</name>
                            </name>
                            = new
                            <name>
                                <name>float</name>
                                <index>[
                                    <expr>
                                        <name><name>fractions</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>fractions</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>fractions</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//copy the colors array</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>colors</name>
                            </name>
                            = new
                            <name>
                                <name>Color</name>
                                <index>[
                                    <expr>
                                        <name><name>colors</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>colors</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>colors</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//copy some flags</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>colorSpace</name>
                            </name>
                            =
                            <name>colorSpace</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>cycleMethod</name>
                            </name>
                            =
                            <name>cycleMethod</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//copy the gradient transform</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>gradientTransform</name>
                            </name>
                            = (<name>AffineTransform</name>)
                            <call>
                                <name><name>gradientTransform</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Process transparency</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>opaque</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>colors</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>opaque</name>
                                    = <name>opaque</name> &amp;&amp; (
                                    <name>
                                        <name>colors</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getAlpha</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ==0xff)
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <name>opaque</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>transparency</name>
                                        =
                                        <name>OPAQUE</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>

                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>transparency</name>
                                        =
                                        <name>TRANSLUCENT</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns a copy of the array of colors used by this gradient.
                * @return a copy of the array of colors used by this gradient
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Color</name>
                    <index>[]</index>
                </type>
                <name>getColors</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Color</name>
                            </type>
                            <name>
                                <name>colors</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Color</name>
                                        <index>[
                                            <expr>
                                                <name><name>this</name>.<name>colors</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>colors</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>colors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.<name>colors</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>colors</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the array of floats used by this gradient
                * to calculate color distribution.
                * @return a copy of the array of floats used by this gradient to
                * calculate color distribution
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>getFractions</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>
                                <name>fractions</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>float</name>
                                        <index>[
                                            <expr>
                                                <name><name>this</name>.<name>fractions</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>fractions</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fractions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.<name>fractions</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>fractions</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the transparency mode for this LinearGradientPaint.
                * @return an integer value representing this LinearGradientPaint object's
                * transparency mode.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getTransparency</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>transparency</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the enumerated type which specifies cycling behavior.
                * @return the enumerated type which specifies cycling behavior
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>CycleMethodEnum</name>
                </type>
                <name>getCycleMethod</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>cycleMethod</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the enumerated type which specifies color space for
                * interpolation.
                * @return the enumerated type which specifies color space for
                * interpolation
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ColorSpaceEnum</name>
                </type>
                <name>getColorSpace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>colorSpace</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the transform applied to the gradient.
                * @return a copy of the transform applied to the gradient.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>AffineTransform</name>
                </type>
                <name>getTransform</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>AffineTransform</name>)
                            <call>
                                <name><name>gradientTransform</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
