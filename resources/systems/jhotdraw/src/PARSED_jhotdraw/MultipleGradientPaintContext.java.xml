<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\apache\batik\ext\awt\MultipleGradientPaintContext.java">
    <comment type="block">/*

        Copyright 2001-2003 The Apache Software Foundation

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>batik</name>.<name>ext</name>.
            <name>awt</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Color</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>PaintContext</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Rectangle</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>RenderingHints</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>color</name>.
            <name>ColorSpace</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>AffineTransform</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>NoninvertibleTransformException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>Rectangle2D</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>ColorModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBuffer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DataBufferInt</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>DirectColorModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>Raster</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>SinglePixelPackedSampleModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>WritableRaster</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>WeakReference</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>batik</name>.<name>ext</name>.<name>awt</name>.<name>
            image</name>.
            <name>GraphicsUtil</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/** This is the superclass for all PaintContexts which use a multiple color
        * gradient to fill in their raster. It provides the actual color interpolation
        * functionality. Subclasses only have to deal with using the gradient to fill
        * pixels in a raster.
        *
        * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans
        * @author &lt;a href="mailto:vincent.hardy@eng.sun.com"&gt;Vincent Hardy&lt;/a&gt;
        * @version $Id: MultipleGradientPaintContext.java,v 1.19 2004/08/18 07:13:41 vhardy Exp $
        *
        */
    </comment>
    <class>
        <specifier>abstract</specifier>
        class <name>MultipleGradientPaintContext</name>
        <super>
            <implements>implements
                <name>PaintContext</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The color model data is generated in (always un premult).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>dataModel</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * PaintContext's output ColorModel ARGB if colors are not all
                * opaque, RGB otherwise. Linear and premult are matched to
                * output ColorModel.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>model</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Color model used if gradient colors are all opaque */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>lrgbmodel_NA</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>24</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xff0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>srgbmodel_NA</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>24</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xff0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Color model used if some gradient colors are transparent */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>lrgbmodel_A</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xff0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>srgbmodel_A</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DirectColorModel</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xff0000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF00</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>DataBuffer</name>.
                                                <name>TYPE_INT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The cached colorModel */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <name>ColorModel</name>
                    </type>
                    <name>cachedModel</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The cached raster, which is reusable among instances */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <name>WeakReference</name>
                    </type>
                    <name>cached</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Raster is reused whenever possible */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>WritableRaster</name>
                    </type>
                    <name>saved</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The method to use when painting out of the gradient bounds. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name><name>MultipleGradientPaint</name>.
                            <name>CycleMethodEnum</name>
                        </name>
                    </type>
                    <name>cycleMethod</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The colorSpace in which to perform the interpolation */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name><name>MultipleGradientPaint</name>.
                            <name>ColorSpaceEnum</name>
                        </name>
                    </type>
                    <name>colorSpace</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Elements of the inverse transform matrix. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>float</name>
                    </type>
                    <name>a00</name>, <name>a01</name>, <name>a10</name>, <name>a11</name>, <name>a02</name>,
                    <name>a12</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** This boolean specifies wether we are in simple lookup mode, where an
                * input value between 0 and 1 may be used to directly index into a single
                * array of gradient colors. If this boolean value is false, then we have
                * to use a 2-step process where we have to determine which gradient array
                * we fall into, then determine the index into that array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>isSimpleLookup</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** This boolean indicates if the gradient appears to have sudden
                * discontinuities in it, this may be because of multiple stops
                * at the same location or use of the REPEATE mode.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>hasDiscontinuity</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Size of gradients array for scaling the 0-1 index when looking up
                * colors the fast way. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>fastGradientArraySize</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Array which contains the interpolated color values for each interval,
                * used by calculateSingleArrayGradient(). It is protected for possible
                * direct access by subclasses.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>gradient</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Array of gradient arrays, one array for each interval. Used by
                * calculateMultipleArrayGradient().
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>gradients</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** This holds the blend of all colors in the gradient.
                * we use this at extreamly low resolutions to ensure we
                * get a decent blend of the colors.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>gradientAverage</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** This holds the color to use when we are off the bottom of the
                * gradient */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>gradientUnderflow</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** This holds the color to use when we are off the top of the
                * gradient */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>gradientOverflow</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Length of the 2D slow lookup gradients array. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>gradientsLength</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Normalized intervals array */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>float</name>
                        <index>[]</index>
                    </type>
                    <name>normalizedIntervals</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** fractions array */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>float</name>
                        <index>[]</index>
                    </type>
                    <name>fractions</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Used to determine if gradient colors are all opaque */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>transparencyTest</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Colorspace conversion lookup tables */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>
                        <name>SRGBtoLinearRGB</name>
                        <index>[]</index>
                    </name>
                    =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>256</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>
                        <name>LinearRGBtoSRGB</name>
                        <index>[]</index>
                    </name>
                    =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>256</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//build the tables</comment>
            static
            <block>{
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>k</name>
                            &lt; 256
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>k</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>SRGBtoLinearRGB</name>
                                    <index>[
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>
                                    <name>convertSRGBtoLinearRGB</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>k</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>LinearRGBtoSRGB</name>
                                    <index>[
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>
                                    <name>convertLinearRGBtoSRGB</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>k</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                }
            </block>

            <comment type="javadoc">/** Constant number of max colors between any 2 arbitrary colors.
                * Used for creating and indexing gradients arrays.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>GRADIENT_SIZE</name> =
                    <init>
                        <expr>256</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>GRADIENT_SIZE_INDEX</name> =
                    <init>
                        <expr>
                            <name>GRADIENT_SIZE</name>
                            -1
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Maximum length of the fast single-array. If the estimated array size
                * is greater than this, switch over to the slow lookup method.
                * No particular reason for choosing this number, but it seems to provide
                * satisfactory performance for the common case (fast lookup).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_GRADIENT_ARRAY_SIZE</name> =
                    <init>
                        <expr>5000</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Constructor for superclass. Does some initialization, but leaves most
                * of the heavy-duty math for calculateGradient(), so the subclass may do
                * some other manipulation beforehand if necessary. This is not possible
                * if this computation is done in the superclass constructor which always
                * gets called first.
                **/
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MultipleGradientPaintContext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle</name>
                            </type>
                            <name>deviceBounds</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Rectangle2D</name>
                            </type>
                            <name>userBounds</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RenderingHints</name>
                            </type>
                            <name>hints</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>fractions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>colors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>MultipleGradientPaint</name>.
                                    <name>CycleMethodEnum</name>
                                </name>
                            </type>
                            <name>cycleMethod</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name><name>MultipleGradientPaint</name>.
                                    <name>ColorSpaceEnum</name>
                                </name>
                            </type>
                            <name>colorSpace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoninvertibleTransformException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">//We have to deal with the cases where the 1st gradient stop is not</comment>
                    <comment type="line">//equal to 0 and/or the last gradient stop is not equal to 1.</comment>
                    <comment type="line">//In both cases, create a new point and replicate the previous</comment>
                    <comment type="line">//extreme point's color.</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fixFirst</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fixLast</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <name><name>fractions</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//if the first gradient stop is not equal to zero, fix this condition</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>fractions</name>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </name>
                                != 0f
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fixFirst</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>len</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//if the last gradient stop is not equal to one, fix this condition</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>fractions</name>
                                    <index>[
                                        <expr>
                                            <name><name>fractions</name>.
                                                <name>length</name>
                                            </name>
                                            - 1
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                != 1f
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fixLast</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>len</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>fractions</name>.
                                    <name>length</name>
                                </name>
                                -1
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <if>if
                            <condition>(
                                <expr>
                                    <name>
                                        <name>fractions</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    ==
                                    <name>
                                        <name>fractions</name>
                                        <index>[
                                            <expr><name>i</name>+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                )
                            </condition>
                            <then>
                                <expr_stmt>
                                    <expr><name>len</name>--
                                    </expr>
                                    ;
                                </expr_stmt>
                            </then>
                        </if>
                    </for>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fractions</name>
                            </name>
                            = new
                            <name>
                                <name>float</name>
                                <index>[
                                    <expr>
                                        <name>len</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Color</name>
                                <index>[]</index>
                            </type>
                            <name>loColors</name>   =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Color</name>
                                        <index>[
                                            <expr><name>len</name>-1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Color</name>
                                <index>[]</index>
                            </type>
                            <name>hiColors</name>   =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Color</name>
                                        <index>[
                                            <expr><name>len</name>-1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>normalizedIntervals</name>
                            = new
                            <name>
                                <name>float</name>
                                <index>[
                                    <expr><name>len</name>-1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>gradientUnderflow</name>
                            =
                            <name>
                                <name>colors</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            .
                            <call>
                                <name>getRGB</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>gradientOverflow</name>
                            =
                            <name>
                                <name>colors</name>
                                <index>[
                                    <expr>
                                        <name><name>colors</name>.
                                            <name>length</name>
                                        </name>
                                        -1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            .
                            <call>
                                <name>getRGB</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>idx</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fixFirst</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>fractions</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>loColors</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>colors</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>hiColors</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>colors</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>normalizedIntervals</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>fractions</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>idx</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>fractions</name>.
                                    <name>length</name>
                                </name>
                                -1
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>fractions</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>
                                            <name>fractions</name>
                                            <index>[
                                                <expr><name>i</name>+1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// System.out.println("EQ Fracts");</comment>
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>
                                                        <name>colors</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    .
                                                    <call>
                                                        <name>equals</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>colors</name>
                                                                        <index>[
                                                                            <expr><name>i</name>+1
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>hasDiscontinuity</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>fractions</name>
                                        <index>[
                                            <expr>
                                                <name>idx</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>fractions</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>loColors</name>
                                        <index>[
                                            <expr>
                                                <name>idx</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>colors</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>hiColors</name>
                                        <index>[
                                            <expr>
                                                <name>idx</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>colors</name>
                                        <index>[
                                            <expr><name>i</name>+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>normalizedIntervals</name>
                                        <index>[
                                            <expr>
                                                <name>idx</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>fractions</name>
                                        <index>[
                                            <expr><name>i</name>+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    -
                                    <name>
                                        <name>fractions</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>idx</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fractions</name>
                                <index>[
                                    <expr>
                                        <name>idx</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>
                                <name>fractions</name>
                                <index>[
                                    <expr>
                                        <name><name>fractions</name>.
                                            <name>length</name>
                                        </name>
                                        -1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fixLast</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>loColors</name>
                                            <index>[
                                                <expr>
                                                    <name>idx</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>hiColors</name>
                                            <index>[
                                                <expr>
                                                    <name>idx</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>colors</name>
                                            <index>[
                                                <expr>
                                                    <name><name>colors</name>.
                                                        <name>length</name>
                                                    </name>
                                                    -1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>normalizedIntervals</name>
                                            <index>[
                                                <expr>
                                                    <name>idx</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        = 1-
                                        <name>
                                            <name>fractions</name>
                                            <index>[
                                                <expr>
                                                    <name><name>fractions</name>.
                                                        <name>length</name>
                                                    </name>
                                                    -1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>idx</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>fractions</name>
                                            <index>[
                                                <expr>
                                                    <name>idx</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        = 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// The inverse transform is needed to from device to user space.</comment>
                    <comment type="line">// Get all the components of the inverse transform matrix.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>AffineTransform</name>
                            </type>
                            <name>tInv</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>t</name>.
                                            <name>createInverse</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>
                                <name>m</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[<expr>6</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tInv</name>.
                                    <name>getMatrix</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a00</name>
                            = (<name>float</name>)
                            <name>
                                <name>m</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a10</name>
                            = (<name>float</name>)
                            <name>
                                <name>m</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a01</name>
                            = (<name>float</name>)
                            <name>
                                <name>m</name>
                                <index>[<expr>2</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a11</name>
                            = (<name>float</name>)
                            <name>
                                <name>m</name>
                                <index>[<expr>3</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a02</name>
                            = (<name>float</name>)
                            <name>
                                <name>m</name>
                                <index>[<expr>4</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a12</name>
                            = (<name>float</name>)
                            <name>
                                <name>m</name>
                                <index>[<expr>5</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//copy some flags</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>cycleMethod</name>
                            </name>
                            =
                            <name>cycleMethod</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>colorSpace</name>
                            </name>
                            =
                            <name>colorSpace</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// PATCH Werner Randelshofer: ColorModel can be null!</comment>

                    <comment type="line">// Setup an example Model, we may refine it later.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cm</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>cm</name>.
                                        <name>getColorSpace</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <call>
                                    <name><name>lrgbmodel_A</name>.
                                        <name>getColorSpace</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>dataModel</name>
                                    =
                                    <name>lrgbmodel_A</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cm</name>
                                        == <name>null</name> ||
                                        <call>
                                            <name><name>cm</name>.
                                                <name>getColorSpace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <call>
                                            <name><name>srgbmodel_A</name>.
                                                <name>getColorSpace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>dataModel</name>
                                            =
                                            <name>srgbmodel_A</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                                <else>else
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>IllegalArgumentException</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"Unsupported ColorSpace for interpolation"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                </else>
                            </if>
                        </else>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>calculateGradientFractions</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>loColors</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hiColors</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>model</name>
                            =
                            <call>
                                <name><name>GraphicsUtil</name>.
                                    <name>coerceColorModel</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>dataModel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cm</name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>cm</name>.
                                                    <name>isAlphaPremultiplied</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/** This function is the meat of this class. It calculates an array of
                * gradient colors based on an array of fractions and color values at those
                * fractions.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>calculateGradientFractions</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>loColors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>hiColors</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">//if interpolation should occur in Linear RGB space, convert the</comment>
                    <comment type="line">//colors using the lookup table</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>colorSpace</name>
                                ==
                                <name><name>LinearGradientPaint</name>.
                                    <name>LINEAR_RGB</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>loColors</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>loColors</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                new
                                                <call>
                                                    <name>Color</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>SRGBtoLinearRGB</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>loColors</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <call>
                                                                                <name>getRed</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>SRGBtoLinearRGB</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>loColors</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <call>
                                                                                <name>getGreen</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>SRGBtoLinearRGB</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>loColors</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <call>
                                                                                <name>getBlue</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>loColors</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>getAlpha</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>hiColors</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                new
                                                <call>
                                                    <name>Color</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>SRGBtoLinearRGB</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>hiColors</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <call>
                                                                                <name>getRed</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>SRGBtoLinearRGB</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>hiColors</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <call>
                                                                                <name>getGreen</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>SRGBtoLinearRGB</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>
                                                                                <name>hiColors</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            .
                                                                            <call>
                                                                                <name>getBlue</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>hiColors</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>getAlpha</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//initialize to be fully opaque for ANDing with colors</comment>
                    <expr_stmt>
                        <expr>
                            <name>transparencyTest</name>
                            = 0xff000000
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cycleMethod</name>
                                ==
                                <name><name>MultipleGradientPaint</name>.
                                    <name>NO_CYCLE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Include overflow and underflow colors in transparency</comment>
                                <comment type="line">// test.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>transparencyTest</name>
                                        &amp;=
                                        <name>gradientUnderflow</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>transparencyTest</name>
                                        &amp;=
                                        <name>gradientOverflow</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//array of interpolation arrays</comment>
                    <expr_stmt>
                        <expr>
                            <name>gradients</name>
                            = new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name><name>fractions</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                                <index>[]</index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>gradientsLength</name>
                            =
                            <name><name>gradients</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Find smallest interval</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <name><name>normalizedIntervals</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>Imin</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>Imin</name>
                                    = (<name>Imin</name> &gt;
                                    <name>
                                        <name>normalizedIntervals</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    ) ?
                                    <name>
                                        <name>normalizedIntervals</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    :
                                    <name>Imin</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">//estimate the size of the entire gradients array.</comment>
                    <comment type="line">//This is to prevent a tiny interval from causing the size of array to
                    </comment>
                    <comment type="line">//explode. If the estimated size is too large, break to using</comment>
                    <comment type="line">//seperate arrays for each interval, and using an indexing scheme at</comment>
                    <comment type="line">//look-up time.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>estimatedSize</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>Imin</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>estimatedSize</name>
                                        =
                                        <name><name>Integer</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>hasDiscontinuity</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>normalizedIntervals</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>estimatedSize</name>
                                                += (
                                                <name>
                                                    <name>normalizedIntervals</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                /<name>Imin</name>) *
                                                <name>GRADIENT_SIZE</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>


                    <if>if
                        <condition>(
                            <expr>
                                <name>estimatedSize</name>
                                &gt;
                                <name>MAX_GRADIENT_ARRAY_SIZE</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//slow method</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>calculateMultipleArrayGradient</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>loColors</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>hiColors</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>(<name>cycleMethod</name> ==
                                            <name><name>MultipleGradientPaint</name>.
                                                <name>REPEAT</name>
                                            </name>
                                            ) &amp;&amp;
                                            (
                                            <name>
                                                <name>gradients</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            !=
                                            <name>
                                                <name>gradients</name>
                                                <index>[
                                                    <expr>
                                                        <name><name>gradients</name>.
                                                            <name>length</name>
                                                        </name>
                                                        -1
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr>
                                                        <name>GRADIENT_SIZE_INDEX</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            )
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>hasDiscontinuity</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">//fast method</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>calculateSingleArrayGradient</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>loColors</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>hiColors</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>Imin</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>(<name>cycleMethod</name> ==
                                            <name><name>MultipleGradientPaint</name>.
                                                <name>REPEAT</name>
                                            </name>
                                            ) &amp;&amp;
                                            (
                                            <name>
                                                <name>gradient</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            !=
                                            <name>
                                                <name>gradient</name>
                                                <index>[
                                                    <expr>
                                                        <name>fastGradientArraySize</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            )
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>hasDiscontinuity</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// Use the most 'economical' model (no alpha).</comment>
                    <if>if
                        <condition>(
                            <expr>(<name>transparencyTest</name> &gt;&gt;&gt; 24) == 0xff
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>dataModel</name>.
                                                    <name>getColorSpace</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <call>
                                                <name><name>lrgbmodel_NA</name>.
                                                    <name>getColorSpace</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>dataModel</name>
                                                =
                                                <name>lrgbmodel_NA</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>dataModel</name>.
                                                            <name>getColorSpace</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <call>
                                                        <name><name>srgbmodel_NA</name>.
                                                            <name>getColorSpace</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>dataModel</name>
                                                        =
                                                        <name>srgbmodel_NA</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>model</name>
                                        =
                                        <name>dataModel</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * FAST LOOKUP METHOD
                *
                * This method calculates the gradient color values and places them in a
                * single int array, gradient[]. It does this by allocating space for
                * each interval based on its size relative to the smallest interval in
                * the array. The smallest interval is allocated 255 interpolated values
                * (the maximum number of unique in-between colors in a 24 bit color
                * system), and all other intervals are allocated
                * size = (255 * the ratio of their size to the smallest interval).
                *
                * This scheme expedites a speedy retrieval because the colors are
                * distributed along the array according to their user-specified
                * distribution. All that is needed is a relative index from 0 to 1.
                *
                * The only problem with this method is that the possibility exists for
                * the array size to balloon in the case where there is a
                * disproportionately small gradient interval. In this case the other
                * intervals will be allocated huge space, but much of that data is
                * redundant. We thus need to use the space conserving scheme below.
                *
                * @param Imin the size of the smallest interval
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>calculateSingleArrayGradient</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>loColors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>hiColors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>Imin</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">//set the flag so we know later it is a non-simple lookup</comment>
                    <expr_stmt>
                        <expr>
                            <name>isSimpleLookup</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//2 colors to interpolate</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb2</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>gradientsTot</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//the eventual size of the single array</comment>

                    <comment type="line">// These are fixed point 8.16 (start with 0.5)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveA</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveR</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveG</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveB</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//for every interval (transition between 2 colors)</comment>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>gradients</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{

                            <comment type="line">//create an array whose size is based on the ratio to the</comment>
                            <comment type="line">//smallest interval.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>nGradients</name> =
                                    <init>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(
                                                            <name>
                                                                <name>normalizedIntervals</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            /<name>Imin</name>)*255f
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>gradientsTot</name>
                                    +=
                                    <name>nGradients</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>gradients</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>nGradients</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">//the the 2 colors (keyframes) to interpolate between</comment>
                            <expr_stmt>
                                <expr>
                                    <name>rgb1</name>
                                    =
                                    <name>
                                        <name>loColors</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getRGB</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>rgb2</name>
                                    =
                                    <name>
                                        <name>hiColors</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getRGB</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">//fill this array with the colors in between rgb1 and rgb2</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>interpolate</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>rgb1</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rgb2</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>gradients</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Calculate Average of two colors...</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>argb</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>gradients</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr><name>GRADIENT_SIZE</name>/2
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>float</name>
                                    </type>
                                    <name>norm</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>normalizedIntervals</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveA</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>&gt;&gt; 8)&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveR</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>    )&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveG</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>&lt;&lt; 8)&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveB</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>&lt;&lt;16)&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">//if the colors are opaque, transparency should still be 0xff000000
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>transparencyTest</name>
                                    &amp;=
                                    <name>rgb1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>transparencyTest</name>
                                    &amp;=
                                    <name>rgb2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <expr_stmt>
                        <expr>
                            <name>gradientAverage</name>
                            = (((<name>aveA</name> &amp; 0xFF0000)&lt;&lt; 8) |
                            ((<name>aveR</name> &amp; 0xFF0000) ) |
                            ((<name>aveG</name> &amp; 0xFF0000)&gt;&gt; 8) |
                            ((<name>aveB</name> &amp; 0xFF0000)&gt;&gt;16))
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Put all gradients in a single array</comment>
                    <expr_stmt>
                        <expr>
                            <name>gradient</name>
                            = new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name>gradientsTot</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>curOffset</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>gradients</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>gradients</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>gradient</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>curOffset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>gradients</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>curOffset</name>
                                    +=
                                    <name>
                                        <name>gradients</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <name>length</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>gradient</name>
                                <index>[
                                    <expr>
                                        <name><name>gradient</name>.
                                            <name>length</name>
                                        </name>
                                        -1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>
                                <name>hiColors</name>
                                <index>[
                                    <expr>
                                        <name><name>hiColors</name>.
                                            <name>length</name>
                                        </name>
                                        -1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            .
                            <call>
                                <name>getRGB</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//if interpolation occurred in Linear RGB space, convert the</comment>
                    <comment type="line">//gradients back to SRGB using the lookup table</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>colorSpace</name>
                                ==
                                <name><name>LinearGradientPaint</name>.
                                    <name>LINEAR_RGB</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>dataModel</name>.
                                                    <name>getColorSpace</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name><name>gradient</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>gradient</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <call>
                                                                <name>convertEntireColorLinearRGBtoSRGB</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>gradient</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gradientAverage</name>
                                                    =
                                                    <call>
                                                        <name>convertEntireColorLinearRGBtoSRGB</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>gradientAverage</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>dataModel</name>.
                                                    <name>getColorSpace</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name><name>gradient</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>gradient</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <call>
                                                                <name>convertEntireColorSRGBtoLinearRGB</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>gradient</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gradientAverage</name>
                                                    =
                                                    <call>
                                                        <name>convertEntireColorSRGBtoLinearRGB</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>gradientAverage</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>fastGradientArraySize</name>
                            =
                            <name><name>gradient</name>.
                                <name>length</name>
                            </name>
                            - 1
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * SLOW LOOKUP METHOD
                *
                * This method calculates the gradient color values for each interval and
                * places each into its own 255 size array. The arrays are stored in
                * gradients[][]. (255 is used because this is the maximum number of
                * unique colors between 2 arbitrary colors in a 24 bit color system)
                *
                * This method uses the minimum amount of space (only 255 * number of
                * intervals), but it aggravates the lookup procedure, because now we
                * have to find out which interval to select, then calculate the index
                * within that interval. This causes a significant performance hit,
                * because it requires this calculation be done for every point in
                * the rendering loop.
                *
                * For those of you who are interested, this is a classic example of the
                * time-space tradeoff.
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>calculateMultipleArrayGradient</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>loColors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Color</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>hiColors</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">//set the flag so we know later it is a non-simple lookup</comment>
                    <expr_stmt>
                        <expr>
                            <name>isSimpleLookup</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//2 colors to interpolate</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb2</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// These are fixed point 8.16 (start with 0.5)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveA</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveR</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveG</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aveB</name> =
                            <init>
                                <expr>0x008000</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//for every interval (transition between 2 colors)</comment>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>gradients</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{

                            <comment type="line">// This interval will never actually be used (zero size)</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>normalizedIntervals</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <continue>continue;</continue>
                                </then>
                            </if>

                            <comment type="line">//create an array of the maximum theoretical size for each interval
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>gradients</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>GRADIENT_SIZE</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">//get the the 2 colors</comment>
                            <expr_stmt>
                                <expr>
                                    <name>rgb1</name>
                                    =
                                    <name>
                                        <name>loColors</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getRGB</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>rgb2</name>
                                    =
                                    <name>
                                        <name>hiColors</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getRGB</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">//fill this array with the colors in between rgb1 and rgb2</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>interpolate</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>rgb1</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rgb2</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>gradients</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// Calculate Average of two colors...</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>argb</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>gradients</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr><name>GRADIENT_SIZE</name>/2
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>float</name>
                                    </type>
                                    <name>norm</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>normalizedIntervals</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveA</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>&gt;&gt; 8)&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveR</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>    )&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveG</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>&lt;&lt; 8)&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>aveB</name>
                                    +=
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>argb</name>&lt;&lt;16)&amp;0xFF0000)*
                                                    <name>norm</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">//if the colors are opaque, transparency should still be 0xff000000
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>transparencyTest</name>
                                    &amp;=
                                    <name>rgb1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>transparencyTest</name>
                                    &amp;=
                                    <name>rgb2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <expr_stmt>
                        <expr>
                            <name>gradientAverage</name>
                            = (((<name>aveA</name> &amp; 0xFF0000)&lt;&lt; 8) |
                            ((<name>aveR</name> &amp; 0xFF0000) ) |
                            ((<name>aveG</name> &amp; 0xFF0000)&gt;&gt; 8) |
                            ((<name>aveB</name> &amp; 0xFF0000)&gt;&gt;16))
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//if interpolation occurred in Linear RGB space, convert the</comment>
                    <comment type="line">//gradients back to SRGB using the lookup table</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>colorSpace</name>
                                ==
                                <name><name>LinearGradientPaint</name>.
                                    <name>LINEAR_RGB</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>dataModel</name>.
                                                    <name>getColorSpace</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_sRGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>j</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>j</name>
                                                        &lt;
                                                        <name><name>gradients</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>j</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt;
                                                                <name>
                                                                    <name>gradients</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>j</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <name>length</name>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr><name>i</name>++
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>
                                                                        <name>gradients</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>j</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    =
                                                                    <call>
                                                                        <name>convertEntireColorLinearRGBtoSRGB</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>gradients</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>j</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </for>
                                                    }
                                                </block>
                                            </for>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gradientAverage</name>
                                                    =
                                                    <call>
                                                        <name>convertEntireColorLinearRGBtoSRGB</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>gradientAverage</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>dataModel</name>.
                                                    <name>getColorSpace</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <call>
                                                <name><name>ColorSpace</name>.
                                                    <name>getInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ColorSpace</name>.
                                                                <name>CS_LINEAR_RGB</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>j</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>j</name>
                                                        &lt;
                                                        <name><name>gradients</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>j</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt;
                                                                <name>
                                                                    <name>gradients</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>j</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <name>length</name>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr><name>i</name>++
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>
                                                                        <name>gradients</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>j</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    =
                                                                    <call>
                                                                        <name>convertEntireColorSRGBtoLinearRGB</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>gradients</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>j</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </for>
                                                    }
                                                </block>
                                            </for>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gradientAverage</name>
                                                    =
                                                    <call>
                                                        <name>convertEntireColorSRGBtoLinearRGB</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>gradientAverage</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Yet another helper function. This one linearly interpolates between
                * 2 colors, filling up the output array.
                *
                * @param rgb1 the start color
                * @param rgb2 the end color
                * @param output the output array of colors... assuming this is not null.
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>interpolate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a1</name>, <name>r1</name>, <name>g1</name>, <name>b1</name>, <name>da</name>, <name>
                            dr</name>, <name>dg</name>,
                            <name>db</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//color components</comment>

                    <comment type="line">//step between interpolated values.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>stepSize</name> =
                            <init>
                                <expr>1/(<name>float</name>)
                                    <name><name>output</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//extract color components from packed integer</comment>
                    <expr_stmt>
                        <expr>
                            <name>a1</name>
                            = (<name>rgb1</name> &gt;&gt; 24) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>r1</name>
                            = (<name>rgb1</name> &gt;&gt; 16) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>g1</name>
                            = (<name>rgb1</name> &gt;&gt; 8) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b1</name>
                            = (<name>rgb1</name>      ) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//calculate the total change in alpha, red, green, blue</comment>
                    <expr_stmt>
                        <expr>
                            <name>da</name>
                            = ((<name>rgb2</name> &gt;&gt; 24) &amp; 0xff) -
                            <name>a1</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>dr</name>
                            = ((<name>rgb2</name> &gt;&gt; 16) &amp; 0xff) -
                            <name>r1</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>dg</name>
                            = ((<name>rgb2</name> &gt;&gt; 8) &amp; 0xff) -
                            <name>g1</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>db</name>
                            = ((<name>rgb2</name>      ) &amp; 0xff) -
                            <name>b1</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//for each step in the interval calculate the in-between color by</comment>
                    <comment type="line">//multiplying the normalized current position by the total color change
                    </comment>
                    <comment type="line">//(.5 is added to prevent truncation round-off error)</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>output</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>output</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    ((
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>a1</name> + <name>i</name> * <name>da</name> * <name>
                                                    stepSize</name>) + .5
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &lt;&lt; 24)) |
                                    ((
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>r1</name> + <name>i</name> * <name>dr</name> * <name>
                                                    stepSize</name>) + .5
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &lt;&lt; 16)) |
                                    ((
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>g1</name> + <name>i</name> * <name>dg</name> * <name>
                                                    stepSize</name>) + .5
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &lt;&lt; 8)) |
                                    ((
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>b1</name> + <name>i</name> * <name>db</name> * <name>
                                                    stepSize</name>) + .5
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    ))
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>


            <comment type="javadoc">/** Yet another helper function. This one extracts the color components
                * of an integer RGB triple, converts them from LinearRGB to SRGB, then
                * recompacts them into an int.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>convertEntireColorLinearRGBtoSRGB</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a1</name>, <name>r1</name>, <name>g1</name>,
                            <name>b1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//color components</comment>

                    <comment type="line">//extract red, green, blue components</comment>
                    <expr_stmt>
                        <expr>
                            <name>a1</name>
                            = (<name>rgb</name> &gt;&gt; 24) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>r1</name>
                            = (<name>rgb</name> &gt;&gt; 16) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>g1</name>
                            = (<name>rgb</name> &gt;&gt; 8) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b1</name>
                            = <name>rgb</name> &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//use the lookup table</comment>
                    <expr_stmt>
                        <expr>
                            <name>r1</name>
                            =
                            <name>
                                <name>LinearRGBtoSRGB</name>
                                <index>[
                                    <expr>
                                        <name>r1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>g1</name>
                            =
                            <name>
                                <name>LinearRGBtoSRGB</name>
                                <index>[
                                    <expr>
                                        <name>g1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b1</name>
                            =
                            <name>
                                <name>LinearRGBtoSRGB</name>
                                <index>[
                                    <expr>
                                        <name>b1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//re-compact the components</comment>
                    <return>return
                        <expr>((<name>a1</name> &lt;&lt; 24) |
                            (<name>r1</name> &lt;&lt; 16) |
                            (<name>g1</name> &lt;&lt; 8) |
                            <name>b1</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Yet another helper function. This one extracts the color components
                * of an integer RGB triple, converts them from LinearRGB to SRGB, then
                * recompacts them into an int.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>convertEntireColorSRGBtoLinearRGB</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rgb</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a1</name>, <name>r1</name>, <name>g1</name>,
                            <name>b1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//color components</comment>

                    <comment type="line">//extract red, green, blue components</comment>
                    <expr_stmt>
                        <expr>
                            <name>a1</name>
                            = (<name>rgb</name> &gt;&gt; 24) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>r1</name>
                            = (<name>rgb</name> &gt;&gt; 16) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>g1</name>
                            = (<name>rgb</name> &gt;&gt; 8) &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b1</name>
                            = <name>rgb</name> &amp; 0xff
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//use the lookup table</comment>
                    <expr_stmt>
                        <expr>
                            <name>r1</name>
                            =
                            <name>
                                <name>SRGBtoLinearRGB</name>
                                <index>[
                                    <expr>
                                        <name>r1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>g1</name>
                            =
                            <name>
                                <name>SRGBtoLinearRGB</name>
                                <index>[
                                    <expr>
                                        <name>g1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b1</name>
                            =
                            <name>
                                <name>SRGBtoLinearRGB</name>
                                <index>[
                                    <expr>
                                        <name>b1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//re-compact the components</comment>
                    <return>return
                        <expr>((<name>a1</name> &lt;&lt; 24) |
                            (<name>r1</name> &lt;&lt; 16) |
                            (<name>g1</name> &lt;&lt; 8) |
                            <name>b1</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/** Helper function to index into the gradients array. This is necessary
                * because each interval has an array of colors with uniform size 255.
                * However, the color intervals are not necessarily of uniform length, so
                * a conversion is required.
                *
                * @param position the unmanipulated position. want to map this into the
                * range 0 to 1
                *
                * @returns integer color to display
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>indexIntoGradientsArrays</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>position</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">//first, manipulate position value depending on the cycle method.</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>cycleMethod</name>
                                ==
                                <name><name>MultipleGradientPaint</name>.
                                    <name>NO_CYCLE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>position</name>
                                            &gt;= 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">//upper bound is 1</comment>
                                            <return>return
                                                <expr>
                                                    <name>gradientOverflow</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>

                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>position</name>
                                                    &lt;= 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//lower bound is 0</comment>
                                                    <return>return
                                                        <expr>
                                                            <name>gradientUnderflow</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>

                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cycleMethod</name>
                                        ==
                                        <name><name>MultipleGradientPaint</name>.
                                            <name>REPEAT</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">//get the fractional part</comment>
                                        <comment type="line">//(modulo behavior discards integer component)</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>position</name>
                                                = <name>position</name> - (<name>int</name>)
                                                <name>position</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <comment type="line">//position now be between -1 and 1</comment>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>position</name>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>position</name>
                                                            = <name>position</name> + 1
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">//force it to be in the range 0-1</comment>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>w</name>=
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                                , <name>c1</name>=
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                                , <name>c2</name>=
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>isSimpleLookup</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>position</name>
                                                            *=
                                                            <name><name>gradient</name>.
                                                                <name>length</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>idx1</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>(<name>int</name>)
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>position</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr><name>idx1</name>+1 &lt;
                                                                <name><name>gradient</name>.
                                                                    <name>length</name>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <return>return
                                                                <expr>
                                                                    <name>
                                                                        <name>gradient</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>idx1</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                        </then>
                                                    </if>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>w</name>
                                                            =
                                                            <call>(<name>int</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>(<name>position</name>-<name>idx1</name>)*(1&lt;&lt;16)
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c1</name>
                                                            =
                                                            <name>
                                                                <name>gradient</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>idx1</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c2</name>
                                                            =
                                                            <name>
                                                                <name>gradient</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">//for all the gradient interval arrays
                                                    </comment>
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt;
                                                                <name>gradientsLength</name>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr><name>i</name>++
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{

                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>position</name>
                                                                        &lt;
                                                                        <name>
                                                                            <name>fractions</name>
                                                                            <index>[
                                                                                <expr><name>i</name>+1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <comment type="line">//this is the array we
                                                                            want
                                                                        </comment>

                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>float</name>
                                                                                </type>
                                                                                <name>delta</name> =
                                                                                <init>
                                                                                    <expr>
                                                                                        <name>position</name>
                                                                                        -
                                                                                        <name>
                                                                                            <name>fractions</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>

                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>delta</name>
                                                                                = ((<name>delta</name> /
                                                                                <name>
                                                                                    <name>normalizedIntervals</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                ) * <name>GRADIENT_SIZE</name>)
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <comment type="line">//this is the interval we
                                                                            want.
                                                                        </comment>
                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>index</name> =
                                                                                <init>
                                                                                    <expr>(<name>int</name>)
                                                                                        <name>delta</name>
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>(<name>index</name>+1&lt;
                                                                                    <name>
                                                                                        <name>gradients</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                    .<name>length</name>) ||
                                                                                    (<name>i</name>+1 &lt; <name>
                                                                                        gradientsLength</name>)
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <return>return
                                                                                    <expr>
                                                                                        <name>
                                                                                            <name>gradients</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>index</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                            </then>
                                                                        </if>

                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>w</name>
                                                                                =
                                                                                <call>(<name>int</name>)
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>(<name>
                                                                                                delta</name>-<name>
                                                                                                index</name>)*(1&lt;&lt;16)
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>c1</name>
                                                                                =
                                                                                <name>
                                                                                    <name>gradients</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>index</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>c2</name>
                                                                                =
                                                                                <name>
                                                                                    <name>gradients</name>
                                                                                    <index>[<expr>0</expr>]
                                                                                    </index>
                                                                                    <index>[<expr>0</expr>]
                                                                                    </index>
                                                                                </name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <break>break;</break>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </for>
                                                    }
                                                </block>
                                            </else>
                                        </if>

                                        <return>return
                                            <expr>(((( ( (<name>c1</name>&gt;&gt; 8) &amp;0xFF0000)+
                                                ((((<name>c2</name>&gt;&gt;&gt;24) )-((<name>c1</name>&gt;&gt;&gt;24)
                                                ))*<name>w</name>))&amp;0xFF0000)&lt;&lt; 8) |

                                                ((( ( (<name>c1</name>     ) &amp;0xFF0000)+
                                                ((((<name>c2</name>&gt;&gt; 16)&amp;0xFF)-((<name>c1</name>&gt;&gt; 16)&amp;0xFF))*<name>
                                                    w</name>))&amp;0xFF0000) ) |

                                                ((( ( (<name>c1</name>&lt;&lt; 8) &amp;0xFF0000)+
                                                ((((<name>c2</name>&gt;&gt; 8)&amp;0xFF)-((<name>c1</name>&gt;&gt; 8)&amp;0xFF))*<name>
                                                    w</name>))&amp;0xFF0000)&gt;&gt; 8) |

                                                ((( ( (<name>c1</name>&lt;&lt; 16) &amp;0xFF0000)+
                                                ((((<name>c2</name>     )&amp;0xFF)-((<name>c1
                                                </name>     )&amp;0xFF))*<name>w</name>))&amp;0xFF0000)&gt;&gt;16))
                                            </expr>
                                            ;
                                        </return>

                                        <comment type="line">// return c1 +</comment>
                                        <comment type="line">// ((( ((((c2&gt;&gt;&gt;24) )-((c1&gt;&gt;&gt;24) ))*w)&amp;0xFF0000)&lt;&lt;
                                            8) |
                                        </comment>
                                        <comment type="line">// (( ((((c2&gt;&gt; 16)&amp;0xFF)-((c1&gt;&gt; 16)&amp;0xFF))*w)&amp;0xFF0000)
                                            ) |
                                        </comment>
                                        <comment type="line">// (( ((((c2&gt;&gt; 8)&amp;0xFF)-((c1&gt;&gt; 8)&amp;0xFF))*w)&amp;0xFF0000)&gt;&gt;
                                            8) |
                                        </comment>
                                        <comment type="line">// (( ((((c2 )&amp;0xFF)-((c1 )&amp;0xFF))*w)&amp;0xFF0000)&gt;&gt;16));</comment>
                                        }
                                    </block>
                                </then>

                                <else>else
                                    <block>{
                                        <comment type="line">//cycleMethod == MultipleGradientPaint.REFLECT</comment>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>position</name>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>position</name>
                                                            = -
                                                            <name>position</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">//take absolute value</comment>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>part</name> =
                                                <init>
                                                    <expr>(<name>int</name>)
                                                        <name>position</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <comment type="line">//take the integer part</comment>

                                        <expr_stmt>
                                            <expr>
                                                <name>position</name>
                                                = <name>position</name> -
                                                <name>part</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">//get the fractional part</comment>

                                        <if>if
                                            <condition>(
                                                <expr>(<name>part</name> &amp; 0x00000001) == 1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//if integer part is odd</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>position</name>
                                                            = 1 -
                                                            <name>position</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">//want the reflected color instead</comment>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>

                    <comment type="line">//now, get the color based on this 0-1 position:</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>isSimpleLookup</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//easy to compute: just scale index by array size</comment>
                                <return>return
                                    <expr>
                                        <name>
                                            <name>gradient</name>
                                            <index>[
                                                <expr>
                                                    <call>(<name>int</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>position</name>
                                                                    *
                                                                    <name>fastGradientArraySize</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>

                        <else>else
                            <block>{
                                <comment type="line">//more complicated computation, to save space</comment>

                                <comment type="line">//for all the gradient interval arrays</comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>gradientsLength</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>position</name>
                                                    &lt;
                                                    <name>
                                                        <name>fractions</name>
                                                        <index>[
                                                            <expr><name>i</name>+1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//this is the array we want</comment>

                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>float</name>
                                                            </type>
                                                            <name>delta</name> =
                                                            <init>
                                                                <expr>
                                                                    <name>position</name>
                                                                    -
                                                                    <name>
                                                                        <name>fractions</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>

                                                    <comment type="line">//this is the interval we want.</comment>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>index</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>(<name>int</name>)
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>(<name>delta</name> /
                                                                                    <name>
                                                                                        <name>normalizedIntervals</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                    )
                                                                                    * (<name>GRADIENT_SIZE_INDEX</name>)
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>

                                                    <return>return
                                                        <expr>
                                                            <name>
                                                                <name>gradients</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                                <index>[
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>

                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>gradientOverflow</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/** Helper function to index into the gradients array. This is necessary
                * because each interval has an array of colors with uniform size 255.
                * However, the color intervals are not necessarily of uniform length, so
                * a conversion is required. This version also does anti-aliasing by
                * averaging the gradient over position+/-(sz/2).
                *
                * @param position the unmanipulated position. want to map this into the
                * range 0 to 1
                * @param sz the size in gradient space to average.
                *
                * @returns ARGB integer color to display
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>indexGradientAntiAlias</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>position</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>sz</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">//first, manipulate position value depending on the cycle method.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cycleMethod</name>
                                ==
                                <name><name>MultipleGradientPaint</name>.
                                    <name>NO_CYCLE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>DEBUG</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"NO_CYCLE"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>float</name>
                                        </type>
                                        <name>p1</name> =
                                        <init>
                                            <expr><name>position</name>-(<name>sz</name>/2)
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>float</name>
                                        </type>
                                        <name>p2</name> =
                                        <init>
                                            <expr><name>position</name>+(<name>sz</name>/2)
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p1</name>
                                            &gt;= 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>gradientOverflow</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p2</name>
                                            &lt;= 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>gradientUnderflow</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>interior</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>float</name>
                                        </type>
                                        <name>top_weight</name>=
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                        , <name>bottom_weight</name>=
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                        ,
                                        <name>frac</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p2</name>
                                            &gt;= 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>top_weight</name>
                                                    = (<name>p2</name>-1)/
                                                    <name>sz</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p1</name>
                                                        &lt;= 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>bottom_weight</name>
                                                                = -<name>p1</name>/
                                                                <name>sz</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr><name>frac</name>=1
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>interior</name>
                                                                =
                                                                <name>gradientAverage</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr><name>frac</name>=1-
                                                                <name>p1</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>interior</name>
                                                                =
                                                                <call>
                                                                    <name>getAntiAlias</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>p1</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>true</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>1</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>false</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>1-
                                                                                <name>p1</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>1</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>p1</name>
                                                    &lt;= 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>bottom_weight</name>
                                                            = -<name>p1</name>/
                                                            <name>sz</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>frac</name>
                                                            =
                                                            <name>p2</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>interior</name>
                                                            =
                                                            <call>
                                                                <name>getAntiAlias</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>true</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>p2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>false</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>p2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name>getAntiAlias</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>p1</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>p2</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>false</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>sz</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>1</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                            </else>
                                        </if>
                                    </else>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>norm</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(1&lt;&lt;16)*<name>frac</name>/
                                                                <name>sz</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>pA</name> =
                                        <init>
                                            <expr>(((<name>interior</name>&gt;&gt;&gt;20)&amp;0xFF0)*<name>norm</name>)&gt;&gt;16
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>pR</name> =
                                        <init>
                                            <expr>(((<name>interior</name>&gt;&gt; 12)&amp;0xFF0)*<name>norm</name>)&gt;&gt;16
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>pG</name> =
                                        <init>
                                            <expr>(((<name>interior</name>&gt;&gt; 4)&amp;0xFF0)*<name>norm</name>)&gt;&gt;16
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>pB</name> =
                                        <init>
                                            <expr>(((<name>interior</name>&lt;&lt; 4)&amp;0xFF0)*<name>norm</name>)&gt;&gt;16
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>bottom_weight</name>
                                            != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>bPix</name> =
                                                    <init>
                                                        <expr>
                                                            <name>gradientUnderflow</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <comment type="line">// System.out.println("ave: " + gradientAverage);
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>norm</name>
                                                    =
                                                    <call>(<name>int</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(1&lt;&lt;16)*
                                                                    <name>bottom_weight</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pA</name>
                                                    += (((<name>bPix</name>&gt;&gt;&gt;20) &amp; 0xFF0)*<name>
                                                    norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pR</name>
                                                    += (((<name>bPix</name>&gt;&gt; 12) &amp; 0xFF0)*<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pG</name>
                                                    += (((<name>bPix</name>&gt;&gt; 4) &amp; 0xFF0)*<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pB</name>
                                                    += (((<name>bPix</name>&lt;&lt; 4) &amp; 0xFF0)*<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>top_weight</name>
                                            != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>tPix</name> =
                                                    <init>
                                                        <expr>
                                                            <name>gradientOverflow</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>

                                            <expr_stmt>
                                                <expr>
                                                    <name>norm</name>
                                                    =
                                                    <call>(<name>int</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(1&lt;&lt;16)*
                                                                    <name>top_weight</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pA</name>
                                                    += (((<name>tPix</name>&gt;&gt;&gt;20) &amp; 0xFF0)*<name>
                                                    norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pR</name>
                                                    += (((<name>tPix</name>&gt;&gt; 12) &amp; 0xFF0)*<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pG</name>
                                                    += (((<name>tPix</name>&gt;&gt; 4) &amp; 0xFF0)*<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pB</name>
                                                    += (((<name>tPix</name>&lt;&lt; 4) &amp; 0xFF0)*<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <return>return
                                    <expr>(((<name>pA</name>&amp;0xFF0)&lt;&lt;20) |
                                        ((<name>pR</name>&amp;0xFF0)&lt;&lt;12) |
                                        ((<name>pG</name>&amp;0xFF0)&lt;&lt; 4) |
                                        ((<name>pB</name>&amp;0xFF0)&gt;&gt; 4))
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// See how many times we are going to "wrap around" the gradient,</comment>
                    <comment type="line">// array.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>intSz</name> =
                            <init>
                                <expr>(<name>int</name>)
                                    <name>sz</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>weight</name> =
                            <init>
                                <expr>1f</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>intSz</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// We need to make sure that sz is &lt; 1.0 otherwise</comment>
                                <comment type="line">// p1 and p2 my pass each other which will cause no end of
                                </comment>
                                <comment type="line">// trouble.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>sz</name>
                                        -=
                                        <name>intSz</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>weight</name>
                                        = <name>sz</name>/(<name>intSz</name>+<name>sz</name>)
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>weight</name>
                                            &lt; 0.1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <comment type="line">// The part of the color from the location will be
                                            swamped
                                        </comment>
                                        <comment type="line">// by the averaged part of the gradient so just use the
                                        </comment>
                                        <comment type="line">// average color for the gradient.</comment>
                                        <return>return
                                            <expr>
                                                <name>gradientAverage</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// So close to full gradient just use the average value...</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>sz</name>
                                &gt; 0.99
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>gradientAverage</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Go up and down from position by 1/2 sz.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>p1</name> =
                            <init>
                                <expr><name>position</name>-(<name>sz</name>/2)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>p2</name> =
                            <init>
                                <expr><name>position</name>+(<name>sz</name>/2)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.<name>out</name>.
                                            <name>println</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"P1: " + <name>p1</name> + " P2: " +
                                                    <name>p2</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// These indicate the direction to go from p1 and p2 when</comment>
                    <comment type="line">// averaging...</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>p1_up</name>=
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>p2_up</name>=
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>cycleMethod</name>
                                ==
                                <name><name>MultipleGradientPaint</name>.
                                    <name>REPEAT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>DEBUG</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"REPEAT"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>

                                <comment type="line">// Get positions between -1 and 1</comment>
                                <expr_stmt>
                                    <expr><name>p1</name>=<name>p1</name>-(<name>int</name>)
                                        <name>p1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>p2</name>=<name>p2</name>-(<name>int</name>)
                                        <name>p2</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// force to be in rage 0-1.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p1</name>
                                            &lt;0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>p1</name>
                                                += 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p2</name>
                                            &lt;0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>p2</name>
                                                += 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>

                        <else>else
                            <block>{
                                <comment type="line">//cycleMethod == MultipleGradientPaint.REFLECT</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>DEBUG</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"REFLECT"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>

                                <comment type="line">//take absolute values</comment>
                                <comment type="line">// Note when we reflect we change sense of p1/2_up.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p2</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>p1</name>
                                                    = -
                                                    <name>p1</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p1_up</name>
                                                    = !
                                                    <name>p1_up</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p2</name>
                                                    = -
                                                    <name>p2</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p2_up</name>
                                                    = !
                                                    <name>p2_up</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>p1</name>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>p1</name>
                                                            = -
                                                            <name>p1</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>p1_up</name>
                                                            = !
                                                            <name>p1_up</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>part1</name>,
                                        <name>part2</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>part1</name>
                                        = (<name>int</name>)
                                        <name>p1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// take the integer part</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>p1</name>
                                        = <name>p1</name> -
                                        <name>part1</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// get the fractional part</comment>

                                <expr_stmt>
                                    <expr>
                                        <name>part2</name>
                                        = (<name>int</name>)
                                        <name>p2</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// take the integer part</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>p2</name>
                                        = <name>p2</name> -
                                        <name>part2</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// get the fractional part</comment>

                                <comment type="line">// if integer part is odd we want the reflected color instead.
                                </comment>
                                <comment type="line">// Note when we reflect we change sense of p1/2_up.</comment>
                                <if>if
                                    <condition>(
                                        <expr>(<name>part1</name> &amp; 0x01) == 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>p1</name>
                                                    = 1-
                                                    <name>p1</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p1_up</name>
                                                    = !
                                                    <name>p1_up</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>(<name>part2</name> &amp; 0x01) == 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>p2</name>
                                                    = 1-
                                                    <name>p2</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p2_up</name>
                                                    = !
                                                    <name>p2_up</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// Check if in the end they just got switched around.</comment>
                                <comment type="line">// this commonly happens if they both end up negative.</comment>
                                <if>if
                                    <condition>(
                                        <expr>(<name>p1</name> &gt; <name>p2</name>) &amp;&amp; !<name>p1_up</name> &amp;&amp;
                                            <name>p2_up</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>float</name>
                                                    </type>
                                                    <name>t</name> =
                                                    <init>
                                                        <expr>
                                                            <name>p1</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p1</name>
                                                    =
                                                    <name>p2</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p2</name>
                                                    =
                                                    <name>t</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p1_up</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>p2_up</name>
                                                    = false
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name>getAntiAlias</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>p1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p1_up</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p2_up</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>sz</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>weight</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>getAntiAlias</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>p1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>p1_up</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>p2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>p2_up</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>sz</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>weight</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// Until the last set of ops these are 28.4 fixed point values.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ach</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>rch</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>gch</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>bch</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>isSimpleLookup</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>p1</name>
                                        *=
                                        <name>fastGradientArraySize</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>p2</name>
                                        *=
                                        <name>fastGradientArraySize</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>idx1</name> =
                                        <init>
                                            <expr>(<name>int</name>)
                                                <name>p1</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>idx2</name> =
                                        <init>
                                            <expr>(<name>int</name>)
                                                <name>p2</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name>,
                                        <name>pix</name>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p1_up</name>
                                            &amp;&amp; !<name>p2_up</name> &amp;&amp; (<name>idx1</name> &lt;= <name>
                                            idx2</name>)
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>idx1</name>
                                                        ==
                                                        <name>idx2</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <return>return
                                                        <expr>
                                                            <name>
                                                                <name>gradient</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>idx1</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                </then>
                                            </if>

                                            <comment type="line">// Sum between idx1 and idx2.</comment>
                                            <for>for (
                                                <init>
                                                    <expr><name>i</name>=<name>idx1</name>+1
                                                    </expr>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr><name>i</name>&lt;
                                                        <name>idx2</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pix</name>
                                                            =
                                                            <name>
                                                                <name>gradient</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ach</name>
                                                            += ((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>rch</name>
                                                            += ((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>gch</name>
                                                            += ((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>bch</name>
                                                            += ((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// Do the bulk of the work, all the whole gradient
                                                entries
                                            </comment>
                                            <comment type="line">// for idx1 and idx2.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p1_up</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <expr><name>i</name>=<name>idx1</name>+1
                                                                </expr>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>fastGradientArraySize</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradient</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += ((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <expr><name>i</name>=0
                                                                </expr>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>idx1</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradient</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += ((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </else>
                                            </if>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p2_up</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <expr><name>i</name>=<name>idx2</name>+1
                                                                </expr>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>fastGradientArraySize</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradient</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += ((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <expr><name>i</name>=0
                                                                </expr>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>idx2</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradient</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += ((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += ((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </else>
                                </if>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>norm</name>,
                                        <name>isz</name>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// Normalize the summation so far...</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>isz</name>
                                        =
                                        <call>(<name>int</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>(1&lt;&lt;16)/(<name>sz</name>*<name>
                                                        fastGradientArraySize</name>)
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ach</name>
                                        = (<name>ach</name>*<name>isz</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>rch</name>
                                        = (<name>rch</name>*<name>isz</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>gch</name>
                                        = (<name>gch</name>*<name>isz</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>bch</name>
                                        = (<name>bch</name>*<name>isz</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// Clean up with the partial buckets at each end.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p1_up</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>norm</name>
                                                =
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(1-(<name>p1</name>-<name>idx1</name>))*
                                                                <name>isz</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                    <else>else
                                        <expr_stmt>
                                            <expr>
                                                <name>norm</name>
                                                =
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>p1</name>-<name>idx1</name>) *
                                                                <name>isz</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>pix</name>
                                        =
                                        <name>
                                            <name>gradient</name>
                                            <index>[
                                                <expr>
                                                    <name>idx1</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ach</name>
                                        += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>rch</name>
                                        += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>gch</name>
                                        += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>bch</name>
                                        += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>p2_up</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>norm</name>
                                                =
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(1-(<name>p2</name>-<name>idx2</name>))*
                                                                <name>isz</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                    <else>else
                                        <expr_stmt>
                                            <expr>
                                                <name>norm</name>
                                                =
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>p2</name>-<name>idx2</name>) *
                                                                <name>isz</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>pix</name>
                                        =
                                        <name>
                                            <name>gradient</name>
                                            <index>[
                                                <expr>
                                                    <name>idx2</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ach</name>
                                        += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>rch</name>
                                        += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>gch</name>
                                        += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>bch</name>
                                        += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// Round and drop the 4bits frac.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>ach</name>
                                        = (<name>ach</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>rch</name>
                                        = (<name>rch</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>gch</name>
                                        = (<name>gch</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>bch</name>
                                        = (<name>bch</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>

                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>idx1</name>=
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                        , <name>idx2</name>=
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i1</name>=
                                        <init>
                                            <expr>-1</expr>
                                        </init>
                                        , <name>i2</name>=
                                        <init>
                                            <expr>-1</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>float</name>
                                        </type>
                                        <name>f1</name>=
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                        , <name>f2</name>=
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// Find which gradient interval our points fall into.</comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>gradientsLength</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>(<name>p1</name> &lt;
                                                    <name>
                                                        <name>fractions</name>
                                                        <index>[
                                                            <expr><name>i</name>+1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ) &amp;&amp; (<name>i1</name> == -1)
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//this is the array we want</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>i1</name>
                                                            =
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>f1</name>
                                                            = <name>p1</name> -
                                                            <name>
                                                                <name>fractions</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>f1</name>
                                                            = ((<name>f1</name>/
                                                            <name>
                                                                <name>normalizedIntervals</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            )
                                                            *<name>GRADIENT_SIZE_INDEX</name>)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">//this is the interval we want.</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>idx1</name>
                                                            = (<name>int</name>)
                                                            <name>f1</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>i2</name>
                                                                != -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <break>break;</break>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>(<name>p2</name> &lt;
                                                    <name>
                                                        <name>fractions</name>
                                                        <index>[
                                                            <expr><name>i</name>+1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ) &amp;&amp; (<name>i2</name> == -1)
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//this is the array we want</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>i2</name>
                                                            =
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>f2</name>
                                                            = <name>p2</name> -
                                                            <name>
                                                                <name>fractions</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>f2</name>
                                                            = ((<name>f2</name>/
                                                            <name>
                                                                <name>normalizedIntervals</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            )
                                                            *<name>GRADIENT_SIZE_INDEX</name>)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">//this is the interval we want.</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>idx2</name>
                                                            = (<name>int</name>)
                                                            <name>f2</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>i1</name>
                                                                != -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <break>break;</break>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>i1</name>
                                            == -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>i1</name>
                                                    =
                                                    <name><name>gradients</name>.
                                                        <name>length</name>
                                                    </name>
                                                    - 1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>f1</name>
                                                    = <name>idx1</name> =
                                                    <name>GRADIENT_SIZE_INDEX</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>i2</name>
                                            == -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>i2</name>
                                                    =
                                                    <name><name>gradients</name>.
                                                        <name>length</name>
                                                    </name>
                                                    - 1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>f2</name>
                                                    = <name>idx2</name> =
                                                    <name>GRADIENT_SIZE_INDEX</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>DEBUG</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"I1: " + <name>i1</name> + " Idx1: " + <name>idx1
                                                            </name> +
                                                                " I2: " + <name>i2</name> + " Idx2: " +
                                                                <name>idx2</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>

                                <comment type="line">// Simple case within one gradient array (so the average</comment>
                                <comment type="line">// of the two idx gives us the true average of colors).</comment>
                                <if>if
                                    <condition>(
                                        <expr>(<name>i1</name> == <name>i2</name>) &amp;&amp; (<name>idx1
                                        </name> &lt;= <name>idx2</name>) &amp;&amp; <name>p1_up</name> &amp;&amp; !
                                            <name>p2_up</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>
                                                    <name>gradients</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i1</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[
                                                        <expr>(<name>idx1</name>+<name>idx2</name>+1)&gt;&gt;1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>

                                <comment type="line">// i1 != i2</comment>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>pix</name>,
                                        <name>norm</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>base</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(1&lt;&lt;16)/
                                                                <name>sz</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>(<name>i1</name> &lt; <name>i2</name>) &amp;&amp; <name>p1_up</name> &amp;&amp;
                                            !
                                            <name>p2_up</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>norm</name>
                                                    =
                                                    <call>(<name>int</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(
                                                                    <name>base</name>
                                                                    *
                                                                    <name>
                                                                        <name>normalizedIntervals</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i1</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    *(<name>GRADIENT_SIZE_INDEX</name>-<name>f1</name>))
                                                                    /
                                                                    <name>GRADIENT_SIZE_INDEX</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pix</name>
                                                    =
                                                    <name>
                                                        <name>gradients</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i1</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                        <index>[
                                                            <expr>(<name>idx1</name>+<name>GRADIENT_SIZE</name>)&gt;&gt;1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ach</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>rch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>bch</name>
                                                    += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name>=
                                                        <init>
                                                            <expr><name>i1</name>+1
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr><name>i</name>&lt;
                                                        <name>i2</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>norm</name>
                                                            =
                                                            <call>(<name>int</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr><name>base</name>*
                                                                            <name>
                                                                                <name>normalizedIntervals</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pix</name>
                                                            =
                                                            <name>
                                                                <name>gradients</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                                <index>[
                                                                    <expr><name>GRADIENT_SIZE</name>&gt;&gt;1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ach</name>
                                                            += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>
                                                            norm</name>)&gt;&gt;16
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>rch</name>
                                                            += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>
                                                            norm</name>)&gt;&gt;16
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>gch</name>
                                                            += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>
                                                            norm</name>)&gt;&gt;16
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>bch</name>
                                                            += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>
                                                            norm</name>)&gt;&gt;16
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>

                                            <expr_stmt>
                                                <expr>
                                                    <name>norm</name>
                                                    =
                                                    <call>(<name>int</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(<name>base</name>*
                                                                    <name>
                                                                        <name>normalizedIntervals</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i2</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    *<name>f2</name>)
                                                                    /
                                                                    <name>GRADIENT_SIZE_INDEX</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>pix</name>
                                                    =
                                                    <name>
                                                        <name>gradients</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i2</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                        <index>[
                                                            <expr>(<name>idx2</name>+1)&gt;&gt;1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ach</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>rch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>bch</name>
                                                    += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p1_up</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>norm</name>
                                                                =
                                                                <call>(<name>int</name>)
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(
                                                                                <name>base</name>
                                                                                *
                                                                                <name>
                                                                                    <name>normalizedIntervals</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i1</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                *(<name>
                                                                                    GRADIENT_SIZE_INDEX</name>-<name>
                                                                                    f1</name>))
                                                                                /
                                                                                <name>GRADIENT_SIZE_INDEX</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>pix</name>
                                                                =
                                                                <name>
                                                                    <name>gradients</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i1</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                    <index>[
                                                                        <expr>(<name>idx1</name>+<name>
                                                                            GRADIENT_SIZE</name>)&gt;&gt;1
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>norm</name>
                                                                =
                                                                <call>(<name>int</name>)
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>base</name>*
                                                                                <name>
                                                                                    <name>normalizedIntervals</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i1</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                *<name>f1</name>)
                                                                                /
                                                                                <name>GRADIENT_SIZE_INDEX</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>pix</name>
                                                                =
                                                                <name>
                                                                    <name>gradients</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i1</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                    <index>[
                                                                        <expr>(<name>idx1</name>+1)&gt;&gt;1
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ach</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>rch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>bch</name>
                                                    += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p2_up</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>norm</name>
                                                                =
                                                                <call>(<name>int</name>)
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(
                                                                                <name>base</name>
                                                                                *
                                                                                <name>
                                                                                    <name>normalizedIntervals</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i2</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                *(<name>
                                                                                    GRADIENT_SIZE_INDEX</name>-<name>
                                                                                    f2</name>))
                                                                                /
                                                                                <name>GRADIENT_SIZE_INDEX</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>pix</name>
                                                                =
                                                                <name>
                                                                    <name>gradients</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i2</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                    <index>[
                                                                        <expr>(<name>idx2</name>+<name>
                                                                            GRADIENT_SIZE</name>)&gt;&gt;1
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>norm</name>
                                                                =
                                                                <call>(<name>int</name>)
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>base</name>*
                                                                                <name>
                                                                                    <name>normalizedIntervals</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>i2</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                *<name>f2</name>)
                                                                                /
                                                                                <name>GRADIENT_SIZE_INDEX</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>pix</name>
                                                                =
                                                                <name>
                                                                    <name>gradients</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i2</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                    <index>[
                                                                        <expr>(<name>idx2</name>+1)&gt;&gt;1
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>ach</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>rch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>gch</name>
                                                    += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>bch</name>
                                                    += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0) *<name>norm</name>)&gt;&gt;16
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p1_up</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>i</name>=
                                                                    <init>
                                                                        <expr><name>i1</name>+1
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>gradientsLength</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>norm</name>
                                                                        =
                                                                        <call>(<name>int</name>)
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr><name>base</name>*
                                                                                        <name>
                                                                                            <name>normalizedIntervals
                                                                                            </name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradients</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                            <index>[
                                                                                <expr><name>GRADIENT_SIZE</name>&gt;&gt;1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>

                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>i</name>=
                                                                    <init>
                                                                        <expr>0</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>i1</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>norm</name>
                                                                        =
                                                                        <call>(<name>int</name>)
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr><name>base</name>*
                                                                                        <name>
                                                                                            <name>normalizedIntervals
                                                                                            </name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradients</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                            <index>[
                                                                                <expr><name>GRADIENT_SIZE</name>&gt;&gt;1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>

                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </else>
                                            </if>

                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>p2_up</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>i</name>=
                                                                    <init>
                                                                        <expr><name>i2</name>+1
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>gradientsLength</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>norm</name>
                                                                        =
                                                                        <call>(<name>int</name>)
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr><name>base</name>*
                                                                                        <name>
                                                                                            <name>normalizedIntervals
                                                                                            </name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradients</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                            <index>[
                                                                                <expr><name>GRADIENT_SIZE</name>&gt;&gt;1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>

                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>i</name>=
                                                                    <init>
                                                                        <expr>0</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr><name>i</name>&lt;
                                                                    <name>i2</name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr><name>i</name>++
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>norm</name>
                                                                        =
                                                                        <call>(<name>int</name>)
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr><name>base</name>*
                                                                                        <name>
                                                                                            <name>normalizedIntervals
                                                                                            </name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pix</name>
                                                                        =
                                                                        <name>
                                                                            <name>gradients</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                            <index>[
                                                                                <expr><name>GRADIENT_SIZE</name>&gt;&gt;1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>

                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>ach</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;20)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>rch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt;12)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>gch</name>
                                                                        += (((<name>pix</name>&gt;&gt;&gt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>bch</name>
                                                                        += (((<name>pix</name>&lt;&lt; 4)&amp;0xFF0)
                                                                        *<name>norm</name>)&gt;&gt;16
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </else>
                                            </if>

                                            }
                                        </block>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>ach</name>
                                        = (<name>ach</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>rch</name>
                                        = (<name>rch</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>gch</name>
                                        = (<name>gch</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>bch</name>
                                        = (<name>bch</name>+0x08)&gt;&gt;4
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>DEBUG</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Pix: [" + <name>ach</name> + ", " + <name>rch</name> +
                                                                ", " + <name>gch</name> + ", " + <name>bch</name> + "]"
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>weight</name>
                                != 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// System.out.println("ave: " + gradientAverage);</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>aveW</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(1&lt;&lt;16)*(1-<name>weight</name>)
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>aveA</name> =
                                        <init>
                                            <expr>((<name>gradientAverage</name>&gt;&gt;&gt;24) &amp; 0xFF)*
                                                <name>aveW</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>aveR</name> =
                                        <init>
                                            <expr>((<name>gradientAverage</name>&gt;&gt; 16) &amp; 0xFF)*
                                                <name>aveW</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>aveG</name> =
                                        <init>
                                            <expr>((<name>gradientAverage</name>&gt;&gt; 8) &amp; 0xFF)*
                                                <name>aveW</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>aveB</name> =
                                        <init>
                                            <expr>((<name>gradientAverage</name>     ) &amp; 0xFF)*
                                                <name>aveW</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>iw</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>int</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr><name>weight</name>*(1&lt;&lt;16)
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ach</name>
                                        = ((<name>ach</name>*<name>iw</name>)+<name>aveA</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>rch</name>
                                        = ((<name>rch</name>*<name>iw</name>)+<name>aveR</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>gch</name>
                                        = ((<name>gch</name>*<name>iw</name>)+<name>aveG</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>bch</name>
                                        = ((<name>bch</name>*<name>iw</name>)+<name>aveB</name>)&gt;&gt;16
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>((<name>ach</name>&lt;&lt;24) | (<name>rch</name>&lt;&lt;16) | (<name>gch</name>&lt;&lt;8)
                            | <name>bch</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/** Helper function to convert a color component in sRGB space to linear
                * RGB space. Used to build a static lookup table.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>convertSRGBtoLinearRGB</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>color</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>input</name>,
                            <name>output</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>input</name>
                            = <name>color</name>/255.0f
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>input</name>
                                &lt;= 0.04045f
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>output</name>
                                        = <name>input</name>/12.92f
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>output</name>
                                        = (<name>float</name>)
                                        <call>
                                            <name><name>Math</name>.
                                                <name>pow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>input</name> + 0.055) / 1.055
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>2.4</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>o</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>round</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>output</name>
                                                    * 255.0f
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>
                            <name>o</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Helper function to convert a color component in linear RGB space to
                * SRGB space. Used to build a static lookup table.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>convertLinearRGBtoSRGB</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>color</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>input</name>,
                            <name>output</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>input</name>
                            = <name>color</name>/255.0f
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>input</name>
                                &lt;= 0.0031308
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>output</name>
                                        = <name>input</name> * 12.92f
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>output</name>
                                        = (1.055f *
                                        ((<name>float</name>)
                                        <call>
                                            <name><name>Math</name>.
                                                <name>pow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>input</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>(1.0 / 2.4)</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )) - 0.055f
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>o</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>round</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>output</name>
                                                    * 255.0f
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>
                            <name>o</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/** Superclass getRaster... */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Raster</name>
                </type>
                <name>getRaster</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>w</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>h</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>w</name>
                                == 0 || <name>h</name> == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//</comment>
                    <comment type="line">// If working raster is big enough, reuse it. Otherwise,</comment>
                    <comment type="line">// build a large enough new one.</comment>
                    <comment type="line">//</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>raster</name> =
                            <init>
                                <expr>
                                    <name>saved</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>raster</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>raster</name>.
                                        <name>getWidth</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; <name>w</name> ||
                                <call>
                                    <name><name>raster</name>.
                                        <name>getHeight</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;
                                <name>h</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>raster</name>
                                        =
                                        <call>
                                            <name>getCachedRaster</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>dataModel</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>w</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>h</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>saved</name>
                                        =
                                        <name>raster</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Access raster internal int array. Because we use a DirectColorModel,
                    </comment>
                    <comment type="line">// we know the DataBuffer is of type DataBufferInt and the SampleModel
                    </comment>
                    <comment type="line">// is SinglePixelPackedSampleModel.</comment>
                    <comment type="line">// Adjust for initial offset in DataBuffer and also for the scanline</comment>
                    <comment type="line">// stride.</comment>
                    <comment type="line">//</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataBufferInt</name>
                            </type>
                            <name>rasterDB</name> =
                            <init>
                                <expr>(<name>DataBufferInt</name>)
                                    <call>
                                        <name><name>raster</name>.
                                            <name>getDataBuffer</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>pixels</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>rasterDB</name>.
                                            <name>getBankData</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>rasterDB</name>.
                                            <name>getOffset</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>scanlineStride</name> =
                            <init>
                                <expr>((<name>SinglePixelPackedSampleModel</name>)
                                    <call>
                                        <name><name>raster</name>.
                                            <name>getSampleModel</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ).
                                    <call>
                                        <name>getScanlineStride</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>adjust</name> =
                            <init>
                                <expr>
                                    <name>scanlineStride</name>
                                    -
                                    <name>w</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>fillRaster</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pixels</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>off</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>adjust</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>y</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>w</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>h</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//delegate to subclass.</comment>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>GraphicsUtil</name>.
                                    <name>coerceData</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>raster</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>dataModel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>model</name>.
                                                    <name>isAlphaPremultiplied</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>


                    <return>return
                        <expr>
                            <name>raster</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Subclasses should implement this. */</comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>fillRaster</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>pixels</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>adjust</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>w</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>h</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/** Took this cacheRaster code from GradientPaint. It appears to recycle
                * rasters for use by any other instance, as long as they are sufficiently
                * large.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <name>WritableRaster</name>
                </type>
                <name>getCachedRaster</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>w</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>h</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cm</name>
                                ==
                                <name>cachedModel</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>cached</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>WritableRaster</name>
                                                    </type>
                                                    <name>ras</name> =
                                                    <init>
                                                        <expr>(<name>WritableRaster</name>)
                                                            <call>
                                                                <name><name>cached</name>.
                                                                    <name>get</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ras</name>
                                                        != <name>null</name> &amp;&amp;
                                                        <call>
                                                            <name><name>ras</name>.
                                                                <name>getWidth</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        &gt;= <name>w</name> &amp;&amp;
                                                        <call>
                                                            <name><name>ras</name>.
                                                                <name>getHeight</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        &gt;=
                                                        <name>h</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>cached</name>
                                                                =
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <return>return
                                                            <expr>
                                                                <name>ras</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Don't create rediculously small rasters...</comment>
                    <if>if
                        <condition>(
                            <expr><name>w</name>&lt;32
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr><name>w</name>=32
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr><name>h</name>&lt;32
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr><name>h</name>=32
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>cm</name>.
                                    <name>createCompatibleWritableRaster</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>w</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>h</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Took this cacheRaster code from GradientPaint. It appears to recycle
                * rasters for use by any other instance, as long as they are sufficiently
                * large.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>putCachedRaster</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ColorModel</name>
                            </type>
                            <name>cm</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>WritableRaster</name>
                            </type>
                            <name>ras</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cached</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>WritableRaster</name>
                                        </type>
                                        <name>cras</name> =
                                        <init>
                                            <expr>(<name>WritableRaster</name>)
                                                <call>
                                                    <name><name>cached</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>cras</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>cw</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>cras</name>.
                                                                    <name>getWidth</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>ch</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>cras</name>.
                                                                    <name>getHeight</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>iw</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>ras</name>.
                                                                    <name>getWidth</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>ih</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>ras</name>.
                                                                    <name>getHeight</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>cw</name>
                                                        &gt;= <name>iw</name> &amp;&amp; <name>ch</name> &gt;=
                                                        <name>ih</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return;</return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>cw</name>
                                                        * <name>ch</name> &gt;= <name>iw</name> *
                                                        <name>ih</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return;</return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>cachedModel</name>
                            =
                            <name>cm</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>cached</name>
                            = new
                            <call>
                                <name>WeakReference</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ras</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Release the resources allocated for the operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>dispose</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>saved</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>putCachedRaster</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>model</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>saved</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>saved</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the ColorModel of the output.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>ColorModel</name>
                </type>
                <name>getColorModel</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>model</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

</unit>
