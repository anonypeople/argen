<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\samples\odg\ODGPropertiesPanelBeanInfo.java">
    <comment type="block">/*
        * @(#)ODGPropertiesPanelBeanInfo.java 1.0 2007-04-22
        *
        * Copyright (c) 2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.<name>samples</name>.
            <name>odg</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * BeanInfo for SVGPropertiespanel.
        *
        * @author Werner Randelshofer
        * @version 1.0 2007-04-22 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ODGPropertiesPanelBeanInfo</name>
        <super>
            <extends>extends
                <name>SimpleBeanInfo</name>
            </extends>
        </super>
        <block>{

            <comment type="line">// Bean descriptor information will be obtained from
                introspection.//GEN-FIRST:BeanDescriptor
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>BeanDescriptor</name>
                    </type>
                    <name>beanDescriptor</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>BeanDescriptor</name>
                </type>
                <name>getBdescriptor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">//GEN-HEADEREND:BeanDescriptor</comment>

                    <comment type="line">// Here you can add code for customizing the BeanDescriptor.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>beanDescriptor</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>beanDescriptor</name>
                                    = new
                                    <call>
                                        <name>BeanDescriptor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>ODGPropertiesPanelBeanInfo</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>beanDescriptor</name>.
                                    <name>setValue</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"isContainer"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>FALSE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>beanDescriptor</name>.
                                    <name>setDisplayName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"ODGPropertiesPanel"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>beanDescriptor</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">//GEN-LAST:BeanDescriptor</comment>


            <comment type="line">// Properties information will be obtained from introspection.//GEN-FIRST:Properties
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>PropertyDescriptor</name>
                        <index>[]</index>
                    </type>
                    <name>properties</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>PropertyDescriptor</name>
                    <index>[]</index>
                </type>
                <name>getPdescriptor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">//GEN-HEADEREND:Properties</comment>

                    <comment type="line">// Here you can add code for customizing the properties array.</comment>

                    <return>return
                        <expr>
                            <name>properties</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">//GEN-LAST:Properties</comment>

            <comment type="line">// Event set information will be obtained from introspection.//GEN-FIRST:Events
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>EventSetDescriptor</name>
                        <index>[]</index>
                    </type>
                    <name>eventSets</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>EventSetDescriptor</name>
                    <index>[]</index>
                </type>
                <name>getEdescriptor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">//GEN-HEADEREND:Events</comment>

                    <comment type="line">// Here you can add code for customizing the event sets array.</comment>

                    <return>return
                        <expr>
                            <name>eventSets</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">//GEN-LAST:Events</comment>

            <comment type="line">// Method information will be obtained from introspection.//GEN-FIRST:Methods</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>MethodDescriptor</name>
                        <index>[]</index>
                    </type>
                    <name>methods</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>MethodDescriptor</name>
                    <index>[]</index>
                </type>
                <name>getMdescriptor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">//GEN-HEADEREND:Methods</comment>

                    <comment type="line">// Here you can add code for customizing the methods array.</comment>

                    <return>return
                        <expr>
                            <name>methods</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">//GEN-LAST:Methods</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name><name>java</name>.<name>awt</name>.
                            <name>Image</name>
                        </name>
                    </type>
                    <name>iconColor16</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//GEN-BEGIN:IconsDef</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name><name>java</name>.<name>awt</name>.
                            <name>Image</name>
                        </name>
                    </type>
                    <name>iconColor32</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name><name>java</name>.<name>awt</name>.
                            <name>Image</name>
                        </name>
                    </type>
                    <name>iconMono16</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name><name>java</name>.<name>awt</name>.
                            <name>Image</name>
                        </name>
                    </type>
                    <name>iconMono32</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//GEN-END:IconsDef</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>iconNameC16</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//GEN-BEGIN:Icons</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>iconNameC32</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>iconNameM16</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>iconNameM32</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//GEN-END:Icons</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>defaultPropertyIndex</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//GEN-BEGIN:Idx</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>defaultEventIndex</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">//GEN-END:Idx</comment>


            <comment type="line">//GEN-FIRST:Superclass</comment>

            <comment type="line">// Here you can add code for customizing the Superclass BeanInfo.</comment>

            <comment type="line">//GEN-LAST:Superclass</comment>

            <comment type="javadoc">/**
                * Gets the bean's &lt;code&gt;BeanDescriptor&lt;/code&gt;s.
                *
                * @return BeanDescriptor describing the editable
                * properties of this bean. May return null if the
                * information should be obtained by automatic analysis.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>BeanDescriptor</name>
                </type>
                <name>getBeanDescriptor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getBdescriptor</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the bean's &lt;code&gt;PropertyDescriptor&lt;/code&gt;s.
                *
                * @return An array of PropertyDescriptors describing the editable
                * properties supported by this bean. May return null if the
                * information should be obtained by automatic analysis.
                * &lt;p&gt;
                * If a property is indexed, then its entry in the result array will
                * belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.
                * A client of getPropertyDescriptors can use "instanceof" to check
                * if a given PropertyDescriptor is an IndexedPropertyDescriptor.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>PropertyDescriptor</name>
                    <index>[]</index>
                </type>
                <name>getPropertyDescriptors</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getPdescriptor</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the bean's &lt;code&gt;EventSetDescriptor&lt;/code&gt;s.
                *
                * @return An array of EventSetDescriptors describing the kinds of
                * events fired by this bean. May return null if the information
                * should be obtained by automatic analysis.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EventSetDescriptor</name>
                    <index>[]</index>
                </type>
                <name>getEventSetDescriptors</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getEdescriptor</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the bean's &lt;code&gt;MethodDescriptor&lt;/code&gt;s.
                *
                * @return An array of MethodDescriptors describing the methods
                * implemented by this bean. May return null if the information
                * should be obtained by automatic analysis.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MethodDescriptor</name>
                    <index>[]</index>
                </type>
                <name>getMethodDescriptors</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMdescriptor</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A bean may have a "default" property that is the property that will
                * mostly commonly be initially chosen for update by human's who are
                * customizing the bean.
                * @return Index of default property in the PropertyDescriptor array
                * returned by getPropertyDescriptors.
                * &lt;P&gt; Returns -1 if there is no default property.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getDefaultPropertyIndex</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>defaultPropertyIndex</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A bean may have a "default" event that is the event that will
                * mostly commonly be used by human's when using the bean.
                * @return Index of default event in the EventSetDescriptor array
                * returned by getEventSetDescriptors.
                * &lt;P&gt; Returns -1 if there is no default event.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getDefaultEventIndex</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>defaultEventIndex</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This method returns an image object that can be used to
                * represent the bean in toolboxes, toolbars, etc. Icon images
                * will typically be GIFs, but may in future include other formats.
                * &lt;p&gt;
                * Beans aren't required to provide icons and may return null from
                * this method.
                * &lt;p&gt;
                * There are four possible flavors of icons (16x16 color,
                * 32x32 color, 16x16 mono, 32x32 mono). If a bean choses to only
                * support a single icon we recommend supporting 16x16 color.
                * &lt;p&gt;
                * We recommend that icons have a "transparent" background
                * so they can be rendered onto an existing background.
                *
                * @param iconKind The kind of icon requested. This should be
                * one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,
                * ICON_MONO_16x16, or ICON_MONO_32x32.
                * @return An image object representing the requested icon. May
                * return null if no suitable icon is available.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name><name>java</name>.<name>awt</name>.
                        <name>Image</name>
                    </name>
                </type>
                <name>getIcon</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>iconKind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>iconKind</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>ICON_COLOR_16x16</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>iconNameC16</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>iconColor16</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>iconColor16</name>
                                                            =
                                                            <call>
                                                                <name>loadImage</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>iconNameC16</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>iconColor16</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                            </case>
                            <case>case
                                <expr>
                                    <name>ICON_COLOR_32x32</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>iconNameC32</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>iconColor32</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>iconColor32</name>
                                                            =
                                                            <call>
                                                                <name>loadImage</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>iconNameC32</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>iconColor32</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                            </case>
                            <case>case
                                <expr>
                                    <name>ICON_MONO_16x16</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>iconNameM16</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>iconMono16</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>iconMono16</name>
                                                            =
                                                            <call>
                                                                <name>loadImage</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>iconNameM16</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>iconMono16</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                            </case>
                            <case>case
                                <expr>
                                    <name>ICON_MONO_32x32</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>iconNameM32</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>iconMono32</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>iconMono32</name>
                                                            =
                                                            <call>
                                                                <name>loadImage</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>iconNameM32</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>iconMono32</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                            </case>
                            <default>default:
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            }
        </block>
    </class>

</unit>
