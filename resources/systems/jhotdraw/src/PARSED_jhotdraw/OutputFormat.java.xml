<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\draw\OutputFormat.java">
    <comment type="block">/*
        * @(#)OutputFormat.java 2.0 2007-12-16
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Dimension</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>datatransfer</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.<name>geom</name>.
            <name>AffineTransform</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>net</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>util</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>filechooser</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * Interface to define an output format. An OutputFormat is a strategy that
        * knows how to store a Drawing according to a specific encoding. Typically it
        * can be recognized by a Mime type or by a file extension. To identify a valid
        * file format for a Drawing an appropriate FileFilter for a
        * javax.swing.JFileChooser component can be requested.
        * &lt;p&gt;
        * This interface intentionally contains many identical operations like
        * InputFormat to make it easy, to write classes that implement both interfaces.
        *
        * @author Werner Randelshofer
        * @version 2.0 2007-12-16 Method createTransferable needs Drawing object
        * parameter in order to support attributes on the Drawing object.
        * &lt;br&gt;1.0 December 12, 2006 Created.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>OutputFormat</name>
        <block>{
            <comment type="javadoc">/**
                * Return a FileFilter that can be used to identify files which can be stored
                * with this output format. Typically, each output format has its own
                * recognizable file extension.
                *
                * @return FileFilter to be used with a javax.swing.JFileChooser
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name><name>javax</name>.<name>swing</name>.<name>filechooser</name>.
                        <name>FileFilter</name>
                    </name>
                </type>
                <name>getFileFilter</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the file extension for the output format.
                * The file extension should be appended to a file name when storing a
                * Drawing with the specified file format.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getFileExtension</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Return a JFileChooser accessory that can be used to customize the output
                * format.
                *
                * @return A JFileChooser accessory to be used with a javax.swing.JFileChooser
                * Returns null, if no accessory is provided for this format.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>JComponent</name>
                </type>
                <name>getOutputFormatAccessory</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Writes a Drawing into a file.
                *
                * @param file The file.
                * @param drawing The drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Drawing</name>
                            </type>
                            <name>drawing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Writes a Drawing into an output stream.
                *
                * @param out The output stream.
                * @param drawing The drawing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Drawing</name>
                            </type>
                            <name>drawing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates a Transferable for the specified list of Figures.
                *
                * @param drawing The drawing.
                * @param figures A list of figures of the drawing.
                * @param scaleFactor The factor to be used, when the Transferable creates
                * an image with a fixed size from the figures.
                * @return The Transferable.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Transferable</name>
                </type>
                <name>createTransferable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Drawing</name>
                            </type>
                            <name>drawing</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Figure</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>figures</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>scaleFactor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
