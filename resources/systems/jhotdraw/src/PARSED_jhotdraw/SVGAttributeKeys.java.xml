<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\samples\svg\SVGAttributeKeys.java">
    <comment type="block">/*
        * @(#)SVGAttributeKeys.java 1.3 2007-12-16
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.<name>samples</name>.
            <name>svg</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>awt</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>geom</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>draw</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * SVGAttributeKeys.
        *
        * @author Werner Randelshofer
        * @version 1.3 2007-12-16 Added TITLE and DESCRIPTION.
        * &lt;br&gt;1.2 2007-04-22 Attribute Key LINK added.
        * &lt;br&gt;1.1 2007-04-10 Attribute key TEXT_ALIGN added.
        * &lt;br&gt;1.0 December 9, 2006 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>SVGAttributeKeys</name>
        <super>
            <extends>extends
                <name>AttributeKeys</name>
            </extends>
        </super>
        <block>{

            <enum>
                <specifier>public</specifier>
                enum <name>TextAnchor</name>
                <block>{
                    <expr>
                        <name>START</name>
                    </expr>
                    ,
                    <expr>
                        <name>MIDDLE</name>
                    </expr>
                    ,
                    <expr>
                        <name>END</name>
                    </expr>
                    }
                </block>

                <comment type="javadoc">/**
                    * Specifies the title of an SVG drawing.
                    * This attribute can be null, to indicate that the drawing has no title.
                    */
                </comment>
                public final static
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <name>TITLE</name> = new
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ("title"
            </enum>
            )
        </block>
        ;
    </class>
    <comment type="javadoc">/**
        * Specifies the description of an SVG drawing.
        * This attribute can be null, to indicate that the drawing has no description.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>DESCRIPTION</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"title"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Specifies the viewport-fill of an SVG viewport.
        * This attribute can be null, to indicate that the viewport has no viewport-fill.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Color</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>VIEWPORT_FILL</name> =
            <init>
                <expr>
                    <name>CANVAS_FILL_COLOR</name>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Specifies the viewport-fill-opacity of an SVG viewport.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>VIEWPORT_FILL_OPACITY</name> =
            <init>
                <expr>
                    <name>CANVAS_FILL_OPACITY</name>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>


    <comment type="javadoc">/**
        * Specifies the text anchor of a SVGText figure.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>TextAnchor</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>TEXT_ANCHOR</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>TextAnchor</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"textAnchor"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>TextAnchor</name>.
                                        <name>START</name>
                                    </name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <enum>
        <specifier>public</specifier>
        enum <name>TextAlign</name>
        <block>{
            <expr>
                <name>START</name>
            </expr>
            ,
            <expr>
                <name>CENTER</name>
            </expr>
            ,
            <expr>
                <name>END</name>
            </expr>
            }
        </block>
        <comment type="javadoc">/**
            * Specifies the text alignment of a SVGText figure.
            */
        </comment>
        public final static
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>TextAlign</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <name>TEXT_ALIGN</name> = new
        <name>
            <name>AttributeKey</name>
            <argument_list>&lt;
                <argument>
                    <name>TextAlign</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        ("textAlign",
        <name><name>TextAlign</name>.
            <name>START</name>
        </name>
        , false
    </enum>
    )
    <empty_stmt>;</empty_stmt>
    <comment type="javadoc">/**
        * Specifies the fill gradient of a SVG figure.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Gradient</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FILL_GRADIENT</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Gradient</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fillGradient"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * Specifies the fill opacity of a SVG figure.
        * This is a value between 0 and 1 whereas 0 is translucent and 1 is fully opaque.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>FILL_OPACITY</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"fillOpacity"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>1d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Specifies the overall opacity of a SVG figure.
        * This is a value between 0 and 1 whereas 0 is translucent and 1 is fully opaque.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>OPACITY</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"opacity"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>1d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>


    <comment type="javadoc">/**
        * Specifies the stroke gradient of a SVG figure.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Gradient</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_GRADIENT</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Gradient</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeGradient"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <comment type="javadoc">/**
        * Specifies the stroke opacity of a SVG figure.
        * This is a value between 0 and 1 whereas 0 is translucent and 1 is fully opaque.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Double</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>STROKE_OPACITY</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Double</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"strokeOpacity"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>1d</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * Specifies a link.
        * In an SVG file, the link is stored in a "a" element which encloses the
        * figure.
        * http://www.w3.org/TR/SVGMobile12/linking.html#AElement
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>public</specifier>
                <specifier>final</specifier>
                <specifier>static</specifier>
                <name>
                    <name>AttributeKey</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>LINK</name> =
            <init>
                <expr>new
                    <call>
                        <name>
                            <name>AttributeKey</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"link"</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>


    <comment type="javadoc">/**
        * Gets the fill paint for the specified figure based on the attributes
        * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.
        * Returns null if the figure is not filled.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>Paint</name>
        </type>
        <name>getFillPaint</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>opacity</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>FILL_OPACITY</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>FILL_GRADIENT</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>FILL_GRADIENT</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                .
                                <call>
                                    <name>getPaint</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>opacity</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Color</name>
                    </type>
                    <name>color</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>FILL_COLOR</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>color</name>
                        !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <name>opacity</name>
                                    != 1
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>color</name>
                                            = new
                                            <call>
                                                <name>Color</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(
                                                            <call>
                                                                <name><name>color</name>.
                                                                    <name>getRGB</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            &amp; 0xffffff) |
                                                            <call>(<name>int</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>opacity</name>
                                                                            * 255
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            &lt;&lt; 24
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <name>color</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    <comment type="javadoc">/**
        * Gets the stroke paint for the specified figure based on the attributes
        * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.
        * Returns null if the figure is not filled.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>Paint</name>
        </type>
        <name>getStrokePaint</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>opacity</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>STROKE_OPACITY</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>STROKE_GRADIENT</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>STROKE_GRADIENT</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                .
                                <call>
                                    <name>getPaint</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>opacity</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Color</name>
                    </type>
                    <name>color</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>STROKE_COLOR</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>color</name>
                        !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <name>opacity</name>
                                    != 1
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>color</name>
                                            = new
                                            <call>
                                                <name>Color</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(
                                                            <call>
                                                                <name><name>color</name>.
                                                                    <name>getRGB</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            &amp; 0xffffff) |
                                                            <call>(<name>int</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>opacity</name>
                                                                            * 255
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            &lt;&lt; 24
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <name>color</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>


    <comment type="javadoc">/** Sets SVG default values. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>void</name>
        </type>
        <name>setDefaults</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// Fill properties</comment>
            <comment type="line">// http://www.w3.org/TR/SVGMobile12/painting.html#FillProperties</comment>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>FILL_COLOR</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Color</name>.
                                        <name>black</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>WINDING_RULE</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>WindingRule</name>.
                                        <name>NON_ZERO</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <comment type="line">// Stroke properties</comment>
            <comment type="line">// http://www.w3.org/TR/SVGMobile12/painting.html#StrokeProperties</comment>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_COLOR</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_WIDTH</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>1d</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_CAP</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>BasicStroke</name>.
                                        <name>CAP_BUTT</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_JOIN</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>BasicStroke</name>.
                                        <name>JOIN_MITER</name>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_MITER_LIMIT</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>4d</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>IS_STROKE_MITER_LIMIT_FACTOR</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_DASHES</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STROKE_DASH_PHASE</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>0d</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>IS_STROKE_DASH_FACTOR</name>.
                            <name>basicSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>f</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>
    <comment type="javadoc">/**
        * Returns the distance, that a Rectangle needs to grow (or shrink) to
        * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION
        * attributes of a figure.
        * The value returned is the number of units that need to be grown (or shrunk)
        * perpendicular to a stroke on an outline of the shape.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>double</name>
        </type>
        <name>getPerpendicularHitGrowth</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Figure</name>
                    </type>
                    <name>f</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>grow</name>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>STROKE_COLOR</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        == <name>null</name> &amp;&amp;
                        <call>
                            <name><name>STROKE_GRADIENT</name>.
                                <name>get</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>f</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                =
                                <call>
                                    <name>getPerpendicularFillGrowth</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>double</name>
                                </type>
                                <name>strokeWidth</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>AttributeKeys</name>.
                                                <name>getStrokeTotalWidth</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>f</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <expr_stmt>
                            <expr>
                                <name>grow</name>
                                =
                                <call>
                                    <name>getPerpendicularDrawGrowth</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>f</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                + <name>strokeWidth</name> / 2d
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </else>
            </if>
            <return>return
                <expr>
                    <name>grow</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    }
</unit>
