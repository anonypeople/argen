<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\app\View.java">
    <comment type="block">/*
        * @(#)View.java 4.1 2008-03-23
        *
        * Copyright (c) 1996-2008 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>app</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>beans</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>javax</name>.
            <name>swing</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * A view on a document or a set of related documents within an Application.
        * &lt;p&gt;
        * After a view has been initialized using init(),
        * either method clear() must be called
        * or method read(), in order to fully initialize the View.
        *
        * @author Werner Randelshofer
        * @version 4.1 2008-03-23 Added method canSaveTo().
        * &lt;br&gt;4.0 2008-03-20 Renamed from Project to View.
        * &lt;br&gt;3.0 2007-12-25 Added start, stop, activate and deactivate methods.
        * Added constants for property names.
        * &lt;br&gt;2.0 2007-11-29 Method clear is now always invoked on a worker
        * thread.
        * &lt;br&gt;1.0 October 4, 2005 Created.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>View</name>
        <block>{
            <comment type="javadoc">/**
                * The name of the application property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>APPLICATION_PROPERTY</name> =
                    <init>
                        <expr>"application"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The name of the file property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>FILE_PROPERTY</name> =
                    <init>
                        <expr>"file"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The name of the title property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>TITLE_PROPERTY</name> =
                    <init>
                        <expr>"title"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The name of the enabled property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>ENABLED_PROPERTY</name> =
                    <init>
                        <expr>"enabled"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The name of the hasUnsavedChanges property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>HAS_UNSAVED_CHANGES_PROPERTY</name> =
                    <init>
                        <expr>"hasUnsavedChanges"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The name of the multipleOpenId property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>MULTIPLE_OPEN_ID_PROPERTY</name> =
                    <init>
                        <expr>"multipleOpenId"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The name of the showing property.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>SHOWING_PROPERTY</name> =
                    <init>
                        <expr>"showing"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Gets the application to which this view belongs.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Application</name>
                </type>
                <name>getApplication</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the application of the view.
                * By convention, this is only invoked by Application.add() and
                * Application.remove().
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setApplication</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Application</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the visual component of the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>JComponent</name>
                </type>
                <name>getComponent</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the file which holds the document of the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>File</name>
                </type>
                <name>getFile</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the file of the view.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the enabled state of the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEnabled</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the enabled state of the view.
                *
                * The enabled state is used to prevent parallel invocation of actions
                * on the view. If an action consists of a sequential part and a
                * concurrent part, it must disable the view only for the sequential
                * part.
                *
                * Actions that act on the view must check in their actionPerformed
                * method whether the view is enabled.
                * If the view is disabled, they must do nothing.
                * If the view is enabled, they must disable the view,
                * perform the action and then enable the view again.
                *
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEnabled</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Writes the view to the specified file.
                * By convention this method is never invoked on the AWT Event Dispatcher Thread.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Reads the view from the specified file.
                * By convention this method is never invoked on the AWT Event Dispatcher Thread.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Clears the view, for example by emptying the contents of
                * the view, or by reading a template contents from a file.
                * By convention this method is never invoked on the AWT Event Dispatcher Thread.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            <comment type="javadoc">/**
                * Gets the open file chooser for the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>JFileChooser</name>
                </type>
                <name>getOpenChooser</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Gets the save file chooser for the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>JFileChooser</name>
                </type>
                <name>getSaveChooser</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Returns true, if the view has unsaved changes.
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasUnsavedChanges</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Marks all changes as saved.
                * This changes the state of hasUnsavedChanges to false.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>markChangesAsSaved</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true, if this view can be saved to the specified file.
                * A reason why the view can't be saved to a file, is that the
                * view is unable to write to a file with the given filename
                * extension without losing data.
                * &lt;p&gt;
                * The SaveAction uses this method to decide, whether to display
                * a file dialog before saving the file.
                *
                * @param file A file. If this parameter is null, a NullPointerException
                * is thrown.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canSaveTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Executes the specified runnable on the worker thread of the view.
                * Execution is perfomred sequentially in the same sequence as the
                * runnables have been passed to this method.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>execute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Runnable</name>
                            </type>
                            <name>worker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Initializes the view.
                * This is invoked right before the application shows the view.
                * A view must not consume many resources before method init() is called.
                * This is crucial for the responsivenes of an application.
                * &lt;p&gt;
                * After a view has been initialized using init(),
                * either method clear() must be called
                * or method read, in order to fully initialize a View.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>init</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Starts the view.
                * Invoked after a view has been made visible to the user.
                * Multiple view can be visible at the same time.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>start</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Activates the view.
                * This occurs, when the user activated the parent window of the view.
                * Only one view can be active at any given time.
                * This method is only invoked on a started view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>activate</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Deactivates the view.
                * This occurs, when the user closes the view, or activated another view.
                * This method is only invoked on a started view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>deactivate</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Stops the view.
                * Invoked after a view window has been minimized or made invisible.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>stop</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Gets rid of all the resources of the view.
                * No other methods should be invoked on the view afterwards.
                * A view must not consume many resources after method dispose() has been called.
                * This is crucial for the responsivenes of an application.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>dispose</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the action with the specified id.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Action</name>
                </type>
                <name>getAction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>id</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts an action with the specified id.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putAction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>id</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Action</name>
                            </type>
                            <name>action</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Adds a property change listener.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addPropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a property change listener.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removePropertyChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PropertyChangeListener</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the multiple open id.
                * The id is used to help distinguish multiply opened views.
                * The id should be displayed in the title of the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMultipleOpenId</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the multiple open id.
                * If a view is open only once this should be 1.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getMultipleOpenId</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * This is used by Application to keep track if a view is showing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isShowing</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * This is used by Application to keep track if a view is showing.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setShowing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the title of the view.
                * &lt;p&gt;
                * The title is generated by the application, based on the current
                * file of the view. The application ensures that the title uniquely
                * identifies each open view.
                * &lt;p&gt;
                * The application displays the title in the title bar of the view
                * window and in all windows which are associated to the view.
                * &lt;p&gt;
                * This is a bound property.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTitle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the title of the view.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTitle</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
