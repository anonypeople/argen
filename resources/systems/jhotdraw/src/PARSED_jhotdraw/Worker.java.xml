<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\gui\Worker.java">
    <comment type="block">/*
        * @(#)Worker.java 2.1 2005-10-16
        *
        * Copyright (c) 1996-2007 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>gui</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>ActiveEvent</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>swing</name>.
            <name>SwingUtilities</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This is an abstract class that you subclass to
        * perform GUI-related work in a dedicated event dispatcher.
        * &lt;p&gt;
        * This class is similar to SwingWorker but less complex.
        * Like a SwingWorker it can run using an an internal
        * worker thread but it can also be like a Runnable object.
        *
        * @author Werner Randelshofer
        * @version 2.1 2005-10-16 Method start() added.
        * &lt;br&gt;2.0 2005-09-27 Revised.
        * &lt;br&gt;1.1.1 2001-08-24 Call finished() within finally block.
        * &lt;br&gt;1.1 2001-08-24 Reworked for JDK 1.3.
        * &lt;br&gt;1.0 1998-10-07 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>Worker</name>
        <super>
            <implements>implements
                <name>Runnable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Object</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// see getValue(), setValue()</comment>

            <comment type="javadoc">/**
                * Calls #construct on the current thread and invokes
                * #finished on the AWT event dispatcher thread.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>run</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Runnable</name>
                            </type>
                            <name>doFinished</name> =
                            <init>
                                <expr>new
                                    <class>
                                        <super>
                                            <name>Runnable</name>
                                        </super>
                                        <argument_list>()</argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>void</name>
                                                </type>
                                                <name>run</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>finished</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name>getValue</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>construct</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>e</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>SwingUtilities</name>.
                                                <name>invokeLater</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>doFinished</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compute the value to be returned by the &lt;code&gt;get&lt;/code&gt; method.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>Object</name>
                </type>
                <name>construct</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Called on the event dispatching thread (not on the worker thread)
                * after the &lt;code&gt;construct&lt;/code&gt; method has returned.
                *
                * @param value The return value of the construct method.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>finished</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            <comment type="javadoc">/**
                * Get the value produced by the worker thread, or null if it
                * hasn't been constructed yet.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>synchronized</specifier>
                    <name>Object</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Set the value produced by worker thread
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <name>x</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Starts the Worker on an internal worker thread.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>start</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>new
                            <call>
                                <name>Thread</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>start</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
