<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\net\n3\nanoxml\XMLParserFactory.java">
    <comment type="block">/* XMLParserFactory.java NanoXML/Java
        *
        * $Revision: 1.3 $
        * $Date: 2002/01/04 21:03:29 $
        * $Name: RELEASE_2_2_1 $
        *
        * This file is part of NanoXML 2 for Java.
        * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
        *
        * This software is provided 'as-is', without any express or implied warranty.
        * In no event will the authors be held liable for any damages arising from the
        * use of this software.
        *
        * Permission is granted to anyone to use this software for any purpose,
        * including commercial applications, and to alter it and redistribute it
        * freely, subject to the following restrictions:
        *
        * 1. The origin of this software must not be misrepresented; you must not
        * claim that you wrote the original software. If you use this software in
        * a product, an acknowledgment in the product documentation would be
        * appreciated but is not required.
        *
        * 2. Altered source versions must be plainly marked as such, and must not be
        * misrepresented as being the original software.
        *
        * 3. This notice may not be removed or altered from any source distribution.
        */
    </comment>

    <package>package
        <name><name>net</name>.<name>n3</name>.
            <name>nanoxml</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>security</name>.
            <name>AccessControlException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Creates an XML parser.
        *
        * @author Marc De Scheemaecker
        * @version $Name: RELEASE_2_2_1 $, $Revision: 1.3 $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XMLParserFactory</name>
        <block>{

            <comment type="javadoc">/**
                * The class name of the default XML parser.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>DEFAULT_CLASS</name> =
                    <init>
                        <expr>"net.n3.nanoxml.StdXMLParser"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The Java properties key of the XML parser class name.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>CLASS_KEY</name> =
                    <init>
                        <expr>"net.n3.nanoxml.XMLParser"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Creates a default parser.
                *
                * @see #DEFAULT_CLASS
                * @see #CLASS_KEY
                *
                * @return the non-null parser.
                *
                * @throws java.lang.ClassNotFoundException
                * if the class of the parser or validator could not be found.
                * @throws java.lang.InstantiationException
                * if the parser could not be created
                * @throws java.lang.IllegalAccessException
                * if the parser could not be created
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IXMLParser</name>
                </type>
                <name>createDefaultXMLParser</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// BEGIN PATCH W. Randelshofer catch AccessControlException</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name> =
                            <init>
                                <expr>
                                    <name><name>XMLParserFactory</name>.
                                        <name>DEFAULT_CLASS</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>className</name>
                                    =
                                    <call>
                                        <name><name>System</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>XMLParserFactory</name>.
                                                        <name>CLASS_KEY</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>XMLParserFactory</name>.
                                                        <name>DEFAULT_CLASS</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>AccessControlException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// do nothing</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <comment type="line">// END PATCH W. Randelshofer catch AccessControlException</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>XMLParserFactory</name>.
                                    <name>createXMLParser</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>StdXMLBuilder</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Creates a default parser.
                *
                * @see #DEFAULT_CLASS
                * @see #CLASS_KEY
                *
                * @param builder the XML builder.
                *
                * @return the non-null parser.
                *
                * @throws java.lang.ClassNotFoundException
                * if the class of the parser could not be found.
                * @throws java.lang.InstantiationException
                * if the parser could not be created
                * @throws java.lang.IllegalAccessException
                * if the parser could not be created
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IXMLParser</name>
                </type>
                <name>createDefaultXMLParser</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLBuilder</name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// BEGIN PATCH W. Randelshofer catch AccessControlException</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name> =
                            <init>
                                <expr>
                                    <name><name>XMLParserFactory</name>.
                                        <name>DEFAULT_CLASS</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>className</name>
                                    =
                                    <call>
                                        <name><name>System</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>XMLParserFactory</name>.
                                                        <name>CLASS_KEY</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>XMLParserFactory</name>.
                                                        <name>DEFAULT_CLASS</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>AccessControlException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// do nothing</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <comment type="line">// END PATCH W. Randelshofer catch AccessControlException</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>XMLParserFactory</name>.
                                    <name>createXMLParser</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>builder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Creates a parser.
                *
                * @param className the name of the class of the XML parser
                * @param builder the XML builder.
                *
                * @return the non-null parser.
                *
                * @throws java.lang.ClassNotFoundException
                * if the class of the parser could not be found.
                * @throws java.lang.InstantiationException
                * if the parser could not be created
                * @throws java.lang.IllegalAccessException
                * if the parser could not be created
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IXMLParser</name>
                </type>
                <name>createXMLParser</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IXMLBuilder</name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Class</name>.
                                            <name>forName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>className</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>IXMLParser</name>
                            </type>
                            <name>parser</name> =
                            <init>
                                <expr>(<name>IXMLParser</name>)
                                    <call>
                                        <name><name>cls</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>parser</name>.
                                    <name>setBuilder</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>builder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>parser</name>.
                                    <name>setValidator</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>NonValidator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>parser</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
