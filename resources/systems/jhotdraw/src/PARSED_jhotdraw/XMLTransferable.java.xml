<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\org\jhotdraw\xml\XMLTransferable.java">
    <comment type="block">/*
        * XMLTransferable.java
        *
        * Copyright (c) 1996-2006 by the original authors of JHotDraw
        * and all its contributors.
        * All rights reserved.
        *
        * The copyright of this software is owned by the authors and
        * contributors of the JHotDraw project ("the copyright holders").
        * You may not use, copy or modify this software, except in
        * accordance with the license agreement you entered into with
        * the copyright holders. For details see accompanying license terms.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jhotdraw</name>.
            <name>xml</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>datatransfer</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>java</name>.
            <name>io</name>
        </name>
        .*;
    </import>
    <comment type="javadoc">/**
        * XMLTransferable for transfering XML documents over the clipboard and with
        * drag and drop.
        *
        * @author Werner Randelshofer
        * @version 1.0 2001 Created.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>XMLTransferable</name>
        <super>
            <implements>implements <name>java</name>.<name>awt</name>.<name>datatransfer</name>.<name>
                Transferable</name>, <name>java</name>.<name>awt</name>.<name>datatransfer</name>.
                <name>ClipboardOwner</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>data</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>DataFlavor</name>
                    </type>
                    <name>flavor</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Creates new XMLTransferable */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLTransferable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>mimeType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>humanPresentableName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>data</name>
                            </name>
                            =
                            <name>data</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>flavor</name>
                            </name>
                            = new
                            <call>
                                <name>DataFlavor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>mimeType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>humanPresentableName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Notifies this object that it is no longer the owner of
                * the contents of the clipboard.
                * @param clipboard the clipboard that is no longer owned
                * @param contents the contents which this owner had placed on the clipboard
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>lostOwnership</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Clipboard</name>
                            </type>
                            <name>clipboard</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Transferable</name>
                            </type>
                            <name>contents</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an object which represents the data to be transferred. The class
                * of the object returned is defined by the representation class of the flavor.
                *
                * @param flavor the requested flavor for the data
                * @see DataFlavor#getRepresentationClass
                * @exception IOException if the data is no longer available
                * in the requested flavor.
                * @exception UnsupportedFlavorException if the requested data flavor is
                * not supported.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getTransferData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DataFlavor</name>
                            </type>
                            <name>flavor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>UnsupportedFlavorException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.<name>flavor</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>flavor</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>ByteArrayInputStream</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>data</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UnsupportedFlavorException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>flavor</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an array of DataFlavor objects indicating the flavors the data
                * can be provided in. The array should be ordered according to preference
                * for providing the data (from most richly descriptive to least descriptive).
                * @return an array of data flavors in which this data can be transferred
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DataFlavor</name>
                    <index>[]</index>
                </type>
                <name>getTransferDataFlavors</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>DataFlavor</name>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <name>flavor</name>
                                </expr>
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether or not the specified data flavor is supported for
                * this object.
                * @param flavor the requested flavor for the data
                * @return boolean indicating wjether or not the data flavor is supported
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDataFlavorSupported</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DataFlavor</name>
                            </type>
                            <name>flavor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.<name>flavor</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>flavor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
