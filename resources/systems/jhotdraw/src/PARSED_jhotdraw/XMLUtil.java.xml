<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\net\n3\nanoxml\XMLUtil.java">
    <comment type="block">/* XMLUtil.java NanoXML/Java
        *
        * $Revision: 1.5 $
        * $Date: 2002/02/03 21:19:38 $
        * $Name: RELEASE_2_2_1 $
        *
        * This file is part of NanoXML 2 for Java.
        * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
        *
        * This software is provided 'as-is', without any express or implied warranty.
        * In no event will the authors be held liable for any damages arising from the
        * use of this software.
        *
        * Permission is granted to anyone to use this software for any purpose,
        * including commercial applications, and to alter it and redistribute it
        * freely, subject to the following restrictions:
        *
        * 1. The origin of this software must not be misrepresented; you must not
        * claim that you wrote the original software. If you use this software in
        * a product, an acknowledgment in the product documentation would be
        * appreciated but is not required.
        *
        * 2. Altered source versions must be plainly marked as such, and must not be
        * misrepresented as being the original software.
        *
        * 3. This notice may not be removed or altered from any source distribution.
        */
    </comment>

    <package>package
        <name><name>net</name>.<name>n3</name>.
            <name>nanoxml</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>CharArrayReader</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Utility methods for NanoXML.
        *
        * @author Marc De Scheemaecker
        * @version $Name: RELEASE_2_2_1 $, $Revision: 1.5 $
        */
    </comment>
    <class>class
        <name>XMLUtil</name>
        <block>{

            <comment type="javadoc">/**
                * Skips the remainder of a comment.
                * It is assumed that &amp;lt;!- is already read.
                *
                * @param reader the reader
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>skipComment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>reader</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != '-'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>XMLUtil</name>.
                                                <name>errorExpectedInput</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getSystemID</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getLineNr</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"&lt;!--"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>dashesRead</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>;</init>
                        <condition>;</condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>reader</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>'-'</expr>:
                                        <expr_stmt>
                                            <expr><name>dashesRead</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>

                                    </case>
                                    <case>case <expr>'&gt;'</expr>:
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>dashesRead</name>
                                                    == 2
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return;</return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                    </case>
                                    <default>default:
                                        <expr_stmt>
                                            <expr>
                                                <name>dashesRead</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Skips the remainder of the current XML tag.
                *
                * @param reader the reader
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>skipTag</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>level</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>level</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>reader</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>'&lt;'</expr>:
                                        <expr_stmt>
                                            <expr>++
                                                <name>level</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>

                                    </case>
                                    <case>case <expr>'&gt;'</expr>:
                                        <expr_stmt>
                                            <expr>--
                                                <name>level</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Scans a public ID.
                *
                * @param publicID will contain the public ID
                * @param reader the reader
                *
                * @return the system ID
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>scanPublicID</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>publicID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>XMLUtil</name>.
                                        <name>checkLiteral</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>reader</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>"UBLIC"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>XMLUtil</name>.
                                    <name>skipWhitespace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>publicID</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>XMLUtil</name>.
                                                    <name>scanString</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>reader</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>'\0'</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>XMLUtil</name>.
                                    <name>skipWhitespace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>XMLUtil</name>.
                                    <name>scanString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'\0'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Scans a system ID.
                *
                * @param reader the reader
                *
                * @return the system ID
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>scanSystemID</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>XMLUtil</name>.
                                        <name>checkLiteral</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>reader</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>"YSTEM"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>XMLUtil</name>.
                                    <name>skipWhitespace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>XMLUtil</name>.
                                    <name>scanString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'\0'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Retrieves an identifier from the data.
                *
                * @param reader the reader
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>scanIdentifier</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>;</init>
                        <condition>;</condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>reader</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>(<name>ch</name> == '_') || (<name>ch</name> == ':') || (<name>ch</name> ==
                                        '-') || (<name>ch</name> == '.')
                                        || ((<name>ch</name> &gt;= 'a') &amp;&amp; (<name>ch</name> &lt;= 'z'))
                                        || ((<name>ch</name> &gt;= 'A') &amp;&amp; (<name>ch</name> &lt;= 'Z'))
                                        || ((<name>ch</name> &gt;= '0') &amp;&amp; (<name>ch</name> &lt;= '9')) || (<name>
                                            ch
                                        </name> &gt; '\u007E')
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>result</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>reader</name>.
                                                        <name>unread</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <call>
                                <name><name>result</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Retrieves a delimited string from the data.
                *
                * @param reader the reader
                * @param entityChar the escape character (&amp;amp; or %)
                * @param entityResolver the entity resolver
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>scanString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>entityChar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IXMLEntityResolver</name>
                            </type>
                            <name>entityResolver</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startingLevel</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>reader</name>.
                                            <name>getStreamLevel</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>delim</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>reader</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>(<name>delim</name> != '\'') &amp;&amp; (<name>delim</name> != '"')
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>XMLUtil</name>.
                                                <name>errorExpectedInput</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getSystemID</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getLineNr</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"delimited string"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>;</init>
                        <condition>;</condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>str</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>XMLUtil</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>reader</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>entityChar</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                        ==
                                        <name>entityChar</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    == '#'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>result</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>XMLUtil</name>.
                                                                                    <name>processCharLiteral</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>str</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>XMLUtil</name>.
                                                                    <name>processEntity</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>str</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>reader</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>entityResolver</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ch</name>
                                                == '&amp;'
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>unread</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>str</name>
                                                        =
                                                        <call>
                                                            <name><name>XMLUtil</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>reader</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>'&amp;'</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            == '#'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>result</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>XMLUtil</name>.
                                                                                            <name>processCharLiteral
                                                                                            </name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>str</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>result</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>str</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getStreamLevel</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        ==
                                                        <name>startingLevel</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>ch</name>
                                                                    ==
                                                                    <name>delim</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <break>break;</break>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>(<name>ch</name> == 9) || (<name>ch</name> ==
                                                                            10) || (<name>ch</name> == 13)
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>result</name>.
                                                                                            <name>append</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>' '</expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>result</name>.
                                                                                            <name>append</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>ch</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </else>
                                                                </if>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>result</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ch</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <call>
                                <name><name>result</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Processes an entity.
                *
                * @param entity the entity
                * @param reader the reader
                * @param entityResolver the entity resolver
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>processEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>entity</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IXMLEntityResolver</name>
                            </type>
                            <name>entityResolver</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>entity</name>
                            =
                            <call>
                                <name><name>entity</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entity</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>entityReader</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>entityResolver</name>.
                                            <name>getEntity</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>entity</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>entityReader</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>XMLUtil</name>.
                                                <name>errorInvalidEntity</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getSystemID</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getLineNr</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>entity</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>externalEntity</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>entityResolver</name>.
                                            <name>isExternalEntity</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entity</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>reader</name>.
                                    <name>startNewStream</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entityReader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>!
                                            <name>externalEntity</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Processes a character literal.
                *
                * @param entity the entity
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>processCharLiteral</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>entity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>entity</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>2</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == 'x'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>entity</name>
                                        =
                                        <call>
                                            <name><name>entity</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>3</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>entity</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        - 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>(<name>char</name>)
                                        <call>
                                            <name><name>Integer</name>.
                                                <name>parseInt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entity</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>16</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>entity</name>
                                        =
                                        <call>
                                            <name><name>entity</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>2</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>entity</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        - 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>(<name>char</name>)
                                        <call>
                                            <name><name>Integer</name>.
                                                <name>parseInt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entity</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>10</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Skips whitespace from the reader.
                *
                * @param reader the reader
                * @param buffer where to put the whitespace; null if the
                * whitespace does not have to be stored.
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>skipWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>buffer</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <do>do
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <call>
                                                    <name><name>reader</name>.
                                                        <name>read</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    while
                                    <condition>(
                                        <expr>(<name>ch</name> == ' ') || (<name>ch</name> == '\t') || (<name>ch</name> ==
                                            '\n')
                                        </expr>
                                        )
                                    </condition>
                                    ;
                                </do>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>;</init>
                                    <condition>;</condition>
                                    <incr/>)
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <call>
                                                    <name><name>reader</name>.
                                                        <name>read</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>(<name>ch</name> != ' ') &amp;&amp; (<name>ch</name> != '\t')
                                                    &amp;&amp; (<name>ch</name> != '\n')
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ch</name>
                                                    == '\n'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\n'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>' '</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>reader</name>.
                                    <name>unread</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Reads a character from the reader.
                *
                * @param reader the reader
                * @param entityChar the escape character (&amp;amp; or %) used to indicate
                * an entity
                *
                * @return the character, or an entity expression (like e.g. &amp;amp;lt;)
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>entityChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>reader</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>entityChar</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>ch</name>
                                            != ';'
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <call>
                                                    <name><name>reader</name>.
                                                        <name>read</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Reads a character from the reader disallowing entities.
                *
                * @param reader the reader
                * @param entityChar the escape character (&amp;amp; or %) used to indicate
                * an entity
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>readChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>entityChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>XMLUtil</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>entityChar</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>entityChar</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>XMLUtil</name>.
                                                <name>errorUnexpectedEntity</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getSystemID</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>getLineNr</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>ch</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the data starts with &lt;I&gt;literal&lt;/I&gt;.
                * Enough chars are read to determine this result.
                *
                * @param reader the reader
                * @param literal the literal to check
                *
                * @throws java.io.IOException
                * if an error occurred reading the data
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>checkLiteral</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IXMLReader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>literal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>literal</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>reader</name>.
                                                <name>read</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        !=
                                        <call>
                                            <name><name>literal</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that an expected string is not
                * encountered.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param expectedString the string that is expected
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorExpectedInput</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expectedString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Expected: " +
                                            <name>expectedString</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that an entity could not be
                * resolved.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param entity the name of the entity
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorInvalidEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>entity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Invalid entity: `&amp;" + <name>entity</name> + ";'"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that an entity reference is
                * unexpected at this point.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param entity the name of the entity
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorUnexpectedEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>entity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"No entity reference is expected here ("
                                            + <name>entity</name> + ")"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that a CDATA section is
                * unexpected at this point.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorUnexpectedCDATA</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"No CDATA section is expected here"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that a string is not expected
                * at this point.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param unexpectedString the string that is unexpected
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorInvalidInput</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>unexpectedString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Invalid input: " +
                                            <name>unexpectedString</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that the closing tag of an
                * element does not match the opening tag.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param expectedName the name of the opening tag
                * @param wrongName the name of the closing tag
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorWrongClosingTag</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expectedName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wrongName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Closing tag does not match opening tag: `"
                                            + <name>wrongName</name> + "' != `" +
                                            <name>expectedName</name>
                                            + "'"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLParseException to indicate that extra data is encountered
                * in a closing tag.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorClosingTagNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Closing tag must be empty"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that an element is missing.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param parentElementName the name of the parent element
                * @param missingElementName the name of the missing element
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorMissingElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>parentElementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>missingElementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>MISSING_ELEMENT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>missingElementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeName*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeValue*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Element " +
                                            <name>parentElementName</name>
                                            + " expects to have a " +
                                            <name>missingElementName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that an element is
                * unexpected.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param parentElementName the name of the parent element
                * @param unexpectedElementName the name of the unexpected element
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorUnexpectedElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>parentElementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>unexpectedElementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>UNEXPECTED_ELEMENT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>unexpectedElementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeName*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeValue*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Unexpected " + <name>unexpectedElementName</name> + " in a "
                                            +
                                            <name>parentElementName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that an attribute is
                * missing.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param elementName the name of the element
                * @param attributeName the name of the missing attribute
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorMissingAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>MISSING_ATTRIBUTE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeValue*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Element " + <name>elementName</name> + " expects an attribute named "
                                            +
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that an attribute is
                * unexpected.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param elementName the name of the element
                * @param attributeName the name of the unexpected attribute
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorUnexpectedAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>UNEXPECTED_ATTRIBUTE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeValue*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Element " + <name>elementName</name> + " did not expect an attribute "
                                            + "named " +
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that an attribute has an
                * invalid value.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param elementName the name of the element
                * @param attributeName the name of the attribute
                * @param attributeValue the value of that attribute
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorInvalidAttributeValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>ATTRIBUTE_WITH_INVALID_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Invalid value for attribute " +
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that a #PCDATA element was
                * missing.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param parentElementName the name of the parent element
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorMissingPCData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>parentElementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>MISSING_PCDATA</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*elementName*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeName*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeValue*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Missing #PCDATA in element " +
                                            <name>parentElementName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException to indicate that a #PCDATA element was
                * unexpected.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param parentElementName the name of the parent element
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>errorUnexpectedPCData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>parentElementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>UNEXPECTED_PCDATA</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*elementName*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeName*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <comment type="block">/*attributeValue*/</comment>
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Unexpected #PCDATA in element " +
                                            <name>parentElementName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Throws an XMLValidationException.
                *
                * @param systemID the system ID of the data source
                * @param lineNr the line number in the data source
                * @param message the error message
                * @param elementName the name of the element
                * @param attributeName the name of the attribute
                * @param attributeValue the value of that attribute
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>validationError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLValidationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XMLValidationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XMLValidationException</name>.
                                                <name>MISC_ERROR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attributeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
