<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jhotdraw\src\main\java\net\n3\nanoxml\XMLValidationException.java">
    <comment type="block">/* XMLValidationException.java NanoXML/Java
        *
        * $Revision: 1.3 $
        * $Date: 2002/01/04 21:03:29 $
        * $Name: RELEASE_2_2_1 $
        *
        * This file is part of NanoXML 2 for Java.
        * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
        *
        * This software is provided 'as-is', without any express or implied warranty.
        * In no event will the authors be held liable for any damages arising from the
        * use of this software.
        *
        * Permission is granted to anyone to use this software for any purpose,
        * including commercial applications, and to alter it and redistribute it
        * freely, subject to the following restrictions:
        *
        * 1. The origin of this software must not be misrepresented; you must not
        * claim that you wrote the original software. If you use this software in
        * a product, an acknowledgment in the product documentation would be
        * appreciated but is not required.
        *
        * 2. Altered source versions must be plainly marked as such, and must not be
        * misrepresented as being the original software.
        *
        * 3. This notice may not be removed or altered from any source distribution.
        */
    </comment>

    <package>package
        <name><name>net</name>.<name>n3</name>.
            <name>nanoxml</name>
        </name>
        ;
    </package>


    <comment type="javadoc">/**
        * An XMLValidationException is thrown when the XML passed to the XML parser is
        * well-formed but not valid.
        *
        * @author Marc De Scheemaecker
        * @version $Name: RELEASE_2_2_1 $, $Revision: 1.3 $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>XMLValidationException</name>
        <super>
            <extends>extends
                <name>XMLException</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * An element was missing.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MISSING_ELEMENT</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * An unexpected element was encountered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNEXPECTED_ELEMENT</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * An attribute was missing.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MISSING_ATTRIBUTE</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * An unexpected attribute was encountered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNEXPECTED_ATTRIBUTE</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * An attribute has an invalid value.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ATTRIBUTE_WITH_INVALID_VALUE</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * A PCDATA element was missing.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MISSING_PCDATA</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * An unexpected PCDATA element was encountered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNEXPECTED_PCDATA</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Another error than those specified in this class was encountered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MISC_ERROR</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Which error occurred.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>errorType</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The name of the element where the exception occurred.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>elementName</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The name of the attribute where the exception occurred.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>attributeName</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The value of the attribute where the exception occurred.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>attributeValue</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Creates a new exception.
                *
                * @param errorType the type of validity error
                * @param systemID the system ID from where the data came
                * @param lineNr the line number in the XML data where the
                * exception occurred.
                * @param elementName the name of the offending element
                * @param attributeName the name of the offending attribute
                * @param attributeValue the value of the offending attribute
                * @param msg the message of the exception.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>XMLValidationException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>errorType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemID</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineNr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>msg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>systemID</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lineNr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>msg</name>
                                            + ((<name>elementName</name> == <name>null</name>) ? "" : (", element="
                                            + <name>elementName</name>))
                                            + ((<name>attributeName</name> == <name>null</name>) ? ""
                                            : (", attribute=" + <name>attributeName</name>))
                                            + ((<name>attributeValue</name> == <name>null</name>) ? ""
                                            : (", value='" + <name>attributeValue</name> + "'"))
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elementName</name>
                            </name>
                            =
                            <name>elementName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>attributeName</name>
                            </name>
                            =
                            <name>attributeName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>attributeValue</name>
                            </name>
                            =
                            <name>attributeValue</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Cleans up the object when it's destroyed.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>finalize</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Throwable</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elementName</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>attributeName</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>attributeValue</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>finalize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the name of the element in which the validation is violated.
                * If there is no current element, null is returned.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getElementName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>elementName</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the name of the attribute in which the validation is violated.
                * If there is no current attribute, null is returned.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAttributeName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>attributeName</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the value of the attribute in which the validation is violated.
                * If there is no current attribute, null is returned.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAttributeValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>attributeValue</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
