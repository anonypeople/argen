<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\test\BeanComparisonError.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>test</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>Bean</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>JodaBeanUtils</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>MetaProperty</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Error class used when two beans fail to compare.
        */
    </comment>
    <class>class <name>BeanComparisonError</name>
        <super>
            <extends>extends
                <name>AssertionError</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The expected bean.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Bean</name>
                    </type>
                    <name>expected</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The actual bean.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Bean</name>
                    </type>
                    <name>actual</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new error.
                *
                * @param message the message, may be null
                * @param maxErrors the maximum number of errors to report
                * @param expected the expected value, not null
                * @param actual the actual value, not null
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>BeanComparisonError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>maxErrors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Bean</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Bean</name>
                            </type>
                            <name>actual</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>buildMessage</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>message</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>maxErrors</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>expected</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>actual</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>expected</name>
                            </name>
                            =
                            <name>expected</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>actual</name>
                            </name>
                            =
                            <name>actual</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Compares the two beans.
                *
                * @param message the message, may be null
                * @param maxErrors the maximum number of errors to report
                * @param expected the expected value, not null
                * @param actual the actual value, not null
                * @return the message, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>buildMessage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>maxErrors</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Bean</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Bean</name>
                            </type>
                            <name>actual</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>diffs</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>buildMessage</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>diffs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>""</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>actual</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                            != <name>null</name> ? <name>message</name> + ": " : ""
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Bean did not equal expected. Differences:"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>diffs</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>size</name>
                                &gt;
                                <name>maxErrors</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>diffs</name>
                                        =
                                        <call>
                                            <name><name>diffs</name>.
                                                <name>subList</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>maxErrors</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>String</name>
                                </type>
                                <name>diff</name> :
                                <range>
                                    <expr>
                                        <name>diffs</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buf</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'\n'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>diff</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>size</name>
                                &gt;
                                <name>maxErrors</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"\n...and " + (<name>size</name> - 10) + " more differences"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>buildMessage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>diffs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>actual</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>expected</name>
                                == <name>null</name> &amp;&amp; <name>actual</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expected</name>
                                == <name>null</name> &amp;&amp; <name>actual</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>diffs</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prefix</name>
                                                        + ": Expected null, but was " +
                                                        <call>
                                                            <name>buildSummary</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>actual</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expected</name>
                                != <name>null</name> &amp;&amp; <name>actual</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>diffs</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prefix</name>
                                                        + ": Was null, but expected " +
                                                        <call>
                                                            <name>buildSummary</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>expected</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expected</name>
                                <name>instanceof</name>
                                <name>List</name> &amp;&amp; <name>actual</name>
                                <name>instanceof</name>
                                <name>List</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>List</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>expectedList</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>List</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>expected</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>List</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>actualList</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>List</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>actual</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>expectedList</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <call>
                                                <name><name>actualList</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>diffs</name>.
                                                            <name>add</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>prefix</name>
                                                                    + ": List size differs, expected " +
                                                                    <call>
                                                                        <name><name>expectedList</name>.
                                                                            <name>size</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    + " but was " +
                                                                    <call>
                                                                        <name><name>actualList</name>.
                                                                            <name>size</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return;</return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>expectedList</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>buildMessage</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>diffs</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>prefix</name>
                                                                + '[' + <name>i</name> + "]"
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>expectedList</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>actualList</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expected</name>
                                <name>instanceof</name>
                                <name>Map</name> &amp;&amp; <name>actual</name>
                                <name>instanceof</name>
                                <name>Map</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Map</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>expectedMap</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Map</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>expected</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Map</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>actualMap</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Map</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>actual</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>expectedMap</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <call>
                                                <name><name>actualMap</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>diffs</name>.
                                                            <name>add</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>prefix</name>
                                                                    + ": Map size differs, expected " +
                                                                    <call>
                                                                        <name><name>expectedMap</name>.
                                                                            <name>size</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    + " but was " +
                                                                    <call>
                                                                        <name><name>actualMap</name>.
                                                                            <name>size</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return;</return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>expectedMap</name>.
                                                    <name>keySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>equals</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>actualMap</name>.
                                                                    <name>keySet</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == false
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>diffs</name>.
                                                            <name>add</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>prefix</name>
                                                                    + ": Map keyset differs, expected " +
                                                                    <call>
                                                                        <name>buildSummary</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>expectedMap</name>.
                                                                                            <name>keySet</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>false</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    + " but was " +
                                                                    <call>
                                                                        <name>buildSummary</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>actualMap</name>.
                                                                                            <name>keySet</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>false</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return;</return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>Object</name>
                                            </type>
                                            <name>key</name> :
                                            <range>
                                                <expr>
                                                    <call>
                                                        <name><name>expectedMap</name>.
                                                            <name>keySet</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>buildMessage</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>diffs</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>prefix</name>
                                                                + '[' + <name>key</name> + "]"
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>expectedMap</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>key</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>actualMap</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>key</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>expected</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <call>
                                    <name><name>actual</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>diffs</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prefix</name>
                                                        + ": Class differs, expected " +
                                                        <call>
                                                            <name>buildSummary</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>expected</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        + " but was " +
                                                        <call>
                                                            <name>buildSummary</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>actual</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expected</name>
                                <name>instanceof</name>
                                <name>Bean</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>MetaProperty</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>prop</name> :
                                            <range>
                                                <expr>((<name>Bean</name>) <name>expected</name>).
                                                    <call>
                                                        <name>metaBean</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>metaPropertyIterable</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>buildMessage</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>diffs</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>prefix</name>
                                                                + '.' +
                                                                <call>
                                                                    <name><name>prop</name>.
                                                                        <name>name</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>prop</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>Bean</name>)
                                                                                <name>expected</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>prop</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>Bean</name>)
                                                                                <name>actual</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>JodaBeanUtils</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>expected</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>actual</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>diffs</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prefix</name>
                                                        + ": Content differs, expected " +
                                                        <call>
                                                            <name>buildSummary</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>expected</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        + " but was " +
                                                        <call>
                                                            <name>buildSummary</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>actual</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>false</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return;</return>
                    <comment type="line">// equal</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Builds a summary of an object.
                *
                * @param obj the object to summarise, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>buildSummary</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>boolean</name>
                            </type>
                            <name>includeType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>obj</name>.
                                            <name>getClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getSimpleName</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>toStr</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>obj</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>toStr</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 60
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>toStr</name>
                                        =
                                        <call>
                                            <name><name>toStr</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>57</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        + "..."
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>includeType</name> ? <name>type</name> + " " : "") + "&lt;" + <name>toStr</name> +
                            "&gt;"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-------------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the expected field.
                * @return the expected
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Bean</name>
                </type>
                <name>getExpected</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>expected</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the actual field.
                * @return the actual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Bean</name>
                </type>
                <name>getActual</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>actual</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
