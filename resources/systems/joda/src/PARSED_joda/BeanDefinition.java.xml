<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\BeanDefinition.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.
            <name>beans</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>ElementType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Retention</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>RetentionPolicy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Target</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Annotation defining a bean for code generation.
        * &lt;p&gt;
        * This annotation must be used on classes that should be treated as beans.
        *
        * @author Stephen Colebourne
        */
    </comment>
    @
    <expr_stmt>
        <expr>
            <call>
                <name>Retention</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name><name>RetentionPolicy</name>.
                                <name>RUNTIME</name>
                            </name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            @
            <call>
                <name>Target</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name><name>ElementType</name>.
                                <name>TYPE</name>
                            </name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            public @interface <name>BeanDefinition</name>
            <block>{

                <comment type="javadoc">/**
                    * The style of bean generation.
                    * &lt;p&gt;
                    * By default, this follows 'smart' rules.
                    * Set to 'minimal' to generate a minimal amount of code.
                    * Set to 'full' to generate the full code.
                    */
                </comment>
                <expr>
                    <name>String</name>
                    <call>
                        <name>style</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    <default>default "smart";

        <comment type="javadoc">/**
            * The scope of the builder class, currently just for immutable beans.
            * &lt;p&gt;
            * By default, this follows 'smart' rules.
            * Set to 'private' to generate a private builder.
            * Set to 'public' to generate a public builder.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>builderScope</name>
                <argument_list>()</argument_list>
                default "smart"
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Information about the bean hierarchy.
            * &lt;p&gt;
            * This is needed to add information that cannot be derived.
            * Set to 'immutable' for a subclass of an immutable bean.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>hierarchy</name>
                <argument_list>()</argument_list>
                default ""
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Whether to generate code to cache the hash code.
            * &lt;p&gt;
            * Setting this to true will cause the hash code to be cached using the racy single check idiom.
            * The setting only applies to immutable beans.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>cacheHashCode</name>
                <argument_list>()</argument_list>
                default false
            </decl>
            ;
        </decl_stmt>

    </default>
    }
</unit>
