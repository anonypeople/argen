<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\DynamicMetaBean.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.
            <name>beans</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * A dynamic meta-bean which works with {@code DynamicBean}.
        * &lt;p&gt;
        * A dynamic bean can have properties added or removed at any time.
        * As such, there is a different meta-bean for each dynamic bean.
        * The meta-bean allows meta-properties to be created on demand.
        *
        * @author Stephen Colebourne
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>DynamicMetaBean</name>
        <super>
            <extends>extends
                <name>MetaBean</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Creates a bean builder that can be used to create an instance of this bean.
                * &lt;p&gt;
                * All properties added to the builder will be created and appear in the result.
                *
                * @return the bean builder, not null
                * @throws UnsupportedOperationException if the bean cannot be created
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>BeanBuilder</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <extends>extends
                                    <name>DynamicBean</name>
                                </extends>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>builder</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Get the type of the bean represented as a {@code Class}.
                *
                * @return the type of the bean, not null
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <extends>extends
                                    <name>DynamicBean</name>
                                </extends>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>beanType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets a meta-property by name.
                * &lt;p&gt;
                * This will not throw an exception if the meta-property name does not exist.
                * Whether a meta-property is immediately created or not is implementation dependent.
                *
                * @param &lt;R&gt; the property type, optional, enabling auto-casting
                * @param propertyName the property name to retrieve, not null
                * @return the meta property, not null
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>
                            <name>Override</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>R</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </annotation>
                    <name>
                        <name>MetaProperty</name>
                        <argument_list>&lt;
                            <argument>
                                <name>R</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>metaProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Defines a property for the bean.
                * &lt;p&gt;
                * Some implementations will automatically add properties, in which case this
                * method will have no effect.
                *
                * @param propertyName the property name to check, not empty, not null
                * @param propertyType the property type, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>metaPropertyDefine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>propertyType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a property by name.
                *
                * @param propertyName the property name to remove, null ignored
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>metaPropertyRemove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
