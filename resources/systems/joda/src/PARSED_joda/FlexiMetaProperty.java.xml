<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\impl\flexi\FlexiMetaProperty.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>impl</name>.
            <name>flexi</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Annotation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>Bean</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>MetaBean</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>Property</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>PropertyStyle</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>impl</name>.
            <name>BasicMetaProperty</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>impl</name>.
            <name>BasicProperty</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A meta-property using a {@code FlexiBean} for storage.
        *
        * @author Stephen Colebourne
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>FlexiMetaProperty</name>
        <super>
            <extends>extends
                <name>
                    <name>BasicMetaProperty</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Object</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** The meta-bean. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>MetaBean</name>
                    </type>
                    <name>metaBean</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Factory to create a meta-property.
                *
                * @param metaBean the meta-bean, not null
                * @param propertyName the property name, not empty
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>FlexiMetaProperty</name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MetaBean</name>
                            </type>
                            <name>metaBean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>FlexiMetaProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>metaBean</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>propertyName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructor.
                *
                * @param metaBean the meta-bean, not null
                * @param propertyName the property name, not empty
                */
            </comment>
            <constructor>
                <specifier>private</specifier>
                <name>FlexiMetaProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MetaBean</name>
                            </type>
                            <name>metaBean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>propertyName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>metaBean</name>
                            </name>
                            =
                            <name>metaBean</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Property</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>BasicProperty</name>.
                                    <name>of</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bean</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>MetaBean</name>
                </type>
                <name>metaBean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>metaBean</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>declaringType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>FlexiBean</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>propertyType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Object</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>propertyGenericType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Object</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>PropertyStyle</name>
                </type>
                <name>style</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>PropertyStyle</name>.
                                <name>READ_WRITE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Annotation</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>annotations</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>emptyList</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>FlexiBean</name>) <name>bean</name>).
                            <call>
                                <name>propertyGet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>name</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>((<name>FlexiBean</name>) <name>bean</name>).
                            <call>
                                <name>propertySet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>name</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
