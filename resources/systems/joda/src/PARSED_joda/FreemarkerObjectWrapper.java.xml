<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\integrate\freemarker\FreemarkerObjectWrapper.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>integrate</name>.
            <name>freemarker</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>Bean</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>DefaultObjectWrapper</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>TemplateModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>TemplateModelException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Freemarker support class for Joda-Beans.
        * &lt;p&gt;
        * This class allows Joda-Beans to be used in the Freemarker templating system.
        * When creating a Freemarker {@code Configuration}, simply set call
        * {@code setObjectWrapper(ObjectWrapper)} with an instance of this class.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FreemarkerObjectWrapper</name>
        <super>
            <extends>extends
                <name>DefaultObjectWrapper</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Creates a new instance.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FreemarkerObjectWrapper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="line">//-------------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Overrides to trap instances of {@code Bean} and handle them.
                *
                * @param obj the object to wrap, not null
                * @return the template model, not null
                * @throws TemplateModelException if unable to create the model
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>TemplateModel</name>
                </type>
                <name>wrap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TemplateModelException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>Bean</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>FreemarkerTemplateModel</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>Bean</name>)
                                                        <name>obj</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>wrap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>obj</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>"FreemarkerObjectWrapper"</expr>;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
