<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\integrate\freemarker\FreemarkerTemplateModel.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>integrate</name>.
            <name>freemarker</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>Bean</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>MetaProperty</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>freemarker</name>.<name>ext</name>.<name>beans</name>.
            <name>BeanModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>ext</name>.<name>beans</name>.
            <name>BeansWrapper</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>AdapterTemplateModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>SimpleCollection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>SimpleScalar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>TemplateCollectionModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>TemplateHashModelEx</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>TemplateModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>TemplateModelException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>freemarker</name>.<name>template</name>.
            <name>WrappingTemplateModel</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Template model converting a Joda-Bean to a Freemarker model.
        * &lt;p&gt;
        * Although this class is public, it should not normally be use directly.
        * Follow the instructions in {@link FreemarkerObjectWrapper} to use this class.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>FreemarkerTemplateModel</name>
        <super>
            <extends>extends
                <name>WrappingTemplateModel</name>
            </extends>
            <implements>implements <name>TemplateHashModelEx</name>,
                <name>AdapterTemplateModel</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The bean being wrapped.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Bean</name>
                    </type>
                    <name>bean</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates an instance of the model.
                * @param bean the bean being wrapped, not null
                * @param wrapper the default wrapper for further wrapping, not null
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FreemarkerTemplateModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>FreemarkerObjectWrapper</name>
                            </type>
                            <name>wrapper</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>wrapper</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>bean</name>
                            </name>
                            =
                            <name>bean</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-------------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the value for the specified key, wrapping the result in another model.
                * @param key the property name, not null
                * @return the model, null if not found
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>TemplateModel</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TemplateModelException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>MetaProperty</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>metaProperty</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>bean</name>.
                                            <name>metaBean</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>metaPropertyMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>get</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>metaProperty</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// try standard approach via BeanModel for non-bean properties and
                                    methods
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>BeanModel</name>
                                        </type>
                                        <name>model</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>BeanModel</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>bean</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>(<name>BeansWrapper</name>)
                                                                <call>
                                                                    <name>getObjectWrapper</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>TemplateModel</name>
                                        </type>
                                        <name>result</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>model</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>result</name>
                                            <name>instanceof</name>
                                            <name>SimpleScalar</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// have to map empty string to null</comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>str</name> =
                                                    <init>
                                                        <expr>((<name>SimpleScalar</name>) <name>result</name>).
                                                            <call>
                                                                <name>getAsString</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>str</name>
                                                        == <name>null</name> ||
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>isEmpty</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>wrap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>metaProperty</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>bean</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if there are no properties.
                * @return true if no properties
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>size</name>
                                <argument_list>()</argument_list>
                            </call>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the number of properties.
                * @return the number of properties
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>bean</name>.
                                    <name>metaBean</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>metaPropertyCount</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the full set of property names, allowing the bean to be accessed as a sequence.
                * @return the property names, not null
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>TemplateCollectionModel</name>
                </type>
                <name>keys</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SimpleCollection</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>bean</name>.
                                                    <name>propertyNames</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getObjectWrapper</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the full set of property values, allowing the bean to be accessed as a sequence.
                * @return the wrapped property values, not null
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>TemplateCollectionModel</name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SimpleCollection</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>bean</name>.
                                                    <name>metaBean</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>createPropertyMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>bean</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>flatten</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>values</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getObjectWrapper</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unwraps the model, returning the bean.
                * @param hint the class hint
                * @return the underlying bean, not null
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("rawtypes")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getAdaptedObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>hint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bean</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
