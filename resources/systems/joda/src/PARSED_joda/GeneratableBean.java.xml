<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\gen\GeneratableBean.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>gen</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>TreeSet</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A bean that can be generated.
        *
        * @author Stephen Colebourne
        */
    </comment>
    <class>class <name>GeneratableBean</name>
        <block>{

            <comment type="javadoc">/** The list of current imports. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>SortedSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>currentImports</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>TreeSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The list of new imports. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>SortedSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newImports</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>TreeSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The last import line. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>lastImportLine</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The bean style. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>beanStyle</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The bean builder scope. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>beanBuilderScope</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether to cache the hash code. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>cacheHashCode</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether the class is immutable. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>immutable</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether the class can be constructed. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>constructable</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether the class has a manual constructor for immutable beans. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>immutableConstructor</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The method name of the immutable validator. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>immutableValidator</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The method name of the immutable defaults. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>immutableDefaults</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The method name of the immutable pre-build. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>immutablePreBuild</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The style of constructor to generate. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>constructorStyle</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The full type of the bean class. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>typeFull</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The simple name of the bean class. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>typeRaw</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The name clause of the generic. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>typeGenericName</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The extends clause of the generic. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>typeGenericExtends</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether the type is final with no subclasses. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>typeFinal</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether the type is a root with no bean super-classes. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>root</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The full name of the bean superclass. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>superTypeFull</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The simple name of the bean superclass. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>superTypeRaw</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The generic argument of the bean superclass. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>superTypeGeneric</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The list of properties, in the order they are declared. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>GeneratableProperty</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>properties</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>ArrayList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>GeneratableProperty</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The serializable flag. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>serializable</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The manual serialization version id flag. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>manualSerVersionId</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Does the class have a manual clone. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>manualClone</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Does the class have a manual equals or hash code. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>manualEqualsHashCode</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Does the class have a manual toString. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>manualToStringCode</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor.
                */
            </comment>
            <constructor>
                <name>GeneratableBean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Gets the current set of imports.
                * @return the imports
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCurrentImports</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>currentImports</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the new imports.
                * @return the imports
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNewImports</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>newImports</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures an import is present.
                * @param cls the class, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>ensureImport</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>currentImports</name>.
                                        <name>contains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>cls</name>.
                                                        <name>getName</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>newImports</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>cls</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the import insert location.
                * @return the insert location
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getImportInsertLocation</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>lastImportLine</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the import insert location.
                * @param location the insert location
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setImportInsertLocation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>location</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>lastImportLine</name>
                            =
                            <name>location</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the bean style.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getBeanStyle</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>beanStyle</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the bean style.
                * @param beanStyle the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setBeanStyle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>beanStyle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>beanStyle</name>
                            </name>
                            =
                            <name>beanStyle</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is the bean style indicating that properties should be generated.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isBeanStyleValid</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"full".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || "smart".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || "minimal".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is the bean style indicating that properties should be generated.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isBeanStyleGenerateProperties</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"full".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || ("smart".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name>isImmutable</name>
                                <argument_list>()</argument_list>
                            </call>
                            == false)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is the bean style indicating that properties should be generated.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isBeanStyleGenerateMetaProperties</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"full".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || "smart".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanStyle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the bean builder scope.
                * @return the scope
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getBeanBuilderScope</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>beanBuilderScope</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the bean builder scope.
                * @param builderScope the scope
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setBeanBuilderScope</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>builderScope</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>beanBuilderScope</name>
                            </name>
                            =
                            <name>builderScope</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is the bean style indicating that properties should be generated.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isBeanBuilderScopeValid</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"smart".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || "private".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || "public".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the effective scope to use in the builder.
                * @return the scope
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getEffectiveBuilderScope</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"smart".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? "public" :
                            <name>beanBuilderScope</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is the effective scope to use in the builder public.
                * @return the scope
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEffectiveBuilderScopePublic</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"smart".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            || "public".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is the scope to use in the builder public.
                * @return the scope
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isBuilderScopePublic</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"public".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>beanBuilderScope</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets whether to cache the hash code.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isCacheHashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>cacheHashCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether to cache the hash code.
                * @param cacheHashCode the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCacheHashCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>cacheHashCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>cacheHashCode</name>
                            </name>
                            =
                            <name>cacheHashCode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets whether the bean is immutable.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isImmutable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>immutable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets whether the bean is mutable.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isMutable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <name>immutable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean is immutable.
                * @param immutable the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setImmutable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>immutable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>immutable</name>
                            </name>
                            =
                            <name>immutable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the bean can be constructed.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isConstructable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>constructable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean can be constructed.
                * @param constructable the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setConstructable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>constructable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>constructable</name>
                            </name>
                            =
                            <name>constructable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets whether the bean has a manual constructor to use.
                * @return the flag, zero for none, one for builder based, two for argument based
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getImmutableConstructor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>immutableConstructor</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean has a manual constructor to use.
                * @param constructable the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setImmutableConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>manualConstructor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>immutableConstructor</name>
                            </name>
                            =
                            <name>manualConstructor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets whether the bean has a validator.
                * @return the method name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getImmutableValidator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>immutableValidator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean has a validator.
                * @param immutableValidator the method name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setImmutableValidator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>immutableValidator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>immutableValidator</name>
                            </name>
                            =
                            <name>immutableValidator</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets whether the bean has an apply defaults method.
                * @return the method name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getImmutableDefaults</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>immutableDefaults</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean has an apply defaults method.
                * @param immutableValidator the method name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setImmutableDefaults</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>immutableDefaults</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>immutableDefaults</name>
                            </name>
                            =
                            <name>immutableDefaults</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets whether the bean has a pre-build method.
                * @return the method name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getImmutablePreBuild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>immutablePreBuild</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean has a pre-build method.
                * @param immutablePreBuild the method name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setImmutablePreBuild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>immutablePreBuild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>immutablePreBuild</name>
                            </name>
                            =
                            <name>immutablePreBuild</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the constructor style to generate.
                * @return the flag, zero for none, one for builder based, two for argument based
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getConstructorStyle</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>constructorStyle</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the constructor style to generate.
                * @param constructorStyle the constructor style
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setConstructorStyle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>constructorStyle</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>constructorStyle</name>
                            </name>
                            =
                            <name>constructorStyle</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the bean is serializable.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSerializable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>serializable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean is serializable.
                * @param serializable the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSerializable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>serializable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>serializable</name>
                            </name>
                            =
                            <name>serializable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the bean has a manual serialization id.
                * @return the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isManualSerializationId</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>manualSerVersionId</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the bean has a manual serialization id.
                * @param manualSerVersionId the flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setManualSerializationId</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>manualSerVersionId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>manualSerVersionId</name>
                            </name>
                            =
                            <name>manualSerVersionId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the clone is manual.
                * @return true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isManualClone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>manualClone</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets if the clone is manual.
                * @param manualClone true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setManualClone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>manualClone</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>manualClone</name>
                            </name>
                            =
                            <name>manualClone</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the equals/hashCode is manual.
                * @return true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isManualEqualsHashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>manualEqualsHashCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets if the equals/hashCode is manual.
                * @param manualEqualsHashCode true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setManualEqualsHashCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>manualEqualsHashCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>manualEqualsHashCode</name>
                            </name>
                            =
                            <name>manualEqualsHashCode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the toString is manual.
                * @return true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isManualToStringCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>manualToStringCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets if the toString is manual.
                * @param manualToStringCode true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setManualToStringCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>manualToStringCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>manualToStringCode</name>
                            </name>
                            =
                            <name>manualToStringCode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the bean type.
                * @param parts the type to set
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTypeParts</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parts</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>typeFinal</name>
                            </name>
                            =
                            <name>
                                <name>parts</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            !=
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>typeFull</name>
                            </name>
                            =
                            <name>
                                <name>parts</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>typeRaw</name>
                            </name>
                            =
                            <name>
                                <name>parts</name>
                                <index>[<expr>2</expr>]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>parts</name>
                                    <index>[<expr>7</expr>]
                                    </index>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>typeGenericName</name>
                                        </name>
                                        = new
                                        <name>
                                            <name>String</name>
                                            <index>[]</index>
                                        </name>
                                        <block>{
                                            <expr>
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>3</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ,
                                            <expr>
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>5</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ,
                                            <expr>
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>7</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            }
                                        </block>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>typeGenericExtends</name>
                                        </name>
                                        = new
                                        <name>
                                            <name>String</name>
                                            <index>[<expr>3</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>typeGenericExtends</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>4</expr>]
                                            </index>
                                        </name>
                                        != <name>null</name> ?
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>4</expr>]
                                            </index>
                                        </name>
                                        : ""
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>typeGenericExtends</name>
                                            <index>[<expr>1</expr>]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>6</expr>]
                                            </index>
                                        </name>
                                        != <name>null</name> ?
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>6</expr>]
                                            </index>
                                        </name>
                                        : ""
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>typeGenericExtends</name>
                                            <index>[<expr>2</expr>]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>8</expr>]
                                            </index>
                                        </name>
                                        != <name>null</name> ?
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>8</expr>]
                                            </index>
                                        </name>
                                        : ""
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>5</expr>]
                                            </index>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>typeGenericName</name>
                                                </name>
                                                = new
                                                <name>
                                                    <name>String</name>
                                                    <index>[]</index>
                                                </name>
                                                <block>{
                                                    <expr>
                                                        <name>
                                                            <name>parts</name>
                                                            <index>[<expr>3</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ,
                                                    <expr>
                                                        <name>
                                                            <name>parts</name>
                                                            <index>[<expr>5</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    }
                                                </block>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>typeGenericExtends</name>
                                                </name>
                                                = new
                                                <name>
                                                    <name>String</name>
                                                    <index>[<expr>2</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>typeGenericExtends</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                =
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>4</expr>]
                                                    </index>
                                                </name>
                                                != <name>null</name> ?
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>4</expr>]
                                                    </index>
                                                </name>
                                                : ""
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>typeGenericExtends</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                                =
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>6</expr>]
                                                    </index>
                                                </name>
                                                != <name>null</name> ?
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>6</expr>]
                                                    </index>
                                                </name>
                                                : ""
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>parts</name>
                                                    <index>[<expr>3</expr>]
                                                    </index>
                                                </name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>typeGenericName</name>
                                                        </name>
                                                        = new
                                                        <name>
                                                            <name>String</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name>
                                                                    <name>parts</name>
                                                                    <index>[<expr>3</expr>]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>typeGenericExtends</name>
                                                        </name>
                                                        = new
                                                        <name>
                                                            <name>String</name>
                                                            <index>[<expr>1</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>typeGenericExtends</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                        =
                                                        <name>
                                                            <name>parts</name>
                                                            <index>[<expr>4</expr>]
                                                            </index>
                                                        </name>
                                                        != <name>null</name> ?
                                                        <name>
                                                            <name>parts</name>
                                                            <index>[<expr>4</expr>]
                                                            </index>
                                                        </name>
                                                        : ""
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>typeGenericName</name>
                                                        </name>
                                                        = new
                                                        <name>
                                                            <name>String</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>typeGenericExtends</name>
                                                        </name>
                                                        = new
                                                        <name>
                                                            <name>String</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the bean superclass type.
                * @param parts the superclass to set
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSuperTypeParts</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parts</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>parts</name>.
                                    <name>length</name>
                                </name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>root</name>
                                        </name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>immutable</name>
                                        </name>
                                        = "ImmutableBean".
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>parts</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>superTypeFull</name>
                                        </name>
                                        = ""
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>superTypeRaw</name>
                                        </name>
                                        = ""
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>superTypeGeneric</name>
                                        </name>
                                        = ""
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>root</name>
                                        </name>
                                        = "DirectBean".
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>parts</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>immutable</name>
                                        </name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>superTypeFull</name>
                                        </name>
                                        =
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>superTypeRaw</name>
                                        </name>
                                        =
                                        <name>
                                            <name>parts</name>
                                            <index>[<expr>1</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>parts</name>
                                                <index>[<expr>4</expr>]
                                                </index>
                                            </name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>superTypeGeneric</name>
                                                    </name>
                                                    =
                                                    <name>
                                                        <name>parts</name>
                                                        <index>[<expr>2</expr>]
                                                        </index>
                                                    </name>
                                                    + ", " +
                                                    <name>
                                                        <name>parts</name>
                                                        <index>[<expr>3</expr>]
                                                        </index>
                                                    </name>
                                                    + ", " +
                                                    <name>
                                                        <name>parts</name>
                                                        <index>[<expr>4</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>parts</name>
                                                        <index>[<expr>3</expr>]
                                                        </index>
                                                    </name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>superTypeGeneric</name>
                                                            </name>
                                                            =
                                                            <name>
                                                                <name>parts</name>
                                                                <index>[<expr>2</expr>]
                                                                </index>
                                                            </name>
                                                            + ", " +
                                                            <name>
                                                                <name>parts</name>
                                                                <index>[<expr>3</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>
                                                                <name>parts</name>
                                                                <index>[<expr>2</expr>]
                                                                </index>
                                                            </name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>superTypeGeneric</name>
                                                                    </name>
                                                                    =
                                                                    <name>
                                                                        <name>parts</name>
                                                                        <index>[<expr>2</expr>]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>superTypeGeneric</name>
                                                                    </name>
                                                                    = ""
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the modifiable list of properties.
                * @return the properties, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>GeneratableProperty</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getProperties</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>properties</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the type is final.
                * @return true if manual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTypeFinal</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>typeFinal</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets if the type is final.
                * @param typeFinal true if final, false if subclassable
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTypeFinal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>typeFinal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>typeFinal</name>
                            </name>
                            =
                            <name>typeFinal</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if this bean is a superclass.
                * @param true if this is a subclass of another bean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSubClass</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <name>root</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if this bean is the root class in a hierarchy.
                * @param true if this is the root class with no bean superclasses
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isRootClass</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>root</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if this bean directly extends {@code DirectBean}.
                * @param true if this extends DirectBean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isExtendsDirectBean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"DirectBean".
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>superTypeFull</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if the bean is parameterised with generics.
                * @return true if generified
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTypeGeneric</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>typeGenericName</name>.
                                <name>length</name>
                            </name>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the number of generic type parameters.
                * @return zero if no type parameters, one or two if it has type parameters
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getTypeGenericCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>typeGenericName</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the bean type, such as '{@code Foo&lt;T extends Bar&gt;}'.
                * @return the type
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>typeFull</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the parameterisation of the bean including extends clause, such as '{@code &lt;T extends Bar&gt;}'.
                * @param includeBrackets whether to include the brackets
                * @return the generic type, or a blank string if not generic, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeGeneric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>includeBrackets</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isTypeGeneric</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>typeGenericName</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    +
                                    <name>
                                        <name>typeGenericExtends</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeGenericExtends</name>.
                                    <name>length</name>
                                </name>
                                &gt; 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        += ", " +
                                        <name>
                                            <name>typeGenericName</name>
                                            <index>[<expr>1</expr>]
                                            </index>
                                        </name>
                                        +
                                        <name>
                                            <name>typeGenericExtends</name>
                                            <index>[<expr>1</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>typeGenericExtends</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 2
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>result</name>
                                                    += ", " +
                                                    <name>
                                                        <name>typeGenericName</name>
                                                        <index>[<expr>2</expr>]
                                                        </index>
                                                    </name>
                                                    +
                                                    <name>
                                                        <name>typeGenericExtends</name>
                                                        <index>[<expr>2</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>includeBrackets</name>
                            &amp;&amp;
                            <call>
                                <name><name>result</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0 ? '&lt;' + <name>result</name> + '&gt;' :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the name of the parameterisation of the bean, such as '{@code &lt;T, U&gt;}'.
                * @param includeBrackets whether to include the brackets
                * @return the generic type name, or a blank string if not generic, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeGenericName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>includeBrackets</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isTypeGeneric</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>typeGenericName</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeGenericExtends</name>.
                                    <name>length</name>
                                </name>
                                &gt; 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        += ", " +
                                        <name>
                                            <name>typeGenericName</name>
                                            <index>[<expr>1</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>typeGenericExtends</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 2
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>result</name>
                                                    += ", " +
                                                    <name>
                                                        <name>typeGenericName</name>
                                                        <index>[<expr>2</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>includeBrackets</name>
                            &amp;&amp;
                            <call>
                                <name><name>result</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0 ? '&lt;' + <name>result</name> + '&gt;' :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the name of the parameterisation of the bean, such as '{@code &lt;T&gt;}'.
                * @param typeParamIndex the zero-based index of the type parameter
                * @return the generic type name, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeGenericName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>typeParamIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>includeBrackets</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>typeGenericName</name>
                                        <index>[
                                            <expr>
                                                <name>typeParamIndex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>includeBrackets</name>
                            &amp;&amp;
                            <call>
                                <name><name>result</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0 ? '&lt;' + <name>result</name> + '&gt;' :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the extends clause of the parameterisation of the bean, such as '{@code extends Foo}'.
                * @param typeParamIndex the zero-based index of the type parameter
                * @return the generic type extends clause, or a blank string if not generic or no extends, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeGenericExtends</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>typeParamIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>
                                <name>typeGenericExtends</name>
                                <index>[
                                    <expr>
                                        <name>typeParamIndex</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the extends clause of the parameterisation of the bean, such as '{@code extends Foo}'.
                * @param typeParamIndex the zero-based index of the type parameter
                * @return the generic type extends clause, or a blank string if not generic or no extends, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeGenericExtends</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>typeParamIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>typeParamName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>genericClause</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>typeGenericExtends</name>
                                        <index>[
                                            <expr>
                                                <name>typeParamIndex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>genericClause</name>.
                                    <name>replace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"&lt;" +
                                            <name>
                                                <name>typeGenericName</name>
                                                <index>[
                                                    <expr>
                                                        <name>typeParamIndex</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            + "&gt;"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"&lt;" + <name>typeParamName</name> + "&gt;"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the full type of the bean with simple parameterization, such as '{@code Foo&lt;T&gt;}'.
                * @return the generic type extends clause, or a blank string if not generic or no extends, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeNoExtends</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>typeRaw</name>
                            +
                            <call>
                                <name>getTypeGenericName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the raw type of the bean without generics, such as '{@code Foo}'.
                * @return the raw type, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeRaw</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>typeRaw</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the full type of the bean with wildcarded parameterization, such as '{@code Foo&lt;?&gt;}'.
                * @return the wildcarded type, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeWildcard</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isTypeGeneric</name>
                                    <argument_list>()</argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>typeRaw</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>"?"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeGenericExtends</name>.
                                    <name>length</name>
                                </name>
                                &gt; 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        += ", ?"
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>typeGenericExtends</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 2
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>result</name>
                                                    += ", ?"
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>typeRaw</name>
                            + '&lt;' + <name>result</name> + '&gt;'
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the type specified is one of the bean's type parameters.
                * @return true if a type parameter of this bean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTypeGenerifiedBy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeGenericName</name>.
                                    <name>length</name>
                                </name>
                                &gt; 2 &amp;&amp;
                                <name>
                                    <name>typeGenericName</name>
                                    <index>[<expr>2</expr>]
                                    </index>
                                </name>
                                .
                                <call>
                                    <name>equals</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>type</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeGenericName</name>.
                                    <name>length</name>
                                </name>
                                &gt; 1 &amp;&amp;
                                <name>
                                    <name>typeGenericName</name>
                                    <index>[<expr>1</expr>]
                                    </index>
                                </name>
                                .
                                <call>
                                    <name>equals</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>type</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeGenericName</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0 &amp;&amp;
                                <name>
                                    <name>typeGenericName</name>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </name>
                                .
                                <call>
                                    <name>equals</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>type</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if the super bean is parameterised with generics.
                * @return true if generified
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSuperTypeGeneric</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>superTypeGeneric</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the bean superclass type.
                * @return the superclass
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSuperType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>superTypeFull</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the parameterisation of the super bean.
                * @param includeBrackets whether to include the brackets
                * @return the generic type, or a blank string if not generic, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSuperTypeGeneric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>includeBrackets</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>includeBrackets</name>
                            &amp;&amp;
                            <call>
                                <name><name>superTypeGeneric</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0 ? '&lt;' + <name>superTypeGeneric</name> + '&gt;' :
                            <name>superTypeGeneric</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the raw type of the super bean without generics.
                * @return the raw type, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSuperTypeRaw</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>superTypeRaw</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if any property is validated.
                * @return true if validated
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidated</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>GeneratableProperty</name>
                                </type>
                                <name>property</name> :
                                <range>
                                    <expr>
                                        <name>properties</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>property</name>.
                                                <name>isValidated</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the scope of nested Meta and Builder classes.
                * @return the scope, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNestedClassConstructorScope</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name>isTypeFinal</name>
                                <argument_list>()</argument_list>
                            </call>
                            ? "private" : "protected")
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
