<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\MetaBean.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.
            <name>beans</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A meta-bean, defining those aspects of a bean which are not specific
        * to a particular instance, such as the type and set of meta-properties.
        * &lt;p&gt;
        * This interface can be thought of as the equivalent of {@link Class} but for beans.
        * In most cases the meta-bean will be code generated and the concrete class will have additional methods.
        *
        * @author Stephen Colebourne
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>MetaBean</name>
        <block>{

            <comment type="javadoc">/**
                * Creates a bean builder that can be used to create an instance of this bean.
                * &lt;p&gt;
                * The builder is used in two main ways.
                * The first is to allow immutable beans to be constructed.
                * The second is to enable automated tools like serialization/deserialization.
                * &lt;p&gt;
                * The builder can be thought of as a {@code Map} of {@link MetaProperty} to value.
                * Note that the implementation is not necessarily an actual map.
                *
                * @return the bean builder, not null
                * @throws UnsupportedOperationException if the bean cannot be created
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>BeanBuilder</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <extends>extends
                                    <name>Bean</name>
                                </extends>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>builder</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Creates a map of properties for the specified bean.
                * &lt;p&gt;
                * This allows the entire set of properties of the bean to be exposed as a {@code Map}.
                * The map is keyed by the property name and has {@link Property} instances as values.
                * Call {@link PropertyMap#flatten()} to convert the map to hold the actual values from the bean.
                *
                * @param bean the bean to create the map for, not null
                * @return the created property map, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>PropertyMap</name>
                </type>
                <name>createPropertyMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the bean name, which is normally the fully qualified class name of the bean.
                * &lt;p&gt;
                * This is primarily used for human-readable output.
                *
                * @return the name of the bean, not empty
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>beanName</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Get the type of the bean, represented as a {@code Class}.
                * &lt;p&gt;
                * A {@code MetaBean} can be thought of as the equivalent of {@link Class} but for beans.
                * This method allows the actual {@code Class} instance of the bean to be obtained.
                *
                * @return the type of the bean, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <extends>extends
                                    <name>Bean</name>
                                </extends>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>beanType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Counts the number of properties.
                * &lt;p&gt;
                * Each meta-bean manages a single bean with a known set of properties.
                * This method returns the count of properties.
                *
                * @return the number of properties
                */
            </comment>
            <function_decl>
                <type>
                    <name>int</name>
                </type>
                <name>metaPropertyCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Checks if a property exists.
                * &lt;p&gt;
                * Each meta-bean manages a single bean with a known set of properties.
                * This method checks whether there is a property with the specified name.
                *
                * @param propertyName the property name to check, null returns false
                * @return true if the property exists
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>metaPropertyExists</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets a meta-property by name.
                * &lt;p&gt;
                * Each meta-bean manages a single bean with a known set of properties.
                * This method returns the property with the specified name.
                * &lt;p&gt;
                * The base interface throws an exception if the name is not recognised.
                * By contrast, the {@code DynamicMetaBean} subinterface creates the property on demand.
                *
                * @param &lt;R&gt; the property type, optional, enabling auto-casting
                * @param propertyName the property name to retrieve, not null
                * @return the meta property, not null
                * @throws NoSuchElementException if the property name is invalid
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>R</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>MetaProperty</name>
                        <argument_list>&lt;
                            <argument>
                                <name>R</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>metaProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets an iterator of meta-properties.
                * &lt;p&gt;
                * This method returns an {@code Iterable}, which is simpler than a {@code Map}.
                * As a result, implementations may be able to optimise, and so this method should be
                * preferred to {@link #metaPropertyMap()} where a choice is possible.
                *
                * @return the unmodifiable map of meta property objects, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Iterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>MetaProperty</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>metaPropertyIterable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the map of meta-properties, keyed by property name.
                * &lt;p&gt;
                * Where possible, use {@link #metaPropertyIterable()} instead as it typically has better performance.
                *
                * @return the unmodifiable map of meta property objects, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>MetaProperty</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>metaPropertyMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
