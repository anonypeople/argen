<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\MetaProperty.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.
            <name>beans</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Annotation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Type</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>joda</name>.<name>convert</name>.
            <name>StringConvert</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A meta-property, defining those aspects of a property which are not specific
        * to a particular bean, such as the property type and name.
        *
        * @param &lt;P&gt; the type of the property content
        * @author Stephen Colebourne
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>
            <name>MetaProperty</name>
            <argument_list>&lt;
                <argument>
                    <name>P</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>BeanQuery</name>
                    <argument_list>&lt;
                        <argument>
                            <name>P</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Creates a property that binds this meta-property to a specific bean.
                * &lt;p&gt;
                * This method returns a {@code Property} instance that connects this meta-property to the specified
                bean.
                * The result can be queried and passed around without further reference to the bean.
                *
                * @param bean the bean to create the property for, not null
                * @return the property, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Property</name>
                        <argument_list>&lt;
                            <argument>
                                <name>P</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the meta-bean which owns this meta-property.
                * &lt;p&gt;
                * Each meta-property is fully owned by a single bean.
                *
                * @return the meta-bean, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>MetaBean</name>
                </type>
                <name>metaBean</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the property name.
                * &lt;p&gt;
                * The JavaBean style methods getFoo() and setFoo() will lead to a property
                * name of 'foo' and so on.
                *
                * @return the name of the property, not empty
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>name</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Get the type that declares the property, represented as a {@code Class}.
                * &lt;p&gt;
                * This is the type of the bean where the property is declared.
                *
                * @return the type declaring the property, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>declaringType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Get the type of the property represented as a {@code Class}.
                * &lt;p&gt;
                * This is the type of the property.
                * For example, the surname of a person would typically be a {@code String}.
                *
                * @return the type of the property, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>P</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>propertyType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the generic types of the property.
                * &lt;p&gt;
                * This provides access to the generic type declared in the source code.
                *
                * @return the full generic type of the property, unmodifiable, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>Type</name>
                </type>
                <name>propertyGenericType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the style of the property, such as read-only, read-write or write-only.
                * &lt;p&gt;
                * Rather than testing against specific values, it is strongly recommended to
                * call the helper methods on the returned style.
                *
                * @return the property style, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>PropertyStyle</name>
                </type>
                <name>style</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the annotations of the property.
                * &lt;p&gt;
                * The annotations are queried from the property.
                * This is typically accomplished by querying the annotations of the underlying instance variable.
                *
                * @return the annotations, unmodifiable, not null
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Annotation</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>annotations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets an annotation from the property.
                * &lt;p&gt;
                * The annotations are queried from the property.
                * This is typically accomplished by querying the annotations of the underlying instance variable.
                *
                * @param &lt;A&gt; the annotation type
                * @param annotation the annotation class to find, not null
                * @return the annotation, not null
                * @throws NoSuchElementException if the annotation is not specified
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>A</name>
                            <extends>extends
                                <name>Annotation</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>A</name>
                </type>
                <name>annotation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>A</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>annotation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the value of the property for the specified bean.
                * &lt;p&gt;
                * For a standard JavaBean, this is equivalent to calling &lt;code&gt;getFoo()&lt;/code&gt; on the bean.
                * Alternate implementations may perform any logic to obtain the value.
                *
                * @param bean the bean to query, not null
                * @return the value of the property on the specified bean, may be null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws UnsupportedOperationException if the property is write-only
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>P</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of the property on the specified bean.
                * &lt;p&gt;
                * The value must be of the correct type for the property.
                * For a standard JavaBean, this is equivalent to calling &lt;code&gt;setFoo()&lt;/code&gt; on the bean.
                * Alternate implementations may perform any logic to change the value.
                *
                * @param bean the bean to update, not null
                * @param value the value to set into the property on the specified bean, may be null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws ClassCastException if the value is of an invalid type for the property
                * @throws UnsupportedOperationException if the property is read-only
                * @throws RuntimeException if the value is rejected by the property (use appropriate subclasses)
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of the property on the associated bean and returns the previous value.
                * &lt;p&gt;
                * The value must be of the correct type for the property.
                * This is a combination of the {@code get} and {@code set} methods that matches the definition
                * of {@code put} in a {@code Map}.
                *
                * @param bean the bean to update, not null
                * @param value the value to set into the property on the specified bean, may be null
                * @return the old value of the property, may be null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws ClassCastException if the value is of an invalid type for the property
                * @throws UnsupportedOperationException if the property is read-only
                * @throws RuntimeException if the value is rejected by the property (use appropriate subclasses)
                */
            </comment>
            <function_decl>
                <type>
                    <name>P</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the value of the property for the specified bean converted to a string.
                * &lt;p&gt;
                * This converts the result of {@link #get(Bean)} to a standard format string.
                * Conversion uses Joda-Convert.
                * Not all object types can be converted to a string, see Joda-Convert.
                * &lt;p&gt;
                * For a standard JavaBean, this is equivalent to calling &lt;code&gt;getFoo()&lt;/code&gt; on the bean.
                * Alternate implementations may perform any logic to obtain the value.
                *
                * @param bean the bean to query, not null
                * @return the value of the property on the specified bean, may be null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws UnsupportedOperationException if the property is write-only
                * @throws RuntimeException if the value cannot be converted to a string (use appropriate subclasses)
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the value of the property for the specified bean converted to a string.
                * &lt;p&gt;
                * This converts the result of {@link #get(Bean)} to a standard format string using the supplied
                converter.
                * Not all object types can be converted to a string, see Joda-Convert.
                * &lt;p&gt;
                * For a standard JavaBean, this is equivalent to calling &lt;code&gt;getFoo()&lt;/code&gt; on the bean.
                * Alternate implementations may perform any logic to obtain the value.
                *
                * @param bean the bean to query, not null
                * @param stringConvert the converter to use, not null
                * @return the value of the property on the specified bean, may be null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws UnsupportedOperationException if the property is write-only
                * @throws RuntimeException if the value cannot be converted to a string (use appropriate subclasses)
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringConvert</name>
                            </type>
                            <name>stringConvert</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of the property on the specified bean from a string by conversion.
                * &lt;p&gt;
                * This converts the string to the correct type for the property and then sets it
                * using {@link #set(Bean, Object)}. Conversion uses Joda-Convert.
                *
                * @param bean the bean to update, not null
                * @param value the value to set into the property on the specified bean, may be null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws ClassCastException if the value is of an invalid type for the property
                * @throws UnsupportedOperationException if the property is read-only
                * @throws RuntimeException if the value is rejected by the property (use appropriate subclasses)
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of the property on the specified bean from a string by conversion.
                * &lt;p&gt;
                * This converts the string to the correct type for the property using the supplied converter and then
                sets it
                * using {@link #set(Bean, Object)}.
                *
                * @param bean the bean to update, not null
                * @param value the value to set into the property on the specified bean, may be null
                * @param stringConvert the converter, not null
                * @throws ClassCastException if the bean is of an incorrect type
                * @throws ClassCastException if the value is of an invalid type for the property
                * @throws UnsupportedOperationException if the property is read-only
                * @throws RuntimeException if the value is rejected by the property (use appropriate subclasses)
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Bean</name>
                            </type>
                            <name>bean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringConvert</name>
                            </type>
                            <name>stringConvert</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if this meta-property equals another.
                * &lt;p&gt;
                * This compares the property name and declaring type.
                * It does not compare the property or bean types.
                *
                * @param obj the other meta-property, null returns false
                * @return true if equal
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a suitable hash code.
                *
                * @return the hash code
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
