<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\PropertyDefinition.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.
            <name>beans</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>ElementType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Retention</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>RetentionPolicy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Target</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Annotation defining a property for code generation.
        * &lt;p&gt;
        * This annotation must be used on all private instance variables that
        * should be treated as properties.
        *
        * @author Stephen Colebourne
        */
    </comment>
    @
    <expr_stmt>
        <expr>
            <call>
                <name>Retention</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name><name>RetentionPolicy</name>.
                                <name>RUNTIME</name>
                            </name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            @
            <call>
                <name>Target</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name><name>ElementType</name>.
                                <name>FIELD</name>
                            </name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            public @interface <name>PropertyDefinition</name>
            <block>{

                <comment type="javadoc">/**
                    * An alternative name for the property.
                    * &lt;p&gt;
                    * The property can be looked up using the specified alias.
                    * The primary name is unaffected, and the alias is only used in certain circumstances.
                    * For example, {@code bean.metaProperty("alias")} and {@code bean.property("alias")}
                    * will both work, as will getting and setting via an immutable bean builder.
                    * &lt;p&gt;
                    * This attribute is most useful in handling change from serialized forms.
                    */
                </comment>
                <expr>
                    <name>String</name>
                    <call>
                        <name>alias</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    <default>default "";

        <comment type="javadoc">/**
            * The style of the method used to query the property.
            * &lt;p&gt;
            * The style is a string describing the getter, typically used for code generation.
            * By default this is 'smart' which will use the source code knowledge to determine
            * what to generate. This will be a method of the form {@code isXxx()} for {@code boolean}
            * and {@code getXxx()} for all other types.
            * &lt;p&gt;
            * Supported style strings are:
            * &lt;ul&gt;
            * &lt;li&gt;'' - do not generate any form of getter
            * &lt;li&gt;'smart' - process intelligently - 'is' for boolean and 'get' for other types
            * &lt;li&gt;'private' - process as per 'smart' but set scope as private
            * &lt;li&gt;'protected' - process as per 'smart' but set scope as protected
            * &lt;li&gt;'is' - generates isXxx()
            * &lt;li&gt;'get' - generates getXxx()
            * &lt;li&gt;'clone' - generates getXxx() with a clone of the field (assumed to be of the correct type)
            * &lt;li&gt;'cloneCast' - generates getXxx() with a clone of the field with a cast to the property type
            * &lt;li&gt;'optional' - generate getXxx() returning a Java 8 {@code Optional} wrapper around the field,
            * where the field itself is nullable instead of optional. {@code OptionalDouble}, {@code OptionalInt}
            * and {@code OptionalLong} are also handled
            * &lt;li&gt;'optionalGuava' - generate getXxx() returning a Guava {@code Optional} wrapper around the field,
            * where the field itself is nullable instead of optional
            * &lt;li&gt;'field' - generates direct access to the field, enabling a weird manual getter
            * &lt;li&gt;'manual' - a method named getXxx() must be manually provided at package scope or greater
            * &lt;/ul&gt;
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>get</name>
                <argument_list>()</argument_list>
                default "smart"
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * The style of the method used to mutate the property.
            * &lt;p&gt;
            * The style is a string describing the mutator, typically used for code generation.
            * By default this is 'smart' which will use the source code knowledge to determine
            * what to generate. This will be a method of the form {@code setXxx()} for all types unless
            * the field is {@code final}. If the field is a final {@code Collection} or {@code Map}
            * of a known type then a set method is generated using {@code addAll} or {@code puAll}
            * &lt;p&gt;
            * Standard style strings are:
            * &lt;ul&gt;
            * &lt;li&gt;'' - do not generate any form of setter
            * &lt;li&gt;'smart' - process intelligently - uses 'set' unless final, when it will use 'setClearAddAll'
            * for common list types or 'setClearPutAll' for common map types and FlexiBean
            * &lt;li&gt;'private' - process as per 'smart' but set scope as private
            * &lt;li&gt;'protected' - process as per 'smart' but set scope as protected
            * &lt;li&gt;'set' - generates setXxx()
            * &lt;li&gt;'setClearAddAll' - generates setXxx() using field.clear() and field.addAll(newData)
            * &lt;li&gt;'setClearPutAll' - generates setXxx() using field.clear() and field.putAll(newData)
            * &lt;li&gt;'field' - generates direct access to the field, enabling a weird manual setter
            * &lt;li&gt;'manual' - a method named setXxx() must be manually provided at package scope or greater
            * &lt;li&gt;a pattern, see below
            * &lt;/ul&gt;
            * &lt;p&gt;
            * A pattern can be used for special behaviour.
            * The pattern is a complete piece of code.
            * For example, 'new Foo($value)' or '$field = $value.clone()'.&lt;br/&gt;
            * '$field' for the field to copy into.&lt;br/&gt;
            * '$value' for the value to copy from.&lt;br/&gt;
            * '&amp;lt;&amp;gt;' for the generics of the type including angle brackets.&lt;br/&gt;
            * '\n' for a new line (all lines must then include semi-colons).&lt;br/&gt;
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>set</name>
                <argument_list>()</argument_list>
                default "smart"
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Whether the generated getter should be declared with the {@code Override} annotation.
            * &lt;p&gt;
            * By default, the annotation is not added.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>overrideGet</name>
                <argument_list>()</argument_list>
                default false
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Whether the generated setter should be declared with the {@code Override} annotation.
            * &lt;p&gt;
            * By default, the annotation is not added.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>overrideSet</name>
                <argument_list>()</argument_list>
                default false
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * The exposed type of the property.
            * &lt;p&gt;
            * The style is used to control the exposed type of the property in
            * getters and setters, or similar.
            * &lt;p&gt;
            * This is used when the type of the field is not the same as the type
            * as should be used in public methods such as getters and setters.
            * &lt;p&gt;
            * By default, the declared type will be used as the exposed type.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>type</name>
                <argument_list>()</argument_list>
                default "smart"
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * The validator to use.
            * &lt;p&gt;
            * The property value may be validated by specifying this attribute.
            * By default no validation is performed.
            * The code generator places the validation into the set method and ensures that
            * new objects are validated correctly.
            * &lt;p&gt;
            * Custom validations, are written by writing a static method and referring to it.
            * For example, {@code public void checkMyValue(Integer val, String propertyName) ...}
            * The method generally has a {@code void} return, throwing an exception if validation fails.
            * There must be two arguments, the value and the property name. The value may be the
            * property type or a superclass (like Object). The property name should be a String.
            * &lt;p&gt;
            * Standard validation strings are:
            * &lt;ul&gt;
            * &lt;li&gt;'' - do not generate any form of validation
            * &lt;li&gt;'notNull' - suitable for checking that the value is non-null,
            * calls JodaBeanUtils.notNull() which throws an IllegalArgumentException
            * &lt;li&gt;'notEmpty' - suitable for checking that a string is non-null and non-empty,
            * calls JodaBeanUtils.notEmpty() which throws an IllegalArgumentException
            * &lt;li&gt;'{className}.{staticMethodName}' - a custom validation method, described above
            * &lt;/ul&gt;
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>validate</name>
                <argument_list>()</argument_list>
                default ""
            </decl>
            ;
        </decl_stmt>

    </default>
    }
</unit>
