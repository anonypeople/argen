<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\PropertyStyle.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.
            <name>beans</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * An enumeration of property styles.
        * &lt;p&gt;
        * A property may be read-only, read-write or write-only.
        * This enumeration models those options.
        * &lt;p&gt;
        * It is strongly recommended to use the methods, not compare against the enum values.
        *
        * @author Stephen Colebourne
        */
    </comment>
    <enum>
        <specifier>public</specifier>
        enum <name>PropertyStyle</name>
        <block>{

            <comment type="javadoc">/**
                * The property can be read and written.
                */
            </comment>
            <expr_stmt>
                <expr>
                    <name>READ_WRITE</name>
                </expr>
                ,
                <comment type="javadoc">/**
                    * The property is read-only.
                    */
                </comment>
                <expr>
                    <name>READ_ONLY</name>
                </expr>
                ,
                <comment type="javadoc">/**
                    * The property is write-only.
                    */
                </comment>
                <expr>
                    <name>WRITE_ONLY</name>
                </expr>
                ,
                <comment type="javadoc">/**
                    * The property is read-only but can be written via the builder.
                    */
                </comment>
                <expr>
                    <name>READ_ONLY_BUILDABLE</name>
                </expr>
                ,
                <comment type="javadoc">/**
                    * The property is derived.
                    * It is read-only.
                    */
                </comment>
                <expr>
                    <name>DERIVED</name>
                </expr>
                ,
                <comment type="javadoc">/**
                    * The property is immutable.
                    * It can be read and written via the builder.
                    */
                </comment>
                <expr>
                    <name>IMMUTABLE</name>
                </expr>
                ;
            </expr_stmt>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks whether the property is readable.
                * &lt;p&gt;
                * This checks if the property get method will succeed.
                *
                * @return true if the property can be read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isReadable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                            == <name>READ_WRITE</name> || <name>this</name> == <name>READ_ONLY</name> || <name>this
                        </name> == <name>READ_ONLY_BUILDABLE</name> || <name>this</name> == <name>DERIVED</name> || <name>
                            this
                        </name> ==
                            <name>IMMUTABLE</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the property is writable.
                * &lt;p&gt;
                * This checks if the property set method will succeed.
                *
                * @return true if the property can be written
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isWritable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                            == <name>READ_WRITE</name> || <name>this</name> ==
                            <name>WRITE_ONLY</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the property is read-only.
                * &lt;p&gt;
                * This checks if the property get method will succeed and the set method fail.
                * Read-only, derived and immutable properties will return true.
                * Note that an immutable property can be written via the builder.
                *
                * @return true if the property is derived
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isReadOnly</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                            == <name>READ_ONLY</name> || <name>this</name> == <name>READ_ONLY_BUILDABLE</name> || <name>
                            this
                        </name> == <name>DERIVED</name> || <name>this</name> ==
                            <name>IMMUTABLE</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the property can be used in the builder.
                * &lt;p&gt;
                * To check for round-trip behavior, use {@link #isSerializable()}.
                *
                * @return true if the property can be used in the builder
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isBuildable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                            == <name>READ_WRITE</name> || <name>this</name> == <name>WRITE_ONLY</name> || <name>this
                        </name> == <name>READ_ONLY_BUILDABLE</name> || <name>this</name> ==
                            <name>IMMUTABLE</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the property is derived.
                * &lt;p&gt;
                * A derived property has no instance variable.
                *
                * @return true if the property is derived
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDerived</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                            ==
                            <name>DERIVED</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the property can be serialized in a round-trip.
                * &lt;p&gt;
                * A property that is read-write or immutable can be round-trip serialized.
                *
                * @return true if the property is serializable
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSerializable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                            == <name>READ_WRITE</name> || <name>this</name> == <name>READ_ONLY_BUILDABLE</name> || <name>
                            this
                        </name> ==
                            <name>IMMUTABLE</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </enum>
</unit>
