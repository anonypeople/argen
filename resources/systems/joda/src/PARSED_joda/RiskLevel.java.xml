<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\test\java\org\joda\beans\gen\RiskLevel.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>gen</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * Mock enum with subclasses.
        *
        * @author Stephen Colebourne
        */
    </comment>
    <enum>
        <specifier>public</specifier>
        enum <name>RiskLevel</name>
        <super>
            <implements>implements
                <name>Risk</name>
            </implements>
        </super>
        <block>{

            <expr_stmt>
                <expr>
                    <name>LOW</name>
                    <block>{
                        @
                        <expr>
                            <name>Override</name>
                            public <name>int</name>
                            <call>
                                <name>level</name>
                                <argument_list>()</argument_list>
                            </call>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>
    },
    <expr_stmt>
        <expr>
            <name>MEDIUM</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    public <name>int</name>
                    <call>
                        <name>level</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },
    <expr_stmt>
        <expr>
            <name>HIGH</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    public <name>int</name>
                    <call>
                        <name>level</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>

    <function_decl>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>abstract</specifier>
            <name>int</name>
        </type>
        <name>level</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    }
</unit>
