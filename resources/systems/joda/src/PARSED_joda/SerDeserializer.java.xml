<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\main\java\org\joda\beans\ser\SerDeserializer.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>ser</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>BeanBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>MetaBean</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.
            <name>MetaProperty</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Assists with deserialization allowing migration of data from an old data format to a new one.
        * &lt;p&gt;
        * This allows beans stored under an old version to be read in by a newer version.
        * &lt;p&gt;
        * Methods are called in order as follows:
        * &lt;ol&gt;
        * &lt;li&gt;{@code lookupMetaBean}
        * &lt;li&gt;{@code createBuilder}
        * &lt;li&gt;{@code lookupMetaProperty}, then {@code setValue} - once per property
        * &lt;li&gt;{@code build}
        * &lt;/ol&gt;
        * &lt;p&gt;
        * A renamed property can be handled by overriding the {@code lookupMetaProperty}:
        * &lt;pre&gt;
        * public MetaProperty&lt;?&gt; findMetaProperty(Class&lt;?&gt; beanType, MetaBean metaBean, String propertyName)
        {
        * if ("firstName".equals(propertyName)) {
        * return metaBean.metaProperty("forename");
        * }
        * return super.findMetaProperty(beanType, metaBean, propertyName);
        * }
        * &lt;/pre&gt;
        * &lt;p&gt;
        * A property type change can be handled by overriding the {@code lookupMetaProperty}
        * and {@code setValue}:
        * &lt;pre&gt;
        * private MetaProperty&lt;String&gt; NUMBER_OF_CARS_STRING =
        * StandaloneMetaProperty.of("numberOfCars", SimplePerson.meta(), String.class);
        *
        * public MetaProperty&lt;?&gt; findMetaProperty(Class&lt;?&gt; beanType, MetaBean metaBean, String propertyName)
        {
        * if ("numberOfCars".equals(propertyName)) {
        * return NUMBER_OF_CARS_STRING; // replica of the old property
        * }
        * return super.findMetaProperty(beanType, metaBean, propertyName);
        * }
        *
        * public void setValue(BeanBuilder&lt;?&gt; builder, MetaProperty&lt;?&gt; metaProp, Object value) {
        * if (metaProp == NUMBER_OF_CARS_STRING &amp;&amp; value != null) {
        * String oldValue = value.toString();
        * switch (oldValue) {
        * case "One": value = 1; break;
        * case "Two": value = 2; break;
        * case "Lots": value = 3; break;
        * default: value = 0; break;
        * }
        * }
        * super.setValue(builder, metaProp, value);
        * }
        * &lt;/pre&gt;
        * &lt;p&gt;
        * A semantic change can be handled by overriding the {@code createBuilder}
        * and {@code build}, buffering the input to process at the end of the bean:
        * &lt;pre&gt;
        * public BeanBuilder&lt;?&gt; createBuilder(Class&lt;?&gt; beanType, MetaBean metaBean) {
        * return BufferingBeanBuilder.of(metaBean);
        * }
        *
        * public Object build(Class&lt;?&gt; beanType, BeanBuilder&lt;?&gt; builder) {
        * BufferingBeanBuilder&lt;?&gt; bld = (BufferingBeanBuilder&lt;?&gt;) builder;
        * if ("Stephen".equals(bld.getBuffer().get(SimplePerson.meta().forename())) &amp;&amp;
        * "Colebourne".equals(bld.getBuffer().get(SimplePerson.meta().surname()))) {
        * bld.set(SimplePerson.meta().forename(), "Steve");
        * }
        * return bld.build();
        * }
        * &lt;/pre&gt;
        *
        * @author Stephen Colebourne
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>SerDeserializer</name>
        <block>{

            <comment type="javadoc">/**
                * Lookup the meta-bean for the speecified type.
                * &lt;p&gt;
                * If the type is not a bean, then null may be returned.
                *
                * @param beanType the type being processed, not null
                * @return the meta-bean, null if not a bean type
                */
            </comment>
            <function_decl>
                <type>
                    <name>MetaBean</name>
                </type>
                <name>findMetaBean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>beanType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates the stateful builder that captures state as the parse progresses.
                * &lt;p&gt;
                * This is normally a {@code BeanBuilder} however any type may be returned.
                *
                * @param beanType the type being processed, not null
                * @param metaBean the meta-bean, null if not a bean type
                * @return the builder, null if not interested in the parse progress
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>BeanBuilder</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>beanType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MetaBean</name>
                            </type>
                            <name>metaBean</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Lookup the meta-property for the specified property name.
                * &lt;p&gt;
                * Return null if a property has been deleted, which will cause the parser
                * to discard the property.
                * &lt;p&gt;
                * Return a non-null meta-property to parse the property.
                * If the property was renamed, or had a type change, then the meta-property
                * should match the property as originally stored.
                *
                * @param beanType the type being processed, not null
                * @param metaBean the meta-bean, null if not a bean type
                * @param propertyName the property name being parsed, not null
                * @return the meta-property, null to ignore the property
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>MetaProperty</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>findMetaProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>beanType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MetaBean</name>
                            </type>
                            <name>metaBean</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the parsed value into the builder.
                *
                * @param builder the builder, null if not interested in the parse progress
                * @param metaProp the meta-property, not null
                * @param value the parsed value, may be null
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BeanBuilder</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>MetaProperty</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>metaProp</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Builds the resulting object.
                * &lt;p&gt;
                * This method finishes the builder and returns the final object.
                * The migrator could validate or manipulate data here once all data is parsed,
                * for example to default a missing field.
                *
                * @param beanType the type being processed, not null
                * @param builder the builder, null if not interested in the parse progress
                * @return the final built object, may be null
                */
            </comment>
            <function_decl>
                <type>
                    <name>Object</name>
                </type>
                <name>build</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>beanType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BeanBuilder</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
