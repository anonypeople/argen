<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\test\java\org\joda\beans\ser\xml\TestDeserializer.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>ser</name>.
            <name>xml</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>org</name>.<name>testng</name>.<name>Assert</name>.
            <name>fail</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>gen</name>.
            <name>SimplePerson</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>impl</name>.<name>flexi</name>.
            <name>FlexiBean</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>ser</name>.
            <name>JodaBeanSer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>ser</name>.
            <name>SerDeserializers</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>test</name>.
            <name>BeanAssert</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>joda</name>.<name>convert</name>.
            <name>RenameHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>testng</name>.<name>annotations</name>.
            <name>Test</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Test deserialization using XML.
        */
    </comment>
    <class>
        <annotation>@
            <name>Test</name>
        </annotation>
        <specifier>public</specifier>
        class <name>TestDeserializer</name>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_read_renamedType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xml</name> =
                            <init>
                                <expr>"&lt;bean type=\"org.joda.beans.FlexibleBean\"&gt;&lt;surname&gt;Smith&lt;/surname&gt;&lt;/bean&gt;"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>xmlReader</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>fail</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>RuntimeException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// expected</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>RenameHandler</name>.<name>INSTANCE</name>.
                                    <name>renamedType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"org.joda.beans.FlexibleBean"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>FlexiBean</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>parsed</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>xmlReader</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>FlexiBean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"surname"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Smith"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>BeanAssert</name>.
                                    <name>assertBeanEquals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parsed</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_read_renamedTypeLower</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xml</name> =
                            <init>
                                <expr>"&lt;bean&gt;" +
                                    "&lt;extra type=\"org.joda.beans.SPerson\"&gt;&lt;surname&gt;Smith&lt;/surname&gt;&lt;/extra&gt;"
                                    +
                                    "&lt;person type=\"SPerson\"&gt;&lt;surname&gt;Jones&lt;/surname&gt;&lt;/person&gt;"
                                    +
                                    "&lt;/bean&gt;"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>xmlReader</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>fail</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>RuntimeException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// expected</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>RenameHandler</name>.<name>INSTANCE</name>.
                                    <name>renamedType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"org.joda.beans.SPerson"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>SimplePerson</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>parsed</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>xmlReader</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>FlexiBean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person1</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Smith"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person2</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Jones"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"extra"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>BeanAssert</name>.
                                    <name>assertBeanEquals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parsed</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_read_withSemanticChangeDeserializer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SerDeserializers</name>
                            </type>
                            <name>desers</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SerDeserializers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>desers</name>.
                                    <name>register</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>SimplePerson</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>MockSemanticChangeDeserializer</name>.
                                                <name>INSTANCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xml</name> =
                            <init>
                                <expr>"&lt;bean&gt;" +
                                    "&lt;person1 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;forename&gt;John&lt;/forename&gt;&lt;surname&gt;Smith&lt;/surname&gt;&lt;/person1&gt;"
                                    +
                                    "&lt;person2 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;forename&gt;Stephen&lt;/forename&gt;&lt;surname&gt;Colebourne&lt;/surname&gt;&lt;/person2&gt;"
                                    +
                                    "&lt;/bean&gt;"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>parsed</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>withDeserializers</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>desers</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>xmlReader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>FlexiBean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person1</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setForename</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"John"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Smith"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person2</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setForename</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Steve"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// changed</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Colebourne"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person2"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>BeanAssert</name>.
                                    <name>assertBeanEquals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parsed</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_read_withRenameDeserializer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SerDeserializers</name>
                            </type>
                            <name>desers</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SerDeserializers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>desers</name>.
                                    <name>register</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>SimplePerson</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>MockRenameDeserializer</name>.
                                                <name>INSTANCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xml</name> =
                            <init>
                                <expr>"&lt;bean&gt;" +
                                    "&lt;person1 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;firstName&gt;John&lt;/firstName&gt;&lt;surname&gt;Smith&lt;/surname&gt;&lt;/person1&gt;"
                                    +
                                    "&lt;person2 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;firstName&gt;Stephen&lt;/firstName&gt;&lt;surname&gt;Colebourne&lt;/surname&gt;&lt;/person2&gt;"
                                    +
                                    "&lt;/bean&gt;"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>parsed</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>withDeserializers</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>desers</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>xmlReader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>FlexiBean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person1</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setForename</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"John"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Smith"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person2</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setForename</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Stephen"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Colebourne"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person2"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>BeanAssert</name>.
                                    <name>assertBeanEquals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parsed</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_read_withTypeChangeDeserializer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SerDeserializers</name>
                            </type>
                            <name>desers</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SerDeserializers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>desers</name>.
                                    <name>register</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>SimplePerson</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>MockTypeChangeDeserializer</name>.
                                                <name>INSTANCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xml</name> =
                            <init>
                                <expr>"&lt;bean&gt;" +
                                    "&lt;person1 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;numberOfCars&gt;None&lt;/numberOfCars&gt;&lt;surname&gt;Smith&lt;/surname&gt;&lt;/person1&gt;"
                                    +
                                    "&lt;person2 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;numberOfCars&gt;Two&lt;/numberOfCars&gt;&lt;surname&gt;Colebourne&lt;/surname&gt;&lt;/person2&gt;"
                                    +
                                    "&lt;/bean&gt;"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>parsed</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                            <name>withDeserializers</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>desers</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>xmlReader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xml</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>FlexiBean</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FlexiBean</name>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>FlexiBean</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person1</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setNumberOfCars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person1</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Smith"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SimplePerson</name>
                            </type>
                            <name>person2</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SimplePerson</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setNumberOfCars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>person2</name>.
                                    <name>setSurname</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Colebourne"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expected</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"person2"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>person2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>BeanAssert</name>.
                                    <name>assertBeanEquals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parsed</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(expectedExceptions = RuntimeException.class)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_read_withBadEntity</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SerDeserializers</name>
                            </type>
                            <name>desers</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SerDeserializers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>desers</name>.
                                    <name>register</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>SimplePerson</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>MockTypeChangeDeserializer</name>.
                                                <name>INSTANCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xml</name> =
                            <init>
                                <expr>"&lt;?xml version=\"1.0\" encoding =\"UTF-8\"?&gt;" +
                                    "&lt;!DOCTYPE foobar[&lt;!ENTITY x100 \"foobar\"&gt;"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>99</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt; 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>xml</name>
                                    += "&lt;!ENTITY x" + <name>i</name> + " \"&amp;x" + (<name>i</name> + 1) + ";&amp;x"
                                    + (<name>i</name> + 1) + ";\"&gt;"
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>xml</name>
                            += "]&gt;&lt;bean&gt;" +
                            "&lt;person1 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;numberOfCars&gt;None&lt;/numberOfCars&gt;&lt;surname&gt;Smith
                            &amp;x1;&lt;/surname&gt;&lt;/person1&gt;" +
                            "&lt;person2 type=\"org.joda.beans.gen.SimplePerson\"&gt;&lt;numberOfCars&gt;Two&lt;/numberOfCars&gt;&lt;surname&gt;Colebourne&lt;/surname&gt;&lt;/person2&gt;"
                            +
                            "&lt;/bean&gt;"
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>JodaBeanSer</name>.<name>COMPACT</name>.
                                    <name>withDeserializers</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>desers</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>xmlReader</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>read</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>xml</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>FlexiBean</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
