<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\joda\src\test\java\org\joda\beans\ser\json\TestJsonInput.java">
    <comment type="block">/*
        * Copyright 2001-2014 Stephen Colebourne
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>joda</name>.<name>beans</name>.<name>ser</name>.
            <name>json</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>org</name>.<name>testng</name>.<name>Assert</name>.
            <name>assertEquals</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringReader</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>testng</name>.<name>annotations</name>.
            <name>DataProvider</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>testng</name>.<name>annotations</name>.
            <name>Test</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Test.
        */
    </comment>
    <class>
        <annotation>@
            <name>Test</name>
        </annotation>
        <specifier>public</specifier>
        class <name>TestJsonInput</name>
        <block>{

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "string")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_string</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>""</expr>, <expr>""</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"normal text"</expr>, <expr>"normal text"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\\""</expr>, <expr>"\""</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\\\"</expr>, <expr>"\\"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"a\\\\b"</expr>, <expr>"a\\b"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"a\\\"b"</expr>, <expr>"a\"b"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"a\\\\\\\"b"</expr>, <expr>"a\\\"b"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"a\\nb"</expr>, <expr>"a\nb"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"a\\fb"</expr>, <expr>"a\fb"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"a\\/b"</expr>, <expr>"a/b"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"foo\\r\\nbar"</expr>, <expr>"foo\r\nbar"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"foo\\tbar"</expr>, <expr>"foo\tbar"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"foo\\u2028bar\\u2029\u2030"</expr>, <expr>
                                        "foo\u2028bar\u2029\u2030"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"foo\\u0000bar"</expr>, <expr>"foo\u0000bar"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"foo\\u001bbar"</expr>, <expr>"foo\u001bbar"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\u0001\\b\\u000f\\u0010\\u001f"</expr>, <expr>
                                        "\u0001\u0008\u000f\u0010\u001f"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\u000a\\u000A\\u0010\\u001e\\u001E"</expr>, <expr>
                                        "\n\n\u0010\u001e\u001e"</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>parseString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string", expectedExceptions = IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseString_endOfFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>parseString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>'"' + <name>text</name> + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptString_whitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>" \t\r\n \"" + <name>text</name> + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptString_pushback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>pushBack</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'"'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "stringBad")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_stringBad</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"\\x"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\u1"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\u01"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\u001"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\u000g"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\\urubbish"</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "stringBad", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseString_bad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>parseString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "stringBad", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptString_bad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>'"' + <name>text</name> + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>acceptString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "stringBad", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptString_bad_whitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>" \t\r\n \"" + <name>text</name> + '"'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>acceptString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseObjectKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + "\":"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>parseObjectKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseObjectKey_whitspace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + "\" \t\n\r:"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>parseObjectKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptObjectKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + "\":"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptObjectKey</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>JsonEvent</name>.
                                                                <name>STRING</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptObjectKey_whitspace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + "\" \t\n\r:"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptObjectKey</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>JsonEvent</name>.
                                                                <name>STRING</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "string", expectedExceptions = IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptObjectKey_notString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + "\":"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptObjectKey</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>JsonEvent</name>.
                                                                <name>OBJECT</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_acceptObjectKey_pushBack</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>":"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>pushBackObjectKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"key"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>acceptObjectKey</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>JsonEvent</name>.
                                                                <name>STRING</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"key"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "numberIntegral")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_numberIntegral</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"0"</expr>, <expr>0L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1"</expr>, <expr>1L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"9"</expr>, <expr>9L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"10"</expr>, <expr>10L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"19"</expr>, <expr>19L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123456789"</expr>, <expr>123456789L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1234567890123456789"</expr>, <expr>1234567890123456789L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-0"</expr>, <expr>0L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1"</expr>, <expr>-1L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-9"</expr>, <expr>-9L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-10"</expr>, <expr>-10L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-19"</expr>, <expr>-19L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-123456789"</expr>, <expr>-123456789L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1234567890123456789"</expr>, <expr>-1234567890123456789L</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "numberIntegral")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseNumberIntegral</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + '}'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>readEvent</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NUMBER_INTEGRAL</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>parseNumberIntegral</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>readEvent</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>OBJECT_END</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "numberIntegral", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseNumberIntegral_endOfFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>readEvent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "numberFloating")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_numberFloating</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"0.0"</expr>, <expr>0d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1.0"</expr>, <expr>1d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"9.0"</expr>, <expr>9d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"10.0"</expr>, <expr>10d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"19.0"</expr>, <expr>19d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123456789.0"</expr>, <expr>123456789d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1234567890123456789.0"</expr>, <expr>1234567890123456789d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-0.0"</expr>, <expr>0d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1.0"</expr>, <expr>-1d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-9.0"</expr>, <expr>-9d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-10.0"</expr>, <expr>-10d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-19.0"</expr>, <expr>-19d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-123456789.0"</expr>, <expr>-123456789d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1234567890123456789.0"</expr>, <expr>-1234567890123456789d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"0.0001"</expr>, <expr>0.0001d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1.12345678"</expr>, <expr>1.12345678d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"9.0e2"</expr>, <expr>9.0e2d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"9e2"</expr>, <expr>9e2d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123.456e20"</expr>, <expr>123.456e20d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123.456e+20"</expr>, <expr>123.456e+20d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123.456e-20"</expr>, <expr>123.456e-20d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"9.0E2"</expr>, <expr>9.0e2d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"9E2"</expr>, <expr>9e2d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123.456E20"</expr>, <expr>123.456e20d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123.456E+20"</expr>, <expr>123.456e+20d</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"123.456E-20"</expr>, <expr>123.456e-20d</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "numberFloating")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseNumberFloating</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + '}'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>readEvent</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NUMBER_FLOATING</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>parseNumberFloating</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0.00001d</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>readEvent</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>OBJECT_END</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "numberFloating", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseNumberFloating_endOfFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>readEvent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "numberBad")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_numberBad</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"-"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"x"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"e"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"E"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1e"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"2E"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1+"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1-"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1."</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"00"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"001"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"00.0"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1.1e3E4"</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "numberBad", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_parseNumberFloating_bad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + '}'
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>readEvent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "event")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_event</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"null"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NULL</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"true"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>TRUE</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"false"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>FALSE</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"{"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>OBJECT</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"}"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>OBJECT_END</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"["</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>ARRAY</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"]"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>ARRAY_END</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\""</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>STRING</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1}"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NUMBER_INTEGRAL</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1}"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NUMBER_INTEGRAL</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1.0}"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NUMBER_FLOATING</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1.2}"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>NUMBER_FLOATING</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>":"</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>COLON</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>","</expr>,
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>COMMA</name>
                                            </name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "event")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_readEvent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>JsonEvent</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>readEvent</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "eventBad")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_eventBad</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"nul"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"nulx"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"nx"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"tru"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"trux"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"tx"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"fals"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"fx"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"x"</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "eventBad", expectedExceptions =
                            IllegalArgumentException.class)
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_readEvent_bad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>readEvent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <function>
                <type>
                    <annotation>@
                        <name>DataProvider</name>
                        <argument_list>(name = "skip")</argument_list>
                    </annotation>
                    <name>Object</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>data_skip</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                            <block>{
                                <expr>
                                    <block>{<expr>"null"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"true"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"false"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\"\""</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"\"text\""</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"1.0"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"-1.2"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"{}"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"{\"a\":2}"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"{\"a\":2,\"b\":{\"aa\":[1,2,3]}}"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"[]"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"[1,2,3]"</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>"[1,[\"\"],{\"a\":2}]"</expr>}
                                    </block>
                                </expr>
                                ,
                                }
                            </block>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(dataProvider = "skip")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_skip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>text</name>
                                                                    + ','
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>skipData</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>input</name>.
                                                    <name>readEvent</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>JsonEvent</name>.
                                                <name>COMMA</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                        <argument_list>(expectedExceptions = IllegalArgumentException.class)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>test_skip_bad</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>JsonInput</name>
                            </type>
                            <name>input</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>JsonInput</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>StringReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>","</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>skipData</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
