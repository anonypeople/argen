/*
 *  Copyright 2001-2014 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.beans.gen;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;

/**
 * Mock JavaBean, used for testing.
 * 
 * @author Stephen Colebourne
 */
@BeanDefinition(builderScope = "public")
public final class ImmTypes<T extends Comparable<T>> implements ImmutableBean {

    @PropertyDefinition(validate = "notNull")
    private final ImmutableList<?> listWild;
    @PropertyDefinition(validate = "notNull", type = "List<?>")
    private final List<Object> listWildPublic1;
    @PropertyDefinition(validate = "notNull", type = "ImmutableList<?>")
    private final ImmutableList<Object> listWildPublic2;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ImmTypes}.
     * @return the meta-bean, not null
     */
    @SuppressWarnings("rawtypes")
    public static ImmTypes.Meta meta() {
        return ImmTypes.Meta.INSTANCE;
    }

    /**
     * The meta-bean for {@code ImmTypes}.
     * @param <R>  the bean's generic type
     * @param cls  the bean's generic type
     * @return the meta-bean, not null
     */
    @SuppressWarnings("unchecked")
    public static <R extends Comparable<R>> ImmTypes.Meta<R> metaImmTypes(Class<R> cls) {
        return ImmTypes.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(ImmTypes.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @param <T>  the type
     * @return the builder, not null
     */
    public static <T extends Comparable<T>> ImmTypes.Builder<T> builder() {
        return new ImmTypes.Builder<T>();
    }

    private ImmTypes(
            List<?> listWild,
            List<?> listWildPublic1,
            List<?> listWildPublic2) {
        JodaBeanUtils.notNull(listWild, "listWild");
        JodaBeanUtils.notNull(listWildPublic1, "listWildPublic1");
        JodaBeanUtils.notNull(listWildPublic2, "listWildPublic2");
        this.listWild = ImmutableList.copyOf(listWild);
        this.listWildPublic1 = ImmutableList.copyOf(listWildPublic1);
        this.listWildPublic2 = ImmutableList.copyOf(listWildPublic2);
    }

    @SuppressWarnings("unchecked")
    @Override
    public ImmTypes.Meta<T> metaBean() {
        return ImmTypes.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the listWild.
     * @return the value of the property, not null
     */
    public ImmutableList<?> getListWild() {
        return listWild;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the listWildPublic1.
     * @return the value of the property, not null
     */
    public List<?> getListWildPublic1() {
        return listWildPublic1;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the listWildPublic2.
     * @return the value of the property, not null
     */
    public ImmutableList<?> getListWildPublic2() {
        return listWildPublic2;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder<T> toBuilder() {
        return new Builder<T>(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ImmTypes<?> other = (ImmTypes<?>) obj;
            return JodaBeanUtils.equal(getListWild(), other.getListWild()) &&
                    JodaBeanUtils.equal(getListWildPublic1(), other.getListWildPublic1()) &&
                    JodaBeanUtils.equal(getListWildPublic2(), other.getListWildPublic2());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getListWild());
        hash = hash * 31 + JodaBeanUtils.hashCode(getListWildPublic1());
        hash = hash * 31 + JodaBeanUtils.hashCode(getListWildPublic2());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("ImmTypes{");
        buf.append("listWild").append('=').append(getListWild()).append(',').append(' ');
        buf.append("listWildPublic1").append('=').append(getListWildPublic1()).append(',').append(' ');
        buf.append("listWildPublic2").append('=').append(JodaBeanUtils.toString(getListWildPublic2()));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ImmTypes}.
     * @param <T>  the type
     */
    public static final class Meta<T extends Comparable<T>> extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        @SuppressWarnings("rawtypes")
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code listWild} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<ImmutableList<?>> listWild = DirectMetaProperty.ofImmutable(
                this, "listWild", ImmTypes.class, (Class) ImmutableList.class);
        /**
         * The meta-property for the {@code listWildPublic1} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<?>> listWildPublic1 = DirectMetaProperty.ofImmutable(
                this, "listWildPublic1", ImmTypes.class, (Class) List.class);
        /**
         * The meta-property for the {@code listWildPublic2} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<ImmutableList<?>> listWildPublic2 = DirectMetaProperty.ofImmutable(
                this, "listWildPublic2", ImmTypes.class, (Class) ImmutableList.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "listWild",
                "listWildPublic1",
                "listWildPublic2");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 1345738120:  // listWild
                    return listWild;
                case 1874924608:  // listWildPublic1
                    return listWildPublic1;
                case 1874924609:  // listWildPublic2
                    return listWildPublic2;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public ImmTypes.Builder<T> builder() {
            return new ImmTypes.Builder<T>();
        }

        @SuppressWarnings({"unchecked", "rawtypes" })
        @Override
        public Class<? extends ImmTypes<T>> beanType() {
            return (Class) ImmTypes.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code listWild} property.
         * @return the meta-property, not null
         */
        public MetaProperty<ImmutableList<?>> listWild() {
            return listWild;
        }

        /**
         * The meta-property for the {@code listWildPublic1} property.
         * @return the meta-property, not null
         */
        public MetaProperty<List<?>> listWildPublic1() {
            return listWildPublic1;
        }

        /**
         * The meta-property for the {@code listWildPublic2} property.
         * @return the meta-property, not null
         */
        public MetaProperty<ImmutableList<?>> listWildPublic2() {
            return listWildPublic2;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1345738120:  // listWild
                    return ((ImmTypes<?>) bean).getListWild();
                case 1874924608:  // listWildPublic1
                    return ((ImmTypes<?>) bean).getListWildPublic1();
                case 1874924609:  // listWildPublic2
                    return ((ImmTypes<?>) bean).getListWildPublic2();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code ImmTypes}.
     * @param <T>  the type
     */
    public static final class Builder<T extends Comparable<T>> extends DirectFieldsBeanBuilder<ImmTypes<T>> {

        private List<?> listWild = new ArrayList<Object>();
        private List<?> listWildPublic1 = new ArrayList<Object>();
        private List<?> listWildPublic2 = new ArrayList<Object>();

        /**
         * Restricted constructor.
         */
        private Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(ImmTypes<T> beanToCopy) {
            this.listWild = new ArrayList<Object>(beanToCopy.getListWild());
            this.listWildPublic1 = new ArrayList<Object>(beanToCopy.getListWildPublic1());
            this.listWildPublic2 = new ArrayList<Object>(beanToCopy.getListWildPublic2());
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case 1345738120:  // listWild
                    return listWild;
                case 1874924608:  // listWildPublic1
                    return listWildPublic1;
                case 1874924609:  // listWildPublic2
                    return listWildPublic2;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder<T> set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case 1345738120:  // listWild
                    this.listWild = (List<?>) newValue;
                    break;
                case 1874924608:  // listWildPublic1
                    this.listWildPublic1 = (List<?>) newValue;
                    break;
                case 1874924609:  // listWildPublic2
                    this.listWildPublic2 = (List<?>) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder<T> set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public Builder<T> setString(String propertyName, String value) {
            setString(meta().metaProperty(propertyName), value);
            return this;
        }

        @Override
        public Builder<T> setString(MetaProperty<?> property, String value) {
            super.setString(property, value);
            return this;
        }

        @Override
        public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
            super.setAll(propertyValueMap);
            return this;
        }

        @Override
        public ImmTypes<T> build() {
            return new ImmTypes<T>(
                    listWild,
                    listWildPublic1,
                    listWildPublic2);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the {@code listWild} property in the builder.
         * @param listWild  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder<T> listWild(List<?> listWild) {
            JodaBeanUtils.notNull(listWild, "listWild");
            this.listWild = listWild;
            return this;
        }

        /**
         * Sets the {@code listWildPublic1} property in the builder.
         * @param listWildPublic1  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder<T> listWildPublic1(List<?> listWildPublic1) {
            JodaBeanUtils.notNull(listWildPublic1, "listWildPublic1");
            this.listWildPublic1 = listWildPublic1;
            return this;
        }

        /**
         * Sets the {@code listWildPublic2} property in the builder.
         * @param listWildPublic2  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder<T> listWildPublic2(List<?> listWildPublic2) {
            JodaBeanUtils.notNull(listWildPublic2, "listWildPublic2");
            this.listWildPublic2 = listWildPublic2;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(128);
            buf.append("ImmTypes.Builder{");
            buf.append("listWild").append('=').append(JodaBeanUtils.toString(listWild)).append(',').append(' ');
            buf.append("listWildPublic1").append('=').append(JodaBeanUtils.toString(listWildPublic1)).append(',').append(' ');
            buf.append("listWildPublic2").append('=').append(JodaBeanUtils.toString(listWildPublic2));
            buf.append('}');
            return buf.toString();
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
