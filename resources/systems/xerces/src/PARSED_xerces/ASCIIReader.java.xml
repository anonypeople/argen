<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\io\ASCIIReader.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>MessageFormatter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>msg</name>.
            <name>XMLMessageFormatter</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A simple ASCII byte reader. This is an optimized reader for reading
        * byte streams that only contain 7-bit ASCII characters.
        *
        * @xerces.internal
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: ASCIIReader.java,v 1.8 2004/10/04 22:07:41 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>ASCIIReader</name>
        <super>
            <extends>extends
                <name>Reader</name>
            </extends>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default byte buffer size (2048). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DEFAULT_BUFFER_SIZE</name> =
                    <init>
                        <expr>2048</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Input stream. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>InputStream</name>
                    </type>
                    <name>fInputStream</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Byte buffer. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>fBuffer</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// message formatter; used to produce localized</comment>
            <comment type="line">// exception messages</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>MessageFormatter</name>
                    </type>
                    <name>fFormatter</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//Locale to use for messages</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Locale</name>
                    </type>
                    <name>fLocale</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Constructs an ASCII reader from the specified input stream
                * using the default buffer size.
                *
                * @param inputStream The input stream.
                * @param messageFormatter the MessageFormatter to use to message reporting.
                * @param locale the Locale for which messages are to be reported
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ASCIIReader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>inputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MessageFormatter</name>
                            </type>
                            <name>messageFormatter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>inputStream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>DEFAULT_BUFFER_SIZE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>messageFormatter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>locale</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(InputStream, MessageFormatter, Locale)</comment>

            <comment type="javadoc">/**
                * Constructs an ASCII reader from the specified input stream
                * and buffer size.
                *
                * @param inputStream The input stream.
                * @param size The initial buffer size.
                * @param messageFormatter the MessageFormatter to use to message reporting.
                * @param locale the Locale for which messages are to be reported
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ASCIIReader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>inputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>MessageFormatter</name>
                            </type>
                            <name>messageFormatter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fInputStream</name>
                            =
                            <name>inputStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBuffer</name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>
                                        <name>size</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fFormatter</name>
                            =
                            <name>messageFormatter</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fLocale</name>
                            =
                            <name>locale</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(InputStream,int, MessageFormatter, Locale)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Reader methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Read a single character. This method will block until a character is
                * available, an I/O error occurs, or the end of the stream is reached.
                *
                * &lt;p&gt; Subclasses that intend to support efficient single-character input
                * should override this method.
                *
                * @return The character read, as an integer in the range 0 to 127
                * (&lt;tt&gt;0x00-0x7f&lt;/tt&gt;), or -1 if the end of the stream has
                * been reached
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b0</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fInputStream</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>b0</name>
                                &gt;= 0x80
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>MalformedByteSequenceException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fFormatter</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fLocale</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>XMLMessageFormatter</name>.
                                                            <name>XML_DOMAIN</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"InvalidASCII"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <call>
                                                                    <name><name>Integer</name>.
                                                                        <name>toString</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>b0</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>b0</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// read():int</comment>

            <comment type="javadoc">/**
                * Read characters into a portion of an array. This method will block
                * until some input is available, an I/O error occurs, or the end of the
                * stream is reached.
                *
                * @param ch Destination buffer
                * @param offset Offset at which to start storing characters
                * @param length Maximum number of characters to read
                *
                * @return The number of characters read, or -1 if the end of the
                * stream has been reached
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>
                                <name>ch</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>length</name>
                                &gt;
                                <name><name>fBuffer</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>length</name>
                                        =
                                        <name><name>fBuffer</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fInputStream</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fBuffer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>count</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>b0</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>fBuffer</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>b0</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>MalformedByteSequenceException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fFormatter</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fLocale</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>XMLMessageFormatter</name>.
                                                                    <name>XML_DOMAIN</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"InvalidASCII"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Integer</name>.
                                                                                <name>toString</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b0</name>
                                                                                        &amp; 0x0FF
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>ch</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                +
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>char</name>)
                                    <name>b0</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>count</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// read(char[],int,int)</comment>

            <comment type="javadoc">/**
                * Skip characters. This method will block until some characters are
                * available, an I/O error occurs, or the end of the stream is reached.
                *
                * @param n The number of characters to skip
                *
                * @return The number of characters actually skipped
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>skip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fInputStream</name>.
                                    <name>skip</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// skip(long):long</comment>

            <comment type="javadoc">/**
                * Tell whether this stream is ready to be read.
                *
                * @return True if the next read() is guaranteed not to block for input,
                * false otherwise. Note that returning false does not guarantee that the
                * next read will block.
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>ready</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// ready()</comment>

            <comment type="javadoc">/**
                * Tell whether this stream supports the mark() operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>markSupported</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fInputStream</name>.
                                    <name>markSupported</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// markSupported()</comment>

            <comment type="javadoc">/**
                * Mark the present position in the stream. Subsequent calls to reset()
                * will attempt to reposition the stream to this point. Not all
                * character-input streams support the mark() operation.
                *
                * @param readAheadLimit Limit on the number of characters that may be
                * read while still preserving the mark. After
                * reading this many characters, attempting to
                * reset the stream may fail.
                *
                * @exception IOException If the stream does not support mark(),
                * or if some other I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>mark</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>readAheadLimit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fInputStream</name>.
                                    <name>mark</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>readAheadLimit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// mark(int)</comment>

            <comment type="javadoc">/**
                * Reset the stream. If the stream has been marked, then attempt to
                * reposition it at the mark. If the stream has not been marked, then
                * attempt to reset it in some way appropriate to the particular stream,
                * for example by repositioning it to its starting point. Not all
                * character-input streams support the reset() operation, and some support
                * reset() without supporting mark().
                *
                * @exception IOException If the stream has not been marked,
                * or if the mark has been invalidated,
                * or if the stream does not support reset(),
                * or if some other I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fInputStream</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// reset()</comment>

            <comment type="javadoc">/**
                * Close the stream. Once a stream has been closed, further read(),
                * ready(), mark(), or reset() invocations will throw an IOException.
                * Closing a previously-closed stream, however, has no effect.
                *
                * @exception IOException If an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fInputStream</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// close()</comment>

            }
        </block>
    </class>
    <comment type="line">// class ASCIIReader</comment>
</unit>
