<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\ASContentModel.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * @deprecated
        * The content model of a declared element.
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ASContentModel</name>
        <super>
            <extends>extends
                <name>ASObject</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Signifies unbounded upper limit. The MAX_VALUE value is
                * &lt;code&gt;0xFFFFFFFF FFFFFFFF&lt;/code&gt;. This needs to be better defined in
                * the generated bindings.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>AS_UNBOUNDED</name>              =
                    <init>
                        <expr>
                            <name><name>Integer</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// ASContentModelType</comment>
            <comment type="javadoc">/**
                * This constant value signifies a sequence operator. For example, in a
                * DTD, this would be the '&lt;code&gt;,&lt;/code&gt;' operator.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>AS_SEQUENCE</name>               =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This constant value signifies a choice operator. For example, in a DTD,
                * this would be the '&lt;code&gt;|&lt;/code&gt;' operator.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>AS_CHOICE</name>                 =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * All of the above.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>AS_ALL</name>                    =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * None of the above, i.e., neither a choice nor sequence operator.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>AS_NONE</name>                   =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * One of &lt;code&gt;AS_CHOICE&lt;/code&gt;, &lt;code&gt;AS_SEQUENCE&lt;/code&gt;,
                * &lt;code&gt;AS_ALL&lt;/code&gt; or &lt;code&gt;AS_NONE&lt;/code&gt;. The operator is applied
                * to all the components(ASObjects) in the &lt;code&gt;subModels&lt;/code&gt;. For
                * example, if the list operator is &lt;code&gt;AS_CHOICE&lt;/code&gt; and the
                * components in subModels are a, b and c then the abstract schema for
                * the element being declared is &lt;code&gt;(a|b|c)&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getListOperator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * One of &lt;code&gt;AS_CHOICE&lt;/code&gt;, &lt;code&gt;AS_SEQUENCE&lt;/code&gt;,
                * &lt;code&gt;AS_ALL&lt;/code&gt; or &lt;code&gt;AS_NONE&lt;/code&gt;. The operator is applied
                * to all the components(ASObjects) in the &lt;code&gt;subModels&lt;/code&gt;. For
                * example, if the list operator is &lt;code&gt;AS_CHOICE&lt;/code&gt; and the
                * components in subModels are a, b and c then the abstract schema for
                * the element being declared is &lt;code&gt;(a|b|c)&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setListOperator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>listOperator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * min occurrence for this content particle. Its value may be 0 or a
                * positive integer.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getMinOccurs</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * min occurrence for this content particle. Its value may be 0 or a
                * positive integer.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMinOccurs</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>minOccurs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * maximum occurrence for this content particle. Its value may be
                * &lt;code&gt;0&lt;/code&gt;, a positive integer, or &lt;code&gt;AS_UNBOUNDED&lt;/code&gt; to
                * indicate that no upper limit has been set.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getMaxOccurs</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * maximum occurrence for this content particle. Its value may be
                * &lt;code&gt;0&lt;/code&gt;, a positive integer, or &lt;code&gt;AS_UNBOUNDED&lt;/code&gt; to
                * indicate that no upper limit has been set.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMaxOccurs</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxOccurs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Pointers to &lt;code&gt;ASObject&lt;/code&gt;s such as
                * &lt;code&gt; ASElementDeclaration&lt;/code&gt;s and further
                * &lt;code&gt;ASContentModel&lt;/code&gt;s.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASObjectList</name>
                </type>
                <name>getSubModels</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Pointers to &lt;code&gt;ASObject&lt;/code&gt;s such as
                * &lt;code&gt; ASElementDeclaration&lt;/code&gt;s and further
                * &lt;code&gt;ASContentModel&lt;/code&gt;s.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSubModels</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASObjectList</name>
                            </type>
                            <name>subModels</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes the &lt;code&gt;ASObject&lt;/code&gt; in the submodel. Nodes that already
                * exist in the list are moved as needed.
                * @param oldNode The node to be removed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removesubModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASObject</name>
                            </type>
                            <name>oldNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Inserts a new node in the submodel. Nodes that already exist in the
                * list are moved as needed.
                * @param newNode The new node to be inserted.
                * @exception DOMASException
                * &lt;code&gt;DUPLICATE_NAME_ERR&lt;/code&gt;: Raised if a element declaration
                * already exists with the same name within an &lt;code&gt;AS_CHOICE&lt;/code&gt;
                * operator.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>insertsubModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASObject</name>
                            </type>
                            <name>newNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Appends a new node to the end of the list representing the
                * &lt;code&gt;subModels&lt;/code&gt;.
                * @param newNode The new node to be appended.
                * @return the length of the &lt;code&gt;subModels&lt;/code&gt;.
                * @exception DOMASException
                * &lt;code&gt;DUPLICATE_NAME_ERR&lt;/code&gt;: Raised if a element declaration
                * already exists with the same name within an &lt;code&gt;AS_CHOICE&lt;/code&gt;
                * operator.
                * &lt;br&gt; &lt;code&gt;TYPE_ERR&lt;/code&gt;: Raised if type is neither an
                * &lt;code&gt;ASContentModel&lt;/code&gt; nor an &lt;code&gt;ASElementDeclaration&lt;/code&gt;
                * .
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>appendsubModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASObject</name>
                            </type>
                            <name>newNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
