<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\ASModel.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @deprecated
        * To begin with, an abstract schema is a generic structure that could
        * contain both internal and external subsets. An &lt;code&gt;ASModel&lt;/code&gt; is an
        * abstract object that could map to a DTD , an XML Schema , a database
        * schema, etc. An &lt;code&gt;ASModel&lt;/code&gt; could represent either an internal
        * or an external subset; hence an abstract schema could be composed of an
        * &lt;code&gt;ASModel&lt;/code&gt; representing the internal subset and an
        * &lt;code&gt;ASModel&lt;/code&gt; representing the external subset. Note that the
        * &lt;code&gt;ASModel&lt;/code&gt; representing the external subset could consult the
        * &lt;code&gt;ASModel&lt;/code&gt; representing the internal subset. Furthermore, the
        * &lt;code&gt;ASModel&lt;/code&gt; representing the internal subset could be set to
        * null by the &lt;code&gt;setInternalAS&lt;/code&gt; method as a mechanism for
        * "removal". In addition, only one &lt;code&gt;ASModel&lt;/code&gt; representing the
        * external subset can be specified as "active" and it is possible that none
        * are "active". Finally, the &lt;code&gt;ASModel&lt;/code&gt; contains the factory
        * methods needed to create a various types of ASObjects like
        * &lt;code&gt;ASElementDeclaration&lt;/code&gt;, &lt;code&gt;ASAttributeDeclaration&lt;/code&gt;,
        * etc.
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ASModel</name>
        <super>
            <extends>extends
                <name>ASObject</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ASModel&lt;/code&gt; defines the document
                * structure in terms of namespaces and local names ; &lt;code&gt;false&lt;/code&gt;
                * if the document structure is defined only in terms of
                * &lt;code&gt;QNames&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getIsNamespaceAware</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * 0 if used internally, 1 if used externally, 2 if not all. An exception
                * will be raised if it is incompatibly shared or in use as an internal
                * subset.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getUsageLocation</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The URI reference.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAsLocation</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * The URI reference.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAsLocation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>asLocation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The hint to locating an ASModel.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAsHint</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * The hint to locating an ASModel.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAsHint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>asHint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Instead of returning an all-in-one &lt;code&gt;ASObject&lt;/code&gt; with
                * &lt;code&gt;ASModel&lt;/code&gt; methods, have discernible top-level/"global"
                * element declarations. If one attempts to add, set, or remove a node
                * type other than the intended one, a hierarchy exception (or
                * equivalent is thrown).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASNamedObjectMap</name>
                </type>
                <name>getElementDeclarations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Instead of returning an all-in-one &lt;code&gt;ASObject&lt;/code&gt; with
                * &lt;code&gt;ASModel&lt;/code&gt; methods, have discernible top-level/"global"
                * attribute declarations. If one attempts to add, set, or remove a node
                * type other than the intended one, a hierarchy exception (or
                * equivalent is thrown).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASNamedObjectMap</name>
                </type>
                <name>getAttributeDeclarations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Instead of returning an all-in-one &lt;code&gt;ASObject&lt;/code&gt; with
                * &lt;code&gt;ASModel&lt;/code&gt; methods, have discernible top-level/"global"
                * notation declarations. If one attempts to add, set, or remove a node
                * type other than the intended one, a hierarchy exception (or
                * equivalent is thrown).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASNamedObjectMap</name>
                </type>
                <name>getNotationDeclarations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Instead of returning an all-in-one &lt;code&gt;ASObject&lt;/code&gt; with
                * &lt;code&gt;ASModel&lt;/code&gt; methods, have discernible top-level/"global"
                * entity declarations. If one attempts to add, set, or remove a node
                * type other than the intended one, a hierarchy exception (or
                * equivalent is thrown).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASNamedObjectMap</name>
                </type>
                <name>getEntityDeclarations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Instead of returning an all-in-one &lt;code&gt;ASObject&lt;/code&gt; with
                * &lt;code&gt;ASModel&lt;/code&gt; methods, have discernible top-level/"global
                * content model declarations. If one attempts to add, set, or remove a
                * node type other than the intended one, a hierarchy exception (or
                * equivalent is thrown).
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASNamedObjectMap</name>
                </type>
                <name>getContentModelDeclarations</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * This method will allow the nesting or "importation" of ASModels.
                * @param abstractSchema ASModel to be set. Subsequent calls will nest
                * the ASModels within the specified &lt;code&gt;ownerASModel&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addASModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>abstractSchema</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * To retrieve a list of nested ASModels without reference to names.
                * @return A list of ASModels.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASObjectList</name>
                </type>
                <name>getASModels</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Removes only the specified &lt;code&gt;ASModel&lt;/code&gt; from the list of
                * &lt;code&gt;ASModel&lt;/code&gt;s.
                * @param as AS to be removed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeAS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>as</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if an &lt;code&gt;ASModel&lt;/code&gt; itself is valid, i.e., confirming
                * that it's well-formed and valid per its own formal grammar.
                * @return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ASModel&lt;/code&gt; is valid,
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>validate</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Creates an element declaration for the element type specified.
                * @param namespaceURI The &lt;code&gt;namespace URI&lt;/code&gt; of the element type
                * being declared.
                * @param name The name of the element. The format of the name could be
                * an NCName as defined by XML Namespaces or a Name as defined by XML
                * 1.0; it's ASModel-dependent.
                * @return A new &lt;code&gt;ASElementDeclaration&lt;/code&gt; object with
                * &lt;code&gt;name&lt;/code&gt; attribute set to &lt;code&gt;tagname&lt;/code&gt; and
                * &lt;code&gt;namespaceURI&lt;/code&gt; set to &lt;code&gt;systemId&lt;/code&gt;. Other
                * attributes of the element declaration are set through
                * &lt;code&gt;ASElementDeclaration&lt;/code&gt; interface methods.
                * @exception DOMException
                * INVALID_CHARACTER_ERR: Raised if the specified name contains an
                * illegal character.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASElementDeclaration</name>
                </type>
                <name>createASElementDeclaration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates an attribute declaration.
                * @param namespaceURI The namespace URI of the attribute being declared.
                * @param name The name of the attribute. The format of the name could be
                * an NCName as defined by XML Namespaces or a Name as defined by XML
                * 1.0; it's ASModel-dependent.
                * @return A new &lt;code&gt;ASAttributeDeclaration&lt;/code&gt; object with
                * appropriate attributes set by input parameters.
                * @exception DOMException
                * INVALID_CHARACTER_ERR: Raised if the input &lt;code&gt;name&lt;/code&gt;
                * parameter contains an illegal character.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASAttributeDeclaration</name>
                </type>
                <name>createASAttributeDeclaration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates a new notation declaration.
                * @param namespaceURI The namespace URI of the notation being declared.
                * @param name The name of the notation. The format of the name could be
                * an NCName as defined by XML Namespaces or a Name as defined by XML
                * 1.0; it's ASModel-dependent.
                * @param systemId The system identifier for the notation declaration.
                * @param publicId The public identifier for the notation declaration.
                * @return A new &lt;code&gt;ASNotationDeclaration&lt;/code&gt; object with
                * &lt;code&gt;notationName&lt;/code&gt; attribute set to &lt;code&gt;name&lt;/code&gt; and
                * &lt;code&gt;publicId&lt;/code&gt; and &lt;code&gt;systemId&lt;/code&gt; set to the
                * corresponding fields.
                * @exception DOMException
                * INVALID_CHARACTER_ERR: Raised if the specified name contains an
                * illegal character.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASNotationDeclaration</name>
                </type>
                <name>createASNotationDeclaration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates an ASEntityDeclaration.
                * @param name The name of the entity being declared.
                * @return A new &lt;code&gt;ASEntityDeclaration&lt;/code&gt; object with
                * &lt;code&gt;entityName&lt;/code&gt; attribute set to name.
                * @exception DOMException
                * INVALID_CHARACTER_ERR: Raised if the specified name contains an
                * illegal character.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASEntityDeclaration</name>
                </type>
                <name>createASEntityDeclaration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates an object which describes part of an
                * &lt;code&gt;ASElementDeclaration&lt;/code&gt;'s content model.
                * @param minOccurs The minimum occurrence for the subModels of this
                * &lt;code&gt;ASContentModel&lt;/code&gt;.
                * @param maxOccurs The maximum occurrence for the subModels of this
                * &lt;code&gt;ASContentModel&lt;/code&gt;.
                * @param operator operator of type &lt;code&gt;AS_CHOICE&lt;/code&gt;,
                * &lt;code&gt;AS_SEQUENCE&lt;/code&gt;, &lt;code&gt;AS_ALL&lt;/code&gt; or
                * &lt;code&gt;AS_NONE&lt;/code&gt;.
                * @return A new &lt;code&gt;ASContentModel&lt;/code&gt; object.
                * @exception DOMASException
                * A DOMASException, e.g., &lt;code&gt;minOccurs &amp;gt; maxOccurs&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASContentModel</name>
                </type>
                <name>createASContentModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>minOccurs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxOccurs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>operator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
