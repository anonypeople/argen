<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\xs\AnyURIDV.java">
    <comment type="block">/*
        * Copyright 2001-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>InvalidDatatypeValueException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>URI</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>ValidationContext</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represent the schema type "anyURI"
        *
        * @xerces.internal
        *
        * @author Neeraj Bajaj, Sun Microsystems, inc.
        * @author Sandy Gao, IBM
        *
        * @version $Id: AnyURIDV.java,v 1.9 2005/01/31 03:54:06 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>AnyURIDV</name>
        <super>
            <extends>extends
                <name>TypeValidator</name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>URI</name>
                    </type>
                    <name>BASE_URI</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>URI</name>
                        </type>
                        <name>uri</name> =
                        <init>
                            <expr>
                                <name>null</name>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <try>try
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>uri</name>
                                = new
                                <call>
                                    <name>URI</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"abc://def.ghi.jkl"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                    <catch>catch (
                        <param>
                            <decl>
                                <type>
                                    <name><name>URI</name>.
                                        <name>MalformedURIException</name>
                                    </name>
                                </type>
                                <name>ex</name>
                            </decl>
                        </param>
                        )
                        <block>{
                            }
                        </block>
                    </catch>
                </try>
                <expr_stmt>
                    <expr>
                        <name>BASE_URI</name>
                        =
                        <name>uri</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getAllowedFacets</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_LENGTH</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_MINLENGTH</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_MAXLENGTH</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_PATTERN</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_ENUMERATION</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_WHITESPACE</name>
                            </name>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// before we return string we have to make sure it is correct URI as per spec.
            </comment>
            <comment type="line">// for some types (string and derived), they just return the string itself</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getActualValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>content</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidationContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvalidDatatypeValueException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// check 3.2.17.c0 must: URI (rfc 2396/2723)</comment>
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>content</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// encode special characters using XLink 5.4 algorithm
                                        </comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <specifier>final</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>encoded</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>encode</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>content</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <comment type="line">// Support for relative URLs</comment>
                                        <comment type="line">// According to Java 1.1: URLs may also be specified with
                                            a
                                        </comment>
                                        <comment type="line">// String and the URL object that it is related to.
                                        </comment>
                                        <expr_stmt>
                                            <expr>new
                                                <call>
                                                    <name>URI</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>BASE_URI</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>encoded</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name><name>URI</name>.
                                            <name>MalformedURIException</name>
                                        </name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>InvalidDatatypeValueException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"cvc-datatype-valid.1.2.1"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name>content</name>
                                                            </expr>
                                                            , <expr>"anyURI"</expr>}
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// REVISIT: do we need to return the new URI object?</comment>
                    <return>return
                        <expr>
                            <name>content</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// which ASCII characters need to be escaped</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>
                        <name>gNeedEscaping</name>
                        <index>[]</index>
                    </name>
                    =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[<expr>128</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// the first hex character if a character needs to be escaped</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>char</name>
                    </type>
                    <name>
                        <name>gAfterEscaping1</name>
                        <index>[]</index>
                    </name>
                    =
                    <init>
                        <expr>new
                            <name>
                                <name>char</name>
                                <index>[<expr>128</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// the second hex character if a character needs to be escaped</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>char</name>
                    </type>
                    <name>
                        <name>gAfterEscaping2</name>
                        <index>[]</index>
                    </name>
                    =
                    <init>
                        <expr>new
                            <name>
                                <name>char</name>
                                <index>[<expr>128</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>char</name>
                        <index>[]</index>
                    </type>
                    <name>gHexChs</name> =
                    <init>
                        <expr>
                            <block>{<expr>'0'</expr>, <expr>'1'</expr>, <expr>'2'</expr>, <expr>'3'</expr>, <expr>
                                '4'</expr>, <expr>'5'</expr>, <expr>'6'</expr>, <expr>'7'</expr>,
                                <expr>'8'</expr>, <expr>'9'</expr>, <expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>, <expr>
                                    'D'</expr>, <expr>'E'</expr>, <expr>'F'</expr>}
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// initialize the above 3 arrays</comment>
            static
            <block>{
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;= 0x1f
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>gNeedEscaping</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = true
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>gAfterEscaping1</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <name>
                                    <name>gHexChs</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                            &gt;&gt; 4
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>gAfterEscaping2</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <name>
                                    <name>gHexChs</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                            &amp; 0xf
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>gNeedEscaping</name>
                            <index>[<expr>0x7f</expr>]
                            </index>
                        </name>
                        = true
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>gAfterEscaping1</name>
                            <index>[<expr>0x7f</expr>]
                            </index>
                        </name>
                        = '7'
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>gAfterEscaping2</name>
                            <index>[<expr>0x7f</expr>]
                            </index>
                        </name>
                        = 'F'
                    </expr>
                    ;
                </expr_stmt>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>char</name>
                            <index>[]</index>
                        </type>
                        <name>escChs</name> =
                        <init>
                            <expr>
                                <block>{<expr>' '</expr>, <expr>'&lt;'</expr>, <expr>'&gt;'</expr>, <expr>
                                    '"'</expr>, <expr>'{'</expr>, <expr>'}'</expr>,
                                    <expr>'|'</expr>, <expr>'\\'</expr>, <expr>'^'</expr>, <expr>'~'</expr>, <expr>
                                        '`'</expr>}
                                </block>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>len</name> =
                        <init>
                            <expr>
                                <name><name>escChs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>char</name>
                        </type>
                        <name>ch</name>
                    </decl>
                    ;
                </decl_stmt>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;
                            <name>len</name>
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>ch</name>
                                =
                                <name>
                                    <name>escChs</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>gNeedEscaping</name>
                                    <index>[
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = true
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>gAfterEscaping1</name>
                                    <index>[
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <name>
                                    <name>gHexChs</name>
                                    <index>[
                                        <expr>
                                            <name>ch</name>
                                            &gt;&gt; 4
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>gAfterEscaping2</name>
                                    <index>[
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <name>
                                    <name>gHexChs</name>
                                    <index>[
                                        <expr>
                                            <name>ch</name>
                                            &amp; 0xf
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                }
            </block>

            <comment type="line">// To encode special characters in anyURI, by using %HH to represent</comment>
            <comment type="line">// special ASCII characters: 0x00~0x1F, 0x7F, ' ', '&lt;', '&gt;', etc.</comment>
            <comment type="line">// and non-ASCII characters (whose value &gt;= 128).</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>anyURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>anyURI</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                            ,
                            <name>ch</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>len</name>*3
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// for each character in the anyURI</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (<init>;</init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>ch</name>
                                    =
                                    <call>
                                        <name><name>anyURI</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// if it's not an ASCII character, break here, and use UTF-8 encoding
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                        &gt;= 128
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <break>break;</break>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>gNeedEscaping</name>
                                            <index>[
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'%'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>gAfterEscaping1</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>gAfterEscaping2</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>char</name>)
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// we saw some non-ascii character</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// get UTF-8 bytes for the remaining sub-string</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </type>
                                        <name>bytes</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>byte</name>
                                        </type>
                                        <name>b</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>bytes</name>
                                                =
                                                <call>
                                                    <name><name>anyURI</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getBytes</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"UTF-8"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name><name>java</name>.<name>io</name>.
                                                        <name>UnsupportedEncodingException</name>
                                                    </name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// should never happen</comment>
                                            <return>return
                                                <expr>
                                                    <name>anyURI</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                <expr_stmt>
                                    <expr>
                                        <name>len</name>
                                        =
                                        <name><name>bytes</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// for each byte</comment>
                                <for>for (
                                    <init>
                                        <expr>
                                            <name>i</name>
                                            = 0
                                        </expr>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>len</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>b</name>
                                                =
                                                <name>
                                                    <name>bytes</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// for non-ascii character: make it positive, then escape
                                        </comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>b</name>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>ch</name>
                                                            = <name>b</name> + 256
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'%'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>gHexChs</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>ch</name>
                                                                                        &gt;&gt; 4
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>gHexChs</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>ch</name>
                                                                                        &amp; 0xf
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>
                                                                <name>gNeedEscaping</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>b</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>buffer</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>'%'</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>buffer</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>gAfterEscaping1</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>b</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>buffer</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>gAfterEscaping2</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>b</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>buffer</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>(<name>char</name>)
                                                                                    <name>b</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// If encoding happened, create a new string;</comment>
                    <comment type="line">// otherwise, return the orginal one.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>buffer</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>buffer</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>anyURI</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class AnyURIDV</comment>
</unit>
