<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\util\Base64.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * This class provides encode/decode for RFC 2045 Base64 as
        * defined by RFC 2045, N. Freed and N. Borenstein.
        * RFC 2045: Multipurpose Internet Mail Extensions (MIME)
        * Part One: Format of Internet Message Bodies. Reference
        * 1996 Available at: http://www.ietf.org/rfc/rfc2045.txt
        * This class is used by XML Schema binary format validation
        *
        * This implementation does not encode/decode streaming
        * data. You need the data that you will encode/decode
        * already on a byte arrray.
        *
        * @xerces.internal
        *
        * @author Jeffrey Rodriguez
        * @author Sandy Gao
        * @version $Id: Base64.java,v 1.15 2004/10/14 15:20:18 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class  <name>Base64</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BASELENGTH</name>         =
                    <init>
                        <expr>128</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LOOKUPLENGTH</name>       =
                    <init>
                        <expr>64</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>TWENTYFOURBITGROUP</name> =
                    <init>
                        <expr>24</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>EIGHTBIT</name>           =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SIXTEENBIT</name>         =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SIXBIT</name>             =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>FOURBYTE</name>           =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SIGN</name>               =
                    <init>
                        <expr>-128</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>PAD</name>                =
                    <init>
                        <expr>'='</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fDebug</name>          =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <specifier>private</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>base64Alphabet</name>        =
                    <init>
                        <expr>new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>
                                        <name>BASELENGTH</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <specifier>private</specifier>
                        <name>char</name>
                        <index>[]</index>
                    </type>
                    <name>lookUpBase64Alphabet</name>  =
                    <init>
                        <expr>new
                            <name>
                                <name>char</name>
                                <index>[
                                    <expr>
                                        <name>LOOKUPLENGTH</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{

                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;
                            <name>BASELENGTH</name>
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr>++
                            <name>i</name>
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>base64Alphabet</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = -1
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'Z'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &gt;= 'A'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>base64Alphabet</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>byte</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr><name>i</name>-'A'
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'z'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&gt;= 'a'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>base64Alphabet</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>byte</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr><name>i</name>-'a' + 26
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>

                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'9'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &gt;= '0'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>base64Alphabet</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>byte</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr><name>i</name>-'0' + 52
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>

                <expr_stmt>
                    <expr>
                        <name>
                            <name>base64Alphabet</name>
                            <index>[<expr>'+'</expr>]
                            </index>
                        </name>
                        = 62
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>base64Alphabet</name>
                            <index>[<expr>'/'</expr>]
                            </index>
                        </name>
                        = 63
                    </expr>
                    ;
                </expr_stmt>

                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&lt;=25
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>lookUpBase64Alphabet</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>char</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>'A'+
                                            <name>i</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                </for>

                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>26</expr>
                            </init>
                            ,  <name>j</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&lt;=51
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                        ,
                        <expr><name>j</name>++
                        </expr>
                    </incr>
                    )
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>lookUpBase64Alphabet</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>char</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>'a'+
                                            <name>j</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                </for>

                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>52</expr>
                            </init>
                            ,  <name>j</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&lt;=61
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                        ,
                        <expr><name>j</name>++
                        </expr>
                    </incr>
                    )
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>lookUpBase64Alphabet</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>char</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>'0' +
                                            <name>j</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                </for>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>lookUpBase64Alphabet</name>
                            <index>[<expr>62</expr>]
                            </index>
                        </name>
                        = (<name>char</name>)'+'
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>
                            <name>lookUpBase64Alphabet</name>
                            <index>[<expr>63</expr>]
                            </index>
                        </name>
                        = (<name>char</name>)'/'
                    </expr>
                    ;
                </expr_stmt>

                }
            </block>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isWhiteSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>octect</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>octect</name> == 0x20 || <name>octect</name> == 0xd || <name>octect</name> == 0xa
                            || <name>octect</name> == 0x9)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>octect</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>octect</name> == <name>PAD</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>octect</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>octect</name> &lt; <name>BASELENGTH</name> &amp;&amp;
                            <name>
                                <name>base64Alphabet</name>
                                <index>[
                                    <expr>
                                        <name>octect</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            != -1)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isBase64</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>octect</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name>isWhiteSpace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>octect</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name>isPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>octect</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name>isData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>octect</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encodes hex octects into Base64
                *
                * @param binaryData Array containing binaryData
                * @return Encoded Base64 array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>binaryData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>binaryData</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lengthDataBits</name>    =
                            <init>
                                <expr>
                                    <name><name>binaryData</name>.
                                        <name>length</name>
                                    </name>
                                    *
                                    <name>EIGHTBIT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lengthDataBits</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>fewerThan24bits</name>   =
                            <init>
                                <expr><name>lengthDataBits</name>%
                                    <name>TWENTYFOURBITGROUP</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numberTriplets</name>    =
                            <init>
                                <expr><name>lengthDataBits</name>/
                                    <name>TWENTYFOURBITGROUP</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numberQuartet</name>     =
                            <init>
                                <expr>
                                    <name>fewerThan24bits</name>
                                    != 0 ? <name>numberTriplets</name>+1 :
                                    <name>numberTriplets</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>
                                <name>encodedData</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>encodedData</name>
                            = new
                            <name>
                                <name>char</name>
                                <index>[
                                    <expr><name>numberQuartet</name>*4
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>k</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>l</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>b1</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>b2</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>b3</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>encodedIndex</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>dataIndex</name>   =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDebug</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"number of triplets = " +
                                                        <name>numberTriplets</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>numberTriplets</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>b1</name>
                                    =
                                    <name>
                                        <name>binaryData</name>
                                        <index>[
                                            <expr><name>dataIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b2</name>
                                    =
                                    <name>
                                        <name>binaryData</name>
                                        <index>[
                                            <expr><name>dataIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b3</name>
                                    =
                                    <name>
                                        <name>binaryData</name>
                                        <index>[
                                            <expr><name>dataIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fDebug</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"b1= " + <name>b1</name> +", b2= " + <name>b2</name> +
                                                                ", b3= " +
                                                                <name>b3</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>l</name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b2</name>
                                                    &amp; 0x0f
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>k</name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b1</name>
                                                    &amp; 0x03
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                    </type>
                                    <name>val1</name> =
                                    <init>
                                        <expr>((<name>b1</name> &amp; <name>SIGN</name>)==0)?
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>b1</name>&gt;&gt;2
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            :
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>b1</name>)&gt;&gt;2^0xc0
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                    </type>
                                    <name>val2</name> =
                                    <init>
                                        <expr>((<name>b2</name> &amp; <name>SIGN</name>)==0)?
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>b2</name>&gt;&gt;4
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            :
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>b2</name>)&gt;&gt;4^0xf0
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                    </type>
                                    <name>val3</name> =
                                    <init>
                                        <expr>((<name>b3</name> &amp; <name>SIGN</name>)==0)?
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>b3</name>&gt;&gt;6
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            :
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>b3</name>)&gt;&gt;6^0xfc
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fDebug</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"val2 = " +
                                                                <name>val2</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"k4 = " + (<name>k</name>&lt;&lt;4)
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"vak = " + (<name>val2</name> | (<name>k</name>&lt;&lt;4))
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>encodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>lookUpBase64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>val1</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>encodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>lookUpBase64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>val2</name>
                                                | ( <name>k</name>&lt;&lt;4 )
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>encodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>lookUpBase64Alphabet</name>
                                        <index>[
                                            <expr>(<name>l</name> &lt;&lt;2 ) |
                                                <name>val3</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>encodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>lookUpBase64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>b3</name>
                                                &amp; 0x3f
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// form integral number of 6-bit groups</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fewerThan24bits</name>
                                ==
                                <name>EIGHTBIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>b1</name>
                                        =
                                        <name>
                                            <name>binaryData</name>
                                            <index>[
                                                <expr>
                                                    <name>dataIndex</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>k</name>
                                        =
                                        <call>(<name>byte</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>b1</name>
                                                        &amp;0x03
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDebug</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.<name>out</name>.
                                                            <name>println</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"b1=" +
                                                                    <name>b1</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.<name>out</name>.
                                                            <name>println</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"b1&lt;&lt;2 = " + (<name>b1</name>&gt;&gt;2)
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>byte</name>
                                        </type>
                                        <name>val1</name> =
                                        <init>
                                            <expr>((<name>b1</name> &amp; <name>SIGN</name>)==0)?
                                                <call>(<name>byte</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr><name>b1</name>&gt;&gt;2
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                :
                                                <call>(<name>byte</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>b1</name>)&gt;&gt;2^0xc0
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>encodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>lookUpBase64Alphabet</name>
                                            <index>[
                                                <expr>
                                                    <name>val1</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>encodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>
                                            <name>lookUpBase64Alphabet</name>
                                            <index>[
                                                <expr><name>k</name>&lt;&lt;4
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>encodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>PAD</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>encodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>PAD</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fewerThan24bits</name>
                                        ==
                                        <name>SIXTEENBIT</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>b1</name>
                                                =
                                                <name>
                                                    <name>binaryData</name>
                                                    <index>[
                                                        <expr>
                                                            <name>dataIndex</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>b2</name>
                                                =
                                                <name>
                                                    <name>binaryData</name>
                                                    <index>[
                                                        <expr>
                                                            <name>dataIndex</name>
                                                            +1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>l</name>
                                                =
                                                <call>( <name>byte</name> )
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>b2</name>
                                                                &amp;0x0f
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>k</name>
                                                =
                                                <call>( <name>byte</name> )
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>b1</name>
                                                                &amp;0x03
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>byte</name>
                                                </type>
                                                <name>val1</name> =
                                                <init>
                                                    <expr>((<name>b1</name> &amp; <name>SIGN</name>)==0)?
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr><name>b1</name>&gt;&gt;2
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        :
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>b1</name>)&gt;&gt;2^0xc0
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>byte</name>
                                                </type>
                                                <name>val2</name> =
                                                <init>
                                                    <expr>((<name>b2</name> &amp; <name>SIGN</name>)==0)?
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr><name>b2</name>&gt;&gt;4
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        :
                                                        <call>(<name>byte</name>)
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(<name>b2</name>)&gt;&gt;4^0xf0
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>encodedData</name>
                                                    <index>[
                                                        <expr><name>encodedIndex</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>
                                                    <name>lookUpBase64Alphabet</name>
                                                    <index>[
                                                        <expr>
                                                            <name>val1</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>encodedData</name>
                                                    <index>[
                                                        <expr><name>encodedIndex</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>
                                                    <name>lookUpBase64Alphabet</name>
                                                    <index>[
                                                        <expr>
                                                            <name>val2</name>
                                                            | ( <name>k</name>&lt;&lt;4 )
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>encodedData</name>
                                                    <index>[
                                                        <expr><name>encodedIndex</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>
                                                    <name>lookUpBase64Alphabet</name>
                                                    <index>[
                                                        <expr><name>l</name>&lt;&lt;2
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>encodedData</name>
                                                    <index>[
                                                        <expr><name>encodedIndex</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>PAD</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>encodedData</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decodes Base64 data into octects
                *
                * @param encoded string containing Base64 data
                * @return Array containind decoded data.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>decode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoded</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>encoded</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>base64Data</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>encoded</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// remove white spaces</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>removeWhiteSpace</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>base64Data</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr><name>len</name>%<name>FOURBYTE</name> != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">//should be divisible by four</comment>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numberQuadruple</name>    =
                            <init>
                                <expr>(<name>len</name>/<name>FOURBYTE</name> )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>numberQuadruple</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>
                                <name>decodedData</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>b1</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>b2</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>b3</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>b4</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>d1</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>d2</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>d3</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                            ,<name>d4</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>encodedIndex</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>dataIndex</name>    =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>decodedData</name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>(<name>numberQuadruple</name>)*3
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <for>for (<init>;</init>
                        <condition>
                            <expr><name>i</name>&lt;<name>numberQuadruple</name>-1
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{

                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>isData</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>d1</name> =
                                                        <name>
                                                            <name>base64Data</name>
                                                            <index>[
                                                                <expr><name>dataIndex</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        )
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ||
                                        !
                                        <call>
                                            <name>isData</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>d2</name> =
                                                        <name>
                                                            <name>base64Data</name>
                                                            <index>[
                                                                <expr><name>dataIndex</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        )
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ||
                                        !
                                        <call>
                                            <name>isData</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>d3</name> =
                                                        <name>
                                                            <name>base64Data</name>
                                                            <index>[
                                                                <expr><name>dataIndex</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        )
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ||
                                        !
                                        <call>
                                            <name>isData</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>d4</name> =
                                                        <name>
                                                            <name>base64Data</name>
                                                            <index>[
                                                                <expr><name>dataIndex</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        )
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <comment type="line">//if found "no data" just return null</comment>

                            <expr_stmt>
                                <expr>
                                    <name>b1</name>
                                    =
                                    <name>
                                        <name>base64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>d1</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b2</name>
                                    =
                                    <name>
                                        <name>base64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>d2</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b3</name>
                                    =
                                    <name>
                                        <name>base64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>d3</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b4</name>
                                    =
                                    <name>
                                        <name>base64Alphabet</name>
                                        <index>[
                                            <expr>
                                                <name>d4</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>decodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b1</name>
                                                    &lt;&lt;2 | <name>b2</name>&gt;&gt;4
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>decodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>((<name>b2</name> &amp; 0xf)&lt;&lt;4 ) |( (<name>b3</name>&gt;&gt;2)
                                                    &amp; 0xf)
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>decodedData</name>
                                        <index>[
                                            <expr><name>encodedIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr><name>b3</name>&lt;&lt;6 |
                                                    <name>b4</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isData</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>d1</name> =
                                                <name>
                                                    <name>base64Data</name>
                                                    <index>[
                                                        <expr><name>dataIndex</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                )
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                !
                                <call>
                                    <name>isData</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>d2</name> =
                                                <name>
                                                    <name>base64Data</name>
                                                    <index>[
                                                        <expr><name>dataIndex</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                )
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">//if found "no data" just return null</comment>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>b1</name>
                            =
                            <name>
                                <name>base64Alphabet</name>
                                <index>[
                                    <expr>
                                        <name>d1</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b2</name>
                            =
                            <name>
                                <name>base64Alphabet</name>
                                <index>[
                                    <expr>
                                        <name>d2</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>d3</name>
                            =
                            <name>
                                <name>base64Data</name>
                                <index>[
                                    <expr><name>dataIndex</name>++
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>d4</name>
                            =
                            <name>
                                <name>base64Data</name>
                                <index>[
                                    <expr><name>dataIndex</name>++
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isData</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>d3</name> )
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                !
                                <call>
                                    <name>isData</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>d4</name> )
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//Check if they are PAD characters</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isPad</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>d3</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name>isPad</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>d4</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">//Two PAD e.g. 3c[Pad][Pad]</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>(<name>b2</name> &amp; 0xf) != 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <comment type="line">//last 4 bits should be zero</comment>
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                </then>
                                            </if>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>byte</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>tmp</name> =
                                                    <init>
                                                        <expr>new
                                                            <name>
                                                                <name>byte</name>
                                                                <index>[
                                                                    <expr><name>i</name>*3 + 1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>System</name>.
                                                            <name>arraycopy</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>decodedData</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>tmp</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr><name>i</name>*3
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>tmp</name>
                                                        <index>[
                                                            <expr>
                                                                <name>encodedIndex</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <call>(<name>byte</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>b1</name>
                                                                    &lt;&lt;2 | <name>b2</name>&gt;&gt;4
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>tmp</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <call>
                                                        <name>isPad</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>d3</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name>isPad</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>d4</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//One PAD e.g. 3cQ[Pad]</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b3</name>
                                                            =
                                                            <name>
                                                                <name>base64Alphabet</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>d3</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>b3</name> &amp; 0x3 ) != 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <comment type="line">//last 2 bits should be zero</comment>
                                                            <return>return
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                        </then>
                                                    </if>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>byte</name>
                                                                <index>[]</index>
                                                            </type>
                                                            <name>tmp</name> =
                                                            <init>
                                                                <expr>new
                                                                    <name>
                                                                        <name>byte</name>
                                                                        <index>[
                                                                            <expr><name>i</name>*3 + 2
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.
                                                                    <name>arraycopy</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>decodedData</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tmp</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr><name>i</name>*3
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>tmp</name>
                                                                <index>[
                                                                    <expr><name>encodedIndex</name>++
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <call>(<name>byte</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b1</name>
                                                                            &lt;&lt;2 | <name>b2</name>&gt;&gt;4
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>tmp</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>encodedIndex</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <call>(<name>byte</name>)
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>((<name>b2</name> &amp; 0xf)&lt;&lt;4 ) |(
                                                                            (<name>b3</name>&gt;&gt;2) &amp; 0xf)
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>
                                                            <name>tmp</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    <comment type="line">//an error like "3c[Pad]r", "3cdX", "3cXd",
                                                        "3cXX" where X is non data
                                                    </comment>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">//No PAD e.g 3cQl</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>b3</name>
                                        =
                                        <name>
                                            <name>base64Alphabet</name>
                                            <index>[
                                                <expr>
                                                    <name>d3</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>b4</name>
                                        =
                                        <name>
                                            <name>base64Alphabet</name>
                                            <index>[
                                                <expr>
                                                    <name>d4</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>decodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <call>(<name>byte</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>b1</name>
                                                        &lt;&lt;2 | <name>b2</name>&gt;&gt;4
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>decodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <call>(<name>byte</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>((<name>b2</name> &amp; 0xf)&lt;&lt;4 ) |( (<name>b3</name>&gt;&gt;2)
                                                        &amp; 0xf)
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>decodedData</name>
                                            <index>[
                                                <expr><name>encodedIndex</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <call>(<name>byte</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr><name>b3</name>&lt;&lt;6 |
                                                        <name>b4</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>decodedData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * remove WhiteSpace from MIME containing encoded Base64 data.
                *
                * @param data the byte array of base64 data (with WS)
                * @return the new length
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>removeWhiteSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>data</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>0</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// count characters that's not whitespace</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <name><name>data</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>isWhiteSpace</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>data</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr><name>newSize</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>newSize</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
