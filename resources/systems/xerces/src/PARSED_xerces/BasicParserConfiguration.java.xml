<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\parsers\BasicParserConfiguration.java">
    <comment type="block">/*
        * Copyright 2001-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>parsers</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>Constants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>ParserConfigurationSettings</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDTDContentModelHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDTDHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDocumentHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLComponent</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLComponentManager</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLConfigurationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLDocumentSource</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLEntityResolver</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLErrorHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLInputSource</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLParserConfiguration</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A very basic parser configuration. This configuration class can
        * be used as a base class for custom parser configurations. The
        * basic parser configuration creates the symbol table (if not
        * specified at construction time) and manages all of the recognized
        * features and properties.
        * &lt;p&gt;
        * The basic parser configuration does &lt;strong&gt;not&lt;/strong&gt; mandate
        * any particular pipeline configuration or the use of specific
        * components except for the symbol table. If even this is too much
        * for a basic parser configuration, the programmer can create a new
        * configuration class that implements the
        * &lt;code&gt;XMLParserConfiguration&lt;/code&gt; interface.
        * &lt;p&gt;
        * Subclasses of the basic parser configuration can add their own
        * recognized features and properties by calling the
        * &lt;code&gt;addRecognizedFeature&lt;/code&gt; and
        * &lt;code&gt;addRecognizedProperty&lt;/code&gt; methods, respectively.
        * &lt;p&gt;
        * The basic parser configuration assumes that the configuration
        * will be made up of various parser components that implement the
        * &lt;code&gt;XMLComponent&lt;/code&gt; interface. If subclasses of this
        * configuration create their own components for use in the
        * parser configuration, then each component should be added to
        * the list of components by calling the &lt;code&gt;addComponent&lt;/code&gt;
        * method. The basic parser configuration will make sure to call
        * the &lt;code&gt;reset&lt;/code&gt; method of each registered component
        * before parsing an instance document.
        * &lt;p&gt;
        * This class recognizes the following features and properties:
        * &lt;ul&gt;
        * &lt;li&gt;Features
        * &lt;ul&gt;
        * &lt;li&gt;http://xml.org/sax/features/validation&lt;/li&gt;
        * &lt;li&gt;http://xml.org/sax/features/namespaces&lt;/li&gt;
        * &lt;li&gt;http://xml.org/sax/features/external-general-entities&lt;/li&gt;
        * &lt;li&gt;http://xml.org/sax/features/external-parameter-entities&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;li&gt;Properties
        * &lt;ul&gt;
        * &lt;li&gt;http://xml.org/sax/properties/xml-string&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/symbol-table&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/error-handler&lt;/li&gt;
        * &lt;li&gt;http://apache.org/xml/properties/internal/entity-resolver&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;/ul&gt;
        *
        * @author Arnaud Le Hors, IBM
        * @author Andy Clark, IBM
        *
        * @version $Id: BasicParserConfiguration.java,v 1.24 2004/04/12 21:56:02 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>BasicParserConfiguration</name>
        <super>
            <extends>extends
                <name>ParserConfigurationSettings</name>
            </extends>
            <implements>implements
                <name>XMLParserConfiguration</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="line">// feature identifiers</comment>

            <comment type="javadoc">/** Feature identifier: validation. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>VALIDATION</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>SAX_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>VALIDATION_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: namespaces. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>NAMESPACES</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>SAX_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>NAMESPACES_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: external general entities. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>EXTERNAL_GENERAL_ENTITIES</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>SAX_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>EXTERNAL_GENERAL_ENTITIES_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Feature identifier: external parameter entities. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>EXTERNAL_PARAMETER_ENTITIES</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>SAX_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>EXTERNAL_PARAMETER_ENTITIES_FEATURE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// property identifiers</comment>

            <comment type="javadoc">/** Property identifier: xml string. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>XML_STRING</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>SAX_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>XML_STRING_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: symbol table. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SYMBOL_TABLE</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SYMBOL_TABLE_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: error handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ERROR_HANDLER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ERROR_HANDLER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Property identifier: entity resolver. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ENTITY_RESOLVER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ENTITY_RESOLVER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="line">// components (non-configurable)</comment>

            <comment type="javadoc">/** Symbol table. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>SymbolTable</name>
                    </type>
                    <name>fSymbolTable</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="line">// data</comment>

            <comment type="javadoc">/** Locale. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Locale</name>
                    </type>
                    <name>fLocale</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Components. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ArrayList</name>
                    </type>
                    <name>fComponents</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// handlers</comment>

            <comment type="javadoc">/** The document handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDocumentHandler</name>
                    </type>
                    <name>fDocumentHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The DTD handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDTDHandler</name>
                    </type>
                    <name>fDTDHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The DTD content model handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDTDContentModelHandler</name>
                    </type>
                    <name>fDTDContentModelHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Last component in the document pipeline */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDocumentSource</name>
                    </type>
                    <name>fLastComponent</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default Constructor. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>BasicParserConfiguration</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;()</comment>

            <comment type="javadoc">/**
                * Constructs a parser configuration using the specified symbol table.
                *
                * @param symbolTable The symbol table to use.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>BasicParserConfiguration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbolTable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(SymbolTable)</comment>

            <comment type="javadoc">/**
                * Constructs a parser configuration using the specified symbol table
                * and parent settings.
                *
                * @param symbolTable The symbol table to use.
                * @param parentSettings The parent settings.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>BasicParserConfiguration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLComponentManager</name>
                            </type>
                            <name>parentSettings</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>parentSettings</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// create a vector to hold all the components in use</comment>
                    <expr_stmt>
                        <expr>
                            <name>fComponents</name>
                            = new
                            <call>
                                <name>ArrayList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// create storage for recognized features and properties</comment>
                    <expr_stmt>
                        <expr>
                            <name>fRecognizedFeatures</name>
                            = new
                            <call>
                                <name>ArrayList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fRecognizedProperties</name>
                            = new
                            <call>
                                <name>ArrayList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// create table for features and properties</comment>
                    <expr_stmt>
                        <expr>
                            <name>fFeatures</name>
                            = new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fProperties</name>
                            = new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// add default recognized features</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>recognizedFeatures</name> =
                            <init>
                                <expr>
                                    <block>{
                                        <expr>
                                            <name>PARSER_SETTINGS</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>VALIDATION</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>NAMESPACES</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>EXTERNAL_GENERAL_ENTITIES</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>EXTERNAL_PARAMETER_ENTITIES</name>
                                        </expr>
                                        ,
                                        }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addRecognizedFeatures</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>recognizedFeatures</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fFeatures</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>PARSER_SETTINGS</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>TRUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// set state for default features</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fFeatures</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VALIDATION</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>FALSE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fFeatures</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>NAMESPACES</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>TRUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fFeatures</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>EXTERNAL_GENERAL_ENTITIES</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>TRUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fFeatures</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>EXTERNAL_PARAMETER_ENTITIES</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>TRUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// add default recognized properties</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>recognizedProperties</name> =
                            <init>
                                <expr>
                                    <block>{
                                        <expr>
                                            <name>XML_STRING</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>SYMBOL_TABLE</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>ERROR_HANDLER</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>ENTITY_RESOLVER</name>
                                        </expr>
                                        ,
                                        }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addRecognizedProperties</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>recognizedProperties</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>symbolTable</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>symbolTable</name>
                                        = new
                                        <call>
                                            <name>SymbolTable</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fSymbolTable</name>
                            =
                            <name>symbolTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fProperties</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>SYMBOL_TABLE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fSymbolTable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(SymbolTable)</comment>

            <comment type="javadoc">/**
                * Adds a component to the parser configuration. This method will
                * also add all of the component's recognized features and properties
                * to the list of default recognized features and properties.
                *
                * @param component The component to add.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>addComponent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLComponent</name>
                            </type>
                            <name>component</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// don't add a component more than once</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fComponents</name>.
                                        <name>contains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>component</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fComponents</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>component</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// register component's recognized features</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>recognizedFeatures</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>component</name>.
                                            <name>getRecognizedFeatures</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addRecognizedFeatures</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>recognizedFeatures</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// register component's recognized properties</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>recognizedProperties</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>component</name>.
                                            <name>getRecognizedProperties</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addRecognizedProperties</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>recognizedProperties</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// set default values</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>recognizedFeatures</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>recognizedFeatures</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>featureId</name> =
                                                <init>
                                                    <expr>
                                                        <name>
                                                            <name>recognizedFeatures</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Boolean</name>
                                                </type>
                                                <name>state</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>component</name>.
                                                                <name>getFeatureDefault</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>featureId</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>state</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>setFeature</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>featureId</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>state</name>.
                                                                                    <name>booleanValue</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>recognizedProperties</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>recognizedProperties</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>propertyId</name> =
                                                <init>
                                                    <expr>
                                                        <name>
                                                            <name>recognizedProperties</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Object</name>
                                                </type>
                                                <name>value</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>component</name>.
                                                                <name>getPropertyDefault</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>propertyId</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>value</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>setProperty</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>propertyId</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// addComponent(XMLComponent)</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLParserConfiguration methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Parse an XML document.
                * &lt;p&gt;
                * The parser can use this method to instruct this configuration
                * to begin parsing an XML document from any valid input source
                * (a character stream, a byte stream, or a URI).
                * &lt;p&gt;
                * Parsers may not invoke this method while a parse is in progress.
                * Once a parse is complete, the parser may then parse another XML
                * document.
                * &lt;p&gt;
                * This method is synchronous: it will not return until parsing
                * has ended. If a client application wants to terminate
                * parsing early, it should throw an exception.
                *
                * @param inputSource The input source for the top-level of the
                * XML document.
                *
                * @exception XNIException Any XNI exception, possibly wrapping
                * another exception.
                * @exception IOException An IO exception from the parser, possibly
                * from a byte stream or character stream
                * supplied by the parser.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>inputSource</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the document handler on the last component in the pipeline
                * to receive information about the document.
                *
                * @param documentHandler The document handler.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDocumentHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDocumentHandler</name>
                            </type>
                            <name>documentHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDocumentHandler</name>
                            =
                            <name>documentHandler</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fLastComponent</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fLastComponent</name>.
                                                <name>setDocumentHandler</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fDocumentHandler</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocumentHandler</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fDocumentHandler</name>.
                                                            <name>setDocumentSource</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fLastComponent</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// setDocumentHandler(XMLDocumentHandler)</comment>

            <comment type="javadoc">/** Returns the registered document handler. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDocumentHandler</name>
                </type>
                <name>getDocumentHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDocumentHandler</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getDocumentHandler():XMLDocumentHandler</comment>

            <comment type="javadoc">/**
                * Sets the DTD handler.
                *
                * @param dtdHandler The DTD handler.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDTDHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDTDHandler</name>
                            </type>
                            <name>dtdHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDTDHandler</name>
                            =
                            <name>dtdHandler</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setDTDHandler(XMLDTDHandler)</comment>

            <comment type="javadoc">/** Returns the registered DTD handler. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDTDHandler</name>
                </type>
                <name>getDTDHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDTDHandler</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getDTDHandler():XMLDTDHandler</comment>

            <comment type="javadoc">/**
                * Sets the DTD content model handler.
                *
                * @param handler The DTD content model handler.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDTDContentModelHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLDTDContentModelHandler</name>
                            </type>
                            <name>handler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDTDContentModelHandler</name>
                            =
                            <name>handler</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setDTDContentModelHandler(XMLDTDContentModelHandler)</comment>

            <comment type="javadoc">/** Returns the registered DTD content model handler. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLDTDContentModelHandler</name>
                </type>
                <name>getDTDContentModelHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDTDContentModelHandler</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getDTDContentModelHandler():XMLDTDContentModelHandler</comment>

            <comment type="javadoc">/**
                * Sets the resolver used to resolve external entities. The EntityResolver
                * interface supports resolution of public and system identifiers.
                *
                * @param resolver The new entity resolver. Passing a null value will
                * uninstall the currently installed resolver.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEntityResolver</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLEntityResolver</name>
                            </type>
                            <name>resolver</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// REVISIT: Should this be a property?</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fProperties</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ENTITY_RESOLVER</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>resolver</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setEntityResolver(XMLEntityResolver)</comment>

            <comment type="javadoc">/**
                * Return the current entity resolver.
                *
                * @return The current entity resolver, or null if none
                * has been registered.
                * @see #setEntityResolver
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLEntityResolver</name>
                </type>
                <name>getEntityResolver</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// REVISIT: Should this be a property?</comment>
                    <return>return
                        <expr>(<name>XMLEntityResolver</name>)
                            <call>
                                <name><name>fProperties</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ENTITY_RESOLVER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getEntityResolver():XMLEntityResolver</comment>

            <comment type="javadoc">/**
                * Allow an application to register an error event handler.
                *
                * &lt;p&gt;If the application does not register an error handler, all
                * error events reported by the SAX parser will be silently
                * ignored; however, normal processing may not continue. It is
                * highly recommended that all SAX applications implement an
                * error handler to avoid unexpected bugs.&lt;/p&gt;
                *
                * &lt;p&gt;Applications may register a new or different handler in the
                * middle of a parse, and the SAX parser must begin using the new
                * handler immediately.&lt;/p&gt;
                *
                * @param errorHandler The error handler.
                * @exception java.lang.NullPointerException If the handler
                * argument is null.
                * @see #getErrorHandler
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setErrorHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLErrorHandler</name>
                            </type>
                            <name>errorHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// REVISIT: Should this be a property?</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fProperties</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ERROR_HANDLER</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>errorHandler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setErrorHandler(XMLErrorHandler)</comment>

            <comment type="javadoc">/**
                * Return the current error handler.
                *
                * @return The current error handler, or null if none
                * has been registered.
                * @see #setErrorHandler
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLErrorHandler</name>
                </type>
                <name>getErrorHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// REVISIT: Should this be a property?</comment>
                    <return>return
                        <expr>(<name>XMLErrorHandler</name>)
                            <call>
                                <name><name>fProperties</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ERROR_HANDLER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getErrorHandler():XMLErrorHandler</comment>

            <comment type="javadoc">/**
                * Set the state of a feature.
                *
                * Set the state of any feature in a SAX2 parser. The parser
                * might not recognize the feature, and if it does recognize
                * it, it might not be able to fulfill the request.
                *
                * @param featureId The unique identifier (URI) of the feature.
                * @param state The requested state of the feature (true or false).
                *
                * @exception org.apache.xerces.xni.parser.XMLConfigurationException If the
                * requested feature is not known.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// forward to every component</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fComponents</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>count</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XMLComponent</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>(<name>XMLComponent</name>)
                                            <call>
                                                <name><name>fComponents</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>c</name>.
                                            <name>setFeature</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>featureId</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>state</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <comment type="line">// save state if noone "objects"</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setFeature</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>featureId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>state</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// setFeature(String,boolean)</comment>

            <comment type="javadoc">/**
                * setProperty
                *
                * @param propertyId
                * @param value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// forward to every component</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fComponents</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>count</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XMLComponent</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>(<name>XMLComponent</name>)
                                            <call>
                                                <name><name>fComponents</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>c</name>.
                                            <name>setProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>propertyId</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// store value if noone "objects"</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setProperty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>propertyId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// setProperty(String,Object)</comment>

            <comment type="javadoc">/**
                * Set the locale to use for messages.
                *
                * @param locale The locale object to use for localization of messages.
                *
                * @exception XNIException Thrown if the parser does not support the
                * specified locale.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLocale</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fLocale</name>
                            =
                            <name>locale</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setLocale(Locale)</comment>

            <comment type="javadoc">/** Returns the locale. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Locale</name>
                </type>
                <name>getLocale</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fLocale</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getLocale():Locale</comment>

            <comment type="line">//</comment>
            <comment type="line">// Protected methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * reset all components before parsing and namespace context
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// reset every component</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fComponents</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>count</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>XMLComponent</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>(<name>XMLComponent</name>)
                                            <call>
                                                <name><name>fComponents</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>c</name>.
                                            <name>reset</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    }
                </block>
            </function>
            <comment type="line">// reset()</comment>

            <comment type="javadoc">/**
                * Check a property. If the property is known and supported, this method
                * simply returns. Otherwise, the appropriate exception is thrown.
                *
                * @param propertyId The unique identifier (URI) of the property
                * being set.
                * @exception org.apache.xerces.xni.parser.XMLConfigurationException If the
                * requested feature is not known or supported.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>checkProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>propertyId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// special cases</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>propertyId</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Constants</name>.
                                                    <name>SAX_PROPERTY_PREFIX</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>suffixLength</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>propertyId</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                -
                                                <call>
                                                    <name><name>Constants</name>.<name>SAX_PROPERTY_PREFIX</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">//</comment>
                                <comment type="line">// http://xml.org/sax/properties/xml-string</comment>
                                <comment type="line">// Value type: String</comment>
                                <comment type="line">// Access: read-only</comment>
                                <comment type="line">// Get the literal string of characters associated with the
                                </comment>
                                <comment type="line">// current event. If the parser recognises and supports this
                                </comment>
                                <comment type="line">// property but is not currently parsing text, it should return
                                </comment>
                                <comment type="line">// null (this is a good way to check for availability before the
                                </comment>
                                <comment type="line">// parse begins).</comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>suffixLength</name>
                                            ==
                                            <call>
                                                <name><name>Constants</name>.<name>XML_STRING_PROPERTY</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>propertyId</name>.
                                                    <name>endsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Constants</name>.
                                                                <name>XML_STRING_PROPERTY</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// REVISIT - we should probably ask xml-dev for a
                                                precise
                                            </comment>
                                            <comment type="line">// definition of what this is actually supposed to
                                                return, and
                                            </comment>
                                            <comment type="line">// in exactly which circumstances.</comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>short</name>
                                                    </type>
                                                    <name>type</name> =
                                                    <init>
                                                        <expr>
                                                            <name><name>XMLConfigurationException</name>.
                                                                <name>NOT_SUPPORTED</name>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>XMLConfigurationException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>type</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>propertyId</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// check property</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>checkProperty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>propertyId</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// checkProperty(String)</comment>


            <comment type="javadoc">/**
                * Check a feature. If feature is know and supported, this method simply
                * returns. Otherwise, the appropriate exception is thrown.
                *
                * @param featureId The unique identifier (URI) of the feature.
                *
                * @throws XMLConfigurationException Thrown for configuration error.
                * In general, components should
                * only throw this exception if
                * it is &lt;strong&gt;really&lt;/strong&gt;
                * a critical error.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>checkFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>featureId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XMLConfigurationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Xerces Features</comment>
                    <comment type="line">//</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>featureId</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Constants</name>.
                                                    <name>XERCES_FEATURE_PREFIX</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>suffixLength</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>featureId</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                -
                                                <call>
                                                    <name><name>Constants</name>.<name>XERCES_FEATURE_PREFIX</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">//</comment>
                                <comment type="line">// special performance feature: no one by component manager is
                                    allowed to set it
                                </comment>
                                <comment type="line">//</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>suffixLength</name>
                                            ==
                                            <call>
                                                <name><name>Constants</name>.<name>PARSER_SETTINGS</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>featureId</name>.
                                                    <name>endsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Constants</name>.
                                                                <name>PARSER_SETTINGS</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>short</name>
                                                    </type>
                                                    <name>type</name> =
                                                    <init>
                                                        <expr>
                                                            <name><name>XMLConfigurationException</name>.
                                                                <name>NOT_SUPPORTED</name>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>XMLConfigurationException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>type</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>featureId</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>checkFeature</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>featureId</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// checkFeature(String)</comment>


            }
        </block>
    </class>
    <comment type="line">// class BasicParserConfiguration</comment>
</unit>
