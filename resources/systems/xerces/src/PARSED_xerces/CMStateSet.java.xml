<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dtd\models\CMStateSet.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dtd</name>.
            <name>models</name>
        </name>
        ;
    </package>


    <comment type="javadoc">/**
        * This class is a very simple bitset class. The DFA content model code needs
        * to support a bit set, but the java BitSet class is way, way overkill. Our
        * bitset never needs to be expanded after creation, hash itself, etc...
        *
        * Since the vast majority of content models will never require more than 64
        * bits, and since allocation of anything in Java is expensive, this class
        * provides a hybrid implementation that uses two ints for instances that use
        * 64 bits or fewer. It has a byte array reference member which will only be
        * used if more than 64 bits are required.
        *
        * Note that the code that uses this class will never perform operations
        * on sets of different sizes, so that check does not have to be made here.
        *
        * @xerces.internal
        *
        * @version $Id: CMStateSet.java,v 1.5 2004/10/04 22:00:42 mrglavas Exp $
        */
    </comment>
    <comment type="line">// made this class public so it can be accessed by</comment>
    <comment type="line">// the XS content models from the schema package -neilg.</comment>
    <class>
        <specifier>public</specifier>
        class
        <name>CMStateSet</name>
        <block>{
            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <constructor>
                <specifier>public</specifier>
                <name>CMStateSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bitCount</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Store the required bit count and insure its legal</comment>
                    <expr_stmt>
                        <expr>
                            <name>fBitCount</name>
                            =
                            <name>bitCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"ImplementationMessages.VAL_CMSI"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <comment type="line">//</comment>
                    <comment type="line">// See if we need to allocate the byte array or whether we can live</comment>
                    <comment type="line">// within the 64 bit high performance scheme.</comment>
                    <comment type="line">//</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &gt; 64
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fByteCount</name>
                                        = <name>fBitCount</name> / 8
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fBitCount</name>
                                            % 8 != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr><name>fByteCount</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>fByteArray</name>
                                        = new
                                        <name>
                                            <name>byte</name>
                                            <index>[
                                                <expr>
                                                    <name>fByteCount</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Init all the bits to zero</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>zeroBits</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Public inherited methods</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>strRet</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>strRet</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"{"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>index</name>
                                        &lt;
                                        <name>fBitCount</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>index</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>getBit</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>strRet</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>" " +
                                                                    <name>index</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>strRet</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>" }"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>

                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name>RuntimeException</name>
                                    </type>
                                    <name>exToCatch</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">//</comment>
                                <comment type="line">// We know this won't happen but we have to catch it to avoid it
                                </comment>
                                <comment type="line">// having to be in our 'throws' list.</comment>
                                <comment type="line">//</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <call>
                                <name><name>strRet</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Package final methods</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// the XS content models from the schema package -neilg.</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>intersection</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMStateSet</name>
                            </type>
                            <name>setToAnd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fBits1</name>
                                        &amp;=
                                        <name><name>setToAnd</name>.
                                            <name>fBits1</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fBits2</name>
                                        &amp;=
                                        <name><name>setToAnd</name>.
                                            <name>fBits2</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>fByteCount</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &amp;=
                                            <name><name>setToAnd</name>.
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>getBit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bitToGet</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bitToGet</name>
                                &gt;=
                                <name>fBitCount</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"ImplementationMessages.VAL_CMSI"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>mask</name> =
                                        <init>
                                            <expr>(0x1 &lt;&lt; (<name>bitToGet</name> % 32))
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>bitToGet</name>
                                            &lt; 32
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>(<name>fBits1</name> &amp; <name>mask</name>) != 0
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <return>return
                                            <expr>(<name>fBits2</name> &amp; <name>mask</name>) != 0
                                            </expr>
                                            ;
                                        </return>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// Create the mask and byte values</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>byte</name>
                                        </type>
                                        <name>mask</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>byte</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0x1 &lt;&lt; (<name>bitToGet</name> % 8)
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>ofs</name> =
                                        <init>
                                            <expr>
                                                <name>bitToGet</name>
                                                &gt;&gt; 3
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// And access the right bit and byte</comment>
                                <return>return
                                    <expr>((
                                        <name>
                                            <name>fByteArray</name>
                                            <index>[
                                                <expr>
                                                    <name>ofs</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &amp; <name>mask</name>) != 0)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>((<name>fBits1</name> == 0) &amp;&amp; (<name>fBits2</name> == 0))
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>fByteCount</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>fByteArray</name>
                                                        <index>[
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    != 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <return>return <expr>false</expr>;
                                                </return>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMStateSet</name>
                            </type>
                            <name>setToCompare</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                !=
                                <name><name>setToCompare</name>.
                                    <name>fBitCount</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>((<name>fBits1</name> ==
                                        <name><name>setToCompare</name>.
                                            <name>fBits1</name>
                                        </name>
                                        )
                                        &amp;&amp; (<name>fBits2</name> ==
                                        <name><name>setToCompare</name>.
                                            <name>fBits2</name>
                                        </name>
                                        ))
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>
                                        <name>fByteCount</name>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>index</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>fByteArray</name>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name><name>setToCompare</name>.
                                            <name>fByteArray</name>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>false</expr>;
                                    </return>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// the XS content models from the schema package -neilg.</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>union</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMStateSet</name>
                            </type>
                            <name>setToOr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fBits1</name>
                                        |=
                                        <name><name>setToOr</name>.
                                            <name>fBits1</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fBits2</name>
                                        |=
                                        <name><name>setToOr</name>.
                                            <name>fBits2</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>fByteCount</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            |=
                                            <name><name>setToOr</name>.
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>setBit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bitToSet</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bitToSet</name>
                                &gt;=
                                <name>fBitCount</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"ImplementationMessages.VAL_CMSI"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>mask</name> =
                                        <init>
                                            <expr>(0x1 &lt;&lt; (<name>bitToSet</name> % 32))
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>bitToSet</name>
                                            &lt; 32
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fBits1</name>
                                                    &amp;= ~
                                                    <name>mask</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fBits1</name>
                                                    |=
                                                    <name>mask</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fBits2</name>
                                                    &amp;= ~
                                                    <name>mask</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fBits2</name>
                                                    |=
                                                    <name>mask</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// Create the mask and byte values</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>byte</name>
                                        </type>
                                        <name>mask</name> =
                                        <init>
                                            <expr>
                                                <call>(<name>byte</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0x1 &lt;&lt; (<name>bitToSet</name> % 8)
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>ofs</name> =
                                        <init>
                                            <expr>
                                                <name>bitToSet</name>
                                                &gt;&gt; 3
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// And access the right bit and byte</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fByteArray</name>
                                            <index>[
                                                <expr>
                                                    <name>ofs</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &amp;= ~
                                        <name>mask</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fByteArray</name>
                                            <index>[
                                                <expr>
                                                    <name>ofs</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        |=
                                        <name>mask</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// the XS content models from the schema package -neilg.</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>setTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMStateSet</name>
                            </type>
                            <name>srcSet</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// They have to be the same size</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                !=
                                <name><name>srcSet</name>.
                                    <name>fBitCount</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>RuntimeException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"ImplementationMessages.VAL_CMSI"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fBits1</name>
                                        =
                                        <name><name>srcSet</name>.
                                            <name>fBits1</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fBits2</name>
                                        =
                                        <name><name>srcSet</name>.
                                            <name>fBits2</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>fByteCount</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name><name>srcSet</name>.
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// had to make this method public so it could be accessed from</comment>
            <comment type="line">// schema package - neilg.</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>zeroBits</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fBits1</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fBits2</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>fByteCount</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = 0
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Private data members</comment>
            <comment type="line">//</comment>
            <comment type="line">// fBitCount</comment>
            <comment type="line">// The count of bits that the outside world wants to support,</comment>
            <comment type="line">// so its the max bit index plus one.</comment>
            <comment type="line">//</comment>
            <comment type="line">// fByteCount</comment>
            <comment type="line">// If the bit count is &gt; 64, then we use the fByteArray member to</comment>
            <comment type="line">// store the bits, and this indicates its size in bytes. Otherwise</comment>
            <comment type="line">// its value is meaningless.</comment>
            <comment type="line">//</comment>
            <comment type="line">// fBits1</comment>
            <comment type="line">// fBits2</comment>
            <comment type="line">// When the bit count is &lt; 64 (very common), these hold the bits.</comment>
            <comment type="line">// Otherwise, the fByteArray member holds htem.</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fBitCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fByteCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fBits1</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fBits2</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>fByteArray</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="block">/* Optimization(Jan, 2001) */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!(<name>o</name>
                                <name>instanceof</name>
                                <name>CMStateSet</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>isSameSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>CMStateSet</name>)
                                            <name>o</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fBitCount</name>
                                &lt; 65
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr><name>fBits1</name>+ <name>fBits2</name> * 31
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>hash</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>fByteCount</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>index</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>hash</name>
                                            =
                                            <name>
                                                <name>fByteArray</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            + <name>hash</name> * 31
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                <return>return
                                    <expr>
                                        <name>hash</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <comment type="block">/* Optimization(Jan, 2001) */</comment>
            }
        </block>
    </class>
    <empty_stmt>;</empty_stmt>
</unit>
