<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dtd\models\CMUniOp.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dtd</name>.
            <name>models</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dtd</name>.
            <name>XMLContentSpec</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Content model Uni-Op node.
        *
        * @xerces.internal
        *
        * @version $Id: CMUniOp.java,v 1.4 2004/10/04 22:00:42 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CMUniOp</name>
        <super>
            <extends>extends
                <name>CMNode</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <constructor>
                <specifier>public</specifier>
                <name>CMUniOp</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CMNode</name>
                            </type>
                            <name>childNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Insure that its one of the types we require</comment>
                    <if>if
                        <condition>(
                            <expr>(
                                <call>
                                    <name>type</name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>XMLContentSpec</name>.
                                    <name>CONTENTSPECNODE_ZERO_OR_ONE</name>
                                </name>
                                )
                                &amp;&amp; (
                                <call>
                                    <name>type</name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>XMLContentSpec</name>.
                                    <name>CONTENTSPECNODE_ZERO_OR_MORE</name>
                                </name>
                                )
                                &amp;&amp; (
                                <call>
                                    <name>type</name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>XMLContentSpec</name>.
                                    <name>CONTENTSPECNODE_ONE_OR_MORE</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"ImplementationMessages.VAL_UST"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Store the node and init any data that needs it</comment>
                    <expr_stmt>
                        <expr>
                            <name>fChild</name>
                            =
                            <name>childNode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Package, final methods</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>CMNode</name>
                </type>
                <name>getChild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fChild</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Package, inherited methods</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isNullable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">//</comment>
                    <comment type="line">// For debugging purposes, make sure we got rid of all non '*'</comment>
                    <comment type="line">// repetitions. Otherwise, '*' style nodes are always nullable.</comment>
                    <comment type="line">//</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>type</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>XMLContentSpec</name>.
                                    <name>CONTENTSPECNODE_ONE_OR_MORE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>fChild</name>.
                                            <name>isNullable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <return>return <expr>true</expr>;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Protected, inherited methods</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>calcFirstPos</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMStateSet</name>
                            </type>
                            <name>toSet</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Its just based on our child node's first pos</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>toSet</name>.
                                    <name>setTo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>fChild</name>.
                                                    <name>firstPos</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>calcLastPos</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CMStateSet</name>
                            </type>
                            <name>toSet</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Its just based on our child node's last pos</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>toSet</name>.
                                    <name>setTo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>fChild</name>.
                                                    <name>lastPos</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="line">// -------------------------------------------------------------------</comment>
            <comment type="line">// Private data members</comment>
            <comment type="line">//</comment>
            <comment type="line">// fChild</comment>
            <comment type="line">// This is the reference to the one child that we have for this</comment>
            <comment type="line">// unary operation.</comment>
            <comment type="line">// -------------------------------------------------------------------</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>CMNode</name>
                    </type>
                    <name>fChild</name>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
    <empty_stmt>;</empty_stmt>

</unit>
