<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\ChildNode.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * ChildNode inherits from NodeImpl and adds the capability of being a child by
        * having references to its previous and next siblings.
        *
        * @xerces.internal
        *
        * @version $Id: ChildNode.java,v 1.10 2004/10/05 17:12:51 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>ChildNode</name>
        <super>
            <extends>extends
                <name>NodeImpl</name>
            </extends>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-6112455738802414002L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>transient</name>
                        <name>StringBuffer</name>
                    </type>
                    <name>fBufferStr</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Previous sibling. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ChildNode</name>
                    </type>
                    <name>previousSibling</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Next sibling. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ChildNode</name>
                    </type>
                    <name>nextSibling</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * No public constructor; only subclasses of Node should be
                * instantiated, and those normally via a Document's factory methods
                * &lt;p&gt;
                * Every Node knows what Document it belongs to.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ChildNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDocument</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDocument</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(CoreDocumentImpl)</comment>

            <comment type="javadoc">/** Constructor for serialization. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ChildNode</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// Node methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Returns a duplicate of a given node. You can consider this a
                * generic "copy constructor" for nodes. The newly returned object should
                * be completely independent of the source object's subtree, so changes
                * in one after the clone has been made will not affect the other.
                * &lt;P&gt;
                * Note: since we never have any children deep is meaningless here,
                * ParentNode overrides this behavior.
                * @see ParentNode
                *
                * &lt;p&gt;
                * Example: Cloning a Text node will copy both the node and the text it
                * contains.
                * &lt;p&gt;
                * Example: Cloning something that has children -- Element or Attr, for
                * example -- will _not_ clone those children unless a "deep clone"
                * has been requested. A shallow clone of an Attr node will yield an
                * empty Attr of the same name.
                * &lt;p&gt;
                * NOTE: Clones will always be read/write, even if the node being cloned
                * is read-only, to permit applications using only the DOM API to obtain
                * editable copies of locked portions of the tree.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>cloneNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>newnode</name> =
                            <init>
                                <expr>(<name>ChildNode</name>)
                                    <call>
                                        <name><name>super</name>.
                                            <name>cloneNode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>deep</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Need to break the association w/ original kids</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>newnode</name>.
                                <name>previousSibling</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newnode</name>.
                                <name>nextSibling</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newnode</name>.
                                    <name>isFirstChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>newnode</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// cloneNode(boolean):Node</comment>

            <comment type="javadoc">/**
                * Returns the parent node of this node
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getParentNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if we have an owner, ownerNode is our parent, otherwise it's</comment>
                    <comment type="line">// our ownerDocument and we don't have a parent</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>isOwned</name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>ownerNode</name> :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * same as above but returns internal type
                */
            </comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>NodeImpl</name>
                </type>
                <name>parentNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if we have an owner, ownerNode is our parent, otherwise it's</comment>
                    <comment type="line">// our ownerDocument and we don't have a parent</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>isOwned</name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>ownerNode</name> :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The next child of this node's parent, or null if none */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getNextSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextSibling</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The previous child of this node's parent, or null if none */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getPreviousSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if we are the firstChild, previousSibling actually refers to our</comment>
                    <comment type="line">// parent's lastChild, but we hide that</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>isFirstChild</name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>null</name> :
                            <name>previousSibling</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * same as above but returns internal type
                */
            </comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>ChildNode</name>
                </type>
                <name>previousSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if we are the firstChild, previousSibling actually refers to our</comment>
                    <comment type="line">// parent's lastChild, but we hide that</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>isFirstChild</name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>null</name> :
                            <name>previousSibling</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class ChildNode</comment>
</unit>
