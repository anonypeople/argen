<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\DOMASBuilder.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ls</name>.
            <name>LSInput</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ls</name>.
            <name>LSParser</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @deprecated
        * An Abstract Schema parser interface.
        * &lt;p&gt;&lt;code&gt;DOMASBuilder&lt;/code&gt; provides an API for parsing Abstract Schemas
        * and building the corresponding &lt;code&gt;ASModel&lt;/code&gt; tree.
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>DOMASBuilder</name>
        <super>
            <extends>extends
                <name>LSParser</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Associate an &lt;code&gt;ASModel&lt;/code&gt; with a &lt;code&gt;LSParser&lt;/code&gt;. This
                * &lt;code&gt;ASModel&lt;/code&gt; will be used by the "
                * &lt;code&gt;validate-if-schema&lt;/code&gt;" and "
                * &lt;code&gt;datatype-normalization&lt;/code&gt;" options during the load of a new
                * &lt;code&gt;Document&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>getAbstractSchema</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * Associate an &lt;code&gt;ASModel&lt;/code&gt; with a &lt;code&gt;LSParser&lt;/code&gt;. This
                * &lt;code&gt;ASModel&lt;/code&gt; will be used by the "
                * &lt;code&gt;validate-if-schema&lt;/code&gt;" and "
                * &lt;code&gt;datatype-normalization&lt;/code&gt;" options during the load of a new
                * &lt;code&gt;Document&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAbstractSchema</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>abstractSchema</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Parse a Abstract Schema from a location identified by an URI reference.
                * @param uri The location of the Abstract Schema to be read.
                * @return The newly created Abstract Schema.
                * @exception DOMASException
                * Exceptions raised by &lt;code&gt;parseASURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a &lt;code&gt;DOMASException&lt;/code&gt; if any form of
                * Abstract Schema inconsistencies or warning occurs during the parse,
                * but application defined errorHandlers are not required to do so.
                * &lt;br&gt; WRONG_MIME_TYPE_ERR: Raised when &lt;code&gt;mimeTypeCheck&lt;/code&gt; is
                * &lt;code&gt;true&lt;/code&gt; and the input source has an incorrect MIME Type.
                * See the attribute &lt;code&gt;mimeTypeCheck&lt;/code&gt;.
                * @exception DOMSystemException
                * Exceptions raised by &lt;code&gt;parseURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a DOMSystemException if any form I/O or other
                * system error occurs during the parse, but application defined error
                * handlers are not required to do so.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>parseASURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Parse a Abstract Schema from a location identified by an
                * &lt;code&gt;LSInput&lt;/code&gt;.
                * @param is The &lt;code&gt;LSInput&lt;/code&gt; from which the source
                * Abstract Schema is to be read.
                * @return The newly created &lt;code&gt;ASModel&lt;/code&gt;.
                * @exception DOMASException
                * Exceptions raised by &lt;code&gt;parseASURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a &lt;code&gt;DOMASException&lt;/code&gt; if any form of
                * Abstract Schema inconsistencies or warning occurs during the parse,
                * but application defined errorHandlers are not required to do so.
                * &lt;br&gt; Raise a WRONG_MIME_TYPE_ERR when &lt;code&gt;mimeTypeCheck&lt;/code&gt; is
                * &lt;code&gt;true&lt;/code&gt; and the inputsource has an incorrect MIME Type.
                * See attribute &lt;code&gt;mimeTypeCheck&lt;/code&gt;.
                * @exception DOMSystemException
                * Exceptions raised by &lt;code&gt;parseURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a DOMSystemException if any form I/O or other
                * system error occurs during the parse, but application defined error
                * handlers are not required to do so.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>parseASInputSource</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>LSInput</name>
                            </type>
                            <name>is</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
