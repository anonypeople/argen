<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\parsers\DOMASBuilderImpl.java">
    <comment type="block">/*
        * Copyright 2000-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>parsers</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom</name>.
            <name>ASModelImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.<name>as</name>.
            <name>ASModel</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.<name>as</name>.
            <name>DOMASBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.<name>as</name>.
            <name>DOMASException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>Constants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>SchemaGrammar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xs</name>.
            <name>XSGrammarBucket</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLGrammarPoolImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>Grammar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>grammars</name>.
            <name>XMLGrammarPool</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLInputSource</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ls</name>.
            <name>LSInput</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This is Abstract Schema DOM Builder class. It extends the DOMParserImpl
        * class. Provides support for preparsing schemas.
        *
        * @deprecated
        * @author Pavani Mukthipudi, Sun Microsystems Inc.
        * @author Neil Graham, IBM
        * @version $Id: DOMASBuilderImpl.java,v 1.25 2004/02/24 23:15:57 mrglavas Exp $
        *
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class
        <name>DOMASBuilderImpl</name>
        <super>
            <extends>extends
                <name>DOMParserImpl</name>
            </extends>
            <implements>implements
                <name>DOMASBuilder</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="line">// Feature ids</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SCHEMA_FULL_CHECKING</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_FEATURE_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SCHEMA_FULL_CHECKING</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Property ids</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ERROR_REPORTER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ERROR_REPORTER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SYMBOL_TABLE</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>SYMBOL_TABLE_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ENTITY_MANAGER</name> =
                    <init>
                        <expr>
                            <name><name>Constants</name>.
                                <name>XERCES_PROPERTY_PREFIX</name>
                            </name>
                            +
                            <name><name>Constants</name>.
                                <name>ENTITY_MANAGER_PROPERTY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XSGrammarBucket</name>
                    </type>
                    <name>fGrammarBucket</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ASModelImpl</name>
                    </type>
                    <name>fAbstractSchema</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Constructs a DOM Builder using the dtd/xml schema parser configuration.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DOMASBuilderImpl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>XMLGrammarCachingConfiguration</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;</comment>

            <comment type="javadoc">/**
                * Constructs a DOM Builder using the specified parser configuration.
                * We must demand that the configuration extend XMLGrammarCachingConfiguration to make
                * sure all relevant methods/features are available.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DOMASBuilderImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarCachingConfiguration</name>
                            </type>
                            <name>config</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>config</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(XMLParserConfiguration)</comment>

            <comment type="javadoc">/**
                * Constructs a DOM Builder using the specified symbol table.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DOMASBuilderImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>XMLGrammarCachingConfiguration</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>symbolTable</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(SymbolTable)</comment>


            <comment type="javadoc">/**
                * Constructs a DOM Builder using the specified symbol table and
                * grammar pool.
                * The grammarPool implementation should extent the default
                * implementation; otherwise, correct functioning of this class may
                * not occur.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DOMASBuilderImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarPool</name>
                            </type>
                            <name>grammarPool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>XMLGrammarCachingConfiguration</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>symbolTable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>grammarPool</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// DOMASBuilder methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Associate an &lt;code&gt;ASModel&lt;/code&gt; with a document instance. This
                * &lt;code&gt;ASModel&lt;/code&gt; will be used by the "
                * &lt;code&gt;validate-if-schema&lt;/code&gt;" and "
                * &lt;code&gt;datatype-normalization&lt;/code&gt;" options during the load of a new
                * &lt;code&gt;Document&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>getAbstractSchema</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fAbstractSchema</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Associate an &lt;code&gt;ASModel&lt;/code&gt; with a document instance. This
                * &lt;code&gt;ASModel&lt;/code&gt; will be used by the "
                * &lt;code&gt;validate-if-schema&lt;/code&gt;" and "
                * &lt;code&gt;datatype-normalization&lt;/code&gt;" options during the load of a new
                * &lt;code&gt;Document&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAbstractSchema</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>abstractSchema</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// since the ASModel associated with this object is an attribute</comment>
                    <comment type="line">// according to the DOM IDL, we must obliterate anything</comment>
                    <comment type="line">// that was set before, rather than adding to it.</comment>
                    <comment type="line">// REVISIT: so shouldn't we attempt to clear the</comment>
                    <comment type="line">// grammarPool before adding stuff to it? - NG</comment>
                    <expr_stmt>
                        <expr>
                            <name>fAbstractSchema</name>
                            = (<name>ASModelImpl</name>)
                            <name>abstractSchema</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// make sure the GrammarPool is properly initialized.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLGrammarPool</name>
                            </type>
                            <name>grammarPool</name> =
                            <init>
                                <expr>(<name>XMLGrammarPool</name>)
                                    <call>
                                        <name><name>fConfiguration</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>StandardParserConfiguration</name>.
                                                        <name>XMLGRAMMAR_POOL</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// if there is no grammar pool, create one</comment>
                    <comment type="line">// REVISIT: ASBuilder should always create one.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>grammarPool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// something's not right in this situation...</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>grammarPool</name>
                                        = new
                                        <call>
                                            <name>XMLGrammarPoolImpl</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fConfiguration</name>.
                                                <name>setProperty</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>StandardParserConfiguration</name>.
                                                            <name>XMLGRAMMAR_POOL</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>grammarPool</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fAbstractSchema</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>initGrammarPool</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fAbstractSchema</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>grammarPool</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Parse a Abstract Schema from a location identified by an URI.
                *
                * @param uri The location of the Abstract Schema to be read.
                * @return The newly created &lt;code&gt;Abstract Schema&lt;/code&gt;.
                * @exception DOMASException
                * Exceptions raised by &lt;code&gt;parseASURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a &lt;code&gt;DOMASException&lt;/code&gt; if any form of
                * Abstract Schema inconsistencies or warning occurs during the parse,
                * but application defined errorHandlers are not required to do so.
                * &lt;br&gt; WRONG_MIME_TYPE_ERR: Raised when &lt;code&gt;mimeTypeCheck&lt;/code&gt; is
                * &lt;code&gt;true&lt;/code&gt; and the inputsource has an incorrect MIME Type.
                * See attribute &lt;code&gt;mimeTypeCheck&lt;/code&gt;.
                * @exception DOMSystemException
                * Exceptions raised by &lt;code&gt;parseURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a DOMSystemException if any form I/O or other
                * system error occurs during the parse, but application defined error
                * handlers are not required to do so.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>parseASURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>source</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>XMLInputSource</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>uri</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>parseASInputSource</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>source</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Parse a Abstract Schema from a location identified by an
                * &lt;code&gt;LSInput&lt;/code&gt;.
                *
                * @param is The &lt;code&gt;LSInput&lt;/code&gt; from which the source
                * Abstract Schema is to be read.
                * @return The newly created &lt;code&gt;ASModel&lt;/code&gt;.
                * @exception DOMASException
                * Exceptions raised by &lt;code&gt;parseASURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a &lt;code&gt;DOMASException&lt;/code&gt; if any form of
                * Abstract Schema inconsistencies or warning occurs during the parse,
                * but application defined errorHandlers are not required to do so.
                * &lt;br&gt; WRONG_MIME_TYPE_ERR: Raised when &lt;code&gt;mimeTypeCheck&lt;/code&gt; is
                * true and the inputsource has an incorrect MIME Type. See attribute
                * &lt;code&gt;mimeTypeCheck&lt;/code&gt;.
                * @exception DOMSystemException
                * Exceptions raised by &lt;code&gt;parseURI()&lt;/code&gt; originate with the
                * installed ErrorHandler, and thus depend on the implementation of
                * the &lt;code&gt;DOMErrorHandler&lt;/code&gt; interfaces. The default error
                * handlers will raise a DOMSystemException if any form I/O or other
                * system error occurs during the parse, but application defined error
                * handlers are not required to do so.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>parseASInputSource</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>LSInput</name>
                            </type>
                            <name>is</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// need to wrap the LSInput with an XMLInputSource</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>xis</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>dom2xmlInputSource</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>is</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>parseASInputSource</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>xis</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>XNIException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Exception</name>
                                        </type>
                                        <name>ex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getException</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <throw>throw
                                    <expr>
                                        <name>ex</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>ASModel</name>
                </type>
                <name>parseASInputSource</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLInputSource</name>
                            </type>
                            <name>is</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fGrammarBucket</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fGrammarBucket</name>
                                        = new
                                        <call>
                                            <name>XSGrammarBucket</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initGrammarBucket</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// actually do the parse:</comment>
                    <comment type="line">// save some casting</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLGrammarCachingConfiguration</name>
                            </type>
                            <name>gramConfig</name> =
                            <init>
                                <expr>(<name>XMLGrammarCachingConfiguration</name>)
                                    <name>fConfiguration</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// ensure grammarPool doesn't absorb grammars while it's parsing</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>gramConfig</name>.
                                    <name>lockGrammarPool</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                            </type>
                            <name>grammar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>gramConfig</name>.
                                            <name>parseXMLSchema</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>is</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>gramConfig</name>.
                                    <name>unlockGrammarPool</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ASModelImpl</name>
                            </type>
                            <name>newAsModel</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>grammar</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>newAsModel</name>
                                        = new
                                        <call>
                                            <name>ASModelImpl</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fGrammarBucket</name>.
                                                <name>putGrammar</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>grammar</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>addGrammars</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newAsModel</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fGrammarBucket</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>newAsModel</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// put all the grammars we have access to in the GrammarBucket</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initGrammarBucket</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fGrammarBucket</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fAbstractSchema</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>initGrammarBucketRecurse</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fAbstractSchema</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initGrammarBucketRecurse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModelImpl</name>
                            </type>
                            <name>currModel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>currModel</name>.
                                        <name>getGrammar</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>fGrammarBucket</name>.
                                                <name>putGrammar</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>currModel</name>.
                                                                <name>getGrammar</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>currModel</name>.
                                        <name>getInternalASModels</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>size</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ASModelImpl</name>
                                    </type>
                                    <name>nextModel</name> =
                                    <init>
                                        <expr>
                                            <call>(<name>ASModelImpl</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>currModel</name>.
                                                                    <name>getInternalASModels</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>elementAt</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>initGrammarBucketRecurse</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>nextModel</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>addGrammars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModelImpl</name>
                            </type>
                            <name>model</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XSGrammarBucket</name>
                            </type>
                            <name>grammarBucket</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SchemaGrammar</name>
                                <index>[]</index>
                            </type>
                            <name>grammarList</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>grammarBucket</name>.
                                            <name>getGrammars</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>grammarList</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ASModelImpl</name>
                                    </type>
                                    <name>newModel</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>ASModelImpl</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>newModel</name>.
                                            <name>setGrammar</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>grammarList</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>model</name>.
                                            <name>addASModel</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newModel</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            <comment type="line">// addGrammars</comment>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>initGrammarPool</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModelImpl</name>
                            </type>
                            <name>currModel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLGrammarPool</name>
                            </type>
                            <name>grammarPool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// put all the grammars in fAbstractSchema into the grammar pool.</comment>
                    <comment type="line">// grammarPool must never be null!</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Grammar</name>
                                <index>[]</index>
                            </type>
                            <name>grammars</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Grammar</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>(
                                <name>
                                    <name>grammars</name>
                                    <index>[<expr>0</expr>]
                                    </index>
                                </name>
                                = (<name>Grammar</name>)
                                <call>
                                    <name><name>currModel</name>.
                                        <name>getGrammar</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>grammarPool</name>.
                                                <name>cacheGrammars</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>grammars</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                        .
                                                        <call>
                                                            <name>getGrammarDescription</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getGrammarType</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>grammars</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>modelStore</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>currModel</name>.
                                            <name>getInternalASModels</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>modelStore</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>initGrammarPool</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>ASModelImpl</name>)
                                                    <call>
                                                        <name><name>modelStore</name>.
                                                            <name>elementAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>grammarPool</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    <comment type="line">// class DOMASBuilderImpl</comment>
</unit>
