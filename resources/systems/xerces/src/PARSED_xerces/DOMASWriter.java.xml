<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\DOMASWriter.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ls</name>.
            <name>LSSerializer</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @deprecated
        * A Abstract Schema serialization interface.
        * &lt;p&gt; DOMASWriters provides an API for serializing Abstract Schemas out in
        * the form of a source Abstract Schema. The Abstract Schema is written to
        * an output stream, the type of which depends on the specific language
        * bindings in use.
        * &lt;p&gt; DOMASWriter is a generic Abstract Schema serialization interface. It
        * can be applied to both an internal Abstract Schema and/or an external
        * Abstract Schema. DOMASWriter is applied to serialize a single Abstract
        * Schema. Serializing a document with an active Internal Abstract Schema
        * will serialize this internal Abstract Schema with the document as it is
        * part of the Document (see &lt;code&gt;LSSerializer&lt;/code&gt;).
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>DOMASWriter</name>
        <super>
            <extends>extends
                <name>LSSerializer</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Write out the specified Abstract Schema to the specified destination.
                * Does it write a DTD or an XML Schema (or something else)? Is it
                * possible to use this method to convert a DTD to an XML Schema?
                * @param destination The destination for the data to be written.
                * @param model The Abstract Schema to serialize.
                * @exception DOMSystemException
                * This exception will be raised in response to any sort of IO or system
                * error that occurs while writing to the destination. It may wrap an
                * underlying system exception.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>writeASModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>OutputStream</name>
                                </name>
                            </type>
                            <name>destination</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>model</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
