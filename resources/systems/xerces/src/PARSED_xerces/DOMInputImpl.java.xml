<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\DOMInputImpl.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ls</name>.
            <name>LSInput</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This Class &lt;code&gt;DOMInputImpl&lt;/code&gt; represents a single input source for an XML entity.
        * &lt;p&gt; This Class allows an application to encapsulate information about
        * an input source in a single object, which may include a public
        * identifier, a system identifier, a byte stream (possibly with a specified
        * encoding), and/or a character stream.
        * &lt;p&gt; The exact definitions of a byte stream and a character stream are
        * binding dependent.
        * &lt;p&gt; There are two places that the application will deliver this input
        * source to the parser: as the argument to the &lt;code&gt;parse&lt;/code&gt; method,
        * or as the return value of the &lt;code&gt;DOMResourceResolver.resolveEntity&lt;/code&gt;
        * method.
        * &lt;p&gt; The &lt;code&gt;DOMParser&lt;/code&gt; will use the &lt;code&gt;LSInput&lt;/code&gt;
        * object to determine how to read XML input. If there is a character stream
        * available, the parser will read that stream directly; if not, the parser
        * will use a byte stream, if available; if neither a character stream nor a
        * byte stream is available, the parser will attempt to open a URI
        * connection to the resource identified by the system identifier.
        * &lt;p&gt; An &lt;code&gt;LSInput&lt;/code&gt; object belongs to the application: the
        * parser shall never modify it in any way (it may modify a copy if
        * necessary). Eventhough all attributes in this interface are writable the
        * DOM implementation is expected to never mutate a LSInput.
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        *
        * @xerces.internal
        *
        * @author Gopal Sharma, SUN Microsystems Inc.
        * @version $Id: DOMInputImpl.java,v 1.4 2004/10/05 17:12:50 mrglavas Exp $
        */
    </comment>

    <comment type="line">// REVISIT:</comment>
    <comment type="line">// 1. it should be possible to do the following</comment>
    <comment type="line">// DOMInputImpl extends XMLInputSource implements LSInput</comment>
    <comment type="line">// 2. we probably need only the default constructor. -- el</comment>

    <class>
        <specifier>public</specifier>
        class <name>DOMInputImpl</name>
        <super>
            <implements>implements
                <name>LSInput</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fPublicId</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fSystemId</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fBaseSystemId</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>InputStream</name>
                    </type>
                    <name>fByteStream</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Reader</name>
                    </type>
                    <name>fCharStream</name>	=
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fData</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fEncoding</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fCertifiedText</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default Constructor, constructs an input source
                *
                *
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DOMInputImpl</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs an input source from just the public and system
                * identifiers, leaving resolution of the entity and opening of
                * the input stream up to the caller.
                *
                * @param publicId The public identifier, if known.
                * @param systemId The system identifier. This value should
                * always be set, if possible, and can be
                * relative or absolute. If the system identifier
                * is relative, then the base system identifier
                * should be set.
                * @param baseSystemId The base system identifier. This value should
                * always be set to the fully expanded URI of the
                * base system identifier, if possible.
                */
            </comment>

            <constructor>
                <specifier>public</specifier>
                <name>DOMInputImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseSystemId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <name>fPublicId</name>
                            =
                            <name>publicId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSystemId</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBaseSystemId</name>
                            =
                            <name>baseSystemId</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// DOMInputImpl(String,String,String)</comment>

            <comment type="javadoc">/**
                * Constructs an input source from a byte stream.
                *
                * @param publicId The public identifier, if known.
                * @param systemId The system identifier. This value should
                * always be set, if possible, and can be
                * relative or absolute. If the system identifier
                * is relative, then the base system identifier
                * should be set.
                * @param baseSystemId The base system identifier. This value should
                * always be set to the fully expanded URI of the
                * base system identifier, if possible.
                * @param byteStream The byte stream.
                * @param encoding The encoding of the byte stream, if known.
                */
            </comment>

            <constructor>
                <specifier>public</specifier>
                <name>DOMInputImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseSystemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>byteStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <name>fPublicId</name>
                            =
                            <name>publicId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSystemId</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBaseSystemId</name>
                            =
                            <name>baseSystemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fByteStream</name>
                            =
                            <name>byteStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEncoding</name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// DOMInputImpl(String,String,String,InputStream,String)</comment>

            <comment type="javadoc">/**
                * Constructs an input source from a character stream.
                *
                * @param publicId The public identifier, if known.
                * @param systemId The system identifier. This value should
                * always be set, if possible, and can be
                * relative or absolute. If the system identifier
                * is relative, then the base system identifier
                * should be set.
                * @param baseSystemId The base system identifier. This value should
                * always be set to the fully expanded URI of the
                * base system identifier, if possible.
                * @param charStream The character stream.
                * @param encoding The original encoding of the byte stream
                * used by the reader, if known.
                */
            </comment>

            <constructor>
                <specifier>public</specifier>
                <name>DOMInputImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseSystemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>charStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <name>fPublicId</name>
                            =
                            <name>publicId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSystemId</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBaseSystemId</name>
                            =
                            <name>baseSystemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCharStream</name>
                            =
                            <name>charStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEncoding</name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// DOMInputImpl(String,String,String,Reader,String)</comment>

            <comment type="javadoc">/**
                * Constructs an input source from a String.
                *
                * @param publicId The public identifier, if known.
                * @param systemId The system identifier. This value should
                * always be set, if possible, and can be
                * relative or absolute. If the system identifier
                * is relative, then the base system identifier
                * should be set.
                * @param baseSystemId The base system identifier. This value should
                * always be set to the fully expanded URI of the
                * base system identifier, if possible.
                * @param data The String Data.
                * @param encoding The original encoding of the byte stream
                * used by the reader, if known.
                */
            </comment>

            <constructor>
                <specifier>public</specifier>
                <name>DOMInputImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseSystemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fPublicId</name>
                            =
                            <name>publicId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSystemId</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fBaseSystemId</name>
                            =
                            <name>baseSystemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fData</name>
                            =
                            <name>data</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEncoding</name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// DOMInputImpl(String,String,String,String,String)</comment>

            <comment type="javadoc">/**
                * An attribute of a language-binding dependent type that represents a
                * stream of bytes.
                * &lt;br&gt;The parser will ignore this if there is also a character stream
                * specified, but it will use a byte stream in preference to opening a
                * URI connection itself.
                * &lt;br&gt;If the application knows the character encoding of the byte stream,
                * it should set the encoding property. Setting the encoding in this way
                * will override any encoding specified in the XML declaration itself.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InputStream</name>
                </type>
                <name>getByteStream</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fByteStream</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An attribute of a language-binding dependent type that represents a
                * stream of bytes.
                * &lt;br&gt;The parser will ignore this if there is also a character stream
                * specified, but it will use a byte stream in preference to opening a
                * URI connection itself.
                * &lt;br&gt;If the application knows the character encoding of the byte stream,
                * it should set the encoding property. Setting the encoding in this way
                * will override any encoding specified in the XML declaration itself.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setByteStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>byteStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fByteStream</name>
                            =
                            <name>byteStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An attribute of a language-binding dependent type that represents a
                * stream of 16-bit units. Application must encode the stream using
                * UTF-16 (defined in and Amendment 1 of ).
                * &lt;br&gt;If a character stream is specified, the parser will ignore any byte
                * stream and will not attempt to open a URI connection to the system
                * identifier.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Reader</name>
                </type>
                <name>getCharacterStream</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fCharStream</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * An attribute of a language-binding dependent type that represents a
                * stream of 16-bit units. Application must encode the stream using
                * UTF-16 (defined in and Amendment 1 of ).
                * &lt;br&gt;If a character stream is specified, the parser will ignore any byte
                * stream and will not attempt to open a URI connection to the system
                * identifier.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCharacterStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>characterStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fCharStream</name>
                            =
                            <name>characterStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A string attribute that represents a sequence of 16 bit units (utf-16
                * encoded characters).
                * &lt;br&gt;If string data is available in the input source, the parser will
                * ignore the character stream and the byte stream and will not attempt
                * to open a URI connection to the system identifier.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getStringData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A string attribute that represents a sequence of 16 bit units (utf-16
                * encoded characters).
                * &lt;br&gt;If string data is available in the input source, the parser will
                * ignore the character stream and the byte stream and will not attempt
                * to open a URI connection to the system identifier.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStringData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stringData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fData</name>
                            =
                            <name>stringData</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The character encoding, if known. The encoding must be a string
                * acceptable for an XML encoding declaration ( section 4.3.3 "Character
                * Encoding in Entities").
                * &lt;br&gt;This attribute has no effect when the application provides a
                * character stream. For other sources of input, an encoding specified
                * by means of this attribute will override any encoding specified in
                * the XML claration or the Text Declaration, or an encoding obtained
                * from a higher level protocol, such as HTTP .
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getEncoding</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fEncoding</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The character encoding, if known. The encoding must be a string
                * acceptable for an XML encoding declaration ( section 4.3.3 "Character
                * Encoding in Entities").
                * &lt;br&gt;This attribute has no effect when the application provides a
                * character stream. For other sources of input, an encoding specified
                * by means of this attribute will override any encoding specified in
                * the XML claration or the Text Declaration, or an encoding obtained
                * from a higher level protocol, such as HTTP .
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEncoding</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fEncoding</name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The public identifier for this input source. The public identifier is
                * always optional: if the application writer includes one, it will be
                * provided as part of the location information.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPublicId</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fPublicId</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * The public identifier for this input source. The public identifier is
                * always optional: if the application writer includes one, it will be
                * provided as part of the location information.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPublicId</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fPublicId</name>
                            =
                            <name>publicId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The system identifier, a URI reference , for this input source. The
                * system identifier is optional if there is a byte stream or a
                * character stream, but it is still useful to provide one, since the
                * application can use it to resolve relative URIs and can include it in
                * error messages and warnings (the parser will attempt to fetch the
                * ressource identifier by the URI reference only if there is no byte
                * stream or character stream specified).
                * &lt;br&gt;If the application knows the character encoding of the object
                * pointed to by the system identifier, it can register the encoding by
                * setting the encoding attribute.
                * &lt;br&gt;If the system ID is a relative URI reference (see section 5 in ),
                * the behavior is implementation dependent.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSystemId</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fSystemId</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * The system identifier, a URI reference , for this input source. The
                * system identifier is optional if there is a byte stream or a
                * character stream, but it is still useful to provide one, since the
                * application can use it to resolve relative URIs and can include it in
                * error messages and warnings (the parser will attempt to fetch the
                * ressource identifier by the URI reference only if there is no byte
                * stream or character stream specified).
                * &lt;br&gt;If the application knows the character encoding of the object
                * pointed to by the system identifier, it can register the encoding by
                * setting the encoding attribute.
                * &lt;br&gt;If the system ID is a relative URI reference (see section 5 in ),
                * the behavior is implementation dependent.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSystemId</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSystemId</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The base URI to be used (see section 5.1.4 in ) for resolving relative
                * URIs to absolute URIs. If the baseURI is itself a relative URI, the
                * behavior is implementation dependent.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getBaseURI</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fBaseSystemId</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * The base URI to be used (see section 5.1.4 in ) for resolving relative
                * URIs to absolute URIs. If the baseURI is itself a relative URI, the
                * behavior is implementation dependent.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setBaseURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fBaseSystemId</name>
                            =
                            <name>baseURI</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If set to true, assume that the input is certified (see section 2.13
                * in [&lt;a href='http://www.w3.org/TR/2002/CR-xml11-20021015/'&gt;XML 1.1&lt;/a&gt;]) when
                * parsing [&lt;a href='http://www.w3.org/TR/2002/CR-xml11-20021015/'&gt;XML 1.1&lt;/a&gt;].
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getCertifiedText</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fCertifiedText</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If set to true, assume that the input is certified (see section 2.13
                * in [&lt;a href='http://www.w3.org/TR/2002/CR-xml11-20021015/'&gt;XML 1.1&lt;/a&gt;]) when
                * parsing [&lt;a href='http://www.w3.org/TR/2002/CR-xml11-20021015/'&gt;XML 1.1&lt;/a&gt;].
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCertifiedText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>certifiedText</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fCertifiedText</name>
                            =
                            <name>certifiedText</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class DOMInputImpl</comment>
</unit>
