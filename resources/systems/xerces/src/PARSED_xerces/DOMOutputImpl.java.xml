<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\DOMOutputImpl.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ls</name>.
            <name>LSOutput</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class represents an output destination for data.
        * This interface allows an application to encapsulate information about an
        * output destination in a single object, which may include a URI, a byte stream
        * (possibly with a specifiedencoding), a base URI, and/or a character stream.
        * The exact definitions of a byte stream and a character stream are binding
        * dependent.
        * The application is expected to provide objects that implement this interface
        * whenever such objects are needed. The application can either provide its
        * own objects that implement this interface, or it can use the generic factory
        * method DOMImplementationLS.createLSOutput() to create objects that
        * implement this interface.
        * The DOMSerializer will use the LSOutput object to determine where to
        * serialize the output to. The DOMSerializer will look at the different
        * outputs specified in the LSOutput in the following order to know which one
        * to output to, the first one that data can be output to will be used:
        * 1.LSOutput.characterStream
        * 2.LSOutput.byteStream
        * 3.LSOutput.systemId
        * LSOutput objects belong to the application. The DOM implementation will
        * never modify them (though it may make copies and modify the copies,
        * if necessary).
        *
        * @xerces.internal
        *
        * @author Arun Yadav, Sun Microsytems
        * @author Gopal Sharma, Sun Microsystems
        **/
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>DOMOutputImpl</name>
        <super>
            <implements>implements
                <name>LSOutput</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Writer</name>
                    </type>
                    <name>fCharStream</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>OutputStream</name>
                    </type>
                    <name>fByteStream</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fSystemId</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fEncoding</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default Constructor
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DOMOutputImpl</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * An attribute of a language and binding dependent type that represents a
                * writable stream of bytes. If the application knows the character encoding
                * of the byte stream, it should set the encoding attribute. Setting the
                * encoding in this way will override any encoding specified in an XML
                * declaration in the data.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Writer</name>
                </type>
                <name>getCharacterStream</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fCharStream</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * An attribute of a language and binding dependent type that represents a
                * writable stream of bytes. If the application knows the character encoding
                * of the byte stream, it should set the encoding attribute. Setting the
                * encoding in this way will override any encoding specified in an XML
                * declaration in the data.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCharacterStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>characterStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fCharStream</name>
                            =
                            <name>characterStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * Depending on the language binding in use, this attribute may not be
                * available. An attribute of a language and binding dependent type that
                * represents a writable stream to which 16-bit units can be output. The
                * application must encode the stream using UTF-16 (defined in [Unicode] and
                * Amendment 1 of [ISO/IEC 10646]).
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>OutputStream</name>
                </type>
                <name>getByteStream</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fByteStream</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * Depending on the language binding in use, this attribute may not be
                * available. An attribute of a language and binding dependent type that
                * represents a writable stream to which 16-bit units can be output. The
                * application must encode the stream using UTF-16 (defined in [Unicode] and
                * Amendment 1 of [ISO/IEC 10646]).
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setByteStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>byteStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fByteStream</name>
                            =
                            <name>byteStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * The system identifier, a URI reference [IETF RFC 2396], for this output
                * destination. If the application knows the character encoding of the
                * object pointed to by the system identifier, it can set the encoding
                * using the encoding attribute. If the system ID is a relative URI
                * reference (see section 5 in [IETF RFC 2396]), the behavior is
                * implementation dependent.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSystemId</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fSystemId</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * The system identifier, a URI reference [IETF RFC 2396], for this output
                * destination. If the application knows the character encoding of the
                * object pointed to by the system identifier, it can set the encoding
                * using the encoding attribute. If the system ID is a relative URI
                * reference (see section 5 in [IETF RFC 2396]), the behavior is
                * implementation dependent.
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSystemId</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSystemId</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * The character encoding, if known. The encoding must be a string
                * acceptable for an XML encoding declaration ([XML 1.0] section 4.3.3
                * "Character Encoding in Entities"). This attribute has no effect when the
                * application provides a character stream or string data. For other sources
                * of input, an encoding specified by means of this attribute will override
                * any encoding specified in the XML declaration or the Text declaration, or
                * an encoding obtained from a higher level protocol, such as HTTP
                * [IETF RFC 2616].
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getEncoding</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fEncoding</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * The character encoding, if known. The encoding must be a string
                * acceptable for an XML encoding declaration ([XML 1.0] section 4.3.3
                * "Character Encoding in Entities"). This attribute has no effect when the
                * application provides a character stream or string data. For other sources
                * of input, an encoding specified by means of this attribute will override
                * any encoding specified in the XML declaration or the Text declaration, or
                * an encoding obtained from a higher level protocol, such as HTTP
                * [IETF RFC 2616].
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEncoding</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fEncoding</name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <empty_stmt>;</empty_stmt>

            }
        </block>
    </class>
    <comment type="line">//DOMOutputImpl</comment>
</unit>
