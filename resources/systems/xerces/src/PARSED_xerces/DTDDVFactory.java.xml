<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\DTDDVFactory.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>dv</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The factory to create and return DTD types. The implementation should
        * store the created datatypes in static data, so that they can be shared by
        * multiple parser instance, and multiple threads.
        *
        * @xerces.internal
        *
        * @author Sandy Gao, IBM
        *
        * @version $Id: DTDDVFactory.java,v 1.9 2004/10/06 14:56:50 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>DTDDVFactory</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>DEFAULT_FACTORY_CLASS</name> =
                    <init>
                        <expr>"org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Get an instance of the default DTDDVFactory implementation.
                *
                * @return an instance of DTDDVFactory implementation
                * @exception DVFactoryException cannot create an instance of the specified
                * class name or the default class name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <specifier>final</specifier>
                    <name>DTDDVFactory</name>
                </type>
                <name>getInstance</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DVFactoryException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getInstance</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>DEFAULT_FACTORY_CLASS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get an instance of DTDDVFactory implementation.
                *
                * @param factoryClass name of the implementation to load.
                * @return an instance of DTDDVFactory implementation
                * @exception DVFactoryException cannot create an instance of the specified
                * class name or the default class name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <specifier>final</specifier>
                    <name>DTDDVFactory</name>
                </type>
                <name>getInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>factoryClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DVFactoryException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <try>try
                        <block>{
                            <comment type="line">// if the class name is not specified, use the default one</comment>
                            <return>return
                                <expr>
                                    <call>(<name>DTDDVFactory</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ObjectFactory</name>.
                                                            <name>newInstance</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>factoryClass</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>ObjectFactory</name>.
                                                                            <name>findClassLoader</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ClassCastException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DVFactoryException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"DTD factory class " + <name>factoryClass</name> + " does not
                                                        extend from DTDDVFactory."
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="line">// can't create a new object of this class</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>DTDDVFactory</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * return a dtd type of the given name
                *
                * @param name the name of the datatype
                * @return the datatype validator of the given name
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>DatatypeValidator</name>
                </type>
                <name>getBuiltInDV</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * get all built-in DVs, which are stored in a hashtable keyed by the name
                *
                * @return a hashtable which contains all datatypes
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>Hashtable</name>
                </type>
                <name>getBuiltInTypes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
