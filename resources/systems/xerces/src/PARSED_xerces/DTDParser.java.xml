<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\parsers\DTDParser.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>parsers</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dtd</name>.
            <name>DTDGrammar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>Augmentations</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLString</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDTDContentModelHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLDTDHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLLocator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLDTDScanner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLResourceIdentifier</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @version $Id: DTDParser.java,v 1.12 2004/03/25 04:03:23 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>DTDParser</name>
        <super>
            <extends>extends
                <name>XMLGrammarParser</name>
            </extends>
            <implements>implements <name>XMLDTDHandler</name>,
                <name>XMLDTDContentModelHandler</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** fDTDScanner */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLDTDScanner</name>
                    </type>
                    <name>fDTDScanner</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                *
                *
                * @param symbolTable
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DTDParser</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>symbolTable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// Methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * getDTDGrammar
                *
                * @return the grammar created by this parser
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DTDGrammar</name>
                </type>
                <name>getDTDGrammar</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getDTDGrammar</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLDTDHandler methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * This method notifies of the start of an entity. The DTD has the
                * pseudo-name of "[dtd]" and parameter entity names start with '%'.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Since the DTD is an entity, the handler
                * will be notified of the start of the DTD entity by calling the
                * startEntity method with the entity name "[dtd]" &lt;em&gt;before&lt;/em&gt; calling
                * the startDTD method.
                *
                * @param name The name of the entity.
                * @param publicId The public identifier of the entity if the entity
                * is external, null otherwise.
                * @param systemId The system identifier of the entity if the entity
                * is external, null otherwise.
                * @param encoding The auto-detected IANA encoding name of the entity
                * stream. This value will be null in those situations
                * where the entity encoding is not auto-detected (e.g.
                * internal parameter entities).
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Notifies of the presence of a TextDecl line in an entity. If present,
                * this method will be called immediately following the startEntity call.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is only called for external
                * parameter entities referenced in the DTD.
                *
                * @param version The XML version, or null if not specified.
                * @param encoding The IANA encoding name of the entity.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>textDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The start of the DTD.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startDTD</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLLocator</name>
                            </type>
                            <name>locator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A comment.
                *
                * @param text The text in the comment.
                *
                * @throws XNIException Thrown by application to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>comment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// comment</comment>

            <comment type="javadoc">/**
                * A processing instruction. Processing instructions consist of a
                * target name and, optionally, text data. The data is only meaningful
                * to the application.
                * &lt;p&gt;
                * Typically, a processing instruction's data will contain a series
                * of pseudo-attributes. These pseudo-attributes follow the form of
                * element attributes but are &lt;strong&gt;not&lt;/strong&gt; parsed or presented
                * to the application as anything other than text. The application is
                * responsible for parsing the data.
                *
                * @param target The target.
                * @param data The data or null if none specified.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>processingInstruction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// processingInstruction</comment>

            <comment type="javadoc">/**
                * The start of the external subset.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startExternalSubset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLResourceIdentifier</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// startExternalSubset</comment>

            <comment type="javadoc">/**
                * The end of the external subset.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endExternalSubset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// endExternalSubset</comment>

            <comment type="javadoc">/**
                * An element declaration.
                *
                * @param name The name of the element.
                * @param contentModel The element content model.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>elementDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>contentModel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// elementDecl</comment>

            <comment type="javadoc">/**
                * The start of an attribute list.
                *
                * @param elementName The name of the element that this attribute
                * list is associated with.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startAttlist</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// startAttlist</comment>

            <comment type="javadoc">/**
                * An attribute declaration.
                *
                * @param elementName The name of the element that this attribute
                * is associated with.
                * @param attributeName The name of the attribute.
                * @param type The attribute type. This value will be one of
                * the following: "CDATA", "ENTITY", "ENTITIES",
                * "ENUMERATION", "ID", "IDREF", "IDREFS",
                * "NMTOKEN", "NMTOKENS", or "NOTATION".
                * @param enumeration If the type has the value "ENUMERATION", this
                * array holds the allowed attribute values;
                * otherwise, this array is null.
                * @param defaultType The attribute default type. This value will be
                * one of the following: "#FIXED", "#IMPLIED",
                * "#REQUIRED", or null.
                * @param defaultValue The attribute default value, or null if no
                * default value is specified.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>attributeDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attributeName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>enumeration</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>defaultType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>nonNormalizedDefaultValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// attributeDecl</comment>

            <comment type="javadoc">/**
                * The end of an attribute list.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endAttlist</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// endAttlist</comment>

            <comment type="javadoc">/**
                * An internal entity declaration.
                *
                * @param name The name of the entity. Parameter entity names start with
                * '%', whereas the name of a general entity is just the
                * entity name.
                * @param text The value of the entity.
                * @param nonNormalizedText The non-normalized value of the entity. This
                * value contains the same sequence of characters that was in
                * the internal entity declaration, without any entity
                * references expanded.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>internalEntityDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLString</name>
                            </type>
                            <name>nonNormalizedText</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// internalEntityDecl(String,XMLString,XMLString)</comment>

            <comment type="javadoc">/**
                * An external entity declaration.
                *
                * @param name The name of the entity. Parameter entity names start
                * with '%', whereas the name of a general entity is just
                * the entity name.
                * @param identifier An object containing all location information
                * pertinent to this entity.
                * @param augmentations Additional information that may include infoset
                * augmentations.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>externalEntityDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLResourceIdentifier</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// externalEntityDecl</comment>

            <comment type="javadoc">/**
                * An unparsed entity declaration.
                *
                * @param name The name of the entity.
                * @param identifier An object containing all location information
                * pertinent to this entity.
                * @param notation The name of the notation.
                *
                * @param augmentations Additional information that may include infoset
                * augmentations.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unparsedEntityDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLResourceIdentifier</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>notation</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// unparsedEntityDecl</comment>

            <comment type="javadoc">/**
                * A notation declaration
                *
                * @param name The name of the notation.
                * @param identifier An object containing all location information
                * pertinent to this notation.
                * @param augmentations Additional information that may include infoset
                * augmentations.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>notationDecl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLResourceIdentifier</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// notationDecl</comment>

            <comment type="javadoc">/**
                * The start of a conditional section.
                *
                * @param type The type of the conditional section. This value will
                * either be CONDITIONAL_INCLUDE or CONDITIONAL_IGNORE.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see XMLDTDHandler#CONDITIONAL_INCLUDE
                * @see XMLDTDHandler#CONDITIONAL_IGNORE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startConditional</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// startConditional</comment>

            <comment type="javadoc">/**
                * The end of a conditional section.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endConditional</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// endConditional</comment>

            <comment type="javadoc">/**
                * The end of the DTD.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endDTD</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// endDTD</comment>

            <comment type="javadoc">/**
                * This method notifies the end of an entity. The DTD has the pseudo-name
                * of "[dtd]" and parameter entity names start with '%'.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Since the DTD is an entity, the handler
                * will be notified of the end of the DTD entity by calling the
                * endEntity method with the entity name "[dtd]" &lt;em&gt;after&lt;/em&gt; calling
                * the endDTD method.
                *
                * @param name The name of the entity.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augmentations</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// XMLDTDContentModelHandler methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * The start of a content model. Depending on the type of the content
                * model, specific methods may be called between the call to the
                * startContentModel method and the call to the endContentModel method.
                *
                * @param elementName The name of the element.
                * @param type The content model type.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_EMPTY
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_ANY
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_MIXED
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_CHILDREN
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>startContentModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// startContentModel</comment>

            <comment type="javadoc">/**
                * A referenced element in a mixed content model. If the mixed content
                * model only allows text content, then this method will not be called
                * for that model. However, if this method is called for a mixed
                * content model, then the zero or more occurrence count is implied.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is only called after a call to
                * the startContentModel method where the type is TYPE_MIXED.
                *
                * @param elementName The name of the referenced element.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_MIXED
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>mixedElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// mixedElement</comment>

            <comment type="javadoc">/**
                * The start of a children group.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is only called after a call to
                * the startContentModel method where the type is TYPE_CHILDREN.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; Children groups can be nested and have
                * associated occurrence counts.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_CHILDREN
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>childrenStartGroup</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// childrenStartGroup</comment>

            <comment type="javadoc">/**
                * A referenced element in a children content model.
                *
                * @param elementName The name of the referenced element.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_CHILDREN
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>childrenElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// childrenElement</comment>

            <comment type="javadoc">/**
                * The separator between choices or sequences of a children content
                * model.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is only called after a call to
                * the startContentModel method where the type is TYPE_CHILDREN.
                *
                * @param separator The type of children separator.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see XMLDTDContentModelHandler#SEPARATOR_CHOICE
                * @see XMLDTDContentModelHandler#SEPARATOR_SEQUENCE
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_CHILDREN
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>childrenSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// childrenSeparator</comment>

            <comment type="javadoc">/**
                * The occurrence count for a child in a children content model.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is only called after a call to
                * the startContentModel method where the type is TYPE_CHILDREN.
                *
                * @param occurrence The occurrence count for the last children element
                * or children group.
                *
                * @throws XNIException Thrown by handler to signal an error.
                *
                * @see XMLDTDContentModelHandler#OCCURS_ZERO_OR_ONE
                * @see XMLDTDContentModelHandler#OCCURS_ZERO_OR_MORE
                * @see XMLDTDContentModelHandler#OCCURS_ONE_OR_MORE
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_CHILDREN
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>childrenOccurrence</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>occurrence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// childrenOccurrence</comment>

            <comment type="javadoc">/**
                * The end of a children group.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; This method is only called after a call to
                * the startContentModel method where the type is TYPE_CHILDREN.
                *
                * @see org.apache.xerces.impl.dtd.XMLElementDecl#TYPE_CHILDREN
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>childrenEndGroup</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// childrenEndGroup</comment>

            <comment type="javadoc">/**
                * The end of a content model.
                *
                * @throws XNIException Thrown by handler to signal an error.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>endContentModel</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    }
                </block>
            </function>
            <comment type="line">// endContentModel</comment>

            }
        </block>
    </class>
    <comment type="line">// class DTDParser</comment>
</unit>
