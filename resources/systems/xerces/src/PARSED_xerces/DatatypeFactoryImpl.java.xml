<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\jaxp\datatype\DatatypeFactoryImpl.java">
    <comment type="block">/*
        * Copyright 2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>jaxp</name>.
            <name>datatype</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigDecimal</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>GregorianCalendar</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>datatype</name>.
            <name>DatatypeConstants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>datatype</name>.
            <name>DatatypeFactory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>datatype</name>.
            <name>Duration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>datatype</name>.
            <name>XMLGregorianCalendar</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Factory that creates new &lt;code&gt;javax.xml.datatype&lt;/code&gt; &lt;code&gt;Object&lt;/code&gt;s
        that map XML to/from Java &lt;code&gt;Object&lt;/code&gt;s.&lt;/p&gt;
        *
        * &lt;p id="DatatypeFactory.newInstance"&gt;{@link #newInstance()} is used to create a new &lt;code&gt;DatatypeFactory&lt;/code&gt;.
        * The following implementation resolution mechanisms are used in the following order:&lt;/p&gt;
        * &lt;ol&gt;
        * &lt;li&gt;
        * If the system property specified by {@link #DATATYPEFACTORY_PROPERTY}, "&lt;code&gt;javax.xml.datatype.DatatypeFactory&lt;/code&gt;",
        * exists, a class with the name of the property's value is instantiated.
        * Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.
        * &lt;/li&gt;
        * &lt;li&gt;
        * If the file ${JAVA_HOME}/lib/jaxp.properties exists, it is loaded in a {@link java.util.Properties} &lt;code&gt;Object&lt;/code&gt;.
        * The &lt;code&gt;Properties&lt;/code&gt; &lt;code&gt;Object &lt;/code&gt; is then queried for the property as
        documented in the prior step
        * and processed as documented in the prior step.
        * &lt;/li&gt;
        * &lt;li&gt;
        * The services resolution mechanism is used, e.g. &lt;code&gt;META-INF/services/java.xml.datatype.DatatypeFactory&lt;/code&gt;.
        * Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.
        * &lt;/li&gt;
        * &lt;li&gt;
        * The final mechanism is to attempt to instantiate the &lt;code&gt;Class&lt;/code&gt; specified by
        * {@link #DATATYPEFACTORY_IMPLEMENTATION_CLASS}, "&lt;code&gt;javax.xml.datatype.DatatypeFactoryImpl&lt;/code&gt;".
        * Any Exception thrown during the instantiation process is wrapped as a {@link DatatypeConfigurationException}.
        * &lt;/li&gt;
        * &lt;/ol&gt;
        *
        * @author &lt;a href="mailto:Joseph.Fialli@Sun.COM"&gt;Joseph Fialli&lt;/a&gt;
        * @author &lt;a href="mailto:Jeff.Suttor@Sun.com"&gt;Jeff Suttor&lt;/a&gt;
        * @version $Id: DatatypeFactoryImpl.java,v 1.3 2005/06/06 04:45:59 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>DatatypeFactoryImpl</name>
        <super>
            <extends>extends
                <name>DatatypeFactory</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;Public constructor is empty..&lt;/p&gt;
                *
                * &lt;p&gt;Use {@link DatatypeFactory#newInstance()} to create a &lt;code&gt;DatatypeFactory&lt;/code&gt;.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DatatypeFactoryImpl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtain a new instance of a &lt;code&gt;Duration&lt;/code&gt;
                * specifying the &lt;code&gt;Duration&lt;/code&gt; as its string representation, "PnYnMnDTnHnMnS",
                * as defined in XML Schema 1.0 section 3.2.6.1.&lt;/p&gt;
                *
                * &lt;p&gt;XML Schema Part 2: Datatypes, 3.2.6 duration, defines &lt;code&gt;duration&lt;/code&gt; as:&lt;/p&gt;
                * &lt;blockquote&gt;
                * duration represents a duration of time.
                * The value space of duration is a six-dimensional space where the coordinates designate the
                * Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO
                8601], respectively.
                * These components are ordered in their significance by their order of appearance i.e. as
                * year, month, day, hour, minute, and second.
                * &lt;/blockquote&gt;
                * &lt;p&gt;All six values are set and availabe from the created {@link Duration}&lt;/p&gt;
                *
                * &lt;p&gt;The XML Schema specification states that values can be of an arbitrary size.
                * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
                * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation
                limits
                * if implementation capacities are exceeded.&lt;/p&gt;
                *
                * @param lexicalRepresentation &lt;code&gt;String&lt;/code&gt; representation of a &lt;code&gt;Duration&lt;/code&gt;.
                *
                * @return New &lt;code&gt;Duration&lt;/code&gt; created from parsing the &lt;code&gt;lexicalRepresentation&lt;/code&gt;.
                *
                * @throws IllegalArgumentException If &lt;code&gt;lexicalRepresentation&lt;/code&gt; is not a valid
                representation of a &lt;code&gt;Duration&lt;/code&gt;.
                * @throws UnsupportedOperationException If implementation cannot support requested values.
                * @throws NullPointerException if &lt;code&gt;lexicalRepresentation&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Duration</name>
                </type>
                <name>newDuration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>lexicalRepresentation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>DurationImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lexicalRepresentation</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtain a new instance of a &lt;code&gt;Duration&lt;/code&gt;
                * specifying the &lt;code&gt;Duration&lt;/code&gt; as milliseconds.&lt;/p&gt;
                *
                * &lt;p&gt;XML Schema Part 2: Datatypes, 3.2.6 duration, defines &lt;code&gt;duration&lt;/code&gt; as:&lt;/p&gt;
                * &lt;blockquote&gt;
                * duration represents a duration of time.
                * The value space of duration is a six-dimensional space where the coordinates designate the
                * Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO
                8601], respectively.
                * These components are ordered in their significance by their order of appearance i.e. as
                * year, month, day, hour, minute, and second.
                * &lt;/blockquote&gt;
                * &lt;p&gt;All six values are set by computing their values from the specified milliseconds
                * and are availabe using the &lt;code&gt;get&lt;/code&gt; methods of the created {@link Duration}.
                * The values conform to and are defined by:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;ISO 8601:2000(E) Section 5.5.3.2 Alternative format&lt;/li&gt;
                * &lt;li&gt;&lt;a href="http://www.w3.org/TR/xmlschema-2/#isoformats"&gt;
                * W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats&lt;/a&gt;
                * &lt;/li&gt;
                * &lt;li&gt;{@link XMLGregorianCalendar} Date/Time Datatype Field Mapping Between XML Schema 1.0 and
                Java Representation&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The default start instance is defined by {@link GregorianCalendar}'s use of the start of the
                epoch: i.e.,
                * {@link java.util.Calendar#YEAR} = 1970,
                * {@link java.util.Calendar#MONTH} = {@link java.util.Calendar#JANUARY},
                * {@link java.util.Calendar#DATE} = 1, etc.
                * This is important as there are variations in the Gregorian Calendar,
                * e.g. leap years have different days in the month = {@link java.util.Calendar#FEBRUARY}
                * so the result of {@link Duration#getMonths()} and {@link Duration#getDays()} can be influenced.&lt;/p&gt;
                *
                * @param durationInMilliseconds Duration in milliseconds to create.
                *
                * @return New &lt;code&gt;Duration&lt;/code&gt; representing &lt;code&gt;durationInMilliseconds&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Duration</name>
                </type>
                <name>newDuration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>durationInMilliseconds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>DurationImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>durationInMilliseconds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtain a new instance of a &lt;code&gt;Duration&lt;/code&gt;
                * specifying the &lt;code&gt;Duration&lt;/code&gt; as isPositive, years, months, days, hours, minutes,
                seconds.&lt;/p&gt;
                *
                * &lt;p&gt;The XML Schema specification states that values can be of an arbitrary size.
                * Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
                * An {@link UnsupportedOperationException} will be thrown with a message indicating implementation
                limits
                * if implementation capacities are exceeded.&lt;/p&gt;
                *
                * @param isPositive Set to &lt;code&gt;false&lt;/code&gt; to create a negative duration. When the length
                * of the duration is zero, this parameter will be ignored.
                * @param years of this &lt;code&gt;Duration&lt;/code&gt;
                * @param months of this &lt;code&gt;Duration&lt;/code&gt;
                * @param days of this &lt;code&gt;Duration&lt;/code&gt;
                * @param hours of this &lt;code&gt;Duration&lt;/code&gt;
                * @param minutes of this &lt;code&gt;Duration&lt;/code&gt;
                * @param seconds of this &lt;code&gt;Duration&lt;/code&gt;
                *
                * @return New &lt;code&gt;Duration&lt;/code&gt; created from the specified values.
                *
                * @throws IllegalArgumentException If values are not a valid representation of a &lt;code&gt;Duration&lt;/code&gt;.
                * @throws UnsupportedOperationException If implementation cannot support requested values.
                * @throws NullPointerException If any values are &lt;code&gt;null&lt;/code&gt;.
                *
                * @see #newDuration(boolean isPositive, BigInteger years, BigInteger months, BigInteger days,
                * BigInteger hours, BigInteger minutes, BigDecimal seconds)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Duration</name>
                </type>
                <name>newDuration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>boolean</name>
                            </type>
                            <name>isPositive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>years</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>months</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>days</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>hours</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>minutes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigDecimal</name>
                            </type>
                            <name>seconds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>DurationImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>isPositive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>years</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>months</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>days</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hours</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>minutes</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>seconds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Create a new instance of an &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;All date/time datatype fields set to {@link DatatypeConstants#FIELD_UNDEFINED} or null.&lt;/p&gt;
                *
                * @return New &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; with all date/time datatype fields set to
                * {@link DatatypeConstants#FIELD_UNDEFINED} or null.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLGregorianCalendar</name>
                </type>
                <name>newXMLGregorianCalendar</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>XMLGregorianCalendarImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Create a new XMLGregorianCalendar by parsing the String as a lexical representation.&lt;/p&gt;
                *
                * &lt;p&gt;Parsing the lexical string representation is defined in
                * &lt;a href="http://www.w3.org/TR/xmlschema-2/#dateTime-order"&gt;XML Schema 1.0 Part 2, Section
                3.2.[7-14].1,
                * &lt;em&gt;Lexical Representation&lt;/em&gt;.&lt;/a&gt;&lt;/p&gt;
                *
                * &lt;p&gt;The string representation may not have any leading and trailing whitespaces.&lt;/p&gt;
                *
                * &lt;p&gt;The parsing is done field by field so that
                * the following holds for any lexically correct String x:&lt;/p&gt;
                * &lt;pre&gt;
                * newXMLGregorianCalendar(x).toXMLFormat().equals(x)
                * &lt;/pre&gt;
                * &lt;p&gt;Except for the noted lexical/canonical representation mismatches
                * listed in &lt;a href="http://www.w3.org/2001/05/xmlschema-errata#e2-45"&gt;
                * XML Schema 1.0 errata, Section 3.2.7.2&lt;/a&gt;.&lt;/p&gt;
                *
                * @param lexicalRepresentation Lexical representation of one the eight XML Schema date/time datatypes.
                *
                * @return &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; created from the &lt;code&gt;lexicalRepresentation&lt;/code&gt;.
                *
                * @throws IllegalArgumentException If the &lt;code&gt;lexicalRepresentation&lt;/code&gt; is not a valid
                &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;.
                * @throws NullPointerException If &lt;code&gt;lexicalRepresentation&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLGregorianCalendar</name>
                </type>
                <name>newXMLGregorianCalendar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>lexicalRepresentation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>XMLGregorianCalendarImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lexicalRepresentation</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Create an &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; from a {@link GregorianCalendar}.&lt;/p&gt;
                *
                * &lt;table border="2" rules="all" cellpadding="2"&gt;
                * &lt;thead&gt;
                * &lt;tr&gt;
                * &lt;th align="center" colspan="2"&gt;
                * Field by Field Conversion from
                * {@link GregorianCalendar} to an {@link XMLGregorianCalendar}
                * &lt;/th&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;th&gt;&lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; field&lt;/th&gt;
                * &lt;th&gt;&lt;code&gt;javax.xml.datatype.XMLGregorianCalendar&lt;/code&gt; field&lt;/th&gt;
                * &lt;/tr&gt;
                * &lt;/thead&gt;
                * &lt;tbody&gt;
                * &lt;tr&gt;
                * &lt;td&gt;&lt;code&gt;ERA == GregorianCalendar.BC ? -YEAR : YEAR&lt;/code&gt;&lt;/td&gt;
                * &lt;td&gt;{@link XMLGregorianCalendar#setYear(int year)}&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td&gt;&lt;code&gt;MONTH + 1&lt;/code&gt;&lt;/td&gt;
                * &lt;td&gt;{@link XMLGregorianCalendar#setMonth(int month)}&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td&gt;&lt;code&gt;DAY_OF_MONTH&lt;/code&gt;&lt;/td&gt;
                * &lt;td&gt;{@link XMLGregorianCalendar#setDay(int day)}&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td&gt;&lt;code&gt;HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND&lt;/code&gt;&lt;/td&gt;
                * &lt;td&gt;{@link XMLGregorianCalendar#setTime(int hour, int minute, int second, BigDecimal
                fractional)}&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td&gt;
                * &lt;code&gt;(ZONE_OFFSET + DST_OFFSET) / (60*1000)&lt;/code&gt;&lt;br/&gt;
                * &lt;em&gt;(in minutes)&lt;/em&gt;
                * &lt;/td&gt;
                * &lt;td&gt;{@link XMLGregorianCalendar#setTimezone(int offset)}&lt;sup&gt;&lt;em&gt;*&lt;/em&gt;&lt;/sup&gt;
                * &lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;/tbody&gt;
                * &lt;/table&gt;
                * &lt;p&gt;&lt;em&gt;*&lt;/em&gt;conversion loss of information. It is not possible to represent
                * a &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; daylight savings timezone id in the
                * XML Schema 1.0 date/time datatype representation.&lt;/p&gt;
                *
                * &lt;p&gt;To compute the return value's &lt;code&gt;TimeZone&lt;/code&gt; field,
                * &lt;ul&gt;
                * &lt;li&gt;when &lt;code&gt;this.getTimezone() != FIELD_UNDEFINED&lt;/code&gt;,
                * create a &lt;code&gt;java.util.TimeZone&lt;/code&gt; with a custom timezone id
                * using the &lt;code&gt;this.getTimezone()&lt;/code&gt;.&lt;/li&gt;
                * &lt;li&gt;else use the &lt;code&gt;GregorianCalendar&lt;/code&gt; default timezone value
                * for the host is defined as specified by
                * &lt;code&gt;java.util.TimeZone.getDefault()&lt;/code&gt;.&lt;/li&gt;&lt;/p&gt;
                *
                * @param cal &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt; used to create &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;
                *
                * @return &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; created from &lt;code&gt;java.util.GregorianCalendar&lt;/code&gt;
                *
                * @throws NullPointerException If &lt;code&gt;cal&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLGregorianCalendar</name>
                </type>
                <name>newXMLGregorianCalendar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>GregorianCalendar</name>
                            </type>
                            <name>cal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>XMLGregorianCalendarImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cal</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructor allowing for complete value spaces allowed by
                * W3C XML Schema 1.0 recommendation for xsd:dateTime and related
                * builtin datatypes. Note that &lt;code&gt;year&lt;/code&gt; parameter supports
                * arbitrarily large numbers and fractionalSecond has infinite
                * precision.&lt;/p&gt;
                *
                * @param year of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param month of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param day of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param hour of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param minute of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param second of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param fractionalSecond of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                * @param timezone of &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; to be created.
                *
                * @return &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; created from specified values.
                *
                * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value
                constraint for the field
                * as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}
                * or if the composite values constitute an invalid &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;
                instance
                * as determined by {@link XMLGregorianCalendar#isValid()}.
                * @throws NullPointerException If any parameters are &lt;code&gt;null&lt;/code&gt;.
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XMLGregorianCalendar</name>
                </type>
                <name>newXMLGregorianCalendar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>year</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>month</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>day</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>hour</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>minute</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>second</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>BigDecimal</name>
                            </type>
                            <name>fractionalSecond</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>timezone</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <return>return
                        <expr>new
                            <call>
                                <name>XMLGregorianCalendarImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>year</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>month</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>day</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hour</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>minute</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>second</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fractionalSecond</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timezone</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
