<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\DeferredDocumentImpl.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004,2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMImplementation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Element</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The Document interface represents the entire HTML or XML document.
        * Conceptually, it is the root of the document tree, and provides the
        * primary access to the document's data.
        * &lt;P&gt;
        * Since elements, text nodes, comments, processing instructions,
        * etc. cannot exist outside the context of a Document, the Document
        * interface also contains the factory methods needed to create these
        * objects. The Node objects created have a ownerDocument attribute
        * which associates them with the Document within whose context they
        * were created.
        *
        * @xerces.internal
        *
        * @version $Id: DeferredDocumentImpl.java,v 1.58 2005/03/07 23:28:40 mrglavas Exp $
        * @since PR-DOM-Level-1-19980818.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>DeferredDocumentImpl</name>
        <super>
            <extends>extends
                <name>DocumentImpl</name>
            </extends>
            <implements>implements
                <name>DeferredNode</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>5186323580749626857L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// debugging</comment>

            <comment type="javadoc">/** To include code for printing the ref count tables. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG_PRINT_REF_COUNTS</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** To include code for printing the internal tables. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG_PRINT_TABLES</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** To debug identifiers set to true and recompile. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>DEBUG_IDS</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// protected</comment>

            <comment type="javadoc">/** Chunk shift. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHUNK_SHIFT</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// 2^11 = 2k</comment>

            <comment type="javadoc">/** Chunk size. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHUNK_SIZE</name> =
                    <init>
                        <expr>(1 &lt;&lt; <name>CHUNK_SHIFT</name>)
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Chunk mask. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHUNK_MASK</name> =
                    <init>
                        <expr>
                            <name>CHUNK_SIZE</name>
                            - 1
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Initial chunk size. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INITIAL_CHUNK_COUNT</name> =
                    <init>
                        <expr>(1 &lt;&lt; (16 - <name>CHUNK_SHIFT</name>))
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// 2^16 = 64k</comment>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="line">// lazy-eval information</comment>
            <comment type="line">// To maximize memory consumption the actual semantic of these fields vary</comment>
            <comment type="line">// depending on the node type.</comment>

            <comment type="javadoc">/** Node count. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>fNodeCount</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node types. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fNodeType</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node names. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>Object</name>
                    </type>
                    <name>
                        <name>fNodeName</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node values. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>Object</name>
                    </type>
                    <name>
                        <name>fNodeValue</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node parents. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fNodeParent</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node first children. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fNodeLastChild</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node prev siblings. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fNodePrevSib</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Node namespace URI. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>Object</name>
                    </type>
                    <name>
                        <name>fNodeURI</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Extra data. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fNodeExtra</name>
                        <index>[]</index>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Identifier count. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>fIdCount</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Identifier name indexes. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>String</name>
                    </type>
                    <name>
                        <name>fIdName</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Identifier element indexes. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fIdElement</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** DOM2: For namespace support in the deferred case.
                */
            </comment>
            <comment type="line">// Implementation Note: The deferred element and attribute must know how to</comment>
            <comment type="line">// interpret the int representing the qname.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fNamespacesEnabled</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// private data</comment>
            <comment type="line">//</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <specifier>final</specifier>
                        <name>StringBuffer</name>
                    </type>
                    <name>fBufferStr</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>StringBuffer</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <specifier>final</specifier>
                        <name>Vector</name>
                    </type>
                    <name>fStrChunks</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Vector</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * NON-DOM: Actually creating a Document is outside the DOM's spec,
                * since it has to operate in terms of a particular implementation.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DeferredDocumentImpl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;()</comment>

            <comment type="javadoc">/**
                * NON-DOM: Actually creating a Document is outside the DOM's spec,
                * since it has to operate in terms of a particular implementation.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DeferredDocumentImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>namespacesEnabled</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>namespacesEnabled</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(boolean)</comment>

            <comment type="javadoc">/** Experimental constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>DeferredDocumentImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>namespaces</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>grammarAccess</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>grammarAccess</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncChildren</name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fNamespacesEnabled</name>
                            =
                            <name>namespaces</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(boolean,boolean)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Retrieve information describing the abilities of this particular
                * DOM implementation. Intended to support applications that may be
                * using DOMs retrieved from several different sources, potentially
                * with different underlying representations.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DOMImplementation</name>
                </type>
                <name>getImplementation</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Currently implemented as a singleton, since it's hardcoded</comment>
                    <comment type="line">// information anyway.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>DeferredDOMImplementationImpl</name>.
                                    <name>getDOMImplementation</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns the cached parser.getNamespaces() value.*/</comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>getNamespacesEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fNamespacesEnabled</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>setNamespacesEnabled</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>enable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fNamespacesEnabled</name>
                            =
                            <name>enable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// internal factory methods</comment>

            <comment type="javadoc">/** Creates a document node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredDocument</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>DOCUMENT_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Creates a doctype. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredDocumentType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>rootElementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>DOCUMENT_TYPE_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// save name, public id, system id</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rootElementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>publicId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredDocumentType(String,String,String):int</comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInternalSubset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>doctypeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>     =
                            <init>
                                <expr>
                                    <name>doctypeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>     =
                            <init>
                                <expr>
                                    <name>doctypeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// create extra data node to store internal subset</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extraDataIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>DOCUMENT_TYPE_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extraDataIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Creates a notation in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredNotation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>notationName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>NOTATION_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>


                    <comment type="line">// create extra data node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extraDataIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>NOTATION_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// save name, public id, system id, and notation name</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>notationName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>publicId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// in extra data node set baseURI value</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extraDataIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>baseURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredNotation(String,String,String):int</comment>

            <comment type="javadoc">/** Creates an entity in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>entityName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>notationName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// create extra data node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extraDataIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// save name, public id, system id, and notation name</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entityName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>publicId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>systemId</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extraDataIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// set other values in the extra chunk</comment>
                    <comment type="line">// notation</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>notationName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// version L3</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// encoding L3</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extraDataIndex2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk2</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex2</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex2</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex2</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extraDataIndex2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// baseURI</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>baseURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredEntity(String,String,String,String):int</comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getDeferredEntityBaseURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>entityIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>entityIndex</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>extraDataIndex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getNodeExtra</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>entityIndex</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>extraDataIndex</name>
                                        =
                                        <call>
                                            <name>getNodeExtra</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>extraDataIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getNodeName</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>extraDataIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// DOM Level 3: setting encoding and version</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEntityInfo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>currentEntityDecl</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getNodeExtra</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>currentEntityDecl</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>eNodeIndex</name>
                                !=-1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>echunk</name> =
                                        <init>
                                            <expr>
                                                <name>eNodeIndex</name>
                                                &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>eindex</name> =
                                        <init>
                                            <expr>
                                                <name>eNodeIndex</name>
                                                &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeValue</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>version</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>echunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>eindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeURI</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>encoding</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>echunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>eindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * DOM Internal
                *
                * An attribute specifying the actual encoding of this document. This is
                * &lt;code&gt;null&lt;/code&gt; otherwise.
                * &lt;br&gt; This attribute represents the property [character encoding scheme]
                * defined in .
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInputEncoding</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>currentEntityDecl</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// get first extra data chunk</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getNodeExtra</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>currentEntityDecl</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// get second extra data chunk</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extraDataIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getNodeExtra</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>nodeIndex</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex</name> =
                            <init>
                                <expr>
                                    <name>extraDataIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            <comment type="javadoc">/** Creates an entity reference node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredEntityReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_REFERENCE_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>     =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>baseURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredEntityReference(String):int</comment>


            <comment type="javadoc">/** Creates an element node with a URI in the table and type information. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ELEMENT_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementChunk</name>     =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementIndex</name>     =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>elementNodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredElement(String,String):int</comment>

            <comment type="javadoc">/** @deprecated. Creates an element node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>createDeferredElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @deprecated. Creates an element node with a URI in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ELEMENT_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementChunk</name>     =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementIndex</name>     =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>elementNodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredElement(String,String):int</comment>


            <comment type="javadoc">/**
                * This method is used by the DOMParser to create attributes.
                * @param elementNodeIndex
                * @param attrName
                * @param attrURI
                * @param attrValue
                * @param specified
                * @param id
                * @param type
                * @return int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>setDeferredAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementNodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>specified</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>id</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create attribute</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createDeferredAttribute</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>attrName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrURI</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrValue</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>specified</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrChunk</name> =
                            <init>
                                <expr>
                                    <name>attrNodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name> =
                            <init>
                                <expr>
                                    <name>attrNodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// set attribute's parent to element</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeParent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementNodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementChunk</name> =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementIndex</name> =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// get element's last attribute</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastAttrNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elementChunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elementIndex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lastAttrNodeIndex</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>lastAttrChunk</name> =
                                        <init>
                                            <expr>
                                                <name>lastAttrNodeIndex</name>
                                                &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>lastAttrIndex</name> =
                                        <init>
                                            <expr>
                                                <name>lastAttrNodeIndex</name>
                                                &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// add link from new attribute to last attribute</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodePrevSib</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>lastAttrNodeIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrChunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// add link from element to new last attribute</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrNodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extra</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrChunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrIndex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>id</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>extra</name>
                                        = <name>extra</name> |
                                        <name>ID</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeExtra</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>extra</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrChunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>value</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getChunkValue</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeValue</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>attrChunk</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>attrIndex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>putIdentifier</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>elementNodeIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// store type information</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>extraDataIndex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>createNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>DeferredNode</name>.
                                                                    <name>TYPE_NODE</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>echunk</name> =
                                        <init>
                                            <expr>
                                                <name>extraDataIndex</name>
                                                &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>eindex</name> =
                                        <init>
                                            <expr>
                                                <name>extraDataIndex</name>
                                                &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeLastChild</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>extraDataIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrChunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeValue</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>type</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>echunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>eindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>attrNodeIndex</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @deprecated. Sets an attribute on an element node.*/</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>setDeferredAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementNodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>specified</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// create attribute</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createDeferredAttribute</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>attrName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrURI</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>attrValue</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>specified</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrChunk</name> =
                            <init>
                                <expr>
                                    <name>attrNodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>  =
                            <init>
                                <expr>
                                    <name>attrNodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// set attribute's parent to element</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeParent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementNodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementChunk</name>     =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementIndex</name>     =
                            <init>
                                <expr>
                                    <name>elementNodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// get element's last attribute</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastAttrNodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elementChunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elementIndex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lastAttrNodeIndex</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// add link from new attribute to last attribute</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodePrevSib</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>lastAttrNodeIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrChunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attrIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// add link from element to new last attribute</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrNodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementChunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>attrNodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// setDeferredAttribute(int,String,String,String,boolean):int</comment>

            <comment type="javadoc">/** Creates an attribute in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>specified</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>createDeferredAttribute</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>attrName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>specified</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Creates an attribute with a URI in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>specified</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>NodeImpl</name>.
                                                        <name>ATTRIBUTE_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extra</name> =
                            <init>
                                <expr>
                                    <name>specified</name>
                                    ? <name>SPECIFIED</name> : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredAttribute(String,String,String,boolean):int</comment>

            <comment type="javadoc">/** Creates an element definition in the table.*/</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredElementDefinition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>NodeImpl</name>.
                                                        <name>ELEMENT_DEFINITION_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elementName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredElementDefinition(String):int</comment>

            <comment type="javadoc">/** Creates a text node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredTextNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>ignorableWhitespace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>TEXT_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// use extra to store ignorableWhitespace info</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ignorableWhitespace</name>
                                            ? 1 : 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredTextNode(String,boolean):int</comment>

            <comment type="javadoc">/** Creates a CDATA section node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredCDATASection</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>CDATA_SECTION_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredCDATASection(String):int</comment>

            <comment type="javadoc">/** Creates a processing instruction node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredProcessingInstruction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>PROCESSING_INSTRUCTION_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>target</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredProcessingInstruction(String,String):int</comment>

            <comment type="javadoc">/** Creates a comment node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>createDeferredComment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// create node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>COMMENT_NODE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index</comment>
                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createDeferredComment(String):int</comment>

            <comment type="javadoc">/** Creates a clone of the specified node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>cloneNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// clone immediate node</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nchunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nindex</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeType</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>fNodeType</name>
                                        <index>[
                                            <expr>
                                                <name>nchunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>nindex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cloneIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>short</name>)
                                                    <name>nodeType</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cchunk</name> =
                            <init>
                                <expr>
                                    <name>cloneIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cindex</name> =
                            <init>
                                <expr>
                                    <name>cloneIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>fNodeName</name>
                                                <index>[
                                                    <expr>
                                                        <name>nchunk</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr>
                                                        <name>nindex</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>fNodeValue</name>
                                                <index>[
                                                    <expr>
                                                        <name>nchunk</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr>
                                                        <name>nindex</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>fNodeURI</name>
                                                <index>[
                                                    <expr>
                                                        <name>nchunk</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr>
                                                        <name>nindex</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extraIndex</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>fNodeExtra</name>
                                        <index>[
                                            <expr>
                                                <name>nchunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>nindex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>extraIndex</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>nodeType</name>
                                            !=
                                            <name><name>Node</name>.
                                                <name>ATTRIBUTE_NODE</name>
                                            </name>
                                            &amp;&amp; <name>nodeType</name> !=
                                            <name><name>Node</name>.
                                                <name>TEXT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>extraIndex</name>
                                                    =
                                                    <call>
                                                        <name>cloneNode</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>extraIndex</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeExtra</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>extraIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>cchunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>cindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// clone and attach children</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>deep</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>prevIndex</name> =
                                        <init>
                                            <expr>-1</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>childIndex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getLastChild</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>nodeIndex</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>childIndex</name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>clonedChildIndex</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>cloneNode</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>childIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>deep</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>insertBefore</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>cloneIndex</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>clonedChildIndex</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>prevIndex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>prevIndex</name>
                                                =
                                                <name>clonedChildIndex</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>childIndex</name>
                                                =
                                                <call>
                                                    <name>getRealPrevSibling</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>childIndex</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>


                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// return cloned node index</comment>
                    <return>return
                        <expr>
                            <name>cloneIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// cloneNode(int,boolean):int</comment>

            <comment type="javadoc">/** Appends a child to the specified parent in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>appendChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>parentIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>childIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// append parent index</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pchunk</name> =
                            <init>
                                <expr>
                                    <name>parentIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pindex</name> =
                            <init>
                                <expr>
                                    <name>parentIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cchunk</name> =
                            <init>
                                <expr>
                                    <name>childIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cindex</name> =
                            <init>
                                <expr>
                                    <name>childIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeParent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parentIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// set previous sibling of new child</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>olast</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeLastChild</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>pchunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>pindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>olast</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// update parent's last child</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeLastChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>childIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// appendChild(int,int)</comment>

            <comment type="javadoc">/** Adds an attribute node to the specified element. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>setAttributeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elemIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk</name> =
                            <init>
                                <expr>
                                    <name>elemIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex</name> =
                            <init>
                                <expr>
                                    <name>elemIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>achunk</name> =
                            <init>
                                <expr>
                                    <name>attrIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aindex</name> =
                            <init>
                                <expr>
                                    <name>attrIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// see if this attribute is already here</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>achunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>aindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oldAttrIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>echunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>eindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nextIndex</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oachunk</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oaindex</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>oldAttrIndex</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>oachunk</name>
                                    = <name>oldAttrIndex</name> &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>oaindex</name>
                                    = <name>oldAttrIndex</name> &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>oldAttrName</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>getChunkValue</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fNodeName</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>oachunk</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>oaindex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>oldAttrName</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>attrName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>nextIndex</name>
                                    =
                                    <name>oldAttrIndex</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>oldAttrIndex</name>
                                    =
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodePrevSib</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>oachunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>oaindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// remove old attribute</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>oldAttrIndex</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <comment type="line">// patch links</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>prevIndex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getChunkIndex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodePrevSib</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>oachunk</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>oaindex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>nextIndex</name>
                                            == -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>setChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeExtra</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>prevIndex</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>echunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>eindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>pchunk</name> =
                                                    <init>
                                                        <expr>
                                                            <name>nextIndex</name>
                                                            &gt;&gt;
                                                            <name>CHUNK_SHIFT</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>pindex</name> =
                                                    <init>
                                                        <expr>
                                                            <name>nextIndex</name>
                                                            &amp;
                                                            <name>CHUNK_MASK</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>setChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodePrevSib</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>prevIndex</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>pchunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>pindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>

                                <comment type="line">// remove connections to siblings</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeType</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oachunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oaindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oachunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oaindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeValue</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oachunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oaindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeParent</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oachunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oaindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodePrevSib</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oachunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>oaindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>attrTextIndex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>clearChunkIndex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeLastChild</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>oachunk</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>oaindex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>atchunk</name> =
                                        <init>
                                            <expr>
                                                <name>attrTextIndex</name>
                                                &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>atindex</name> =
                                        <init>
                                            <expr>
                                                <name>attrTextIndex</name>
                                                &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeType</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atchunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeValue</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atchunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeParent</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atchunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeLastChild</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atchunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>atindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// add new attribute</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prevIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>echunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>eindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>echunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>eindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>prevIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>achunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>aindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return</comment>
                    <return>return
                        <expr>
                            <name>oldAttrIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// setAttributeNode(int,int):int</comment>


            <comment type="javadoc">/** Adds an attribute node to the specified element. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIdAttributeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elemIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>attrIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>attrIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extra</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>extra</name>
                            = <name>extra</name> |
                            <name>ID</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeValue</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>putIdentifier</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elemIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/** Sets type of attribute */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIdAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>attrIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>attrIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extra</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>extra</name>
                            = <name>extra</name> |
                            <name>ID</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>extra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Inserts a child before the specified node in the table. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>insertBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>parentIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newChildIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refChildIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>refChildIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>appendChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>parentIndex</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newChildIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>newChildIndex</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nchunk</name> =
                            <init>
                                <expr>
                                    <name>newChildIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nindex</name> =
                            <init>
                                <expr>
                                    <name>newChildIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rchunk</name> =
                            <init>
                                <expr>
                                    <name>refChildIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rindex</name> =
                            <init>
                                <expr>
                                    <name>refChildIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>previousIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodePrevSib</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rchunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newChildIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>previousIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>nchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>nindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>newChildIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// insertBefore(int,int,int):int</comment>

            <comment type="javadoc">/** Sets the last child of the parentIndex to childIndex. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAsLastChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>parentIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>childIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pchunk</name> =
                            <init>
                                <expr>
                                    <name>parentIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pindex</name> =
                            <init>
                                <expr>
                                    <name>parentIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeLastChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>childIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pchunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pindex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setAsLastChild(int,int)</comment>

            <comment type="javadoc">/**
                * Returns the parent node of the given node.
                * &lt;em&gt;Calling this method does not free the parent index.&lt;/em&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getParentNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getParentNode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the parent node of the given node.
                * @param free True to free parent node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getParentNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeParent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeParent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getParentNode(int):int</comment>

            <comment type="javadoc">/** Returns the last child of the given node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLastChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLastChild</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the last child of the given node.
                * @param free True to free child index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLastChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeLastChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeLastChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getLastChild(int,boolean):int</comment>

            <comment type="javadoc">/**
                * Returns the prev sibling of the given node.
                * This is post-normalization of Text Nodes.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getPrevSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getPrevSibling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the prev sibling of the given node.
                * @param free True to free sibling index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getPrevSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <do>do
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>nodeIndex</name>
                                                =
                                                <call>
                                                    <name>getChunkIndex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodePrevSib</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>nodeIndex</name>
                                                    == -1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>chunk</name>
                                                = <name>nodeIndex</name> &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>index</name>
                                                = <name>nodeIndex</name> &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>type</name>
                                                =
                                                <call>
                                                    <name>getChunkIndex</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeType</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    while
                                    <condition>(
                                        <expr>
                                            <name>type</name>
                                            ==
                                            <name><name>Node</name>.
                                                <name>TEXT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    ;
                                </do>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>nodeIndex</name>
                                        =
                                        <call>
                                            <name>getChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodePrevSib</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>chunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>nodeIndex</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getPrevSibling(int,boolean):int</comment>

            <comment type="javadoc">/**
                * Returns the &lt;i&gt;real&lt;/i&gt; prev sibling of the given node,
                * directly from the data structures. Used by TextImpl#getNodeValue()
                * to normalize values.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getRealPrevSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getRealPrevSibling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;i&gt;real&lt;/i&gt; prev sibling of the given node.
                * @param free True to free sibling index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getRealPrevSibling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getReadPrevSibling(int,boolean):int</comment>

            <comment type="javadoc">/**
                * Returns the index of the element definition in the table
                * with the specified name index, or -1 if no such definition
                * exists.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>lookupElementDefinition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elementName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeCount</name>
                                &gt; 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <comment type="line">// find doctype</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>docTypeIndex</name> =
                                        <init>
                                            <expr>-1</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>nchunk</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>nindex</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>getChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeLastChild</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nchunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            != -1
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>index</name>
                                            =
                                            <call>
                                                <name>getChunkIndex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fNodePrevSib</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nchunk</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nindex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{

                                        <expr_stmt>
                                            <expr>
                                                <name>nchunk</name>
                                                = <name>index</name> &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>nindex</name>
                                                = <name>index</name>  &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>getChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeType</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nchunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>Node</name>.
                                                        <name>DOCUMENT_TYPE_NODE</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>docTypeIndex</name>
                                                            =
                                                            <name>index</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>

                                <comment type="line">// find element definition</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>docTypeIndex</name>
                                            == -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>-1</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>nchunk</name>
                                        = <name>docTypeIndex</name> &gt;&gt;
                                        <name>CHUNK_SHIFT</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>nindex</name>
                                        = <name>docTypeIndex</name> &amp;
                                        <name>CHUNK_MASK</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>getChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeLastChild</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nchunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            != -1
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>index</name>
                                            =
                                            <call>
                                                <name>getChunkIndex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fNodePrevSib</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nchunk</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nindex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{

                                        <expr_stmt>
                                            <expr>
                                                <name>nchunk</name>
                                                = <name>index</name> &gt;&gt;
                                                <name>CHUNK_SHIFT</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>nindex</name>
                                                = <name>index</name> &amp;
                                                <name>CHUNK_MASK</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>getChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeType</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nchunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>NodeImpl</name>.
                                                        <name>ELEMENT_DEFINITION_NODE</name>
                                                    </name>
                                                    &amp;&amp;
                                                    <call>
                                                        <name>getChunkValue</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeName</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nchunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nindex</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ==
                                                    <name>elementName</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>-1</expr>;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// lookupElementDefinition(String):int</comment>

            <comment type="javadoc">/** Instantiates the requested node object. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DeferredNode</name>
                </type>
                <name>getNodeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// is there anything to do?</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// get node type</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                !=
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                                &amp;&amp; <name>type</name> !=
                                <name><name>Node</name>.
                                    <name>CDATA_SECTION_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeType</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>chunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// create new node</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DeferredNode</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>type</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <comment type="line">//</comment>
                            <comment type="line">// Standard DOM node types</comment>
                            <comment type="line">//</comment>

                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>fNamespacesEnabled</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>node</name>
                                                        = new
                                                        <call>
                                                            <name>DeferredAttrNSImpl</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>nodeIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>node</name>
                                                        = new
                                                        <call>
                                                            <name>DeferredAttrImpl</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>nodeIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>CDATA_SECTION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredCDATASectionImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>COMMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredCommentImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                                <comment type="line">// NOTE: Document fragments can never be "fast".</comment>
                                <comment type="line">//</comment>
                                <comment type="line">// The parser will never ask to create a document</comment>
                                <comment type="line">// fragment during the parse. Document fragments</comment>
                                <comment type="line">// are used by the application *after* the parse.</comment>
                                <comment type="line">//</comment>
                                <comment type="line">// case Node.DOCUMENT_FRAGMENT_NODE: { break; }</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <comment type="line">// this node is never "fast"</comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            =
                                            <name>this</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_TYPE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredDocumentTypeImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <comment type="line">// save the doctype node</comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>docType</name>
                                            = (<name>DocumentTypeImpl</name>)
                                            <name>node</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ELEMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>DEBUG_IDS</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>System</name>.<name>out</name>.
                                                                <name>println</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"getNodeObject(ELEMENT_NODE): "+
                                                                        <name>nodeIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <comment type="line">// create node</comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>fNamespacesEnabled</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>node</name>
                                                        = new
                                                        <call>
                                                            <name>DeferredElementNSImpl</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>nodeIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>node</name>
                                                        = new
                                                        <call>
                                                            <name>DeferredElementImpl</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>this</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>nodeIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>

                                    <comment type="line">// save the document element node</comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>docElement</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>docElement</name>
                                                        = (<name>ElementImpl</name>)
                                                        <name>node</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <comment type="line">// check to see if this element needs to be</comment>
                                    <comment type="line">// registered for its ID attributes</comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>fIdElement</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>idIndex</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>binarySearch</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fIdElement</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>0</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr><name>fIdCount</name>-1
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>nodeIndex</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <while>while
                                                    <condition>(
                                                        <expr>
                                                            <name>idIndex</name>
                                                            != -1
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <block>{

                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>DEBUG_IDS</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>println</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>" id index: "+
                                                                                            <name>idIndex</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>println</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>" fIdName["+<name>
                                                                                            idIndex</name>+
                                                                                            "]: "+
                                                                                            <name>
                                                                                                <name>fIdName</name>
                                                                                                <index>[
                                                                                                    <expr>
                                                                                                        <name>idIndex
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                    ]
                                                                                                </index>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>

                                                        <comment type="line">// register ID</comment>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>name</name> =
                                                                <init>
                                                                    <expr>
                                                                        <name>
                                                                            <name>fIdName</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>idIndex</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>name</name>
                                                                    !=
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>DEBUG_IDS</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>System</name>
                                                                                                .<name>out</name>.
                                                                                                <name>println</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>" name: "+
                                                                                                        <name>name
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>System</name>
                                                                                                .<name>out</name>.
                                                                                                <name>print</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        "getNodeObject()#"
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name>putIdentifier0</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>name</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>(<name>Element</name>)
                                                                                            <name>node</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fIdName</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>idIndex</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            =
                                                                            <name>null</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>

                                                        <comment type="line">// continue if there are more IDs for
                                                        </comment>
                                                        <comment type="line">// this element</comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>idIndex</name>
                                                                    + 1 &lt; <name>fIdCount</name> &amp;&amp;
                                                                    <name>
                                                                        <name>fIdElement</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>idIndex</name>
                                                                                + 1
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    ==
                                                                    <name>nodeIndex</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr><name>idIndex</name>++
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>idIndex</name>
                                                                            = -1
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </while>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredEntityImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_REFERENCE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredEntityReferenceImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredNotationImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>PROCESSING_INSTRUCTION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredProcessingInstructionImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>TEXT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredTextImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                                <comment type="line">//</comment>
                                <comment type="line">// non-standard DOM node types</comment>
                                <comment type="line">//</comment>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>NodeImpl</name>.
                                        <name>ELEMENT_DEFINITION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            = new
                                            <call>
                                                <name>DeferredElementDefinitionImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>nodeIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>

                            </case>
                            <default>default:
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>IllegalArgumentException</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"type: "+
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>

                            </default>
                            }
                        </block>
                    </switch>
                    <comment type="line">// switch node type</comment>

                    <comment type="line">// store and return</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>node</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// error</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>

                    }
                </block>
            </function>
            <comment type="line">// createNodeObject(int):Node</comment>

            <comment type="javadoc">/** Returns the name of the given node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getNodeNameString(int):String</comment>

            <comment type="javadoc">/**
                * Returns the name of the given node.
                * @param free True to free the string index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getNodeName(int,boolean):String</comment>

            <comment type="javadoc">/** Returns the real value of the given node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeValueString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeValueString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getNodeValueString(int):String</comment>

            <comment type="javadoc">/**
                * Returns the real value of the given node.
                * @param free True to free the string index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeValueString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <name>free</name>
                                    ?
                                    <call>
                                        <name>clearChunkValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeValue</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    :
                                    <call>
                                        <name>getChunkValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeValue</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>  =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>prevSib</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getRealPrevSibling</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>nodeIndex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>prevSib</name>
                                            != -1 &amp;&amp;
                                            <call>
                                                <name>getNodeType</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>prevSib</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ==
                                            <name><name>Node</name>.
                                                <name>TEXT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// append data that is stored in fNodeValue</comment>
                                            <comment type="line">// REVISIT: for text nodes it works differently than
                                                for CDATA
                                            </comment>
                                            <comment type="line">// nodes.</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fStrChunks</name>.
                                                            <name>addElement</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>value</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <do>do
                                                <block>{
                                                    <comment type="line">// go in reverse order: find last child, then
                                                    </comment>
                                                    <comment type="line">// its previous sibling, etc</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>chunk</name>
                                                            = <name>prevSib</name> &gt;&gt;
                                                            <name>CHUNK_SHIFT</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>index</name>
                                                            = <name>prevSib</name> &amp;
                                                            <name>CHUNK_MASK</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>value</name>
                                                            =
                                                            <call>
                                                                <name>getChunkValue</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fNodeValue</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>chunk</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>index</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fStrChunks</name>.
                                                                    <name>addElement</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>prevSib</name>
                                                            =
                                                            <call>
                                                                <name>getChunkIndex</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fNodePrevSib</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>chunk</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>index</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>prevSib</name>
                                                                == -1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <break>break;</break>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                                while
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name>getNodeType</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>prevSib</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>false</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ==
                                                        <name><name>Node</name>.
                                                            <name>TEXT_NODE</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                ;
                                            </do>

                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>chunkCount</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>fStrChunks</name>.
                                                                    <name>size</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>

                                            <comment type="line">// add to the buffer in the correct order.</comment>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>
                                                                <name>chunkCount</name>
                                                                - 1
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &gt;= 0
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>--
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fBufferStr</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>(<name>String</name>)
                                                                            <call>
                                                                                <name><name>fStrChunks</name>.
                                                                                    <name>elementAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>

                                            <expr_stmt>
                                                <expr>
                                                    <name>value</name>
                                                    =
                                                    <call>
                                                        <name><name>fBufferStr</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fStrChunks</name>.
                                                            <name>removeAllElements</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fBufferStr</name>.
                                                            <name>setLength</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>CDATA_SECTION_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// find if any other data stored in children</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>child</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getLastChild</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>nodeIndex</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>false</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>child</name>
                                                    !=-1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// append data that is stored in fNodeValue
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fBufferStr</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <while>while
                                                        <condition>(
                                                            <expr>
                                                                <name>child</name>
                                                                !=-1
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <block>{
                                                            <comment type="line">// go in reverse order: find last
                                                                child, then
                                                            </comment>
                                                            <comment type="line">// its previous sibling, etc</comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>chunk</name>
                                                                    = <name>child</name> &gt;&gt;
                                                                    <name>CHUNK_SHIFT</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>index</name>
                                                                    = <name>child</name> &amp;
                                                                    <name>CHUNK_MASK</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>value</name>
                                                                    =
                                                                    <call>
                                                                        <name>getChunkValue</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fNodeValue</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>chunk</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fStrChunks</name>.
                                                                            <name>addElement</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>child</name>
                                                                    =
                                                                    <call>
                                                                        <name>getChunkIndex</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fNodePrevSib</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>chunk</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </while>
                                                    <comment type="line">// add to the buffer in the correct order.
                                                    </comment>
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name>=
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>fStrChunks</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        -1
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr><name>i</name>&gt;=0
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr><name>i</name>--
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fBufferStr</name>.
                                                                            <name>append</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>(<name>String</name>)
                                                                                    <call>
                                                                                        <name><name>fStrChunks</name>.
                                                                                            <name>elementAt</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>i</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </for>

                                                    <expr_stmt>
                                                        <expr>
                                                            <name>value</name>
                                                            =
                                                            <call>
                                                                <name><name>fBufferStr</name>.
                                                                    <name>toString</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fStrChunks</name>.
                                                                    <name>setSize</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>fBufferStr</name>.
                                                                    <name>setLength</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getNodeValueString(int,boolean):String</comment>

            <comment type="javadoc">/**
                * Returns the value of the given node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Clears the type info that is stored in the fNodeValue array
                * @param nodeIndex
                * @return Object - type information for the attribute/element node
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getTypeInfo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>fNodeValue</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    != <name>null</name> ?
                                    <name>
                                        <name>fNodeValue</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    :
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>fNodeValue</name>
                                            <index>[
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>RefCount</name>
                                        </type>
                                        <name>c</name> =
                                        <init>
                                            <expr>(<name>RefCount</name>)
                                                <name>
                                                    <name>fNodeValue</name>
                                                    <index>[
                                                        <expr>
                                                            <name>chunk</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[
                                                        <expr>
                                                            <name>CHUNK_SIZE</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>c</name>.
                                            <name>fCount</name>
                                        </name>
                                        --
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>c</name>.
                                                <name>fCount</name>
                                            </name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>fNodeValue</name>
                                                        <index>[
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of the given node.
                * @param free True to free the value index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getNodeValue(int,boolean):String</comment>

            <comment type="javadoc">/**
                * Returns the extra info of the given node.
                * Used by AttrImpl to store specified value (1 == true).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNodeExtra</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeExtra</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the extra info of the given node.
                * @param free True to free the value index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNodeExtra</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getNodeExtra(int,boolean):int</comment>

            <comment type="javadoc">/** Returns the type of the given node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getNodeType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the type of the given node.
                * @param free True to free type index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getNodeType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ? (<name>short</name>)
                            <call>
                                <name>clearChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            : (<name>short</name>)
                            <call>
                                <name>getChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getNodeType(int):int</comment>

            <comment type="javadoc">/** Returns the attribute value of the given name. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elemIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>elemIndex</name>
                                == -1 || <name>name</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>echunk</name> =
                            <init>
                                <expr>
                                    <name>elemIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>eindex</name> =
                            <init>
                                <expr>
                                    <name>elemIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>attrIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodeExtra</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>echunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>eindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>attrIndex</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>achunk</name> =
                                    <init>
                                        <expr>
                                            <name>attrIndex</name>
                                            &gt;&gt;
                                            <name>CHUNK_SHIFT</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>aindex</name> =
                                    <init>
                                        <expr>
                                            <name>attrIndex</name>
                                            &amp;
                                            <name>CHUNK_MASK</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>getChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>achunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>aindex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ==
                                        <name>name</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>getChunkValue</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeValue</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>achunk</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>aindex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>attrIndex</name>
                                    =
                                    <call>
                                        <name>getChunkIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fNodePrevSib</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>achunk</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>aindex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns the URI of the given node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeURI</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nodeIndex</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the URI of the given node.
                * @param free True to free URI index.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>free</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>nodeIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>nodeIndex</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>free</name>
                            ?
                            <call>
                                <name>clearChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getChunkValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getNodeURI(int,int):String</comment>

            <comment type="line">// identifier maintenance</comment>

            <comment type="javadoc">/** Registers an identifier name with a specified element node. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putIdentifier</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elementNodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_IDS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"putIdentifier(" + <name>name</name> + ", "
                                                        + <name>elementNodeIndex</name> + ')' + " // " +
                                                        <call>
                                                            <name>getChunkValue</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fNodeName</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>elementNodeIndex</name>
                                                                        &gt;&gt;
                                                                        <name>CHUNK_SHIFT</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>elementNodeIndex</name>
                                                                        &amp;
                                                                        <name>CHUNK_MASK</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// initialize arrays</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fIdName</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fIdName</name>
                                        = new
                                        <name>
                                            <name>String</name>
                                            <index>[<expr>64</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fIdElement</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[<expr>64</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// resize arrays</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fIdCount</name>
                                ==
                                <name><name>fIdName</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>
                                            <name>idName</name>
                                            <index>[]</index>
                                        </name>
                                        =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>String</name>
                                                    <index>[
                                                        <expr>
                                                            <name>fIdCount</name>
                                                            * 2
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fIdName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>idName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fIdCount</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fIdName</name>
                                        =
                                        <name>idName</name>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>
                                            <name>idElement</name>
                                            <index>[]</index>
                                        </name>
                                        =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name><name>idName</name>.
                                                                <name>length</name>
                                                            </name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fIdElement</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>idElement</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fIdCount</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fIdElement</name>
                                        =
                                        <name>idElement</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// store identifier</comment>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>fIdName</name>
                                <index>[
                                    <expr>
                                        <name>fIdCount</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>fIdElement</name>
                                <index>[
                                    <expr>
                                        <name>fIdCount</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>elementNodeIndex</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>fIdCount</name>++
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// putIdentifier(String,int)</comment>

            <comment type="line">//</comment>
            <comment type="line">// DEBUG</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Prints out the tables. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>print</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_PRINT_REF_COUNTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"num\t"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"type\t"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"name\t"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"val\t"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"par\t"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"lch\t"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"psib"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>fNodeType</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>fNodeType</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// separator</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"--------"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <comment type="line">// ref count</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <switch>switch
                                                        <condition>(
                                                            <expr>
                                                                <name>
                                                                    <name>fNodeType</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>CHUNK_SIZE</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <block>{
                                                            <case>case
                                                                <expr>
                                                                    <name><name>DocumentImpl</name>.
                                                                        <name>ELEMENT_DEFINITION_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"EDef"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>DOCUMENT_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"Doc"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>DOCUMENT_TYPE_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"DType"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>COMMENT_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"Com"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>PROCESSING_INSTRUCTION_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"PI"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>ELEMENT_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"Elem"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>ENTITY_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"Ent"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>ENTITY_REFERENCE_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"ERef"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>TEXT_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"Text"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>Node</name>.
                                                                        <name>ATTRIBUTE_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"Attr"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <case>case
                                                                <expr>
                                                                    <name><name>DeferredNode</name>.
                                                                        <name>TYPE_NODE</name>
                                                                    </name>
                                                                </expr>
                                                                :
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"TypeInfo"</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <break>break;</break> }
                                                                </block>
                                                            </case>
                                                            <default>default:
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>System</name>.<name>
                                                                                    out</name>.
                                                                                    <name>print</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>"?"+
                                                                                            <name>
                                                                                                <name>fNodeType</name>
                                                                                                <index>[
                                                                                                    <expr>
                                                                                                        <name>i</name>
                                                                                                    </expr>
                                                                                                    ]
                                                                                                </index>
                                                                                                <index>[
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            CHUNK_SIZE
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                    ]
                                                                                                </index>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </default>
                                                            }
                                                        </block>
                                                    </switch>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodeName</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodeValue</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodeURI</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodeParent</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodeLastChild</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodePrevSib</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'\t'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>fNodeExtra</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>CHUNK_SIZE</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_PRINT_TABLES</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// This assumes that the document is small</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"# start table"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>fNodeCount</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>chunk</name> =
                                                <init>
                                                    <expr>
                                                        <name>i</name>
                                                        &gt;&gt;
                                                        <name>CHUNK_SHIFT</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>index</name> =
                                                <init>
                                                    <expr>
                                                        <name>i</name>
                                                        &amp;
                                                        <name>CHUNK_MASK</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    % 10 == 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"num\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"type\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"name\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"val\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"uri\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"par\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"lch\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"psib\t"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"xtra"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>getChunkIndex</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fNodeType</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>chunk</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>index</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case
                                                    <expr>
                                                        <name><name>DocumentImpl</name>.
                                                            <name>ELEMENT_DEFINITION_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"EDef"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>DOCUMENT_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Doc"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>DOCUMENT_TYPE_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"DType"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>COMMENT_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Com"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>PROCESSING_INSTRUCTION_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"PI"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>ELEMENT_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Elem"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>ENTITY_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Ent"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>ENTITY_REFERENCE_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"ERef"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>TEXT_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Text"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>Node</name>.
                                                            <name>ATTRIBUTE_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Attr"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name><name>DeferredNode</name>.
                                                            <name>TYPE_NODE</name>
                                                        </name>
                                                    </expr>
                                                    :
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"TypeInfo"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <break>break;</break> }
                                                    </block>
                                                </case>
                                                <default>default:
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>System</name>.<name>out</name>.
                                                                        <name>print</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"?"+
                                                                                <call>
                                                                                    <name>getChunkIndex</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>fNodeType</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>chunk</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>index</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </default>
                                                }
                                            </block>
                                        </switch>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getChunkValue</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fNodeName</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getNodeValue</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getChunkValue</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fNodeURI</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getChunkIndex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fNodeParent</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getChunkIndex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fNodeLastChild</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getChunkIndex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fNodePrevSib</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\t'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getChunkIndex</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fNodeExtra</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chunk</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>index</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>println</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"# end table"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// print()</comment>

            <comment type="line">//</comment>
            <comment type="line">// DeferredNode methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Returns the node index. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNodeIndex</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Protected methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Synchronizes the node's data. */</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>synchronizeData</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <comment type="line">// no need to sync in the future</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// fluff up enough nodes to fill identifiers hash</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fIdElement</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <comment type="line">// REVISIT: There has to be a more efficient way of</comment>
                                <comment type="line">// doing this. But keep in mind that the</comment>
                                <comment type="line">// tree can have been altered and re-ordered</comment>
                                <comment type="line">// before all of the element nodes with ID</comment>
                                <comment type="line">// attributes have been registered. For now</comment>
                                <comment type="line">// this is reasonable and safe. -Ac</comment>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>IntVector</name>
                                        </type>
                                        <name>path</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>IntVector</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>fIdCount</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{

                                        <comment type="line">// ignore if it's already been registered</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>elementNodeIndex</name> =
                                                <init>
                                                    <expr>
                                                        <name>
                                                            <name>fIdElement</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>idName</name>      =
                                                <init>
                                                    <expr>
                                                        <name>
                                                            <name>fIdName</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>idName</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// find path from this element to the root</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>path</name>.
                                                        <name>removeAllElements</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>index</name> =
                                                <init>
                                                    <expr>
                                                        <name>elementNodeIndex</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <do>do
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>path</name>.
                                                                <name>addElement</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>pchunk</name> =
                                                        <init>
                                                            <expr>
                                                                <name>index</name>
                                                                &gt;&gt;
                                                                <name>CHUNK_SHIFT</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>pindex</name> =
                                                        <init>
                                                            <expr>
                                                                <name>index</name>
                                                                &amp;
                                                                <name>CHUNK_MASK</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>index</name>
                                                        =
                                                        <call>
                                                            <name>getChunkIndex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fNodeParent</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>pchunk</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>pindex</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                            while
                                            <condition>(
                                                <expr>
                                                    <name>index</name>
                                                    != -1
                                                </expr>
                                                )
                                            </condition>
                                            ;
                                        </do>

                                        <comment type="line">// Traverse path (backwards), fluffing the elements
                                        </comment>
                                        <comment type="line">// along the way. When this loop finishes, "place"
                                        </comment>
                                        <comment type="line">// will contain the reference to the element node</comment>
                                        <comment type="line">// we're interested in. -Ac</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>place</name> =
                                                <init>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>j</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>path</name>.
                                                                    <name>size</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            - 2
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>j</name>
                                                    &gt;= 0
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>j</name>--
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>index</name>
                                                        =
                                                        <call>
                                                            <name><name>path</name>.
                                                                <name>elementAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>Node</name>
                                                        </type>
                                                        <name>child</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>place</name>.
                                                                        <name>getLastChild</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <while>while
                                                    <condition>(
                                                        <expr>
                                                            <name>child</name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>child</name>
                                                                    <name>instanceof</name>
                                                                    <name>DeferredNode</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>nodeIndex</name> =
                                                                            <init>
                                                                                <expr>((<name>DeferredNode</name>)<name>
                                                                                    child</name>).
                                                                                    <call>
                                                                                        <name>getNodeIndex</name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>nodeIndex</name>
                                                                                ==
                                                                                <name>index</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>place</name>
                                                                                        =
                                                                                        <name>child</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <break>break;</break>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>child</name>
                                                                =
                                                                <call>
                                                                    <name><name>child</name>.
                                                                        <name>getPreviousSibling</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </while>
                                                }
                                            </block>
                                        </for>

                                        <comment type="line">// register the element</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Element</name>
                                                </type>
                                                <name>element</name> =
                                                <init>
                                                    <expr>(<name>Element</name>)
                                                        <name>place</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>putIdentifier0</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>idName</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>element</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>fIdName</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <comment type="line">// see if there are more IDs on this element</comment>
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    + 1 &lt; <name>fIdCount</name> &amp;&amp;
                                                    <name>
                                                        <name>fIdElement</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                                + 1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name>elementNodeIndex</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>idName</name>
                                                        =
                                                        <name>
                                                            <name>fIdName</name>
                                                            <index>[
                                                                <expr>++
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>idName</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <continue>continue;</continue>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>putIdentifier0</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>idName</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>element</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </for>

                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// if identifiers</comment>

                    }
                </block>
            </function>
            <comment type="line">// synchronizeData()</comment>

            <comment type="javadoc">/**
                * Synchronizes the node's children with the internal structure.
                * Fluffing the children at once solves a lot of work to keep
                * the two structures in sync. The problem gets worse when
                * editing the tree -- this makes it a lot easier.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>synchronizeChildren</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="block">/*
                                    * when we have elements with IDs this method is being recursively
                                    * called from synchronizeData, in which case we've already gone
                                    * through the following and we can now simply stop here.
                                    */
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>needsSyncChildren</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return;</return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// we don't want to generate any event for this so turn them off</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>orig</name> =
                            <init>
                                <expr>
                                    <name>mutationEvents</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>mutationEvents</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// no need to sync in the future</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncChildren</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getNodeType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// create children and link them as siblings</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>first</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>last</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name>getLastChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                != -1
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>index</name>
                                =
                                <call>
                                    <name>getPrevSibling</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ChildNode</name>
                                    </type>
                                    <name>node</name> =
                                    <init>
                                        <expr>(<name>ChildNode</name>)
                                            <call>
                                                <name>getNodeObject</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>last</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>last</name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>first</name>.
                                                    <name>previousSibling</name>
                                                </name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name><name>node</name>.
                                        <name>ownerNode</name>
                                    </name>
                                    =
                                    <name>this</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>isOwned</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>node</name>.
                                        <name>nextSibling</name>
                                    </name>
                                    =
                                    <name>first</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>first</name>
                                    =
                                    <name>node</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// save doctype and document type</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ELEMENT_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>docElement</name>
                                                = (<name>ElementImpl</name>)
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>DOCUMENT_TYPE_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>docType</name>
                                                        = (<name>DocumentTypeImpl</name>)
                                                        <name>node</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <name>first</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>firstChild</name>
                                        =
                                        <name>first</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>first</name>.
                                                <name>isFirstChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>lastChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>last</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// set mutation events flag back to its original value</comment>
                    <expr_stmt>
                        <expr>
                            <name>mutationEvents</name>
                            =
                            <name>orig</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// synchronizeChildren()</comment>

            <comment type="javadoc">/**
                * Synchronizes the node's children with the internal structure.
                * Fluffing the children at once solves a lot of work to keep
                * the two structures in sync. The problem gets worse when
                * editing the tree -- this makes it a lot easier.
                * This is not directly used in this class but this method is
                * here so that it can be shared by all deferred subclasses of AttrImpl.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>synchronizeChildren</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AttrImpl</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// we don't want to generate any event for this so turn them off</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>orig</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getMutationEvents</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMutationEvents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// no need to sync in the future</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>a</name>.
                                    <name>needsSyncChildren</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// create children and link them as siblings or simply store the value
                    </comment>
                    <comment type="line">// as a String if all we have is one piece of text</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>last</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getLastChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>nodeIndex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prev</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPrevSibling</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>last</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prev</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>a</name>.
                                            <name>value</name>
                                        </name>
                                        =
                                        <call>
                                            <name>getNodeValueString</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>nodeIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>a</name>.
                                                <name>hasStringValue</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>firstNode</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>lastNode</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>
                                                    <name>last</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>index</name>
                                            != -1
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>index</name>
                                            =
                                            <call>
                                                <name>getPrevSibling</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>ChildNode</name>
                                                </type>
                                                <name>node</name> =
                                                <init>
                                                    <expr>(<name>ChildNode</name>)
                                                        <call>
                                                            <name>getNodeObject</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>lastNode</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lastNode</name>
                                                            =
                                                            <name>node</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>firstNode</name>.
                                                                <name>previousSibling</name>
                                                            </name>
                                                            =
                                                            <name>node</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>node</name>.
                                                    <name>ownerNode</name>
                                                </name>
                                                =
                                                <name>a</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>node</name>.
                                                        <name>isOwned</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>node</name>.
                                                    <name>nextSibling</name>
                                                </name>
                                                =
                                                <name>firstNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>firstNode</name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>lastNode</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>a</name>.
                                                        <name>value</name>
                                                    </name>
                                                    =
                                                    <name>firstNode</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// firstChild = firstNode</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>firstNode</name>.
                                                            <name>isFirstChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>a</name>.
                                                            <name>lastChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>lastNode</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>a</name>.
                                                <name>hasStringValue</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// set mutation events flag back to its original value</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMutationEvents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>orig</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// synchronizeChildren(AttrImpl,int):void</comment>


            <comment type="javadoc">/**
                * Synchronizes the node's children with the internal structure.
                * Fluffing the children at once solves a lot of work to keep
                * the two structures in sync. The problem gets worse when
                * editing the tree -- this makes it a lot easier.
                * This is not directly used in this class but this method is
                * here so that it can be shared by all deferred subclasses of ParentNode.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>synchronizeChildren</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ParentNode</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// we don't want to generate any event for this so turn them off</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>orig</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getMutationEvents</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMutationEvents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// no need to sync in the future</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>needsSyncChildren</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// create children and link them as siblings</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>firstNode</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>lastNode</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name>getLastChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>nodeIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                != -1
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>index</name>
                                =
                                <call>
                                    <name>getPrevSibling</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ChildNode</name>
                                    </type>
                                    <name>node</name> =
                                    <init>
                                        <expr>(<name>ChildNode</name>)
                                            <call>
                                                <name>getNodeObject</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>lastNode</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>lastNode</name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>firstNode</name>.
                                                    <name>previousSibling</name>
                                                </name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name><name>node</name>.
                                        <name>ownerNode</name>
                                    </name>
                                    =
                                    <name>p</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>isOwned</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>node</name>.
                                        <name>nextSibling</name>
                                    </name>
                                    =
                                    <name>firstNode</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>firstNode</name>
                                    =
                                    <name>node</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lastNode</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>p</name>.
                                            <name>firstChild</name>
                                        </name>
                                        =
                                        <name>firstNode</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>firstNode</name>.
                                                <name>isFirstChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>p</name>.
                                                <name>lastChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>lastNode</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// set mutation events flag back to its original value</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMutationEvents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>orig</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// synchronizeChildren(ParentNode,int):void</comment>

            <comment type="line">// utility methods</comment>

            <comment type="javadoc">/** Ensures that the internal tables are large enough. */</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>ensureCapacity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeType</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// create buffers</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeType</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeName</name>
                                        = new
                                        <name>
                                            <name>Object</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeValue</name>
                                        = new
                                        <name>
                                            <name>Object</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeParent</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeLastChild</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodePrevSib</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeURI</name>
                                        = new
                                        <name>
                                            <name>Object</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeExtra</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[
                                                <expr>
                                                    <name>INITIAL_CHUNK_COUNT</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[]</index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>fNodeType</name>.
                                            <name>length</name>
                                        </name>
                                        &lt;=
                                        <name>chunk</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// resize the tables</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>newsize</name> =
                                                <init>
                                                    <expr>
                                                        <name>chunk</name>
                                                        * 2
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                    <index>[]</index>
                                                </type>
                                                <name>newArray</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>int</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>newsize</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                            <index>[]</index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeType</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeType</name>
                                                =
                                                <name>newArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Object</name>
                                                    <index>[]</index>
                                                    <index>[]</index>
                                                </type>
                                                <name>newStrArray</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>newsize</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                            <index>[]</index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeName</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newStrArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeName</name>
                                                =
                                                <name>newStrArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>newStrArray</name>
                                                = new
                                                <name>
                                                    <name>Object</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeValue</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newStrArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeValue</name>
                                                =
                                                <name>newStrArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>newArray</name>
                                                = new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeParent</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeParent</name>
                                                =
                                                <name>newArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>newArray</name>
                                                = new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeLastChild</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeLastChild</name>
                                                =
                                                <name>newArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>newArray</name>
                                                = new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodePrevSib</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodePrevSib</name>
                                                =
                                                <name>newArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>newStrArray</name>
                                                = new
                                                <name>
                                                    <name>Object</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeURI</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newStrArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeURI</name>
                                                =
                                                <name>newStrArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>newArray</name>
                                                = new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fNodeExtra</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newArray</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fNodeExtra</name>
                                                =
                                                <name>newArray</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>fNodeType</name>
                                                    <index>[
                                                        <expr>
                                                            <name>chunk</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// Done - there's sufficient capacity</comment>
                                                <return>return;</return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// create new chunks</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeParent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeLastChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodePrevSib</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>createChunk</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeExtra</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Done</comment>
                    <return>return;</return>

                    }
                </block>
            </function>
            <comment type="line">// ensureCapacity(int,int)</comment>

            <comment type="javadoc">/** Creates a node of the specified type. */</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>int</name>
                </type>
                <name>createNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>nodeType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// ensure tables are large enough</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name> =
                            <init>
                                <expr>
                                    <name>fNodeCount</name>
                                    &gt;&gt;
                                    <name>CHUNK_SHIFT</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>fNodeCount</name>
                                    &amp;
                                    <name>CHUNK_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>ensureCapacity</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// initialize node</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setChunkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fNodeType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>nodeType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chunk</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// return node index number</comment>
                    <return>return
                        <expr><name>fNodeCount</name>++
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// createNode(short):int</comment>

            <comment type="javadoc">/**
                * Performs a binary search for a target value in an array of
                * values. The array of values must be in ascending sorted order
                * before calling this method and all array values must be
                * non-negative.
                *
                * @param values The array of values to search.
                * @param start The starting offset of the search.
                * @param end The ending offset of the search.
                * @param target The target value.
                *
                * @return This function will return the &lt;i&gt;first&lt;/i&gt; occurrence
                * of the target value, or -1 if the target value cannot
                * be found.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>binarySearch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>
                                <name>values</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_IDS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"binarySearch(), target: "+
                                                        <name>target</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// look for target value</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt;=
                                <name>end</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <comment type="line">// is this the one we're looking for?</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>middle</name> =
                                    <init>
                                        <expr>(<name>start</name> + <name>end</name>) / 2
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>  =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>values</name>
                                                <index>[
                                                    <expr>
                                                        <name>middle</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>DEBUG_IDS</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>" value: "+<name>value</name>+", target: "+<name>
                                                                target</name>+" // "
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>print</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>values</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>start</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>end</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>middle</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>target</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        ==
                                        <name>target</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>middle</name>
                                                    &gt; 0 &amp;&amp;
                                                    <name>
                                                        <name>values</name>
                                                        <index>[
                                                            <expr>
                                                                <name>middle</name>
                                                                - 1
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name>target</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <expr_stmt>
                                                    <expr><name>middle</name>--
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>DEBUG_IDS</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>println</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"FOUND AT "+
                                                                            <name>middle</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>middle</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// is this point higher or lower?</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        &gt;
                                        <name>target</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>end</name>
                                                = <name>middle</name> - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>start</name>
                                                = <name>middle</name> + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>

                            }
                        </block>
                    </while>
                    <comment type="line">// while</comment>

                    <comment type="line">// not found</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_IDS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"NOT FOUND!"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>-1</expr>;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// binarySearch(int[],int,int,int):int</comment>

            <comment type="line">//</comment>
            <comment type="line">// Private methods</comment>
            <comment type="line">//</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>INIT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name>CHUNK_SIZE</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;
                            <name>CHUNK_SIZE</name>
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>INIT_ARRAY</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = -1
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                }
            </block>
            <comment type="javadoc">/** Creates the specified chunk in the given array of chunks. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>createChunk</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name>CHUNK_SIZE</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>INIT_ARRAY</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>chunk</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>CHUNK_SIZE</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <class>class <name>RefCount</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>fCount</name>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>createChunk</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = new
                            <name>
                                <name>Object</name>
                                <index>[
                                    <expr>
                                        <name>CHUNK_SIZE</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>CHUNK_SIZE</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = new
                            <call>
                                <name>RefCount</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the specified value in the given of data at the chunk and index.
                *
                * @return Returns the old value.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>setChunkIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clearChunkIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>data</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>chunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ovalue</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ovalue</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>data</name>
                                            <index>[
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[
                                                <expr>
                                                    <name>CHUNK_SIZE</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>index</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>ovalue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>setChunkValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clearChunkValue</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>data</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>chunk</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ovalue</name> =
                            <init>
                                <expr>(<name>String</name>)
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ovalue</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>RefCount</name>
                                        </type>
                                        <name>c</name> =
                                        <init>
                                            <expr>(<name>RefCount</name>)
                                                <name>
                                                    <name>data</name>
                                                    <index>[
                                                        <expr>
                                                            <name>chunk</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[
                                                        <expr>
                                                            <name>CHUNK_SIZE</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>c</name>.
                                            <name>fCount</name>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>index</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>ovalue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the specified value in the given data at the chunk and index.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>getChunkIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            != <name>null</name> ?
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>index</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            : -1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>getChunkValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            != <name>null</name> ? (<name>String</name>)
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>chunk</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>index</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>getNodeValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>data</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>fNodeValue</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>data</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>data</name>
                                        <name>instanceof</name>
                                        <name>String</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>(<name>String</name>)
                                                <name>data</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// type information</comment>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>data</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Clears the specified value in the given data at the chunk and index.
                * Note that this method will clear the given chunk if the reference
                * count becomes zero.
                *
                * @return Returns the old value.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>clearChunkIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    != <name>null</name> ?
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    : -1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>data</name>
                                            <index>[
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[
                                                <expr>
                                                    <name>CHUNK_SIZE</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        --
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>data</name>
                                            <index>[
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>chunk</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr>
                                                        <name>CHUNK_SIZE</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>data</name>
                                                        <index>[
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>clearChunkValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>chunk</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    != <name>null</name> ? (<name>String</name>)
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>chunk</name>
                                            </expr>
                                            ]
                                        </index>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    :
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>data</name>
                                            <index>[
                                                <expr>
                                                    <name>chunk</name>
                                                </expr>
                                                ]
                                            </index>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>RefCount</name>
                                        </type>
                                        <name>c</name> =
                                        <init>
                                            <expr>(<name>RefCount</name>)
                                                <name>
                                                    <name>data</name>
                                                    <index>[
                                                        <expr>
                                                            <name>chunk</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                    <index>[
                                                        <expr>
                                                            <name>CHUNK_SIZE</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>c</name>.
                                            <name>fCount</name>
                                        </name>
                                        --
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>c</name>.
                                                <name>fCount</name>
                                            </name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>data</name>
                                                        <index>[
                                                            <expr>
                                                                <name>chunk</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This version of putIdentifier is needed to avoid fluffing
                * all of the paths to ID attributes when a node object is
                * created that contains an ID attribute.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>putIdentifier0</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>idName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_IDS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"putIdentifier0("+
                                                        <name>idName</name>+", "+
                                                        <name>element</name>+')'
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// create hashtable</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>identifiers</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>identifiers</name>
                                        = new
                                        <call>
                                            <name><name>java</name>.<name>util</name>.
                                                <name>Hashtable</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// save ID and its associated element</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>identifiers</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>idName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// putIdentifier0(String,Element)</comment>

            <comment type="javadoc">/** Prints the ID array. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>print</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>values</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>middle</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>DEBUG_IDS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>print</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>" ["</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>end</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>middle</name>
                                                    ==
                                                    <name>i</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"!"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.<name>out</name>.
                                                        <name>print</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>values</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>values</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name>target</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"*"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    &lt; <name>end</name> - 1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.<name>out</name>.
                                                                    <name>print</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>" "</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>out</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"] "+
                                                        <name>end</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// print(int[],int,int,int,int)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Classes</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * A simple integer vector.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>IntVector</name>
                <block>{

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Data. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>
                                <name>data</name>
                                <index>[]</index>
                            </name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Size. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Public methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Returns the length of this vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>size</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Returns the element at the specified index. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>elementAt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Appends an element to the end of the vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>addElement</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>element</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr><name>size</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>element</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Clears the vector. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>removeAllElements</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>size</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="line">//</comment>
                    <comment type="line">// Private methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/** Makes sure that there is enough storage. */</comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>ensureCapacity</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newsize</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>data</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>data</name>
                                                = new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>newsize</name>
                                                            + 15
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>newsize</name>
                                                &gt;
                                                <name><name>data</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>
                                                            <name>newdata</name>
                                                            <index>[]</index>
                                                        </name>
                                                        =
                                                        <init>
                                                            <expr>new
                                                                <name>
                                                                    <name>int</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>newsize</name>
                                                                            + 15
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>System</name>.
                                                                <name>arraycopy</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>data</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newdata</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>data</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>data</name>
                                                        =
                                                        <name>newdata</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>

                            }
                        </block>
                    </function>
                    <comment type="line">// ensureCapacity(int)</comment>

                    }
                </block>
            </class>
            <comment type="line">// class IntVector</comment>

            }
        </block>
    </class>
    <comment type="line">// class DeferredDocumentImpl</comment>
</unit>
