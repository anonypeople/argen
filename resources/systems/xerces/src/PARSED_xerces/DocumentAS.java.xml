<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\DocumentAS.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @deprecated
        * This interface extends the &lt;code&gt;Document&lt;/code&gt; interface with additional
        * methods for both document and AS editing.
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>DocumentAS</name>
        <block>{
            <comment type="javadoc">/**
                * The active external ASModel. Note that the active external
                * &lt;code&gt;ASModel&lt;/code&gt; is responsible for consulting the internal
                * ASModel, so if an attribute is declared in the internal
                * &lt;code&gt;ASModel&lt;/code&gt; and the corresponding &lt;code&gt;ownerElements&lt;/code&gt;
                * points to a &lt;code&gt;ASElementDeclaration&lt;/code&gt;s defined in the active
                * external ASModel, changing the active external ASModel will cause the
                * &lt;code&gt;ownerElements&lt;/code&gt; to be recomputed. If the
                * &lt;code&gt;ownerElements&lt;/code&gt; is not defined in the newly active
                * external ASModel, the &lt;code&gt;ownerElements&lt;/code&gt; will be an empty
                * node list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>getActiveASModel</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * The active external ASModel. Note that the active external
                * &lt;code&gt;ASModel&lt;/code&gt; is responsible for consulting the internal
                * ASModel, so if an attribute is declared in the internal
                * &lt;code&gt;ASModel&lt;/code&gt; and the corresponding &lt;code&gt;ownerElements&lt;/code&gt;
                * points to a &lt;code&gt;ASElementDeclaration&lt;/code&gt;s defined in the active
                * external ASModel, changing the active external ASModel will cause the
                * &lt;code&gt;ownerElements&lt;/code&gt; to be recomputed. If the
                * &lt;code&gt;ownerElements&lt;/code&gt; is not defined in the newly active
                * external ASModel, the &lt;code&gt;ownerElements&lt;/code&gt; will be an empty
                * node list.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setActiveASModel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>activeASModel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * A list of &lt;code&gt;ASObject&lt;/code&gt;s of type &lt;code&gt;AS_MODEL&lt;/code&gt;s
                * associated with a document. The &lt;code&gt;addAS&lt;/code&gt; method associates
                * a &lt;code&gt;ASModel&lt;/code&gt; with a document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASObjectList</name>
                </type>
                <name>getBoundASModels</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            <comment type="javadoc">/**
                * A list of &lt;code&gt;ASObject&lt;/code&gt;s of type &lt;code&gt;AS_MODEL&lt;/code&gt;s
                * associated with a document. The &lt;code&gt;addAS&lt;/code&gt; method associates
                * a &lt;code&gt;ASModel&lt;/code&gt; with a document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setBoundASModels</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASObjectList</name>
                            </type>
                            <name>boundASModels</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Retrieve the internal &lt;code&gt;ASModel&lt;/code&gt; of a document.
                * @return &lt;code&gt;ASModel&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASModel</name>
                </type>
                <name>getInternalAS</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the internal subset &lt;code&gt;ASModel&lt;/code&gt; of a document. This could
                * be null as a mechanism for "removal".
                * @param as &lt;code&gt;ASModel&lt;/code&gt; to be the internal subset of the
                * document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInternalAS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>as</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Associate a &lt;code&gt;ASModel&lt;/code&gt; with a document. Can be invoked
                * multiple times to result in a list of &lt;code&gt;ASModel&lt;/code&gt;s. Note
                * that only one internal &lt;code&gt;ASModel&lt;/code&gt; is associated with the
                * document, however, and that only one of the possible list of
                * &lt;code&gt;ASModel&lt;/code&gt;s is active at any one time.
                * @param as &lt;code&gt;ASModel&lt;/code&gt; to be associated with the document.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addAS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>as</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a &lt;code&gt;ASModel&lt;/code&gt; associated with a document. Can be
                * invoked multiple times to remove a number of these in the list of
                * &lt;code&gt;ASModel&lt;/code&gt;s.
                * @param as The &lt;code&gt;ASModel&lt;/code&gt; to be removed.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeAS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ASModel</name>
                            </type>
                            <name>as</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the AS editing object describing this elementThis method needs to
                * be changed and others added.
                * @return ASElementDeclaration object if the implementation supports "
                * &lt;code&gt;AS-EDIT&lt;/code&gt;" feature. Otherwise &lt;code&gt;null&lt;/code&gt;.
                * @exception DOMException
                * NOT_FOUND_ERR: Raised if no &lt;code&gt;ASModel&lt;/code&gt; is present.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ASElementDeclaration</name>
                </type>
                <name>getElementDeclaration</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Validates the document against the &lt;code&gt;ASModel&lt;/code&gt;.
                * @exception DOMASException
                *
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>validate</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
