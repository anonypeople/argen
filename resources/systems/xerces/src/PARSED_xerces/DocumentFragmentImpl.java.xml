<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\DocumentFragmentImpl.java">
    <comment type="block">/*
        * Copyright 1999-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DocumentFragment</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Text</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * DocumentFragment is a "lightweight" or "minimal" Document
        * object. It is very common to want to be able to extract a portion
        * of a document's tree or to create a new fragment of a
        * document. Imagine implementing a user command like cut or
        * rearranging a document by moving fragments around. It is desirable
        * to have an object which can hold such fragments and it is quite
        * natural to use a Node for this purpose. While it is true that a
        * Document object could fulfil this role, a Document object can
        * potentially be a heavyweight object, depending on the underlying
        * implementation... and in DOM Level 1, nodes aren't allowed to cross
        * Document boundaries anyway. What is really needed for this is a
        * very lightweight object. DocumentFragment is such an object.
        * &lt;P&gt;
        * Furthermore, various operations -- such as inserting nodes as
        * children of another Node -- may take DocumentFragment objects as
        * arguments; this results in all the child nodes of the
        * DocumentFragment being moved to the child list of this node.
        * &lt;P&gt;
        * The children of a DocumentFragment node are zero or more nodes
        * representing the tops of any sub-trees defining the structure of
        * the document. DocumentFragment do not need to be well-formed XML
        * documents (although they do need to follow the rules imposed upon
        * well-formed XML parsed entities, which can have multiple top
        * nodes). For example, a DocumentFragment might have only one child
        * and that child node could be a Text node. Such a structure model
        * represents neither an HTML document nor a well-formed XML document.
        * &lt;P&gt;
        * When a DocumentFragment is inserted into a Document (or indeed any
        * other Node that may take children) the children of the
        * DocumentFragment and not the DocumentFragment itself are inserted
        * into the Node. This makes the DocumentFragment very useful when the
        * user wishes to create nodes that are siblings; the DocumentFragment
        * acts as the parent of these nodes so that the user can use the
        * standard methods from the Node interface, such as insertBefore()
        * and appendChild().
        *
        * @xerces.internal
        *
        * @version $Id: DocumentFragmentImpl.java,v 1.14 2004/10/05 17:12:51 mrglavas Exp $
        * @since PR-DOM-Level-1-19980818.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>DocumentFragmentImpl</name>
        <super>
            <extends>extends
                <name>ParentNode</name>
            </extends>
            <implements>implements
                <name>DocumentFragment</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-7596449967279236746L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Factory constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>DocumentFragmentImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDoc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDoc</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/** Constructor for serialization. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>DocumentFragmentImpl</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// Node methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * A short integer indicating what type of node this is. The named
                * constants for this value are defined in the org.w3c.dom.Node interface.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getNodeType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Node</name>.
                                <name>DOCUMENT_FRAGMENT_NODE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns the node name. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>"#document-fragment"</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Override default behavior to call normalize() on this Node's
                * children. It is up to implementors or Node to override normalize()
                * to take action.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>normalize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// No need to normalize if already normalized.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isNormalized</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>kid</name>,
                            <name>next</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <expr>
                                <name>kid</name>
                                =
                                <name>firstChild</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>kid</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>kid</name>
                                =
                                <name>next</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>next</name>
                                    =
                                    <name><name>kid</name>.
                                        <name>nextSibling</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// If kid is a text node, we need to check for one of two</comment>
                            <comment type="line">// conditions:</comment>
                            <comment type="line">// 1) There is an adjacent text node</comment>
                            <comment type="line">// 2) There is no adjacent text node, but kid is</comment>
                            <comment type="line">// an empty text node.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>kid</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>TEXT_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// If an adjacent text node, merge it with kid</comment>
                                        <if>if
                                            <condition>(
                                                <expr><name>next</name>!=<name>null</name> &amp;&amp;
                                                    <call>
                                                        <name><name>next</name>.
                                                            <name>getNodeType</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>Node</name>.
                                                        <name>TEXT_NODE</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>((<name>Text</name>)<name>kid</name>).
                                                            <call>
                                                                <name>appendData</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>next</name>.
                                                                                    <name>getNodeValue</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>removeChild</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>next</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>next</name>
                                                            =
                                                            <name>kid</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">// Don't advance; there might be another.
                                                    </comment>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">// If kid is empty, remove it</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name><name>kid</name>.
                                                                        <name>getNodeValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                == <name>null</name> ||
                                                                <call>
                                                                    <name><name>kid</name>.
                                                                        <name>getNodeValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                .
                                                                <call>
                                                                    <name>length</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                == 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>removeChild</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>kid</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>kid</name>.
                                            <name>normalize</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>isNormalized</name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
    <comment type="line">// class DocumentFragmentImpl</comment>
</unit>
