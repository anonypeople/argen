<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\ElementEditAS.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>NodeList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Attr</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @deprecated
        * This interface extends the &lt;code&gt;Element&lt;/code&gt; interface with additional
        * methods for guided document editing. An object implementing this
        * interface must also implement NodeEditAS interface.
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ElementEditAS</name>
        <super>
            <extends>extends
                <name>NodeEditAS</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * The list of qualified element names defined in the abstract schema.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>NodeList</name>
                </type>
                <name>getDefinedElementTypes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Determines element content type.
                * @return Constant for one of EMPTY_CONTENTTYPE, ANY_CONTENTTYPE,
                * MIXED_CONTENTTYPE, ELEMENTS_CONTENTTYPE.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>contentType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if the value for specified attribute can be set.
                * @param attrname Name of attribute.
                * @param attrval Value to be assigned to the attribute.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canSetAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrname</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrval</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if an attribute node can be added with respect to the
                * validity check level.This is an attribute node, there is no need for
                * canSetAttributreNodeNS!
                * @param attrNode &lt;code&gt;Node&lt;/code&gt; in which the attribute can possibly
                * be set.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canSetAttributeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Attr</name>
                            </type>
                            <name>attrNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if the attribute with given namespace and qualified name can
                * be created if not already present in the attribute list of the
                * element. If the attribute with same qualified name and namespaceURI
                * is already present in the elements attribute list it tests for the
                * value of the attribute and its prefix to the new value. See DOM core
                * &lt;code&gt;setAttributeNS&lt;/code&gt;.
                * @param name Qualified name of attribute.
                * @param attrval Value to be assigned to the attribute.
                * @param namespaceURI &lt;code&gt;namespaceURI&lt;/code&gt; of namespace.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canSetAttributeNS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrval</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Verifies if an attribute by the given name can be removed.
                * @param attrname Name of attribute.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canRemoveAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrname</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Verifies if an attribute by the given local name and namespace can be
                * removed.
                * @param attrname Local name of the attribute to be removed.
                * @param namespaceURI The namespace URI of the attribute to remove.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canRemoveAttributeNS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrname</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if an attribute node can be removed.
                * @param attrNode The &lt;code&gt;Attr&lt;/code&gt; node to remove from the
                * attribute list.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canRemoveAttributeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>attrNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns an &lt;code&gt;NodeList&lt;/code&gt; containing the possible
                * &lt;code&gt;Element&lt;/code&gt; names that can appear as children of this type
                * of element.
                * @return List of possible children element types of this element.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>NodeList</name>
                </type>
                <name>getChildElements</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns an &lt;code&gt;NodeList&lt;/code&gt; containing the possible
                * &lt;code&gt;Element&lt;/code&gt; names that can appear as a parent of this type
                * of element.
                * @return List of possible parent element types of this element.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>NodeList</name>
                </type>
                <name>getParentElements</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns an &lt;code&gt;NodeList&lt;/code&gt; containing all the possible
                * &lt;code&gt;Attr&lt;/code&gt;s that can appear with this type of element.
                * @return List of possible attributes of this element.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>NodeList</name>
                </type>
                <name>getAttributeList</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if this element is defined in the currently active AS.
                * @param elemTypeName Name of element.
                * @return A boolean that is &lt;code&gt;true&lt;/code&gt; if the element is defined,
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isElementDefined</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elemTypeName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if this element in this namespace is defined in the
                * currently active AS.
                * @param elemTypeName Name of element.
                * @param namespaceURI &lt;code&gt;namespaceURI&lt;/code&gt; of namespace.
                * @param name Qualified name of namespace. This is for sub-elements.
                * @return A boolean that is &lt;code&gt;true&lt;/code&gt; if the element is defined,
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isElementDefinedNS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>elemTypeName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
