<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xpointer\ElementSchemePointer.java">
    <comment type="block">/*
        * Copyright 2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xpointer</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.
            <name>XMLErrorReporter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>SymbolTable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLChar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>Augmentations</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>QName</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLAttributes</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLErrorHandler</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * Implements the XPointerPart interface for element() scheme specific processing.
        * &lt;/p&gt;
        *
        * @xerces.internal
        *
        * @version $Id: ElementSchemePointer.java,v 1.1 2005/06/17 22:00:20 nddelima Exp $
        *
        */
    </comment>
    <class>class <name>ElementSchemePointer</name>
        <super>
            <implements>implements
                <name>XPointerPart</name>
            </implements>
        </super>
        <block>{

            <comment type="line">// Fields</comment>

            <comment type="line">// The Scheme Name i.e element</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>fSchemeName</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The scheme Data</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>fSchemeData</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The scheme Data &amp; child sequence</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>fShortHandPointerName</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Should we attempt to resolve the ChildSequence from the</comment>
            <comment type="line">// current element position. If a ShortHand Pointer is present</comment>
            <comment type="line">// attempt to resolve relative to the short hand pointer.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fIsResolveElement</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Has the element been found</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fIsElementFound</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Was only an empty element found</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fWasOnlyEmptyElementFound</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// If a shorthand pointer is present and resolved</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>fIsShortHand</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The depth at which the element was found</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fFoundDepth</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The XPointer element child sequence</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fChildSequence</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The current child position</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fCurrentChildPosition</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The current child depth</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fCurrentChildDepth</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The current element's child sequence</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>
                        <name>fCurrentChildSequence</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>
            <empty_stmt>;</empty_stmt>

            <comment type="line">// Stores if the Fragment was resolved by the pointer</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fIsFragmentResolved</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Stores if the Fragment was resolved by the pointer</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ShortHandPointer</name>
                    </type>
                    <name>fShortHandPointer</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The XPointer Error reporter</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLErrorReporter</name>
                    </type>
                    <name>fErrorReporter</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The XPointer Error Handler</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XMLErrorHandler</name>
                    </type>
                    <name>fErrorHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>SymbolTable</name>
                    </type>
                    <name>fSymbolTable</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// ************************************************************************</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">// ************************************************************************</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ElementSchemePointer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>public</specifier>
                <name>ElementSchemePointer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSymbolTable</name>
                            =
                            <name>symbolTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>public</specifier>
                <name>ElementSchemePointer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SymbolTable</name>
                            </type>
                            <name>symbolTable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLErrorReporter</name>
                            </type>
                            <name>errorReporter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSymbolTable</name>
                            =
                            <name>symbolTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fErrorReporter</name>
                            =
                            <name>errorReporter</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// ************************************************************************</comment>
            <comment type="line">// XPointerPart implementation</comment>
            <comment type="line">// ************************************************************************</comment>

            <comment type="javadoc">/**
                * Parses the XPointer expression and tokenizes it into Strings
                * delimited by whitespace.
                *
                * @see org.apache.xerces.xpointer.XPointerProcessor#parseXPointer(java.lang.String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>parseXPointer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>xpointer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">//</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>init</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// tokens</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Tokens</name>
                            </type>
                            <name>tokens</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Tokens</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fSymbolTable</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// scanner</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Scanner</name>
                            </type>
                            <name>scanner</name> =
                            <init>
                                <expr>new
                                    <class>
                                        <super>
                                            <name>Scanner</name>
                                        </super>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fSymbolTable</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <specifier>protected</specifier>
                                                    <name>void</name>
                                                </type>
                                                <name>addToken</name>
                                                <parameter_list>(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>Tokens</name>
                                                            </type>
                                                            <name>tokens</name>
                                                        </decl>
                                                    </param>
                                                    ,
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>token</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                </parameter_list>
                                                <throws>throws
                                                    <argument>
                                                        <expr>
                                                            <name>XNIException</name>
                                                        </expr>
                                                    </argument>
                                                </throws>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>token</name>
                                                                ==
                                                                <name><name>Tokens</name>.
                                                                    <name>XPTRTOKEN_ELEM_CHILD</name>
                                                                </name>
                                                                || <name>token</name> ==
                                                                <name><name>Tokens</name>.
                                                                    <name>XPTRTOKEN_ELEM_NCNAME</name>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>super</name>.
                                                                                <name>addToken</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>tokens</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>token</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return;</return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>reportError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"InvalidElementSchemeToken"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>new
                                                                            <name>
                                                                                <name>Object</name>
                                                                                <index>[]</index>
                                                                            </name>
                                                                            <block>{
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>
                                                                                            <name>tokens</name>
                                                                                            .
                                                                                            <name>getTokenString</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>token</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                }
                                                                            </block>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// scan the element() XPointer expression</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>xpointer</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>success</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>scanner</name>.
                                            <name>scanExpr</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fSymbolTable</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>tokens</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>xpointer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>!
                                <name>success</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>reportError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"InvalidElementSchemeXPointer"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <name>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </name>
                                                        <block>{
                                                            <expr>
                                                                <name>xpointer</name>
                                                            </expr>
                                                            }
                                                        </block>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Initialize a temp arrays to the size of token count which should</comment>
                    <comment type="line">// be atleast twice the size of child sequence, to hold the ChildSequence.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>tmpChildSequence</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <call>
                                                    <name><name>tokens</name>.
                                                        <name>getTokenCount</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                / 2 + 1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// the element depth</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Traverse the scanned tokens</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>tokens</name>.
                                        <name>hasMore</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>token</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>tokens</name>.
                                                    <name>nextToken</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>token</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name><name>Tokens</name>.
                                                <name>XPTRTOKEN_ELEM_NCNAME</name>
                                            </name>
                                        </expr>
                                        :
                                        <block>{
                                            <comment type="line">// Note: Only a single ShortHand pointer can be
                                                present
                                            </comment>

                                            <comment type="line">// The shortHand name</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>token</name>
                                                    =
                                                    <call>
                                                        <name><name>tokens</name>.
                                                            <name>nextToken</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fShortHandPointerName</name>
                                                    =
                                                    <call>
                                                        <name><name>tokens</name>.
                                                            <name>getTokenString</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>token</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <comment type="line">// Create a new ShortHandPointer</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fShortHandPointer</name>
                                                    = new
                                                    <call>
                                                        <name>ShortHandPointer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fSymbolTable</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fShortHandPointer</name>.
                                                            <name>setSchemeName</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fShortHandPointerName</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <break>break;</break>
                                            }
                                        </block>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>Tokens</name>.
                                                <name>XPTRTOKEN_ELEM_CHILD</name>
                                            </name>
                                        </expr>
                                        :
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>tmpChildSequence</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <call>
                                                        <name><name>tokens</name>.
                                                            <name>nextToken</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr><name>i</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <break>break;</break>
                                            }
                                        </block>
                                    </case>
                                    <default>default:
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>reportError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"InvalidElementSchemeXPointer"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                <block>{
                                                                    <expr>
                                                                        <name>xpointer</name>
                                                                    </expr>
                                                                    }
                                                                </block>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </while>

                    <comment type="line">// Initialize the arrays to the number of elements in the ChildSequence.
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name>fChildSequence</name>
                            = new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentChildSequence</name>
                            = new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tmpChildSequence</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fChildSequence</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the scheme name i.e element
                * @see org.apache.xerces.xpointer.XPointerPart#getSchemeName()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemeName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fSchemeName</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the scheme data
                *
                * @see org.apache.xerces.xpointer.XPointerPart#getSchemeData()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemeData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fSchemeData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the scheme name
                *
                * @see org.apache.xerces.xpointer.XPointerPart#setSchemeName(java.lang.String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSchemeName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>schemeName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSchemeName</name>
                            =
                            <name>schemeName</name>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the scheme data
                *
                * @see org.apache.xerces.xpointer.XPointerPart#setSchemeData(java.lang.String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSchemeData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>schemeData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSchemeData</name>
                            =
                            <name>schemeData</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Responsible for resolving the element() scheme XPointer. If a ShortHand
                * Pointer is present and it is successfully resolved and if a child
                * sequence is present, the child sequence is resolved relative to it.
                *
                * @see org.apache.xerces.xpointer.XPointerProcessor#resolveXPointer(org.apache.xerces.xni.QName,
                org.apache.xerces.xni.XMLAttributes, org.apache.xerces.xni.Augmentations, int event)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>resolveXPointer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLAttributes</name>
                            </type>
                            <name>attributes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Augmentations</name>
                            </type>
                            <name>augs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>event</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isShortHandPointerResolved</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// if a ChildSequence exisits, resolve child elements</comment>

                    <comment type="line">// if an element name exists</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fShortHandPointerName</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// resolve ShortHand Pointer</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>isShortHandPointerResolved</name>
                                        =
                                        <call>
                                            <name><name>fShortHandPointer</name>.
                                                <name>resolveXPointer</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>attributes</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>augs</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>event</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>isShortHandPointerResolved</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fIsResolveElement</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fIsShortHand</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fIsResolveElement</name>
                                                    = false
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fIsResolveElement</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// Added here to skip the ShortHand pointer corresponding to</comment>
                    <comment type="line">// an element if one exisits and start searching from its child</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fChildSequence</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fIsFragmentResolved</name>
                                        =
                                        <call>
                                            <name>matchChildSequence</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>event</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>isShortHandPointerResolved</name>
                                        &amp;&amp;
                                        <name><name>fChildSequence</name>.
                                            <name>length</name>
                                        </name>
                                        &lt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if only a resolved shorthand pointer exists</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>fIsFragmentResolved</name>
                                                =
                                                <name>isShortHandPointerResolved</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>fIsFragmentResolved</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <name>fIsFragmentResolved</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Matches the current element position in the document tree with the
                * element position specified in the element XPointer scheme.
                *
                * @param event
                * @return boolean - true if the current element position in the document
                * tree matches theelement position specified in the element XPointer
                * scheme.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>matchChildSequence</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>event</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// need to resize fCurrentChildSequence</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentChildDepth</name>
                                &gt;=
                                <name><name>fCurrentChildSequence</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>
                                            <name>tmpCurrentChildSequence</name>
                                            <index>[]</index>
                                        </name>
                                        =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name><name>fCurrentChildSequence</name>.
                                                                <name>length</name>
                                                            </name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fCurrentChildSequence</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tmpCurrentChildSequence</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>fCurrentChildSequence</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// Increase the size by a factor of 2 (?)</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentChildSequence</name>
                                        = new
                                        <name>
                                            <name>int</name>
                                            <index>[
                                                <expr>
                                                    <name>fCurrentChildDepth</name>
                                                    * 2
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tmpCurrentChildSequence</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fCurrentChildSequence</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>tmpCurrentChildSequence</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fIsResolveElement</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// start</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>event</name>
                                            ==
                                            <name><name>XPointerPart</name>.
                                                <name>EVENT_ELEMENT_START</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>fCurrentChildSequence</name>
                                                        <index>[
                                                            <expr>
                                                                <name>fCurrentChildDepth</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <name>fCurrentChildPosition</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr><name>fCurrentChildDepth</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <comment type="line">// reset the current child position</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentChildPosition</name>
                                                    = 1
                                                </expr>
                                                ;
                                            </expr_stmt>

                                            <comment type="line">//if (!fSchemeNameFound) {</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>(<name>fCurrentChildDepth</name> &lt;= <name>
                                                        fFoundDepth</name>) || (<name>fFoundDepth</name> == 0)
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name>checkMatch</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fIsElementFound</name>
                                                                            = true
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fFoundDepth</name>
                                                                            =
                                                                            <name>fCurrentChildDepth</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fIsElementFound</name>
                                                                            = false
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>fFoundDepth</name>
                                                                            = 0
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </then>
                                            </if>

                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>event</name>
                                                    ==
                                                    <name><name>XPointerPart</name>.
                                                        <name>EVENT_ELEMENT_END</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>fCurrentChildDepth</name>
                                                                ==
                                                                <name>fFoundDepth</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>fIsElementFound</name>
                                                                        = true
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>((<name>fCurrentChildDepth</name> &lt; <name>
                                                                        fFoundDepth</name>) &amp;&amp; (<name>
                                                                        fFoundDepth
                                                                    </name> != 0))
                                                                        || ((<name>fCurrentChildDepth</name> &gt; <name>
                                                                            fFoundDepth</name>)
                                                                        <comment type="line">// or empty element found
                                                                        </comment>
                                                                        &amp;&amp; (<name>fFoundDepth</name> == 0))
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>fIsElementFound</name>
                                                                                = false
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                        </else>
                                                    </if>

                                                    <comment type="line">// reset array position of last child</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>fCurrentChildSequence</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>fCurrentChildDepth</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <expr_stmt>
                                                        <expr><name>fCurrentChildDepth</name>--
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fCurrentChildPosition</name>
                                                            =
                                                            <name>
                                                                <name>fCurrentChildSequence</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>fCurrentChildDepth</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            + 1
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>event</name>
                                                            ==
                                                            <name><name>XPointerPart</name>.
                                                                <name>EVENT_ELEMENT_EMPTY</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{

                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>
                                                                        <name>fCurrentChildSequence</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>fCurrentChildDepth</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    =
                                                                    <name>fCurrentChildPosition</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr><name>fCurrentChildPosition</name>++
                                                                </expr>
                                                                ;
                                                            </expr_stmt>

                                                            <comment type="line">// Donot check for empty elements if
                                                                the empty element is
                                                            </comment>
                                                            <comment type="line">// a child of a found parent element
                                                            </comment>
                                                            <comment type="line">//if (!fIsElementFound) {</comment>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <call>
                                                                            <name>checkMatch</name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>fIsElementFound</name>
                                                                                = true
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>fWasOnlyEmptyElementFound</name>
                                                                                = true
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>fIsElementFound</name>
                                                                                = false
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </else>
                                                            </if>
                                                            <comment type="line">//}</comment>

                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>fIsElementFound</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Matches the current position of the element being visited by checking
                * its position and previous elements against the element XPointer expression.
                * If a match is found it return true else false.
                *
                * @return boolean
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>checkMatch</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// If the number of elements in the ChildSequence is greater than the</comment>
                    <comment type="line">// current child depth, there is not point in checking further</comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>fIsShortHand</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// If a shorthand pointer is not present traverse the children
                                </comment>
                                <comment type="line">// and compare</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fChildSequence</name>.
                                                <name>length</name>
                                            </name>
                                            &lt;= <name>fCurrentChildDepth</name> + 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name><name>fChildSequence</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>
                                                                    <name>fChildSequence</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                !=
                                                                <name>
                                                                    <name>fCurrentChildSequence</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// If a shorthand pointer is present traverse the children
                                </comment>
                                <comment type="line">// ignoring the first element of the CurrenChildSequence which
                                </comment>
                                <comment type="line">// contains the ShortHand pointer element and compare</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fChildSequence</name>.
                                                <name>length</name>
                                            </name>
                                            &lt;= <name>fCurrentChildDepth</name> + 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{

                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name><name>fChildSequence</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <comment type="line">// ensure fCurrentChildSequence is large
                                                        enough
                                                    </comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name><name>fCurrentChildSequence</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                &lt; <name>i</name> + 2
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>

                                                    <comment type="line">// ignore the first element of
                                                        fCurrentChildSequence
                                                    </comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>
                                                                    <name>fChildSequence</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                !=
                                                                <name>
                                                                    <name>fCurrentChildSequence</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                            + 1
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>

                                }
                            </block>
                        </else>
                    </if>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true if the node matches or is a child of a matching element()
                * scheme XPointer.
                *
                * @see org.apache.xerces.xpointer.XPointerProcessor#isFragmentResolved()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFragmentResolved</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Return true if the Fragment was resolved and the current Node depth
                    </comment>
                    <comment type="line">// is greater than or equal to the depth at which the element was found
                    </comment>
                    <return>return
                        <expr>
                            <name>fIsFragmentResolved</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true if the XPointer expression resolves to a non-element child
                * of the current resource fragment.
                *
                * @see org.apache.xerces.xpointer.XPointerPart#isChildFragmentResolved()
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isChildFragmentResolved</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if only a shorthand pointer was present</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fIsShortHand</name>
                                &amp;&amp; <name>fShortHandPointer</name> != <name>null</name> &amp;&amp;
                                <name><name>fChildSequence</name>.
                                    <name>length</name>
                                </name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>fShortHandPointer</name>.
                                                <name>isChildFragmentResolved</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>fWasOnlyEmptyElementFound</name>
                                        ? !
                                        <name>fWasOnlyEmptyElementFound</name>
                                        : (<name>fIsFragmentResolved</name> &amp;&amp; (<name>fCurrentChildDepth</name> &gt;= <name>
                                        fFoundDepth</name>))
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reports an XPointer error
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>reportError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>arguments</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="block">/*fErrorReporter.reportError(XPointerMessageFormatter.XPOINTER_DOMAIN,
                        key, arguments, XMLErrorReporter.SEVERITY_ERROR);
                        */
                    </comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>XNIException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(
                                            <call>
                                                <name>
                                                    <name>fErrorReporter</name>
                                                    .
                                                    <name>getMessageFormatter</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>XPointerMessageFormatter</name>.
                                                                <name>XPOINTER_DOMAIN</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )
                                            .
                                            <call>
                                                <name>formatMessage</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>fErrorReporter</name>.
                                                                    <name>getLocale</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>arguments</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initializes error handling objects
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>initErrorReporter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fErrorReporter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fErrorReporter</name>
                                        = new
                                        <call>
                                            <name>XMLErrorReporter</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fErrorHandler</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fErrorHandler</name>
                                        = new
                                        <call>
                                            <name>XPointerErrorHandler</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fErrorReporter</name>.
                                    <name>putMessageFormatter</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>XPointerMessageFormatter</name>.
                                                <name>XPOINTER_DOMAIN</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>XPointerMessageFormatter</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Initializes the element scheme processor
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>init</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSchemeName</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSchemeData</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fShortHandPointerName</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fIsResolveElement</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fIsElementFound</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fWasOnlyEmptyElementFound</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fFoundDepth</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentChildPosition</name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentChildDepth</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fIsFragmentResolved</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fShortHandPointer</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initErrorReporter</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// ************************************************************************</comment>
            <comment type="line">// element() Scheme expression scanner</comment>
            <comment type="line">// ************************************************************************</comment>

            <comment type="javadoc">/**
                * List of XPointer Framework tokens.
                *
                * @xerces.internal
                *
                * @author Neil Delima, IBM
                * @version $Id: ElementSchemePointer.java,v 1.1 2005/06/17 22:00:20 nddelima Exp $
                *
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>final</specifier> class <name>Tokens</name>
                <block>{

                    <comment type="javadoc">/**
                        * XPointer element() scheme
                        * [1] ElementSchemeData ::= (NCName ChildSequence?) | ChildSequence
                        * [2] ChildSequence ::= ('/' [1-9] [0-9]*)+
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>XPTRTOKEN_ELEM_NCNAME</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>XPTRTOKEN_ELEM_CHILD</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Token names</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>fgTokenNames</name> =
                            <init>
                                <expr>
                                    <block>{ <expr>"XPTRTOKEN_ELEM_NCNAME"</expr>,
                                        <expr>"XPTRTOKEN_ELEM_CHILD"</expr>
                                        }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Token count</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>INITIAL_TOKEN_COUNT</name> =
                            <init>
                                <expr>1 &lt;&lt; 8</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>fTokens</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>INITIAL_TOKEN_COUNT</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>fTokenCount</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Current token position</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>fCurrentTokenIndex</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>SymbolTable</name>
                            </type>
                            <name>fSymbolTable</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>Hashtable</name>
                            </type>
                            <name>fTokenNames</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Hashtable</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructor
                        *
                        * @param symbolTable SymbolTable
                        */
                    </comment>
                    <constructor>
                        <specifier>private</specifier>
                        <name>Tokens</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SymbolTable</name>
                                    </type>
                                    <name>symbolTable</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fSymbolTable</name>
                                    =
                                    <name>symbolTable</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fTokenNames</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>XPTRTOKEN_ELEM_NCNAME</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"XPTRTOKEN_ELEM_NCNAME"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>fTokenNames</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>XPTRTOKEN_ELEM_CHILD</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"XPTRTOKEN_ELEM_CHILD"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="block">/*
                        * Returns the token String
                        * @param token The index of the token
                        * @return String The token string
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>String</name>
                        </type>
                        <name>getTokenString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>token</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>String</name>)
                                    <call>
                                        <name><name>fTokenNames</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>token</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns the token String
                        * @param token The index of the token
                        * @return String The token string
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Integer</name>
                        </type>
                        <name>getToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>token</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>Integer</name>)
                                    <call>
                                        <name><name>fTokenNames</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>token</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Add the specified string as a token
                        *
                        * @param token The token string
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>addToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>tokenStr</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>tokenInt</name> =
                                    <init>
                                        <expr>(<name>Integer</name>)
                                            <call>
                                                <name><name>fTokenNames</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>tokenStr</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>tokenInt</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>tokenInt</name>
                                                = new
                                                <call>
                                                    <name>Integer</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>fTokenNames</name>.
                                                                        <name>size</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fTokenNames</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tokenInt</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>tokenStr</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>addToken</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>tokenInt</name>.
                                                            <name>intValue</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Add the specified int token
                        *
                        * @param token The int specifying the token
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>addToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>token</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>fTokens</name>
                                                <index>[
                                                    <expr>
                                                        <name>fTokenCount</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>token</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>ArrayIndexOutOfBoundsException</name>
                                            </type>
                                            <name>ex</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>oldList</name> =
                                                <init>
                                                    <expr>
                                                        <name>fTokens</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>fTokens</name>
                                                = new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>fTokenCount</name>
                                                            &lt;&lt; 1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>oldList</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fTokens</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fTokenCount</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>fTokens</name>
                                                    <index>[
                                                        <expr>
                                                            <name>fTokenCount</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>token</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                            </try>
                            <expr_stmt>
                                <expr><name>fTokenCount</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Resets the current position to the head of the token list.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>rewind</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fCurrentTokenIndex</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns true if the {@link #getNextToken()} method
                        * returns a valid token.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>boolean</name>
                        </type>
                        <name>hasMore</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>fCurrentTokenIndex</name>
                                    &lt;
                                    <name>fTokenCount</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Obtains the token at the current position, then advance
                        * the current position by one.
                        *
                        * If there's no such next token, this method throws
                        * &lt;tt&gt;new XNIException("InvalidXPointerExpression");&lt;/tt&gt;.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>int</name>
                        </type>
                        <name>nextToken</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fCurrentTokenIndex</name>
                                        ==
                                        <name>fTokenCount</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>reportError</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"XPointerElementSchemeProcessingError"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>
                                        <name>fTokens</name>
                                        <index>[
                                            <expr><name>fCurrentTokenIndex</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Obtains the token at the current position, without advancing
                        * the current position.
                        *
                        * If there's no such next token, this method throws
                        * &lt;tt&gt;new XNIException("InvalidXPointerExpression");&lt;/tt&gt;.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>int</name>
                        </type>
                        <name>peekToken</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fCurrentTokenIndex</name>
                                        ==
                                        <name>fTokenCount</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>reportError</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"XPointerElementSchemeProcessingError"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>
                                        <name>fTokens</name>
                                        <index>[
                                            <expr>
                                                <name>fCurrentTokenIndex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Obtains the token at the current position as a String.
                        *
                        * If there's no current token or if the current token
                        * is not a string token, this method throws
                        * If there's no such next token, this method throws
                        * &lt;tt&gt;new XNIException("InvalidXPointerExpression");&lt;/tt&gt;.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>String</name>
                        </type>
                        <name>nextTokenAsString</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>s</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>getTokenString</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>nextToken</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>s</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>reportError</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"XPointerElementSchemeProcessingError"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>s</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns the number of tokens.
                        *
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>int</name>
                        </type>
                        <name>getTokenCount</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>fTokenCount</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                *
                * The XPointer expression scanner. Scans the XPointer framework expression.
                *
                * @xerces.internal
                *
                * @version $Id: ElementSchemePointer.java,v 1.1 2005/06/17 22:00:20 nddelima Exp $
                */
            </comment>
            <class>
                <specifier>private</specifier>
                class <name>Scanner</name>
                <block>{

                    <comment type="javadoc">/**
                        * 7-bit ASCII subset
                        *
                        * 0 1 2 3 4 5 6 7 8 9 A B C D E F
                        * 0, 0, 0, 0, 0, 0, 0, 0, 0, HT, LF, 0, 0, CR, 0, 0, // 0
                        * 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1
                        * SP, !, ", #, $, %, &amp;, ', (, ), *, +, ,, -, ., /, // 2
                        * 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, :, ;, &lt;, =, &gt;, ?, // 3
                        * @, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, // 4
                        * P, Q, R, S, T, U, V, W, X, Y, Z, [, \, ], ^, _, // 5
                        * `, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, // 6
                        * p, q, r, s, t, u, v, w, x, y, z, {, |, }, ~, DEL // 7
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>byte</name>
                            </type>
                            <name>CHARTYPE_INVALID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            ,
                            <comment type="line">// invalid XML characters, control characters and 7F</comment>
                            <name>CHARTYPE_OTHER</name>
                            =
                            <init>
                                <expr>1</expr>
                            </init>
                            ,
                            <comment type="line">// A valid XML character (possibly invalid NCNameChar) that does not
                                fall in one of the other categories
                            </comment>
                            <name>CHARTYPE_MINUS</name>
                            =
                            <init>
                                <expr>2</expr>
                            </init>
                            ,
                            <comment type="line">// '-' (0x2D)</comment>
                            <name>CHARTYPE_PERIOD</name>
                            =
                            <init>
                                <expr>3</expr>
                            </init>
                            ,
                            <comment type="line">// '.' (0x2E)</comment>
                            <name>CHARTYPE_SLASH</name>
                            =
                            <init>
                                <expr>4</expr>
                            </init>
                            ,
                            <comment type="line">// '/' (0x2F)</comment>
                            <name>CHARTYPE_DIGIT</name>
                            =
                            <init>
                                <expr>5</expr>
                            </init>
                            ,
                            <comment type="line">// '0'-'9' (0x30 to 0x39)</comment>
                            <name>CHARTYPE_LETTER</name>
                            =
                            <init>
                                <expr>6</expr>
                            </init>
                            ,
                            <comment type="line">// 'A'-'Z' or 'a'-'z' (0x41 to 0x5A and 0x61 to 0x7A)</comment>
                            <name>CHARTYPE_UNDERSCORE</name>
                            =
                            <init>
                                <expr>7</expr>
                            </init>
                            ,
                            <comment type="line">// '_' (0x5F)</comment>
                            <name>CHARTYPE_NONASCII</name>
                            =
                            <init>
                                <expr>8</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Non-ASCII Unicode codepoint (&gt;= 0x80)</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>fASCIICharMap</name> =
                            <init>
                                <expr>
                                    <block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>
                                        0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>
                                        1</expr>, <expr>1</expr>,
                                        <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>
                                            0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>
                                            0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>
                                            0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>
                                            0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
                                        <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>
                                            1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>
                                            1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>
                                            2</expr>, <expr>2</expr>, <expr>4</expr>, <expr>5</expr>, <expr>
                                            5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>,
                                        <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>
                                            1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>
                                            1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>,
                                        <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>,
                                        <expr>7</expr>, <expr>1</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>,
                                        <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>
                                            6</expr>, <expr>6</expr>, <expr>1</expr>, <expr>1</expr>, <expr>
                                            1</expr>, <expr>1</expr>, <expr>1</expr> }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Symbol literals
                        */
                    </comment>

                    <comment type="line">//</comment>
                    <comment type="line">// Data</comment>
                    <comment type="line">//</comment>
                    <comment type="javadoc">/** Symbol table. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>SymbolTable</name>
                            </type>
                            <name>fSymbolTable</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">//</comment>
                    <comment type="line">// Constructors</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/**
                        * Constructs an XPath expression scanner.
                        *
                        * @param symbolTable SymbolTable
                        */
                    </comment>
                    <constructor>
                        <specifier>private</specifier>
                        <name>Scanner</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SymbolTable</name>
                                    </type>
                                    <name>symbolTable</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <comment type="line">// save pool and tokens</comment>
                            <expr_stmt>
                                <expr>
                                    <name>fSymbolTable</name>
                                    =
                                    <name>symbolTable</name>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;(SymbolTable)</comment>

                    <comment type="javadoc">/**
                        * Scans the XPointer Expression
                        *
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>boolean</name>
                        </type>
                        <name>scanExpr</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SymbolTable</name>
                                    </type>
                                    <name>symbolTable</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Tokens</name>
                                    </type>
                                    <name>tokens</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>data</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>currentOffset</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>endOffset</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>nameOffset</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>nameHandle</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <while>while
                                <condition>(<expr>true</expr>)
                                </condition>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>currentOffset</name>
                                                ==
                                                <name>endOffset</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <expr_stmt>
                                        <expr>
                                            <name>ch</name>
                                            =
                                            <call>
                                                <name><name>data</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>currentOffset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>byte</name>
                                            </type>
                                            <name>chartype</name> =
                                            <init>
                                                <expr>(<name>ch</name> &gt;= 0x80) ?
                                                    <name>CHARTYPE_NONASCII</name>
                                                    :
                                                    <name>
                                                        <name>fASCIICharMap</name>
                                                        <index>[
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <comment type="line">//</comment>
                                    <comment type="line">// [1] ElementSchemeData ::= (NCName ChildSequence?) |
                                        ChildSequence
                                    </comment>
                                    <comment type="line">// [2] ChildSequence ::= ('/' [1-9] [0-9]*)+</comment>
                                    <comment type="line">//</comment>

                                    <switch>switch
                                        <condition>(
                                            <expr>
                                                <name>chartype</name>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{

                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_SLASH</name>
                                                </expr>
                                                :
                                                <comment type="line">// if last character is '/', break and report an
                                                    error
                                                </comment>
                                                <if>if
                                                    <condition>(
                                                        <expr>++<name>currentOffset</name> ==
                                                            <name>endOffset</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>

                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>addToken</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tokens</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>Tokens</name>.
                                                                            <name>XPTRTOKEN_ELEM_CHILD</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ch</name>
                                                        =
                                                        <call>
                                                            <name><name>data</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>currentOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                <comment type="line">// ChildSequence ::= ('/' [1-9] [0-9]*)+</comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>child</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <while>while
                                                    <condition>(
                                                        <expr>
                                                            <name>ch</name>
                                                            &gt;= '0' &amp;&amp; <name>ch</name> &lt;= '9'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>child</name>
                                                                = (<name>child</name> * 10) + (<name>ch</name> - '0')
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>++<name>currentOffset</name> ==
                                                                    <name>endOffset</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <break>break;</break>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>ch</name>
                                                                =
                                                                <call>
                                                                    <name><name>data</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>currentOffset</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </while>

                                                <comment type="line">// An invalid child sequence character</comment>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>child</name>
                                                            == 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>reportError</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"InvalidChildSequenceCharacter"
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>new
                                                                                    <name>
                                                                                        <name>Object</name>
                                                                                        <index>[]</index>
                                                                                    </name>
                                                                                    <block>{
                                                                                        <expr>new
                                                                                            <call>
                                                                                                <name>Character</name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>(<name>
                                                                                                            char</name>)
                                                                                                            <name>ch
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        }
                                                                                    </block>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>

                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tokens</name>.
                                                                <name>addToken</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>child</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                <break>break;</break>

                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_DIGIT</name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_LETTER</name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_MINUS</name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_NONASCII</name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_OTHER</name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_PERIOD</name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name>CHARTYPE_UNDERSCORE</name>
                                                </expr>
                                                :
                                                <comment type="line">// Scan the ShortHand Pointer NCName</comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>nameOffset</name>
                                                        =
                                                        <name>currentOffset</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>currentOffset</name>
                                                        =
                                                        <call>
                                                            <name>scanNCName</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>data</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>endOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>currentOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>currentOffset</name>
                                                            ==
                                                            <name>nameOffset</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">//return false;</comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>reportError</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    "InvalidNCNameInElementSchemeData"
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>new
                                                                                    <name>
                                                                                        <name>Object</name>
                                                                                        <index>[]</index>
                                                                                    </name>
                                                                                    <block>{
                                                                                        <expr>
                                                                                            <name>data</name>
                                                                                        </expr>
                                                                                        }
                                                                                    </block>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>

                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>currentOffset</name>
                                                            &lt;
                                                            <name>endOffset</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ch</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>data</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>currentOffset</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ch</name>
                                                                    = -1
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>

                                                <expr_stmt>
                                                    <expr>
                                                        <name>nameHandle</name>
                                                        =
                                                        <call>
                                                            <name><name>symbolTable</name>.
                                                                <name>addSymbol</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>data</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>nameOffset</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>currentOffset</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>addToken</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tokens</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>Tokens</name>.
                                                                            <name>XPTRTOKEN_ELEM_NCNAME</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tokens</name>.
                                                                <name>addToken</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>nameHandle</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                <break>break;</break>
                                            </case>
                                            }
                                        </block>
                                    </switch>
                                    }
                                </block>
                            </while>
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Scans a NCName.
                        * From Namespaces in XML
                        * [5] NCName ::= (Letter | '_') (NCNameChar)*
                        * [6] NCNameChar ::= Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender
                        *
                        * @param data A String containing the XPointer expression
                        * @param endOffset The int XPointer expression length
                        * @param currentOffset An int representing the current position of the XPointer expression
                        pointer
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>int</name>
                        </type>
                        <name>scanNCName</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>data</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>endOffset</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>currentOffset</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>data</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>currentOffset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                        &gt;= 0x80
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <call>
                                                        <name><name>XMLChar</name>.
                                                            <name>isNameStart</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>currentOffset</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>byte</name>
                                                </type>
                                                <name>chartype</name> =
                                                <init>
                                                    <expr>
                                                        <name>
                                                            <name>fASCIICharMap</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>ch</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>chartype</name>
                                                    !=
                                                    <name>CHARTYPE_LETTER</name>
                                                    &amp;&amp; <name>chartype</name> !=
                                                    <name>CHARTYPE_UNDERSCORE</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>currentOffset</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                            <while>while
                                <condition>(
                                    <expr>++<name>currentOffset</name> &lt;
                                        <name>endOffset</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>ch</name>
                                            =
                                            <call>
                                                <name><name>data</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>currentOffset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ch</name>
                                                &gt;= 0x80
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>!
                                                            <call>
                                                                <name><name>XMLChar</name>.
                                                                    <name>isName</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <break>break;</break>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>byte</name>
                                                        </type>
                                                        <name>chartype</name> =
                                                        <init>
                                                            <expr>
                                                                <name>
                                                                    <name>fASCIICharMap</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>chartype</name>
                                                            !=
                                                            <name>CHARTYPE_LETTER</name>
                                                            &amp;&amp; <name>chartype</name> !=
                                                            <name>CHARTYPE_DIGIT</name>
                                                            &amp;&amp; <name>chartype</name> !=
                                                            <name>CHARTYPE_PERIOD</name>
                                                            &amp;&amp; <name>chartype</name> !=
                                                            <name>CHARTYPE_MINUS</name>
                                                            &amp;&amp; <name>chartype</name> !=
                                                            <name>CHARTYPE_UNDERSCORE</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <break>break;</break>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <name>currentOffset</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="line">//</comment>
                    <comment type="line">// Protected methods</comment>
                    <comment type="line">//</comment>

                    <comment type="javadoc">/**
                        * This method adds the specified token to the token list. By
                        * default, this method allows all tokens. However, subclasses
                        * of the XPathExprScanner can override this method in order
                        * to disallow certain tokens from being used in the scanned
                        * XPath expression. This is a convenient way of allowing only
                        * a subset of XPath.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>addToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Tokens</name>
                                    </type>
                                    <name>tokens</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>token</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>XNIException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>tokens</name>.
                                            <name>addToken</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>token</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <comment type="line">// addToken(int)</comment>

                    }
                </block>
            </class>
            <comment type="line">// class Scanner</comment>

            }
        </block>
    </class>
</unit>
