<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\ElementState.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Holds the state of the currently serialized element.
        *
        *
        * @version $Revision: 1.11 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        * @see BaseMarkupSerializer
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>ElementState</name>
        <block>{


            <comment type="javadoc">/**
                * The element's raw tag name (local or prefix:local).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>String</name>
                    </type>
                    <name>rawName</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The element's local tag name.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>String</name>
                    </type>
                    <name>localName</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The element's namespace URI.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>String</name>
                    </type>
                    <name>namespaceURI</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if element is space preserving.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>preserveSpace</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if element is empty. Turns false immediately
                * after serializing the first contents of the element.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>empty</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if the last serialized node was an element node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>afterElement</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if the last serialized node was a comment node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>afterComment</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if textual content of current element should be
                * serialized as CDATA section.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>doCData</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if textual content of current element should be
                * serialized as raw characters (unescaped).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>unescaped</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True while inside CData and printing text as CData.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>inCData</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Association between namespace URIs (keys) and prefixes (values).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>prefixes</name>
                </decl>
                ;
            </decl_stmt>


            }
        </block>
    </class>
</unit>
