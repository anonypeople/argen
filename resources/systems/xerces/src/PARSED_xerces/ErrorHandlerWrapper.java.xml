<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\util\ErrorHandlerWrapper.java">
    <comment type="block">/*
        * Copyright 2001-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XMLLocator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>XNIException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLErrorHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.<name>parser</name>.
            <name>XMLParseException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>ErrorHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>SAXException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>xml</name>.<name>sax</name>.
            <name>SAXParseException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class wraps a SAX error handler in an XNI error handler.
        *
        * @see ErrorHandler
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: ErrorHandlerWrapper.java,v 1.12 2004/09/01 03:06:08 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>ErrorHandlerWrapper</name>
        <super>
            <implements>implements
                <name>XMLErrorHandler</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** The SAX error handler. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ErrorHandler</name>
                    </type>
                    <name>fErrorHandler</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Default constructor. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ErrorHandlerWrapper</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/** Wraps the specified SAX error handler. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ErrorHandlerWrapper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ErrorHandler</name>
                            </type>
                            <name>errorHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setErrorHandler</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>errorHandler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(ErrorHandler)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Sets the SAX error handler. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setErrorHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ErrorHandler</name>
                            </type>
                            <name>errorHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fErrorHandler</name>
                            =
                            <name>errorHandler</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            <comment type="line">// setErrorHandler(ErrorHandler)</comment>

            <comment type="javadoc">/** Returns the SAX error handler. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ErrorHandler</name>
                </type>
                <name>getErrorHandler</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fErrorHandler</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getErrorHandler():ErrorHandler</comment>

            <comment type="line">//</comment>
            <comment type="line">// XMLErrorHandler methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Reports a warning. Warnings are non-fatal and can be safely ignored
                * by most applications.
                *
                * @param domain The domain of the warning. The domain can be any
                * string but is suggested to be a valid URI. The
                * domain can be used to conveniently specify a web
                * site location of the relevent specification or
                * document pertaining to this warning.
                * @param key The warning key. This key can be any string and
                * is implementation dependent.
                * @param exception Exception.
                *
                * @throws XNIException Thrown to signal that the parser should stop
                * parsing the document.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>warning</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLParseException</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fErrorHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>SAXParseException</name>
                                        </type>
                                        <name>saxException</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>createSAXParseException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>exception</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fErrorHandler</name>.
                                                        <name>warning</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>saxException</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>SAXParseException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>createXMLParseException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>SAXException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>createXNIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// warning(String,String,XMLParseException)</comment>

            <comment type="javadoc">/**
                * Reports an error. Errors are non-fatal and usually signify that the
                * document is invalid with respect to its grammar(s).
                *
                * @param domain The domain of the error. The domain can be any
                * string but is suggested to be a valid URI. The
                * domain can be used to conveniently specify a web
                * site location of the relevent specification or
                * document pertaining to this error.
                * @param key The error key. This key can be any string and
                * is implementation dependent.
                * @param exception Exception.
                *
                * @throws XNIException Thrown to signal that the parser should stop
                * parsing the document.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>error</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLParseException</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fErrorHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>SAXParseException</name>
                                        </type>
                                        <name>saxException</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>createSAXParseException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>exception</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fErrorHandler</name>.
                                                        <name>error</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>saxException</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>SAXParseException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>createXMLParseException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>SAXException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>createXNIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// error(String,String,XMLParseException)</comment>

            <comment type="javadoc">/**
                * Report a fatal error. Fatal errors usually occur when the document
                * is not well-formed and signifies that the parser cannot continue
                * normal operation.
                * &lt;p&gt;
                * &lt;strong&gt;Note:&lt;/strong&gt; The error handler should &lt;em&gt;always&lt;/em&gt;
                * throw an &lt;code&gt;XNIException&lt;/code&gt; from this method. This exception
                * can either be the same exception that is passed as a parameter to
                * the method or a new XNI exception object. If the registered error
                * handler fails to throw an exception, the continuing operation of
                * the parser is undetermined.
                *
                * @param domain The domain of the fatal error. The domain can be
                * any string but is suggested to be a valid URI. The
                * domain can be used to conveniently specify a web
                * site location of the relevent specification or
                * document pertaining to this fatal error.
                * @param key The fatal error key. This key can be any string
                * and is implementation dependent.
                * @param exception Exception.
                *
                * @throws XNIException Thrown to signal that the parser should stop
                * parsing the document.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fatalError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>XMLParseException</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XNIException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fErrorHandler</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>SAXParseException</name>
                                        </type>
                                        <name>saxException</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>createSAXParseException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>exception</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>fErrorHandler</name>.
                                                        <name>fatalError</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>saxException</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>SAXParseException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>createXMLParseException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>SAXException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name>createXNIException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>
            <comment type="line">// fatalError(String,String,XMLParseException)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Protected methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Creates a SAXParseException from an XMLParseException. */</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>SAXParseException</name>
                </type>
                <name>createSAXParseException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLParseException</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SAXParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getMessage</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getPublicId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getExpandedSystemId</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getLineNumber</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getColumnNumber</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getException</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// createSAXParseException(XMLParseException):SAXParseException</comment>

            <comment type="javadoc">/** Creates an XMLParseException from a SAXParseException. */</comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>XMLParseException</name>
                </type>
                <name>createXMLParseException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SAXParseException</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>fPublicId</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>exception</name>.
                                            <name>getPublicId</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>fExpandedSystemId</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>exception</name>.
                                            <name>getSystemId</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>fLineNumber</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>exception</name>.
                                            <name>getLineNumber</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>fColumnNumber</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>exception</name>.
                                            <name>getColumnNumber</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>XMLLocator</name>
                            </type>
                            <name>location</name> =
                            <init>
                                <expr>new
                                    <class>
                                        <super>
                                            <name>XMLLocator</name>
                                        </super>
                                        <argument_list>()</argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>getPublicId</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>fPublicId</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>getExpandedSystemId</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>fExpandedSystemId</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>getBaseSystemId</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>getLiteralSystemId</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>int</name>
                                                </type>
                                                <name>getColumnNumber</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>fColumnNumber</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>int</name>
                                                </type>
                                                <name>getLineNumber</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>fLineNumber</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>int</name>
                                                </type>
                                                <name>getCharacterOffset</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return <expr>-1</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>getEncoding</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            <function>
                                                <type>
                                                    <specifier>public</specifier>
                                                    <name>String</name>
                                                </type>
                                                <name>getXMLVersion</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>XMLParseException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>location</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getMessage</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exception</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// createXMLParseException(SAXParseException):XMLParseException</comment>

            <comment type="javadoc">/** Creates an XNIException from a SAXException.
                NOTE: care should be taken *not* to call this with a SAXParseException; this will
                lose information!!! */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>XNIException</name>
                </type>
                <name>createXNIException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SAXException</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>XNIException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>exception</name>.
                                                    <name>getMessage</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exception</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// createXNIException(SAXException):XMLParseException</comment>
            }
        </block>
    </class>
    <comment type="line">// class ErrorHandlerWrapper</comment>
</unit>
