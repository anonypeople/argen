<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\events\EventImpl.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom</name>.
            <name>events</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>events</name>.
            <name>Event</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>events</name>.
            <name>EventTarget</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * EventImpl is an implementation of the basic "generic" DOM Level 2 Event
        * object. It may be subclassed by more specialized event sets.
        * Note that in our implementation, events are re-dispatchable (dispatch
        * clears the stopPropagation and preventDefault flags before it starts);
        * I believe that is the DOM's intent but I don't see an explicit statement
        * to this effect.
        *
        * @xerces.internal
        *
        * @version $Id: EventImpl.java,v 1.10 2004/10/06 15:25:33 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>EventImpl</name>
        <super>
            <implements>implements
                <name>Event</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>String</name>
                    </type>
                    <name>type</name>=
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>EventTarget</name>
                    </type>
                    <name>target</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>EventTarget</name>
                    </type>
                    <name>currentTarget</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>short</name>
                    </type>
                    <name>eventPhase</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>initialized</name>=
                    <init>
                        <expr>false</expr>
                    </init>
                    , <name>bubbles</name>=
                    <init>
                        <expr>true</expr>
                    </init>
                    , <name>cancelable</name>=
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <name>boolean</name>
                    </type>
                    <name>stopPropagation</name>=
                    <init>
                        <expr>false</expr>
                    </init>
                    , <name>preventDefault</name>=
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>long</name>
                    </type>
                    <name>timeStamp</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>currentTimeMillis</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The DOM doesn't deal with constructors, so instead we have an
                initializer call to set most of the read-only fields. The
                others are set, and reset, by the event subsystem during dispatch.
                &lt;p&gt;
                Note that init() -- and the subclass-specific initWhatever() calls --
                may be reinvoked. At least one initialization is required; repeated
                initializations overwrite the event with new values of their
                parameters.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>initEvent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>eventTypeArg</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>canBubbleArg</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>cancelableArg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr><name>type</name>=
                            <name>eventTypeArg</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>bubbles</name>=
                            <name>canBubbleArg</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>cancelable</name>=
                            <name>cancelableArg</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr><name>initialized</name>=true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @return true iff this Event is of a class and type which supports
                bubbling. In the generic case, this is True.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getBubbles</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bubbles</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @return true iff this Event is of a class and type which (a) has a
                Default Behavior in this DOM, and (b)allows cancellation (blocking)
                of that behavior. In the generic case, this is False.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getCancelable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>cancelable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @return the Node (EventTarget) whose EventListeners are currently
                being processed. During capture and bubble phases, this may not be
                the target node. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EventTarget</name>
                </type>
                <name>getCurrentTarget</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>currentTarget</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @return the current processing phase for this event --
                CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE. (There may be
                an internal DEFAULT_PHASE as well, but the users won't see it.) */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getEventPhase</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>eventPhase</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @return the EventTarget (Node) to which the event was originally
                dispatched.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EventTarget</name>
                </type>
                <name>getTarget</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>target</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** @return event name as a string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>type</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getTimeStamp</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>timeStamp</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Causes exit from in-progress event dispatch before the next
                currentTarget is selected. Replaces the preventBubble() and
                preventCapture() methods which were present in early drafts;
                they may be reintroduced in future levels of the DOM. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>stopPropagation</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr><name>stopPropagation</name>=true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Prevents any default processing built into the target node from
                occurring.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>preventDefault</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr><name>preventDefault</name>=true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
