<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\html\dom\HTMLCollectionImpl.java">
    <comment type="block">/*
        * Copyright 1999,2000,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>html</name>.
            <name>dom</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Element</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLAnchorElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLAppletElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLAreaElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLCollection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLFormElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLImageElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLObjectElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLOptionElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLTableCellElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLTableRowElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLTableSectionElement</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Implements {@link org.w3c.dom.html.HTMLCollection} to traverse any named
        * elements on a {@link org.w3c.dom.html.HTMLDocument}. The elements type to
        * look for is identified in the constructor by code. This collection is not
        * optimized for traversing large trees.
        * &lt;p&gt;
        * The collection has to meet two requirements: it has to be live, and it has
        * to traverse depth first and always return results in that order. As such,
        * using an object container (such as {@link java.util.Vector}) is expensive on
        * insert/remove operations. Instead, the collection has been implemented using
        * three traversing functions. As a result, operations on large documents will
        * result in traversal of the entire document tree and consume a considerable
        * amount of time.
        * &lt;p&gt;
        * Note that synchronization on the traversed document cannot be achieved.
        * The document itself cannot be locked, and locking each traversed node is
        * likely to lead to a dead lock condition. Therefore, there is a chance of the
        * document being changed as results are fetched; in all likelihood, the results
        * might be out dated, but not erroneous.
        *
        * @xerces.internal
        *
        * @version $Revision: 1.9 $ $Date: 2004/10/05 03:23:48 $
        * @author &lt;a href="mailto:arkin@exoffice.com"&gt;Assaf Arkin&lt;/a&gt;
        * @see org.w3c.dom.html.HTMLCollection
        */
    </comment>
    <class>class
        <name>HTMLCollectionImpl</name>
        <super>
            <implements>implements
                <name>HTMLCollection</name>
            </implements>
        </super>
        <block>{


            <comment type="javadoc">/**
                * Request collection of all anchors in document: &amp;lt;A&amp;gt; elements that
                * have a &lt;code&gt;name&lt;/code&gt; attribute.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ANCHOR</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all forms in document: &amp;lt;FORM&amp;gt; elements.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>FORM</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all images in document: &amp;lt;IMAGE&amp;gt; elements.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>IMAGE</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all Applets in document: &amp;lt;APPLET&amp;gt; and
                * &amp;lt;OBJECT&amp;gt; elements (&amp;lt;OBJECT&amp;gt; must contain an Applet).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>APPLET</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all links in document: &amp;lt;A&amp;gt; and &amp;lt;AREA&amp;gt;
                * elements (must have a &lt;code&gt;href&lt;/code&gt; attribute).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>LINK</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all options in selection: &amp;lt;OPTION&amp;gt; elments in
                * &amp;lt;SELECT&amp;gt; or &amp;lt;OPTGROUP&amp;gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>OPTION</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all rows in table: &amp;lt;TR&amp;gt; elements in table or
                * table section.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ROW</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all form elements: &amp;lt;INPUT&amp;gt;, &amp;lt;BUTTON&amp;gt;,
                * &amp;lt;SELECT&amp;gt;, &amp;lt;TEXT&amp;gt; and &amp;lt;TEXTAREA&amp;gt; elements inside form
                * &amp;lt;FORM&amp;gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ELEMENT</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all areas in map: &amp;lt;AREA&amp;gt; element in &amp;lt;MAP&amp;gt;
                * (non recursive).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>AREA</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all table bodies in table: &amp;lt;TBODY&amp;gt; element in
                * table &amp;lt;TABLE&amp;gt; (non recursive).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TBODY</name> =
                    <init>
                        <expr>-2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Request collection of all cells in row: &amp;lt;TD&amp;gt; elements in &amp;lt;TR&amp;gt;
                * (non recursive).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>CELL</name> =
                    <init>
                        <expr>-3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Indicates what this collection is looking for. Holds one of the enumerated
                * values and used by {@link #collectionMatch}. Set by the constructor and
                * determine the collection's use for its life time.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>short</name>
                    </type>
                    <name>_lookingFor</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * This is the top level element underneath which the collection exists.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Element</name>
                    </type>
                    <name>_topLevel</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Construct a new collection that retrieves element of the specific type
                * (&lt;code&gt;lookingFor&lt;/code&gt;) from the specific document portion
                * (&lt;code&gt;topLevel&lt;/code&gt;).
                *
                * @param topLevel The element underneath which the collection exists
                * @param lookingFor Code indicating what elements to look for
                */
            </comment>
            <constructor>
                <name>HTMLCollectionImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HTMLElement</name>
                            </type>
                            <name>topLevel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>lookingFor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>topLevel</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>NullPointerException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"HTM011 Argument 'topLevel' is null."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>_topLevel</name>
                            =
                            <name>topLevel</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_lookingFor</name>
                            =
                            <name>lookingFor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Returns the length of the collection. This method might traverse the
                * entire document tree.
                *
                * @return Length of the collection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Call recursive function on top-level element.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>getLength</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>_topLevel</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Retrieves the indexed node from the collection. Nodes are numbered in
                * tree order - depth-first traversal order. This method might traverse
                * the entire document tree.
                *
                * @param index The index of the node to return
                * @return The specified node or null if no such node found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Node</name>
                </type>
                <name>item</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalArgumentException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"HTM012 Argument 'index' is negative."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <comment type="line">// Call recursive function on top-level element.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>item</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>_topLevel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>CollectionIndex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Retrieves the named node from the collection. The name is matched case
                * sensitive against the &lt;TT&gt;id&lt;/TT&gt; attribute of each element in the
                * collection, returning the first match. The tree is traversed in
                * depth-first order. This method might traverse the entire document tree.
                *
                * @param name The name of the node to return
                * @return The specified node or null if no such node found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Node</name>
                </type>
                <name>namedItem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>name</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>NullPointerException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"HTM013 Argument 'name' is null."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <comment type="line">// Call recursive function on top-level element.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>namedItem</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>_topLevel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Recursive function returns the number of elements of a particular type
                * that exist under the top level element. This is a recursive function
                * and the top level element is passed along.
                *
                * @param topLevel Top level element from which to scan
                * @return Number of elements
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>topLevel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <synchronized>synchronized (
                        <expr>
                            <name>topLevel</name>
                        </expr>
                        )
                        <block>{
                            <comment type="line">// Always count from zero and traverse all the childs of the</comment>
                            <comment type="line">// current element in the order they appear.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>length</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>topLevel</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <comment type="line">// If a particular node is an element (could be HTML or XML),
                                    </comment>
                                    <comment type="line">// do two things: if it's the one we're looking for, count
                                    </comment>
                                    <comment type="line">// another matched element; at any rate, traverse it's
                                    </comment>
                                    <comment type="line">// children as well.</comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>node</name>
                                                <name>instanceof</name>
                                                <name>Element</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name>collectionMatch</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>(<name>Element</name>)
                                                                            <name>node</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>++
                                                                <name>length</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name>recurse</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>length</name>
                                                                        +=
                                                                        <call>
                                                                            <name>getLength</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>(<name>Element</name>)
                                                                                        <name>node</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            =
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </synchronized>
                    <return>return
                        <expr>
                            <name>length</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Recursive function returns the numbered element of a particular type
                * that exist under the top level element. This is a recursive function
                * and the top level element is passed along.
                * &lt;p&gt;
                * Note that this function must call itself with an index and get back both
                * the element (if one was found) and the new index which is decremeneted
                * for any like element found. Since integers are only passed by value,
                * this function makes use of a separate class ({@link CollectionIndex})
                * to hold that index.
                *
                * @param topLevel Top level element from which to scan
                * @param index The index of the item to retreive
                * @return Number of elements
                * @see CollectionIndex
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>item</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>topLevel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CollectionIndex</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <synchronized>synchronized (
                        <expr>
                            <name>topLevel</name>
                        </expr>
                        )
                        <block>{
                            <comment type="line">// Traverse all the childs of the current element in the order
                            </comment>
                            <comment type="line">// they appear. Count from the index backwards until you reach
                            </comment>
                            <comment type="line">// matching element with an index of zero. Return that element.
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>topLevel</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <comment type="line">// If a particular node is an element (could be HTML or XML),
                                    </comment>
                                    <comment type="line">// do two things: if it's the one we're looking for, decrease
                                    </comment>
                                    <comment type="line">// the index and if zero, return this node; at any rate,
                                    </comment>
                                    <comment type="line">// traverse it's children as well.</comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>node</name>
                                                <name>instanceof</name>
                                                <name>Element</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name>collectionMatch</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>(<name>Element</name>)
                                                                            <name>node</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>index</name>.
                                                                                <name>isZero</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <return>return
                                                                        <expr>
                                                                            <name>node</name>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>index</name>.
                                                                            <name>decrement</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name>recurse</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>result</name>
                                                                            =
                                                                            <call>
                                                                                <name>item</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>(<name>Element</name>)
                                                                                            <name>node</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>index</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>result</name>
                                                                                !=
                                                                                <name>null</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>result</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            =
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </synchronized>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Recursive function returns an element of a particular type with the
                * specified name (&lt;TT&gt;id&lt;/TT&gt; attribute).
                *
                * @param topLevel Top level element from which to scan
                * @param name The named element to look for
                * @return The first named element found
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>namedItem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>topLevel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <synchronized>synchronized (
                        <expr>
                            <name>topLevel</name>
                        </expr>
                        )
                        <block>{
                            <comment type="line">// Traverse all the childs of the current element in the order
                            </comment>
                            <comment type="line">// they appear.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>topLevel</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <comment type="line">// If a particular node is an element (could be HTML or XML),
                                    </comment>
                                    <comment type="line">// do two things: if it's the one we're looking for, and the
                                    </comment>
                                    <comment type="line">// name (id attribute) attribute is the one we're looking
                                        for,
                                    </comment>
                                    <comment type="line">// return this element; otherwise, traverse it's children.
                                    </comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>node</name>
                                                <name>instanceof</name>
                                                <name>Element</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name>collectionMatch</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>(<name>Element</name>)
                                                                            <name>node</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>name</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <return>return
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name>recurse</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>result</name>
                                                                            =
                                                                            <call>
                                                                                <name>namedItem</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>(<name>Element</name>)
                                                                                            <name>node</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>name</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>result</name>
                                                                                !=
                                                                                <name>null</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>result</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            =
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <name>node</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if scanning methods should iterate through the collection.
                * When looking for elements in the document, recursing is needed to traverse
                * the full document tree. When looking inside a specific element (e.g. for a
                * cell inside a row), recursing can lead to erroneous results.
                *
                * @return True if methods should recurse to traverse entire tree
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>recurse</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_lookingFor</name>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determines if current element matches based on what we're looking for.
                * The element is passed along with an optional identifier name. If the
                * element is the one we're looking for, return true. If the name is also
                * specified, the name must match the &lt;code&gt;id&lt;/code&gt; attribute
                * (match &lt;code&gt;name&lt;/code&gt; first for anchors).
                *
                * @param elem The current element
                * @param name The identifier name or null
                * @return The element matches what we're looking for
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>collectionMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>elem</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>match</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <synchronized>synchronized (
                        <expr>
                            <name>elem</name>
                        </expr>
                        )
                        <block>{
                            <comment type="line">// Begin with no matching. Depending on what we're looking for,
                            </comment>
                            <comment type="line">// attempt to match based on the element type. This is the quickest
                            </comment>
                            <comment type="line">// way to match involving only a cast. Do the expensive string
                            </comment>
                            <comment type="line">// comparison later on.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>match</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>_lookingFor</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>ANCHOR</name>
                                        </expr>
                                        :
                                        <comment type="line">// Anchor is an &lt;A&gt; element with a 'name' attribute.
                                            Otherwise, it's
                                        </comment>
                                        <comment type="line">// just a link.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLAnchorElement</name> ) &amp;&amp;
                                                <call>
                                                    <name><name>elem</name>.
                                                        <name>getAttribute</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"name"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>length</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                &gt; 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>FORM</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;FORM&gt; element.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLFormElement</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>IMAGE</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;IMG&gt; element. &lt;OBJECT&gt; elements with
                                            images are not returned.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLImageElement</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>APPLET</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;APPLET&gt; element, and any &lt;OBJECT&gt;
                                            element which represents an
                                        </comment>
                                        <comment type="line">// Applet. This is determined by 'codetype' attribute
                                            being
                                        </comment>
                                        <comment type="line">// 'application/java' or 'classid' attribute starting with
                                            'java:'.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLAppletElement</name> ) ||
                                                ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLObjectElement</name> &amp;&amp;
                                                ( "application/java".
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>elem</name>.
                                                                        <name>getAttribute</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"codetype"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                ||
                                                <call>
                                                    <name><name>elem</name>.
                                                        <name>getAttribute</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"classid"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>startsWith</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"java:"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                ) )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>ELEMENT</name>
                                        </expr>
                                        :
                                        <comment type="line">// All form elements implement HTMLFormControl for easy
                                            identification.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLFormControl</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>LINK</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;A&gt; element, and any &lt;AREA&gt; elements
                                            with an 'href' attribute.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLAnchorElement</name> ||
                                                <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLAreaElement</name> ) &amp;&amp;
                                                <call>
                                                    <name><name>elem</name>.
                                                        <name>getAttribute</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"href"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>length</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                &gt; 0 )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>AREA</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;AREA&gt; element.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLAreaElement</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>OPTION</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;OPTION&gt; element.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLOptionElement</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>ROW</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;TR&gt; element.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLTableRowElement</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>TBODY</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;TBODY&gt; element (one of three table section
                                            types).
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLTableSectionElement</name> &amp;&amp;
                                                <call>
                                                    <name><name>elem</name>.
                                                        <name>getTagName</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"tbody"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>CELL</name>
                                        </expr>
                                        :
                                        <comment type="line">// Any &lt;TD&gt; element.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = ( <name>elem</name>
                                                <name>instanceof</name>
                                                <name>HTMLTableCellElement</name> )
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    }
                                </block>
                            </switch>

                            <comment type="line">// If element type was matched and a name was specified, must also
                                match
                            </comment>
                            <comment type="line">// the name against either the 'id' or the 'name' attribute. The
                                'name'
                            </comment>
                            <comment type="line">// attribute is relevant only for &lt;A&gt; elements for backward
                                compatibility.
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>match</name>
                                        &amp;&amp; <name>name</name> !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// If an anchor and 'name' attribute matches, return true.
                                            Otherwise,
                                        </comment>
                                        <comment type="line">// try 'id' attribute.</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>elem</name>
                                                    <name>instanceof</name>
                                                    <name>HTMLAnchorElement</name> &amp;&amp;
                                                    <call>
                                                        <name><name>name</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>elem</name>.
                                                                            <name>getAttribute</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"name"</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <return>return <expr>true</expr>;
                                                </return>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                =
                                                <call>
                                                    <name><name>name</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>elem</name>.
                                                                        <name>getAttribute</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"id"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </synchronized>
                    <return>return
                        <expr>
                            <name>match</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            }
        </block>
    </class>


    <comment type="javadoc">/**
        * {@link CollectionImpl#item} must traverse down the tree and decrement the
        * index until it matches an element who's index is zero. Since integers are
        * passed by value, this class servers to pass the index into each recursion
        * by reference. It encompasses all the operations that need be performed on
        * the index, although direct access is possible.
        *
        * @xerces.internal
        *
        * @see CollectionImpl#item
        */
    </comment>
    <class>class
        <name>CollectionIndex</name>
        <block>{


            <comment type="javadoc">/**
                * Returns the current index.
                *
                * @return Current index
                */
            </comment>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getIndex</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_index</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Decrements the index by one.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>decrement</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>--
                            <name>_index</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if index is zero (or negative).
                *
                * @return True if index is zero
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>isZero</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_index</name>
                            &lt;= 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Constructs a new index with the specified initial value. The index will
                * then be decremeneted until it reaches zero.
                *
                * @param index The initial value
                */
            </comment>
            <constructor>
                <name>CollectionIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_index</name>
                            =
                            <name>index</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Holds the actual value that is passed by reference using this class.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_index</name>
                </decl>
                ;
            </decl_stmt>


            }
        </block>
    </class>
</unit>
