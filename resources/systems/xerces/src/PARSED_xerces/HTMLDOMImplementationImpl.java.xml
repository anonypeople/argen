<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\html\dom\HTMLDOMImplementationImpl.java">
    <comment type="block">/*
        * Copyright 1999,2000,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>html</name>.
            <name>dom</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom</name>.
            <name>DOMImplementationImpl</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLDOMImplementation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLDocument</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Provides number of methods for performing operations that are independent
        * of any particular instance of the document object model. This class is
        * unconstructable, the only way to obtain an instance of a DOM implementation
        * is by calling the static method {@link #getDOMImplementation}.
        *
        * @xerces.internal
        *
        * @version $Revision: 1.6 $ $Date: 2004/10/05 03:23:48 $
        * @author &lt;a href="mailto:arkin@exoffice.com"&gt;Assaf Arkin&lt;/a&gt;
        * @see org.w3c.dom.DOMImplementation
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>HTMLDOMImplementationImpl</name>
        <super>
            <extends>extends
                <name>DOMImplementationImpl</name>
            </extends>
            <implements>implements
                <name>HTMLDOMImplementation</name>
            </implements>
        </super>
        <block>{


            <comment type="javadoc">/**
                * Holds a reference to the single instance of the DOM implementation.
                * Only one instance is required since this class is multiple entry.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>HTMLDOMImplementation</name>
                    </type>
                    <name>_instance</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HTMLDOMImplementationImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Private constructor assures that an object of this class cannot
                * be created. The only way to obtain an object is by calling {@link
                * #getDOMImplementation}.
                */
            </comment>
            <constructor>
                <specifier>private</specifier>
                <name>HTMLDOMImplementationImpl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Create a new HTML document of the specified &lt;TT&gt;TITLE&lt;/TT&gt; text.
                *
                * @param title The document title text
                * @return New HTML document
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>HTMLDocument</name>
                </type>
                <name>createHTMLDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>title</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>HTMLDocument</name>
                            </type>
                            <name>doc</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>title</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>NullPointerException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"HTM014 Argument 'title' is null."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>doc</name>
                            = new
                            <call>
                                <name>HTMLDocumentImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>doc</name>.
                                    <name>setTitle</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>title</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>doc</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns an instance of a {@link HTMLDOMImplementation} that can be
                * used to perform operations that are not specific to a particular
                * document instance, e.g. to create a new document.
                *
                * @return Reference to a valid DOM implementation
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>HTMLDOMImplementation</name>
                </type>
                <name>getHTMLDOMImplementation</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_instance</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            }
        </block>
    </class>
</unit>
