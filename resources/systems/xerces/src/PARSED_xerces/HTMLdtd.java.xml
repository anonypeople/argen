<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\HTMLdtd.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <comment type="line">// Aug 21, 2000:</comment>
    <comment type="line">// Fixed bug in isElement and made HTMLdtd public.</comment>
    <comment type="line">// Contributed by Eric SCHAEFFER" &lt;eschaeffer@posterconseil.com&gt;</comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom</name>.
            <name>DOMMessageFormatter</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStreamReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>BufferedReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Utility class for accessing information specific to HTML documents.
        * The HTML DTD is expressed as three utility function groups. Two methods
        * allow for checking whether an element requires an open tag on printing
        * ({@link #isEmptyTag}) or on parsing ({@link #isOptionalClosing}).
        * &lt;P&gt;
        * Two other methods translate character references from name to value and
        * from value to name. A small entities resource is loaded into memory the
        * first time any of these methods is called for fast and efficient access.
        *
        *
        * @version $Revision: 1.18 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class
        <name>HTMLdtd</name>
        <block>{

            <comment type="javadoc">/**
                * Public identifier for HTML 4.01 (Strict) document type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>HTMLPublicId</name> =
                    <init>
                        <expr>"-//W3C//DTD HTML 4.01//EN"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * System identifier for HTML 4.01 (Strict) document type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>HTMLSystemId</name> =
                    <init>
                        <expr>"http://www.w3.org/TR/html4/strict.dtd"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Public identifier for XHTML 1.0 (Strict) document type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>XHTMLPublicId</name> =
                    <init>
                        <expr>"-//W3C//DTD XHTML 1.0 Strict//EN"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * System identifier for XHTML 1.0 (Strict) document type.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>XHTMLSystemId</name> =
                    <init>
                        <expr>"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Table of reverse character reference mapping. Character codes are held
                * as single-character strings, mapped to their reference name.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>_byChar</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Table of entity name to value mapping. Entities are held as strings,
                * character references as &lt;TT&gt;Character&lt;/TT&gt; objects.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>_byName</name>
                </decl>
                ;
            </decl_stmt>


            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>_boolAttrs</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Holds element definitions.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>_elemDefs</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Locates the HTML entities file that is loaded upon initialization.
                * This file is a resource loaded with the default class loader.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>ENTITIES_RESOURCE</name> =
                    <init>
                        <expr>"HTMLEntities.res"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Only opening tag should be printed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ONLY_OPENING</name> =
                    <init>
                        <expr>0x0001</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Element contains element content only.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ELEM_CONTENT</name> =
                    <init>
                        <expr>0x0002</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Element preserve spaces.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>PRESERVE</name>     =
                    <init>
                        <expr>0x0004</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Optional closing tag.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OPT_CLOSING</name>  =
                    <init>
                        <expr>0x0008</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Element is empty (also means only opening tag)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>EMPTY</name>        =
                    <init>
                        <expr>0x0010 |
                            <name>ONLY_OPENING</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Allowed to appear in head.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ALLOWED_HEAD</name> =
                    <init>
                        <expr>0x0020</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * When opened, closes P.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSE_P</name>      =
                    <init>
                        <expr>0x0040</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * When opened, closes DD or DT.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSE_DD_DT</name>  =
                    <init>
                        <expr>0x0080</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * When opened, closes itself.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSE_SELF</name>   =
                    <init>
                        <expr>0x0100</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * When opened, closes another table section.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSE_TABLE</name>  =
                    <init>
                        <expr>0x0200</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * When opened, closes TH or TD.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSE_TH_TD</name>  =
                    <init>
                        <expr>0x04000</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Returns true if element is declared to be empty. HTML elements are
                * defines as empty in the DTD, not by the document syntax.
                *
                * @param tagName The element tag name (upper case)
                * @return True if element is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmptyTag</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>EMPTY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if element is declared to have element content.
                * Whitespaces appearing inside element content will be ignored,
                * other text will simply report an error.
                *
                * @param tagName The element tag name (upper case)
                * @return True if element content
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isElementContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ELEM_CONTENT</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if element's textual contents preserves spaces.
                * This only applies to PRE and TEXTAREA, all other HTML elements
                * do not preserve space.
                *
                * @param tagName The element tag name (upper case)
                * @return True if element's text content preserves spaces
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isPreserveSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>PRESERVE</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if element's closing tag is optional and need not
                * exist. An error will not be reported for such elements if they
                * are not closed. For example, &lt;tt&gt;LI&lt;/tt&gt; is most often not closed.
                *
                * @param tagName The element tag name (upper case)
                * @return True if closing tag implied
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isOptionalClosing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>OPT_CLOSING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if element's closing tag is generally not printed.
                * For example, &lt;tt&gt;LI&lt;/tt&gt; should not print the closing tag.
                *
                * @param tagName The element tag name (upper case)
                * @return True if only opening tag should be printed
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isOnlyOpening</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isElement</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ONLY_OPENING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the opening of one element (&lt;tt&gt;tagName&lt;/tt&gt;) implies
                * the closing of another open element (&lt;tt&gt;openTag&lt;/tt&gt;). For example,
                * every opening &lt;tt&gt;LI&lt;/tt&gt; will close the previously open &lt;tt&gt;LI&lt;/tt&gt;,
                * and every opening &lt;tt&gt;BODY&lt;/tt&gt; will close the previously open &lt;tt&gt;HEAD&lt;/tt&gt;.
                *
                * @param tagName The newly opened element
                * @param openTag The already opened element
                * @return True if closing tag closes opening tag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isClosing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>openTag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Several elements are defined as closing the HEAD</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"HEAD"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>!
                                    <call>
                                        <name>isElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ALLOWED_HEAD</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// P closes iteself</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"P"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>isElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>CLOSE_P</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// DT closes DD, DD closes DT</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"DT"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"DD"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>isElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>CLOSE_DD_DT</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// LI and OPTION close themselves</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"LI"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"OPTION"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>isElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>CLOSE_SELF</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// Each of these table sections closes all the others</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"THEAD"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"TFOOT"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"TBODY"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"TR"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"COLGROUP"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>isElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>CLOSE_TABLE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <comment type="line">// TD closes TH and TH closes TD</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"TH"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>openTag</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"TD"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>isElement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>CLOSE_TH_TD</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the specified attribute it a URI and should be
                * escaped appropriately. In HTML URIs are escaped differently
                * than normal attributes.
                *
                * @param tagName The element's tag name
                * @param attrName The attribute's name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Stupid checks.</comment>
                    <return>return
                        <expr>(
                            <call>
                                <name><name>attrName</name>.
                                    <name>equalsIgnoreCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"href"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>attrName</name>.
                                    <name>equalsIgnoreCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"src"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the specified attribute is a boolean and should be
                * printed without the value. This applies to attributes that are true
                * if they exist, such as selected (OPTION/INPUT).
                *
                * @param tagName The element's tag name
                * @param attrName The attribute's name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>attrNames</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>attrNames</name>
                            = (
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>_boolAttrs</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>tagName</name>.
                                                    <name>toUpperCase</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Locale</name>.
                                                                <name>ENGLISH</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>attrNames</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>attrNames</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <if>if
                            <condition>(
                                <expr>
                                    <name>
                                        <name>attrNames</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>equalsIgnoreCase</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>attrName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <return>return <expr>true</expr>;
                                </return>
                            </then>
                        </if>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the value of an HTML character reference by its name. If the
                * reference is not found or was not defined as a character reference,
                * returns EOF (-1).
                *
                * @param name Name of character reference
                * @return Character code or EOF (-1)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>charFromName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initialize</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <call>
                                <name><name>_byName</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                != <name>null</name> &amp;&amp; <name>value</name>
                                <name>instanceof</name>
                                <name>Integer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>( (<name>Integer</name>) <name>value</name> ).
                                    <call>
                                        <name>intValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                        <else>else
                            <return>return <expr>-1</expr>;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the name of an HTML character reference based on its character
                * value. Only valid for entities defined from character references. If no
                * such character value was defined, return null.
                *
                * @param value Character value of entity
                * @return Entity's name or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>fromChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &gt; 0xffff
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initialize</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>name</name>
                            = (<name>String</name>)
                            <call>
                                <name><name>_byChar</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Integer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>name</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Initialize upon first access. Will load all the HTML character references
                * into a list that is accessible by name or character value and is optimized
                * for character substitution. This method may be called any number of times
                * but will execute only once.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>initialize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>is</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BufferedReader</name>
                            </type>
                            <name>reader</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>code</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>line</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Make sure not to initialize twice.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>_byName</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>_byName</name>
                                    = new
                                    <call>
                                        <name>Hashtable</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>_byChar</name>
                                    = new
                                    <call>
                                        <name>Hashtable</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>is</name>
                                    =
                                    <name><name>HTMLdtd</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>getResourceAsStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ENTITIES_RESOURCE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>is</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>RuntimeException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>DOMMessageFormatter</name>.
                                                                        <name>formatMessage</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>DOMMessageFormatter</name>.
                                                                                    <name>SERIALIZER_DOMAIN</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>"ResourceNotFound"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>Object</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                <block>{
                                                                                    <expr>
                                                                                        <name>ENTITIES_RESOURCE</name>
                                                                                    </expr>
                                                                                    }
                                                                                </block>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>reader</name>
                                    = new
                                    <call>
                                        <name>BufferedReader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>InputStreamReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>is</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>"ASCII"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>line</name>
                                    =
                                    <call>
                                        <name><name>reader</name>.
                                            <name>readLine</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>line</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>line</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == 0 ||
                                                <call>
                                                    <name><name>line</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                == '#'
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>line</name>
                                                        =
                                                        <call>
                                                            <name><name>reader</name>.
                                                                <name>readLine</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <continue>continue;</continue>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>index</name>
                                            =
                                            <call>
                                                <name><name>line</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>' '</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>index</name>
                                                &gt; 1
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>name</name>
                                                        =
                                                        <call>
                                                            <name><name>line</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>++
                                                        <name>index</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>index</name>
                                                            &lt;
                                                            <call>
                                                                <name><name>line</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>value</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>line</name>.
                                                                            <name>substring</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>index</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>value</name>.
                                                                            <name>indexOf</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>' '</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>index</name>
                                                                        &gt; 0
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>value</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>value</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>0</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>index</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>code</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>Integer</name>.
                                                                            <name>parseInt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>defineEntity</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>name</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>(<name>char</name>)
                                                                                    <name>code</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>line</name>
                                            =
                                            <call>
                                                <name><name>reader</name>.
                                                    <name>readLine</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>is</name>.
                                            <name>close</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Exception</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>SERIALIZER_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"ResourceNotLoaded"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>new
                                                                        <name>
                                                                            <name>Object</name>
                                                                            <index>[]</index>
                                                                        </name>
                                                                        <block>{
                                                                            <expr>
                                                                                <name>ENTITIES_RESOURCE</name>
                                                                            </expr>
                                                                            ,
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>except</name>.
                                                                                        <name>toString</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            }
                                                                        </block>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>is</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>is</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>Exception</name>
                                                            </type>
                                                            <name>except</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{ }</block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Defines a new character reference. The reference's name and value are
                * supplied. Nothing happens if the character reference is already defined.
                * &lt;P&gt;
                * Unlike internal entities, character references are a string to single
                * character mapping. They are used to map non-ASCII characters both on
                * parsing and printing, primarily for HTML documents. '&amp;lt;amp;' is an
                * example of a character reference.
                *
                * @param name The entity's name
                * @param value The entity's value
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>defineEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>_byName</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>name</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>_byName</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>Integer</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>_byChar</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>Integer</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>defineElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>flags</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_elemDefs</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Integer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>flags</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>defineBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attrName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>defineBoolean</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>attrName</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>defineBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>attrNames</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_boolAttrs</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tagName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>attrNames</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>flags</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            = (<name>Integer</name>)
                            <call>
                                <name><name>_elemDefs</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>name</name>.
                                                    <name>toUpperCase</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Locale</name>.
                                                                <name>ENGLISH</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>flags</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                        <else>else
                            <return>return
                                <expr>( (
                                    <call>
                                        <name><name>flags</name>.
                                            <name>intValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    &amp; <name>flag</name> ) == <name>flag</name> )
                                </expr>
                                ;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>


            static
            <block>{
                <expr_stmt>
                    <expr>
                        <name>_elemDefs</name>
                        = new
                        <call>
                            <name>Hashtable</name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"ADDRESS"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"AREA"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"BASE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                        |
                                        <name>ALLOWED_HEAD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"BASEFONT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"BLOCKQUOTE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"BODY"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"BR"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"COL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"COLGROUP"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        | <name>OPT_CLOSING</name> |
                                        <name>CLOSE_TABLE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"DD"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        | <name>ONLY_OPENING</name> |
                                        <name>CLOSE_DD_DT</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"DIV"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"DL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        |
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"DT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        | <name>ONLY_OPENING</name> |
                                        <name>CLOSE_DD_DT</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"FIELDSET"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"FORM"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"FRAME"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                        |
                                        <name>OPT_CLOSING</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"H1"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"H2"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"H3"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"H4"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"H5"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"H6"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"HEAD"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        |
                                        <name>OPT_CLOSING</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"HR"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                        |
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"HTML"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        |
                                        <name>OPT_CLOSING</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"IMG"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"INPUT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"ISINDEX"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                        |
                                        <name>ALLOWED_HEAD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"LI"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        | <name>ONLY_OPENING</name> |
                                        <name>CLOSE_SELF</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"LINK"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                        |
                                        <name>ALLOWED_HEAD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"MAP"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ALLOWED_HEAD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"META"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                        |
                                        <name>ALLOWED_HEAD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        |
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OPTGROUP"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OPTION"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        | <name>ONLY_OPENING</name> |
                                        <name>CLOSE_SELF</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"P"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        | <name>CLOSE_P</name> |
                                        <name>CLOSE_SELF</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"PARAM"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"PRE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>PRESERVE</name>
                                        |
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"SCRIPT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ALLOWED_HEAD</name>
                                        |
                                        <name>PRESERVE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"NOSCRIPT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ALLOWED_HEAD</name>
                                        |
                                        <name>PRESERVE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"SELECT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"STYLE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ALLOWED_HEAD</name>
                                        |
                                        <name>PRESERVE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TABLE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        |
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TBODY"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        | <name>OPT_CLOSING</name> |
                                        <name>CLOSE_TABLE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TD"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        |
                                        <name>CLOSE_TH_TD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TEXTAREA"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>PRESERVE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TFOOT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        | <name>OPT_CLOSING</name> |
                                        <name>CLOSE_TABLE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TH"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>OPT_CLOSING</name>
                                        |
                                        <name>CLOSE_TH_TD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"THEAD"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        | <name>OPT_CLOSING</name> |
                                        <name>CLOSE_TABLE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TITLE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ALLOWED_HEAD</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TR"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        | <name>OPT_CLOSING</name> |
                                        <name>CLOSE_TABLE</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineElement</name>
                            <argument_list>(
                                <argument>
                                    <expr>"UL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ELEM_CONTENT</name>
                                        |
                                        <name>CLOSE_P</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <expr_stmt>
                    <expr>
                        <name>_boolAttrs</name>
                        = new
                        <call>
                            <name>Hashtable</name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"AREA"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"href"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"BUTTON"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"disabled"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"DIR"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"compact"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"DL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"compact"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"FRAME"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"noresize"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"HR"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"noshade"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"IMAGE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"ismap"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"INPUT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>new
                                        <name>
                                            <name>String</name>
                                            <index>[]</index>
                                        </name>
                                        <block>{ <expr>"defaultchecked"</expr>, <expr>"checked"</expr>, <expr>
                                            "readonly"</expr>, <expr>"disabled"</expr> }
                                        </block>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"LINK"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"link"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"MENU"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"compact"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OBJECT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"declare"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"compact"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OPTGROUP"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"disabled"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"OPTION"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>new
                                        <name>
                                            <name>String</name>
                                            <index>[]</index>
                                        </name>
                                        <block>{ <expr>"default-selected"</expr>, <expr>"selected"</expr>, <expr>
                                            "disabled"
                                        </expr> }
                                        </block>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"SCRIPT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"defer"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"SELECT"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>new
                                        <name>
                                            <name>String</name>
                                            <index>[]</index>
                                        </name>
                                        <block>{ <expr>"multiple"</expr>, <expr>"disabled"</expr> }
                                        </block>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"STYLE"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"disabled"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TD"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"nowrap"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TH"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"nowrap"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"TEXTAREA"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>new
                                        <name>
                                            <name>String</name>
                                            <index>[]</index>
                                        </name>
                                        <block>{ <expr>"disabled"</expr>, <expr>"readonly"</expr> }
                                        </block>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>defineBoolean</name>
                            <argument_list>(
                                <argument>
                                    <expr>"UL"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"compact"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <constructor_decl>
                    <name>initialize</name>
                    <parameter_list>()</parameter_list>;
                </constructor_decl>
                }
            </block>


            }
        </block>
    </class>

</unit>
