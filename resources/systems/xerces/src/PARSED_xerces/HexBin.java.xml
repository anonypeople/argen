<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\util\HexBin.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * format validation
        *
        * This class encodes/decodes hexadecimal data
        *
        * @xerces.internal
        *
        * @author Jeffrey Rodriguez
        * @version $Id: HexBin.java,v 1.13 2004/10/14 15:20:18 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class  <name>HexBin</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BASELENGTH</name>   =
                    <init>
                        <expr>128</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LOOKUPLENGTH</name> =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <specifier>private</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>hexNumberTable</name>    =
                    <init>
                        <expr>new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>
                                        <name>BASELENGTH</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <specifier>private</specifier>
                        <name>char</name>
                        <index>[]</index>
                    </type>
                    <name>lookUpHexAlphabet</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>char</name>
                                <index>[
                                    <expr>
                                        <name>LOOKUPLENGTH</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            static
            <block>{
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;
                            <name>BASELENGTH</name>
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>hexNumberTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = -1
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'9'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &gt;= '0'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>hexNumberTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>byte</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr><name>i</name>-'0'
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'F'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&gt;= 'A'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>hexNumberTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>byte</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr><name>i</name>-'A' + 10
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>'f'</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&gt;= 'a'
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>hexNumberTable</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>byte</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr><name>i</name>-'a' + 10
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>

                <for>for(
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&lt;10
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>lookUpHexAlphabet</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>char</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr>'0'+
                                                <name>i</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <for>for(
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>10</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&lt;=15
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>lookUpHexAlphabet</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>(<name>char</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr>'A'+<name>i</name> -10
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                }
            </block>

            <comment type="javadoc">/**
                * Encode a byte array to hex string
                *
                * @param binaryData array of byte to encode
                * @return return encoded string
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>binaryData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>binaryData</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lengthData</name>   =
                            <init>
                                <expr>
                                    <name><name>binaryData</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lengthEncode</name> =
                            <init>
                                <expr>
                                    <name>lengthData</name>
                                    * 2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>encodedData</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name>lengthEncode</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>temp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>lengthData</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>temp</name>
                                    =
                                    <name>
                                        <name>binaryData</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>temp</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <name>temp</name>
                                            += 256
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>encodedData</name>
                                        <index>[
                                            <expr><name>i</name>*2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>lookUpHexAlphabet</name>
                                        <index>[
                                            <expr>
                                                <name>temp</name>
                                                &gt;&gt; 4
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>encodedData</name>
                                        <index>[
                                            <expr><name>i</name>*2+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>lookUpHexAlphabet</name>
                                        <index>[
                                            <expr>
                                                <name>temp</name>
                                                &amp; 0xf
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>encodedData</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decode hex string to a byte array
                *
                * @param encoded encoded string
                * @return return array of byte to encode
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>public</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>decode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoded</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>encoded</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lengthData</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>encoded</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lengthData</name>
                                % 2 != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>binaryData</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>encoded</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lengthDecode</name> =
                            <init>
                                <expr>
                                    <name>lengthData</name>
                                    / 2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>decodedData</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>lengthDecode</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>temp1</name>,
                            <name>temp2</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>tempChar</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>lengthDecode</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tempChar</name>
                                    =
                                    <name>
                                        <name>binaryData</name>
                                        <index>[
                                            <expr><name>i</name>*2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>temp1</name>
                                    = (<name>tempChar</name> &lt; <name>BASELENGTH</name>) ?
                                    <name>
                                        <name>hexNumberTable</name>
                                        <index>[
                                            <expr>
                                                <name>tempChar</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    : -1
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>temp1</name>
                                        == -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>tempChar</name>
                                    =
                                    <name>
                                        <name>binaryData</name>
                                        <index>[
                                            <expr><name>i</name>*2+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>temp2</name>
                                    = (<name>tempChar</name> &lt; <name>BASELENGTH</name>) ?
                                    <name>
                                        <name>hexNumberTable</name>
                                        <index>[
                                            <expr>
                                                <name>tempChar</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    : -1
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>temp2</name>
                                        == -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>decodedData</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>temp1</name> &lt;&lt; 4) |
                                                    <name>temp2</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>decodedData</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
