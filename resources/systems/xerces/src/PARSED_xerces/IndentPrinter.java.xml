<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\IndentPrinter.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Extends {@link Printer} and adds support for indentation and line
        * wrapping.
        *
        * @version $Revision: 1.9 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>IndentPrinter</name>
        <super>
            <extends>extends
                <name>Printer</name>
            </extends>
        </super>
        <block>{


            <comment type="javadoc">/**
                * Holds the currently accumulating text line. This buffer will constantly
                * be reused by deleting its contents instead of reallocating it.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>StringBuffer</name>
                    </type>
                    <name>_line</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Holds the currently accumulating text that follows {@link #_line}.
                * When the end of the part is identified by a call to {@link #printSpace}
                * or {@link #breakLine}, this part is added to the accumulated line.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>StringBuffer</name>
                    </type>
                    <name>_text</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Counts how many white spaces come between the accumulated line and the
                * current accumulated text. Multiple spaces at the end of the a line
                * will not be printed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_spaces</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Holds the indentation for the current line that is now accumulating in
                * memory and will be sent for printing shortly.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_thisIndent</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Holds the indentation for the next line to be printed. After this line is
                * printed, {@link #_nextIndent} is assigned to {@link #_thisIndent}.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_nextIndent</name>
                </decl>
                ;
            </decl_stmt>


            <constructor>
                <specifier>public</specifier>
                <name>IndentPrinter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>writer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>writer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>format</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Initialize everything for a first/second run.</comment>
                    <expr_stmt>
                        <expr>
                            <name>_line</name>
                            = new
                            <call>
                                <name>StringBuffer</name>
                                <argument_list>(
                                    <argument>
                                        <expr>80</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_text</name>
                            = new
                            <call>
                                <name>StringBuffer</name>
                                <argument_list>(
                                    <argument>
                                        <expr>20</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_spaces</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_thisIndent</name>
                            = <name>_nextIndent</name> = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Called by any of the DTD handlers to enter DTD mode.
                * Once entered, all output will be accumulated in a string
                * that can be printed as part of the document's DTD.
                * This method may be called any number of time but will only
                * have affect the first time it's called. To exist DTD state
                * and get the accumulated DTD, call {@link #leaveDTD}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>enterDTD</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Can only enter DTD state once. Once we're out of DTD</comment>
                    <comment type="line">// state, can no longer re-enter it.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>_dtdWriter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>_line</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>_text</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_text</name>
                                        = new
                                        <call>
                                            <name>StringBuffer</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>20</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>flushLine</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_dtdWriter</name>
                                        = new
                                        <call>
                                            <name>StringWriter</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_docWriter</name>
                                        =
                                        <name>_writer</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_writer</name>
                                        =
                                        <name>_dtdWriter</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called by the root element to leave DTD mode and if any
                * DTD parts were printer, will return a string with their
                * textual content.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>leaveDTD</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Only works if we're going out of DTD mode.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>_writer</name>
                                ==
                                <name>_dtdWriter</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>_line</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>_text</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_text</name>
                                        = new
                                        <call>
                                            <name>StringBuffer</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>20</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>flushLine</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_writer</name>
                                        =
                                        <name>_docWriter</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>_dtdWriter</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called to print additional text. Each time this method is called
                * it accumulates more text. When a space is printed ({@link
                * #printSpace}) all the accumulated text becomes one part and is
                * added to the accumulate line. When a line is long enough, it can
                * be broken at its text boundary.
                *
                * @param text The text to print
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_text</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_text</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_text</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>_text</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>length</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called to print a single space between text parts that may be
                * broken into separate lines. Must not be called to print a space
                * when preserving spaces. The text accumulated so far with {@link
                * #printText} will be added to the accumulated line, and a space
                * separator will be counted. If the line accumulated so far is
                * long enough, it will be printed.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printSpace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// The line consists of the text accumulated in _line,</comment>
                    <comment type="line">// followed by one or more spaces as counted by _spaces,</comment>
                    <comment type="line">// followed by more space accumulated in _text:</comment>
                    <comment type="line">// - Text is printed and accumulated into _text.</comment>
                    <comment type="line">// - A space is printed, so _text is added to _line and</comment>
                    <comment type="line">// a space is counted.</comment>
                    <comment type="line">// - More text is printed and accumulated into _text.</comment>
                    <comment type="line">// - A space is printed, the previous spaces are added</comment>
                    <comment type="line">// to _line, the _text is added to _line, and a new</comment>
                    <comment type="line">// space is counted.</comment>

                    <comment type="line">// If text was accumulated with printText(), then the space</comment>
                    <comment type="line">// means we have to move that text into the line and</comment>
                    <comment type="line">// start accumulating new text with printText().</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>_text</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// If the text breaks a line bounary, wrap to the next line.
                                </comment>
                                <comment type="line">// The printed line size consists of the indentation we're going
                                </comment>
                                <comment type="line">// to use next, the accumulated line so far, some spaces and the
                                </comment>
                                <comment type="line">// accumulated text so far.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>_format</name>.
                                                    <name>getLineWidth</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt; 0 &amp;&amp;
                                            <name>_thisIndent</name>
                                            +
                                            <call>
                                                <name><name>_line</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            + <name>_spaces</name> +
                                            <call>
                                                <name><name>_text</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;
                                            <call>
                                                <name><name>_format</name>.
                                                    <name>getLineWidth</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>flushLine</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <try>try
                                                <block>{
                                                    <comment type="line">// Print line and new line, then zero the line
                                                        contents.
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>_writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>_format</name>.
                                                                                    <name>getLineSeparator</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>IOException</name>
                                                            </type>
                                                            <name>except</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// We don't throw an exception, but hold
                                                            it
                                                        </comment>
                                                        <comment type="line">// until the end of the document.</comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>_exception</name>
                                                                    ==
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>_exception</name>
                                                                        =
                                                                        <name>except</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                        </if>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// Add as many spaces as we accumulaed before.</comment>
                                <comment type="line">// At the end of this loop, _spaces is zero.</comment>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>_spaces</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>_line</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>' '</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>--
                                                <name>_spaces</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>_line</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>_text</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_text</name>
                                        = new
                                        <call>
                                            <name>StringBuffer</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>20</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Starting a new word: accumulate the text between the line</comment>
                    <comment type="line">// and this new word; not a new word: just add another space.</comment>
                    <expr_stmt>
                        <expr>++
                            <name>_spaces</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called to print a line consisting of the text accumulated so
                * far. This is equivalent to calling {@link #printSpace} but
                * forcing the line to print and starting a new line ({@link
                * #printSpace} will only start a new line if the current line
                * is long enough).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>breakLine</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>breakLine</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>breakLine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveSpace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Equivalent to calling printSpace and forcing a flushLine.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>_text</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>_spaces</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>_line</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>' '</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>--
                                                <name>_spaces</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>_line</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>_text</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_text</name>
                                        = new
                                        <call>
                                            <name>StringBuffer</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>20</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>flushLine</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>preserveSpace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// Print line and new line, then zero the line contents.</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>_writer</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>_format</name>.
                                                            <name>getLineSeparator</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Flushes the line accumulated so far to the writer and get ready
                * to accumulate the next line. This method is called by {@link
                * #printText} and {@link #printSpace} when the accumulated line plus
                * accumulated text are two long to fit on a given line. At the end of
                * this method _line is empty and _spaces is zero.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>flushLine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveSpace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>indent</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>_line</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>_format</name>.
                                                            <name>getIndenting</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &amp;&amp; !
                                                    <name>preserveSpace</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// Make sure the indentation does not blow us
                                                        away.
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>indent</name>
                                                            =
                                                            <name>_thisIndent</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>( 2 * <name>indent</name> ) &gt;
                                                                <call>
                                                                    <name><name>_format</name>.
                                                                        <name>getLineWidth</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                &amp;&amp;
                                                                <call>
                                                                    <name><name>_format</name>.
                                                                        <name>getLineWidth</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                &gt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>indent</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>_format</name>.
                                                                            <name>getLineWidth</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    / 2
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </then>
                                                    </if>
                                                    <comment type="line">// Print the indentation as spaces and set the
                                                        current
                                                    </comment>
                                                    <comment type="line">// indentation to the next expected
                                                        indentation.
                                                    </comment>
                                                    <while>while
                                                        <condition>(
                                                            <expr>
                                                                <name>indent</name>
                                                                &gt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>_writer</name>.
                                                                            <name>write</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>' '</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>--
                                                                    <name>indent</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </while>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>_thisIndent</name>
                                                =
                                                <name>_nextIndent</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <comment type="line">// There is no need to print the spaces at the end of the
                                            line,
                                        </comment>
                                        <comment type="line">// they are simply stripped and replaced with a single
                                            line
                                        </comment>
                                        <comment type="line">// separator.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>_spaces</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>_writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>_line</name>.
                                                                        <name>toString</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>_line</name>
                                                = new
                                                <call>
                                                    <name>StringBuffer</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>40</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>IOException</name>
                                                </type>
                                                <name>except</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// We don't throw an exception, but hold it</comment>
                                            <comment type="line">// until the end of the document.</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>_exception</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>_exception</name>
                                                            =
                                                            <name>except</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Flush the output stream. Must be called when done printing
                * the document, otherwise some text might be buffered.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>flush</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>_line</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0 ||
                                <call>
                                    <name><name>_text</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>breakLine</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>_writer</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Increment the indentation for the next line.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>indent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_nextIndent</name>
                            +=
                            <call>
                                <name><name>_format</name>.
                                    <name>getIndent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Decrement the indentation for the next line.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unindent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_nextIndent</name>
                            -=
                            <call>
                                <name><name>_format</name>.
                                    <name>getIndent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>_nextIndent</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>_nextIndent</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <comment type="line">// If there is no current line and we're de-identing then</comment>
                    <comment type="line">// this indentation level is actually the next level.</comment>
                    <if>if
                        <condition>(
                            <expr>(
                                <call>
                                    <name><name>_line</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                + <name>_spaces</name> +
                                <call>
                                    <name><name>_text</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>_thisIndent</name>
                                    =
                                    <name>_nextIndent</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNextIndent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_nextIndent</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextIndent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>indent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_nextIndent</name>
                            =
                            <name>indent</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setThisIndent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>indent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_thisIndent</name>
                            =
                            <name>indent</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            }
        </block>
    </class>
</unit>
