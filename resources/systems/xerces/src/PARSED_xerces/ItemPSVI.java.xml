<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xs\ItemPSVI.java">
    <comment type="block">/*
        * Copyright 2003,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * Represents an abstract PSVI item for an element or an attribute
        * information item.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ItemPSVI</name>
        <block>{
            <comment type="javadoc">/**
                * Validity value indicating that validation has either not been performed
                * or that a strict assessment of validity could not be performed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VALIDITY_NOTKNOWN</name>         =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Validity value indicating that validation has been strictly assessed
                * and the item in question is invalid according to the rules of schema
                * validation.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VALIDITY_INVALID</name>          =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Validation status indicating that schema validation has been performed
                * and the item in question is valid according to the rules of schema
                * validation.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VALIDITY_VALID</name>            =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Validation status indicating that schema validation has been performed
                * and the item in question has specifically been skipped.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VALIDATION_NONE</name>           =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Validation status indicating that schema validation has been performed
                * on the item in question under the rules of lax validation.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VALIDATION_PARTIAL</name>        =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Validation status indicating that full schema validation has been
                * performed on the item.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>VALIDATION_FULL</name>           =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The nearest ancestor element information item with a
                * &lt;code&gt;[schema information]&lt;/code&gt; property (or this element item
                * itself if it has such a property). For more information refer to
                * element validation context and attribute validation context .
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getValidationContext</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[validity]&lt;/code&gt;: determines the validity of the schema item
                * with respect to the validation being attempted. The value will be one
                * of the constants: &lt;code&gt;VALIDITY_NOTKNOWN&lt;/code&gt;,
                * &lt;code&gt;VALIDITY_INVALID&lt;/code&gt; or &lt;code&gt;VALIDITY_VALID&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getValidity</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[validation attempted]&lt;/code&gt;: determines the extent to which
                * the schema item has been validated. The value will be one of the
                * constants: &lt;code&gt;VALIDATION_NONE&lt;/code&gt;,
                * &lt;code&gt;VALIDATION_PARTIAL&lt;/code&gt; or &lt;code&gt;VALIDATION_FULL&lt;/code&gt;.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getValidationAttempted</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[schema error code]&lt;/code&gt;: a list of error codes generated from
                * the validation attempt or an empty &lt;code&gt;StringList&lt;/code&gt; if no
                * errors occurred during the validation attempt.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>StringList</name>
                </type>
                <name>getErrorCodes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[schema normalized value]&lt;/code&gt;: the normalized value of this
                * item after validation.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemaNormalizedValue</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[schema normalized value]&lt;/code&gt;: Binding specific actual value
                * or &lt;code&gt;null&lt;/code&gt; if the value is in error.
                * @exception XSException
                * NOT_SUPPORTED_ERR: Raised if the implementation does not support this
                * method.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getActualNormalizedValue</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XSException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The actual value built-in datatype, e.g.
                * &lt;code&gt;STRING_DT, SHORT_DT&lt;/code&gt;. If the type definition of this
                * value is a list type definition, this method returns
                * &lt;code&gt;LIST_DT&lt;/code&gt;. If the type definition of this value is a list
                * type definition whose item type is a union type definition, this
                * method returns &lt;code&gt;LISTOFUNION_DT&lt;/code&gt;. To query the actual value
                * of the list or list of union type definitions use
                * &lt;code&gt;itemValueTypes&lt;/code&gt;. If the &lt;code&gt;actualNormalizedValue&lt;/code&gt;
                * is &lt;code&gt;null&lt;/code&gt;, this method returns &lt;code&gt;UNAVAILABLE_DT&lt;/code&gt;
                * .
                * @exception XSException
                * NOT_SUPPORTED_ERR: Raised if the implementation does not support this
                * method.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getActualNormalizedValueType</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XSException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * In the case the actual value represents a list, i.e. the
                * &lt;code&gt;actualNormalizedValueType&lt;/code&gt; is &lt;code&gt;LIST_DT&lt;/code&gt;, the
                * returned array consists of one type kind which represents the itemType
                * . For example:
                * &lt;pre&gt; &amp;lt;simpleType name="listtype"&amp;gt; &amp;lt;list
                * itemType="positiveInteger"/&amp;gt; &amp;lt;/simpleType&amp;gt; &amp;lt;element
                * name="list" type="listtype"/&amp;gt; ... &amp;lt;list&amp;gt;1 2 3&amp;lt;/list&amp;gt; &lt;/pre&gt;
                *
                * The &lt;code&gt;schemaNormalizedValue&lt;/code&gt; value is "1 2 3", the
                * &lt;code&gt;actualNormalizedValueType&lt;/code&gt; value is &lt;code&gt;LIST_DT&lt;/code&gt;,
                * and the &lt;code&gt;itemValueTypes&lt;/code&gt; is an array of size 1 with the
                * value &lt;code&gt;POSITIVEINTEGER_DT&lt;/code&gt;.
                * &lt;br&gt; If the actual value represents a list type definition whose item
                * type is a union type definition, i.e. &lt;code&gt;LISTOFUNION_DT&lt;/code&gt;,
                * for each actual value in the list the array contains the
                * corresponding memberType kind. For example:
                * &lt;pre&gt; &amp;lt;simpleType
                * name='union_type' memberTypes="integer string"/&amp;gt; &amp;lt;simpleType
                * name='listOfUnion'&amp;gt; &amp;lt;list itemType='union_type'/&amp;gt;
                * &amp;lt;/simpleType&amp;gt; &amp;lt;element name="list" type="listOfUnion"/&amp;gt;
                * ... &amp;lt;list&amp;gt;1 2 foo&amp;lt;/list&amp;gt; &lt;/pre&gt;
                * The
                * &lt;code&gt;schemaNormalizedValue&lt;/code&gt; value is "1 2 foo", the
                * &lt;code&gt;actualNormalizedValueType&lt;/code&gt; is &lt;code&gt;LISTOFUNION_DT&lt;/code&gt;
                * , and the &lt;code&gt;itemValueTypes&lt;/code&gt; is an array of size 3 with the
                * following values: &lt;code&gt;INTEGER_DT, INTEGER_DT, STRING_DT&lt;/code&gt;.
                * @exception XSException
                * NOT_SUPPORTED_ERR: Raised if the implementation does not support this
                * method.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>ShortList</name>
                </type>
                <name>getItemValueTypes</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>XSException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[type definition]&lt;/code&gt;: an item isomorphic to the type
                * definition used to validate the schema item.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSTypeDefinition</name>
                </type>
                <name>getTypeDefinition</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[member type definition]&lt;/code&gt;: if and only if that type
                * definition is a simple type definition with {variety} union, or a
                * complex type definition whose {content type} is a simple type
                * definition with {variety} union, then an item isomorphic to that
                * member of the union's {member type definitions} which actually
                * validated the schema item's normalized value.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getMemberTypeDefinition</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[schema default]&lt;/code&gt;: the canonical lexical representation of
                * the declaration's {value constraint} value. For more information
                * refer to element schema default and attribute schema default.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemaDefault</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;code&gt;[schema specified]&lt;/code&gt;: if true, the value was specified in
                * the schema. If false, the value comes from the infoset. For more
                * information refer to element specified and attribute specified.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getIsSchemaSpecified</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
