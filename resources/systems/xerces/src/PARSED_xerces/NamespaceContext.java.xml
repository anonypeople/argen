<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\xni\NamespaceContext.java">
    <comment type="block">/*
        * Copyright 2001, 2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xni</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Enumeration</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represents an interface to query namespace information.
        * &lt;p&gt;
        * The prefix and namespace must be identical references for equal strings, thus
        * each string should be internalized (@see String.intern())
        * or added to the &lt;code&gt;SymbolTable&lt;/code&gt;
        *
        * @see &lt;a href="../../../../../xerces2/org/apache/xerces/util/SymbolTable.html"&gt;
        * org.apache.xerces.util.SymbolTable&lt;/a&gt;
        *
        * @author Andy Clark, IBM
        *
        * @version $Id: NamespaceContext.java,v 1.11 2004/02/24 23:15:54 mrglavas Exp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>NamespaceContext</name>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * The XML Namespace ("http://www.w3.org/XML/1998/namespace"). This is
                * the Namespace URI that is automatically mapped to the "xml" prefix.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>XML_URI</name> =
                    <init>
                        <expr>"http://www.w3.org/XML/1998/namespace".
                            <call>
                                <name>intern</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * XML Information Set REC
                * all namespace attributes (including those named xmlns,
                * whose [prefix] property has no value) have a namespace URI of http://www.w3.org/2000/xmlns/
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>String</name>
                    </type>
                    <name>XMLNS_URI</name> =
                    <init>
                        <expr>"http://www.w3.org/2000/xmlns/".
                            <call>
                                <name>intern</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// NamespaceContext methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Start a new Namespace context.
                * &lt;p&gt;
                * A new context should be pushed at the beginning
                * of each XML element: the new context will automatically inherit
                * the declarations of its parent context, but it will also keep
                * track of which declarations were made within this context.
                * &lt;p&gt;
                *
                * @see #popContext
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>pushContext</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Revert to the previous Namespace context.
                * &lt;p&gt;
                * The context should be popped at the end of each
                * XML element. After popping the context, all Namespace prefix
                * mappings that were previously in force are restored.
                * &lt;p&gt;
                * Users must not attempt to declare additional Namespace
                * prefixes after popping a context, unless you push another
                * context first.
                *
                * @see #pushContext
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>popContext</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Declare a Namespace prefix.
                * &lt;p&gt;
                * This method declares a prefix in the current Namespace
                * context; the prefix will remain in force until this context
                * is popped, unless it is shadowed in a descendant context.
                * &lt;p&gt;
                * Note that to declare a default Namespace, use the empty string.
                * The prefixes "xml" and "xmlns" can't be rebound.
                * &lt;p&gt;
                * Note that you must &lt;em&gt;not&lt;/em&gt; declare a prefix after
                * you've pushed and popped another Namespace.
                *
                * @param prefix The prefix to declare, or null for the empty
                * string.
                * @param uri The Namespace URI to associate with the prefix.
                *
                * @return true if the prefix was legal, false otherwise
                *
                * @see #getURI
                * @see #getDeclaredPrefixAt
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>declarePrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Look up a prefix and get the currently-mapped Namespace URI.
                * &lt;p&gt;
                * This method looks up the prefix in the current context. If no mapping
                * is found, this methods will continue lookup in the parent context(s).
                * Use the empty string ("") for the default Namespace.
                *
                * @param prefix The prefix to look up.
                *
                * @return The associated Namespace URI, or null if the prefix
                * is undeclared in this context.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Look up a namespace URI and get one of the mapped prefix.
                * &lt;p&gt;
                * This method looks up the namespace URI in the current context.
                * If more than one prefix is currently mapped to the same URI,
                * this method will make an arbitrary selection
                * If no mapping is found, this methods will continue lookup in the
                * parent context(s).
                *
                * @param uri The namespace URI to look up.
                *
                * @return One of the associated prefixes, or null if the uri
                * does not map to any prefix.
                *
                * @see #getPrefix
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return a count of locally declared prefixes, including
                * the default prefix if bound.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getDeclaredPrefixCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the prefix at the specified index in the current context.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getDeclaredPrefixAt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return an enumeration of all prefixes whose declarations are active
                * in the current context. This includes declarations from parent contexts
                * that have not been overridden.
                * @return Enumeration
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Enumeration</name>
                </type>
                <name>getAllPrefixes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Reset this Namespace support object for reuse.
                *
                * &lt;p&gt;It is necessary to invoke this method before reusing the
                * Namespace support object for a new session.&lt;/p&gt;
                *
                * &lt;p&gt;Note that implementations of this method need to ensure that
                * the declaration of the prefixes "xmlns" and "xml" are available.&lt;/p&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>;
            </function_decl>


            }
        </block>
    </class>
    <comment type="line">// interface NamespaceContext</comment>
</unit>
