<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom3\as\NodeEditAS.java">
    <comment type="block">/*
        * Copyright (c) 2001 World Wide Web Consortium,
        * (Massachusetts Institute of Technology, Institut National de
        * Recherche en Informatique et en Automatique, Keio University). All
        * Rights Reserved. This program is distributed under the W3C's Software
        * Intellectual Property License. This program is distributed in the
        * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
        * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        * PURPOSE.
        * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>dom3</name>.
            <name>as</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @deprecated
        * This interface extends a &lt;code&gt;Node&lt;/code&gt; from with additional methods
        * for guided document editing. The expectation is that an instance of the
        * &lt;code&gt;DOMImplementationAS&lt;/code&gt; interface can be obtained by using
        * binding-specific casting methods on an instance of the
        * &lt;code&gt;DOMImplementation&lt;/code&gt; interface when the DOM implementation
        * supports the feature "&lt;code&gt;AS-DOC&lt;/code&gt;".
        * &lt;p&gt;See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'&gt;Document Object
        Model (DOM) Level 3 Abstract Schemas and Load
        and Save Specification&lt;/a&gt;.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>NodeEditAS</name>
        <block>{
            <comment type="line">// ASCheckType</comment>
            <comment type="javadoc">/**
                * Check for well-formedness of this node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>WF_CHECK</name>                  =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Check for namespace well-formedness includes &lt;code&gt;WF_CHECK&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>NS_WF_CHECK</name>               =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Checks for whether this node is partially valid. It includes
                * &lt;code&gt;NS_WF_CHECK&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>PARTIAL_VALIDITY_CHECK</name>    =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Checks for strict validity of the node with respect to active AS which
                * by definition includes &lt;code&gt;NS_WF_CHECK&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>STRICT_VALIDITY_CHECK</name>     =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Determines whether the &lt;code&gt;insertBefore&lt;/code&gt; operation from the
                * &lt;code&gt;Node&lt;/code&gt; interface would make this document invalid with
                * respect to the currently active AS. Describe "valid" when referring
                * to partially completed documents.
                * @param newChild &lt;code&gt;Node&lt;/code&gt; to be inserted.
                * @param refChild Reference &lt;code&gt;Node&lt;/code&gt;.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canInsertBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Has the same arguments as &lt;code&gt;RemoveChild&lt;/code&gt;.
                * @param oldChild &lt;code&gt;Node&lt;/code&gt; to be removed.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canRemoveChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Has the same arguments as &lt;code&gt;ReplaceChild&lt;/code&gt;.
                * @param newChild New &lt;code&gt;Node&lt;/code&gt;.
                * @param oldChild &lt;code&gt;Node&lt;/code&gt; to be replaced.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canReplaceChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Has the same arguments as &lt;code&gt;AppendChild&lt;/code&gt;.
                * @param newChild &lt;code&gt;Node&lt;/code&gt; to be appended.
                * @return &lt;code&gt;true&lt;/code&gt; if no reason it can't be done;
                * &lt;code&gt;false&lt;/code&gt; if it can't be done.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>canAppendChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Determines if the Node is valid relative to currently active AS. It
                * doesn't normalize before checking if the document is valid. To do so,
                * one would need to explicitly call a normalize method.
                * @param deep Setting the &lt;code&gt;deep&lt;/code&gt; flag on causes the
                * &lt;code&gt;isNodeValid&lt;/code&gt; method to check for the whole subtree of
                * the current node for validity. Setting it to &lt;code&gt;false&lt;/code&gt;
                * only checks the current node and its immediate child nodes. The
                * &lt;code&gt;validate&lt;/code&gt; method on the &lt;code&gt;DocumentAS&lt;/code&gt;
                * interface, however, checks to determine whether the entire document
                * is valid.
                * @param wFValidityCheckLevel Flag to tell at what level validity and
                * well-formedness checking is done.
                * @return &lt;code&gt;true&lt;/code&gt; if the node is valid/well-formed in the
                * current context and check level defined by
                * &lt;code&gt;wfValidityCheckLevel&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if not.
                * @exception DOMASException
                * &lt;code&gt;NO_AS_AVAILABLE&lt;/code&gt;: Raised if the
                * &lt;code&gt;DocumentEditAS&lt;/code&gt; related to this node does not have any
                * active &lt;code&gt;ASModel&lt;/code&gt; and &lt;code&gt;wfValidityCheckLevel&lt;/code&gt;
                * is set to &lt;code&gt;PARTIAL&lt;/code&gt; or &lt;code&gt;STRICT_VALIDITY_CHECK&lt;/code&gt;
                * .
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isNodeValid</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>wFValidityCheckLevel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMASException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
