<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\NodeImpl.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>UserDataHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Document</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DocumentType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>NamedNodeMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>NodeList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>events</name>.
            <name>Event</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>events</name>.
            <name>EventListener</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>events</name>.
            <name>EventTarget</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * NodeImpl provides the basic structure of a DOM tree. It is never used
        * directly, but instead is subclassed to add type and data
        * information, and additional methods, appropriate to each node of
        * the tree. Only its subclasses should be instantiated -- and those,
        * with the exception of Document itself, only through a specific
        * Document's factory methods.
        * &lt;P&gt;
        * The Node interface provides shared behaviors such as siblings and
        * children, both for consistancy and so that the most common tree
        * operations may be performed without constantly having to downcast
        * to specific node types. When there is no obvious mapping for one of
        * these queries, it will respond with null.
        * Note that the default behavior is that children are forbidden. To
        * permit them, the subclass ParentNode overrides several methods.
        * &lt;P&gt;
        * NodeImpl also implements NodeList, so it can return itself in
        * response to the getChildNodes() query. This eliminiates the need
        * for a separate ChildNodeList object. Note that this is an
        * IMPLEMENTATION DETAIL; applications should _never_ assume that
        * this identity exists.
        * &lt;P&gt;
        * All nodes in a single document must originate
        * in that document. (Note that this is much tighter than "must be
        * same implementation") Nodes are all aware of their ownerDocument,
        * and attempts to mismatch will throw WRONG_DOCUMENT_ERR.
        * &lt;P&gt;
        * However, to save memory not all nodes always have a direct reference
        * to their ownerDocument. When a node is owned by another node it relies
        * on its owner to store its ownerDocument. Parent nodes always store it
        * though, so there is never more than one level of indirection.
        * And when a node doesn't have an owner, ownerNode refers to its
        * ownerDocument.
        * &lt;p&gt;
        * This class doesn't directly support mutation events, however, it still
        * implements the EventTarget interface and forward all related calls to the
        * document so that the document class do so.
        *
        * @xerces.internal
        *
        * @author Arnaud Le Hors, IBM
        * @author Joe Kesselman, IBM
        * @version $Id: NodeImpl.java,v 1.75 2005/05/02 22:02:22 mrglavas Exp $
        * @since PR-DOM-Level-1-19980818.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>NodeImpl</name>
        <super>
            <implements>implements <name>Node</name>, <name>NodeList</name>, <name>EventTarget</name>, <name>
                Cloneable</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>


            <comment type="line">// TreePosition Constants.</comment>
            <comment type="line">// Taken from DOM L3 Node interface.</comment>
            <comment type="javadoc">/**
                * The node precedes the reference node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_PRECEDING</name>   =
                    <init>
                        <expr>0x01</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The node follows the reference node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_FOLLOWING</name>   =
                    <init>
                        <expr>0x02</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The node is an ancestor of the reference node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_ANCESTOR</name>    =
                    <init>
                        <expr>0x04</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The node is a descendant of the reference node.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_DESCENDANT</name>  =
                    <init>
                        <expr>0x08</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The two nodes have an equivalent position. This is the case of two
                * attributes that have the same &lt;code&gt;ownerElement&lt;/code&gt;, and two
                * nodes that are the same.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_EQUIVALENT</name>  =
                    <init>
                        <expr>0x10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The two nodes are the same. Two nodes that are the same have an
                * equivalent position, though the reverse may not be true.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_SAME_NODE</name>   =
                    <init>
                        <expr>0x20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The two nodes are disconnected, they do not have any common ancestor.
                * This is the case of two nodes that are not in the same document.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>TREE_POSITION_DISCONNECTED</name> =
                    <init>
                        <expr>0x00</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="line">// DocumentPosition</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>DOCUMENT_POSITION_DISCONNECTED</name> =
                    <init>
                        <expr>0x01</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>DOCUMENT_POSITION_PRECEDING</name> =
                    <init>
                        <expr>0x02</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>DOCUMENT_POSITION_FOLLOWING</name> =
                    <init>
                        <expr>0x04</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>DOCUMENT_POSITION_CONTAINS</name> =
                    <init>
                        <expr>0x08</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>DOCUMENT_POSITION_IS_CONTAINED</name> =
                    <init>
                        <expr>0x10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name> =
                    <init>
                        <expr>0x20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-6316591992167219696L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// public</comment>

            <comment type="javadoc">/** Element definition node type. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                    </type>
                    <name>ELEMENT_DEFINITION_NODE</name> =
                    <init>
                        <expr>21</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="line">// links</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>NodeImpl</name>
                    </type>
                    <name>ownerNode</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// typically the parent but not always!</comment>

            <comment type="line">// data</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>short</name>
                    </type>
                    <name>flags</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>READONLY</name>     =
                    <init>
                        <expr>0x1&lt;&lt;0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>SYNCDATA</name>     =
                    <init>
                        <expr>0x1&lt;&lt;1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>SYNCCHILDREN</name> =
                    <init>
                        <expr>0x1&lt;&lt;2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>OWNED</name>        =
                    <init>
                        <expr>0x1&lt;&lt;3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>FIRSTCHILD</name>   =
                    <init>
                        <expr>0x1&lt;&lt;4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>SPECIFIED</name>    =
                    <init>
                        <expr>0x1&lt;&lt;5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>IGNORABLEWS</name>  =
                    <init>
                        <expr>0x1&lt;&lt;6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>HASSTRING</name>    =
                    <init>
                        <expr>0x1&lt;&lt;7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>NORMALIZED</name> =
                    <init>
                        <expr>0x1&lt;&lt;8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <specifier>static</specifier>
                        <name>short</name>
                    </type>
                    <name>ID</name>           =
                    <init>
                        <expr>0x1&lt;&lt;9</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * No public constructor; only subclasses of Node should be
                * instantiated, and those normally via a Document's factory methods
                * &lt;p&gt;
                * Every Node knows what Document it belongs to.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>NodeImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDocument</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// as long as we do not have any owner, ownerNode is our ownerDocument
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name>ownerNode</name>
                            =
                            <name>ownerDocument</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>
            <comment type="line">// &lt;init&gt;(CoreDocumentImpl)</comment>

            <comment type="javadoc">/** Constructor for serialization. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>NodeImpl</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// Node methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * A short integer indicating what type of node this is. The named
                * constants for this value are defined in the org.w3c.dom.Node interface.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>short</name>
                </type>
                <name>getNodeType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * the name of this node.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>String</name>
                </type>
                <name>getNodeName</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the node value.
                * @throws DOMException(DOMSTRING_SIZE_ERR)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNodeValue</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// overridden in some subclasses</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the node value.
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNodeValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Default behavior is to do nothing, overridden in some subclasses</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Adds a child node to the end of the list of children for this node.
                * Convenience shorthand for insertBefore(newChild,null).
                * @see #insertBefore(Node, Node)
                * &lt;P&gt;
                * By default we do not accept any children, ParentNode overrides this.
                * @see ParentNode
                *
                * @return newChild, in its new state (relocated, or emptied in the case of
                * DocumentNode.)
                *
                * @throws DOMException(HIERARCHY_REQUEST_ERR) if newChild is of a
                * type that shouldn't be a child of this node.
                *
                * @throws DOMException(WRONG_DOCUMENT_ERR) if newChild has a
                * different owner document than we do.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>appendChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>insertBefore</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a duplicate of a given node. You can consider this a
                * generic "copy constructor" for nodes. The newly returned object should
                * be completely independent of the source object's subtree, so changes
                * in one after the clone has been made will not affect the other.
                * &lt;P&gt;
                * Note: since we never have any children deep is meaningless here,
                * ParentNode overrides this behavior.
                * @see ParentNode
                *
                * &lt;p&gt;
                * Example: Cloning a Text node will copy both the node and the text it
                * contains.
                * &lt;p&gt;
                * Example: Cloning something that has children -- Element or Attr, for
                * example -- will _not_ clone those children unless a "deep clone"
                * has been requested. A shallow clone of an Attr node will yield an
                * empty Attr of the same name.
                * &lt;p&gt;
                * NOTE: Clones will always be read/write, even if the node being cloned
                * is read-only, to permit applications using only the DOM API to obtain
                * editable copies of locked portions of the tree.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>cloneNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>NodeImpl</name>
                            </type>
                            <name>newnode</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>newnode</name>
                                    = (<name>NodeImpl</name>)
                                    <call>
                                        <name>clone</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>CloneNotSupportedException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// if we get here we have an error in our program we may as well
                                </comment>
                                <comment type="line">// be vocal about it, so that people can take appropriate action.
                                </comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"**Internal Error**" +
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// Need to break the association w/ original kids</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>newnode</name>.
                                <name>ownerNode</name>
                            </name>
                            =
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newnode</name>.
                                    <name>isOwned</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// By default we make all clones readwrite,</comment>
                    <comment type="line">// this is overriden in readonly subclasses</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newnode</name>.
                                    <name>isReadOnly</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>callUserDataHandlers</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newnode</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>UserDataHandler</name>.
                                                <name>NODE_CLONED</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>newnode</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// cloneNode(boolean):Node</comment>

            <comment type="javadoc">/**
                * Find the Document that this Node belongs to (the document in
                * whose context the Node was created). The Node may or may not
                * currently be part of that Document's actual contents.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Document</name>
                </type>
                <name>getOwnerDocument</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if we have an owner simply forward the request</comment>
                    <comment type="line">// otherwise ownerNode is our ownerDocument</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isOwned</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ownerNode</name>.
                                                <name>ownerDocument</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>(<name>Document</name>)
                                        <name>ownerNode</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * same as above but returns internal type and this one is not overridden
                * by CoreDocumentImpl to return null
                */
            </comment>
            <function>
                <type>
                    <name>CoreDocumentImpl</name>
                </type>
                <name>ownerDocument</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// if we have an owner simply forward the request</comment>
                    <comment type="line">// otherwise ownerNode is our ownerDocument</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isOwned</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ownerNode</name>.
                                                <name>ownerDocument</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>(<name>CoreDocumentImpl</name>)
                                        <name>ownerNode</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * NON-DOM
                * set the ownerDocument of this node
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>setOwnerDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// if we have an owner we rely on it to have it right</comment>
                    <comment type="line">// otherwise ownerNode is our ownerDocument</comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isOwned</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>ownerNode</name>
                                        =
                                        <name>doc</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the node number
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>int</name>
                </type>
                <name>getNodeNumber</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nodeNumber</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>cd</name> =
                            <init>
                                <expr>
                                    <call>(<name>CoreDocumentImpl</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getOwnerDocument</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>nodeNumber</name>
                            =
                            <call>
                                <name><name>cd</name>.
                                    <name>getNodeNumber</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>nodeNumber</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Obtain the DOM-tree parent of this node, or null if it is not
                * currently active in the DOM tree (perhaps because it has just been
                * created or removed). Note that Document, DocumentFragment, and
                * Attribute will never have parents.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getParentNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// overriden by ChildNode</comment>
                    }
                </block>
            </function>

            <comment type="block">/*
                * same as above but returns internal type
                */
            </comment>
            <function>
                <type>
                    <name>NodeImpl</name>
                </type>
                <name>parentNode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The next child of this node's parent, or null if none */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getNextSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// default behavior, overriden in ChildNode</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The previous child of this node's parent, or null if none */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getPreviousSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// default behavior, overriden in ChildNode</comment>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>ChildNode</name>
                </type>
                <name>previousSibling</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// default behavior, overriden in ChildNode</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the collection of attributes associated with this node,
                * or null if none. At this writing, Element is the only type of node
                * which will ever have attributes.
                *
                * @see ElementImpl
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>NamedNodeMap</name>
                </type>
                <name>getAttributes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// overridden in ElementImpl</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether this node (if it is an element) has any attributes.
                * @return &lt;code&gt;true&lt;/code&gt; if this node has any attributes,
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                * @since DOM Level 2
                * @see ElementImpl
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasAttributes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    <comment type="line">// overridden in ElementImpl</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Test whether this node has any children. Convenience shorthand
                * for (Node.getFirstChild()!=null)
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasChildNodes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Obtain a NodeList enumerating all children of this node. If there
                * are none, an (initially) empty NodeList is returned.
                * &lt;p&gt;
                * NodeLists are "live"; as children are added/removed the NodeList
                * will immediately reflect those changes. Also, the NodeList refers
                * to the actual nodes, so changes to those nodes made via the DOM tree
                * will be reflected in the NodeList and vice versa.
                * &lt;p&gt;
                * In this implementation, Nodes implement the NodeList interface and
                * provide their own getChildNodes() support. Other DOMs may solve this
                * differently.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>NodeList</name>
                </type>
                <name>getChildNodes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The first child of this Node, or null if none.
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getFirstChild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The first child of this Node, or null if none.
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getLastChild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Move one or more node(s) to our list of children. Note that this
                * implicitly removes them from their previous parent.
                * &lt;P&gt;
                * By default we do not accept any children, ParentNode overrides this.
                * @see ParentNode
                *
                * @param newChild The Node to be moved to our subtree. As a
                * convenience feature, inserting a DocumentNode will instead insert
                * all its children.
                *
                * @param refChild Current child which newChild should be placed
                * immediately before. If refChild is null, the insertion occurs
                * after all existing Nodes, like appendChild().
                *
                * @return newChild, in its new state (relocated, or emptied in the case of
                * DocumentNode.)
                *
                * @throws DOMException(HIERARCHY_REQUEST_ERR) if newChild is of a
                * type that shouldn't be a child of this node, or if newChild is an
                * ancestor of this node.
                *
                * @throws DOMException(WRONG_DOCUMENT_ERR) if newChild has a
                * different owner document than we do.
                *
                * @throws DOMException(NOT_FOUND_ERR) if refChild is not a child of
                * this node.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>insertBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>DOMException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>DOMException</name>.
                                                <name>HIERARCHY_REQUEST_ERR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOMMessageFormatter</name>.
                                                    <name>formatMessage</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>DOM_DOMAIN</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"HIERARCHY_REQUEST_ERR"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Remove a child from this Node. The removed child's subtree
                * remains intact so it may be re-inserted elsewhere.
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                *
                * @return oldChild, in its new state (removed).
                *
                * @throws DOMException(NOT_FOUND_ERR) if oldChild is not a child of
                * this node.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>removeChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>DOMException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>DOMException</name>.
                                                <name>NOT_FOUND_ERR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOMMessageFormatter</name>.
                                                    <name>formatMessage</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>DOM_DOMAIN</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"NOT_FOUND_ERR"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Make newChild occupy the location that oldChild used to
                * have. Note that newChild will first be removed from its previous
                * parent, if any. Equivalent to inserting newChild before oldChild,
                * then removing oldChild.
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                *
                * @return oldChild, in its new state (removed).
                *
                * @throws DOMException(HIERARCHY_REQUEST_ERR) if newChild is of a
                * type that shouldn't be a child of this node, or if newChild is
                * one of our ancestors.
                *
                * @throws DOMException(WRONG_DOCUMENT_ERR) if newChild has a
                * different owner document than we do.
                *
                * @throws DOMException(NOT_FOUND_ERR) if oldChild is not a child of
                * this node.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>replaceChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>DOMException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>DOMException</name>.
                                                <name>HIERARCHY_REQUEST_ERR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOMMessageFormatter</name>.
                                                    <name>formatMessage</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>DOM_DOMAIN</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"HIERARCHY_REQUEST_ERR"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// NodeList methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * NodeList method: Count the immediate children of this node
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                *
                * @return int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * NodeList method: Return the Nth immediate child of this node, or
                * null if the index is out of bounds.
                * &lt;P&gt;
                * By default we do not have any children, ParentNode overrides this.
                * @see ParentNode
                *
                * @return org.w3c.dom.Node
                * @param Index int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>item</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// DOM2: methods, getters, setters</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Puts all &lt;code&gt;Text&lt;/code&gt; nodes in the full depth of the sub-tree
                * underneath this &lt;code&gt;Node&lt;/code&gt;, including attribute nodes, into a
                * "normal" form where only markup (e.g., tags, comments, processing
                * instructions, CDATA sections, and entity references) separates
                * &lt;code&gt;Text&lt;/code&gt; nodes, i.e., there are no adjacent &lt;code&gt;Text&lt;/code&gt;
                * nodes. This can be used to ensure that the DOM view of a document is
                * the same as if it were saved and re-loaded, and is useful when
                * operations (such as XPointer lookups) that depend on a particular
                * document tree structure are to be used.In cases where the document
                * contains &lt;code&gt;CDATASections&lt;/code&gt;, the normalize operation alone may
                * not be sufficient, since XPointers do not differentiate between
                * &lt;code&gt;Text&lt;/code&gt; nodes and &lt;code&gt;CDATASection&lt;/code&gt; nodes.
                * &lt;p&gt;
                * Note that this implementation simply calls normalize() on this Node's
                * children. It is up to implementors or Node to override normalize()
                * to take action.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>normalize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="block">/* by default we do not have any children,
                        ParentNode overrides this behavior */
                    </comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Introduced in DOM Level 2. &lt;p&gt;
                * Tests whether the DOM implementation implements a specific feature and
                * that feature is supported by this node.
                * @param feature The package name of the feature to test. This is the same
                * name as what can be passed to the method hasFeature on
                * DOMImplementation.
                * @param version This is the version number of the package name to
                * test. In Level 2, version 1, this is the string "2.0". If the version is
                * not specified, supporting any version of the feature will cause the
                * method to return true.
                * @return boolean Returns true if this node defines a subtree within which
                * the specified feature is supported, false otherwise.
                * @since WD-DOM-Level-2-19990923
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSupported</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>feature</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getImplementation</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>hasFeature</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>feature</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>version</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Introduced in DOM Level 2. &lt;p&gt;
                *
                * The namespace URI of this node, or null if it is unspecified. When this
                * node is of any type other than ELEMENT_NODE and ATTRIBUTE_NODE, this is
                * always null and setting it has no effect. &lt;p&gt;
                *
                * This is not a computed value that is the result of a namespace lookup
                * based on an examination of the namespace declarations in scope. It is
                * merely the namespace URI given at creation time.&lt;p&gt;
                *
                * For nodes created with a DOM Level 1 method, such as createElement
                * from the Document interface, this is null.
                * @since WD-DOM-Level-2-19990923
                * @see AttrNSImpl
                * @see ElementNSImpl
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNamespaceURI</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Introduced in DOM Level 2. &lt;p&gt;
                *
                * The namespace prefix of this node, or null if it is unspecified. When
                * this node is of any type other than ELEMENT_NODE and ATTRIBUTE_NODE this
                * is always null and setting it has no effect.&lt;p&gt;
                *
                * For nodes created with a DOM Level 1 method, such as createElement
                * from the Document interface, this is null. &lt;p&gt;
                *
                * @since WD-DOM-Level-2-19990923
                * @see AttrNSImpl
                * @see ElementNSImpl
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPrefix</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Introduced in DOM Level 2. &lt;p&gt;
                *
                * The namespace prefix of this node, or null if it is unspecified. When
                * this node is of any type other than ELEMENT_NODE and ATTRIBUTE_NODE
                * this is always null and setting it has no effect.&lt;p&gt;
                *
                * For nodes created with a DOM Level 1 method, such as createElement from
                * the Document interface, this is null.&lt;p&gt;
                *
                * Note that setting this attribute changes the nodeName attribute, which
                * holds the qualified name, as well as the tagName and name attributes of
                * the Element and Attr interfaces, when applicable.&lt;p&gt;
                *
                * @throws INVALID_CHARACTER_ERR Raised if the specified
                * prefix contains an invalid character.
                *
                * @since WD-DOM-Level-2-19990923
                * @see AttrNSImpl
                * @see ElementNSImpl
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>DOMException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>DOMException</name>.
                                                <name>NAMESPACE_ERR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOMMessageFormatter</name>.
                                                    <name>formatMessage</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>DOM_DOMAIN</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"NAMESPACE_ERR"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Introduced in DOM Level 2. &lt;p&gt;
                *
                * Returns the local part of the qualified name of this node.
                * For nodes created with a DOM Level 1 method, such as createElement
                * from the Document interface, and for nodes of any type other than
                * ELEMENT_NODE and ATTRIBUTE_NODE this is the same as the nodeName
                * attribute.
                * @since WD-DOM-Level-2-19990923
                * @see AttrNSImpl
                * @see ElementNSImpl
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getLocalName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// EventTarget support</comment>
            <comment type="line">//</comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addEventListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>EventListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useCapture</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// simply forward to Document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>addEventListener</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>listener</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>useCapture</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeEventListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>EventListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useCapture</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// simply forward to Document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>removeEventListener</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>listener</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>useCapture</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>dispatchEvent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Event</name>
                            </type>
                            <name>event</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// simply forward to Document</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>dispatchEvent</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>event</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Public DOM Level 3 methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * The absolute base URI of this node or &lt;code&gt;null&lt;/code&gt; if undefined.
                * This value is computed according to . However, when the
                * &lt;code&gt;Document&lt;/code&gt; supports the feature "HTML" , the base URI is
                * computed using first the value of the href attribute of the HTML BASE
                * element if any, and the value of the &lt;code&gt;documentURI&lt;/code&gt;
                * attribute from the &lt;code&gt;Document&lt;/code&gt; interface otherwise.
                * &lt;br&gt; When the node is an &lt;code&gt;Element&lt;/code&gt;, a &lt;code&gt;Document&lt;/code&gt;
                * or a a &lt;code&gt;ProcessingInstruction&lt;/code&gt;, this attribute represents
                * the properties [base URI] defined in . When the node is a
                * &lt;code&gt;Notation&lt;/code&gt;, an &lt;code&gt;Entity&lt;/code&gt;, or an
                * &lt;code&gt;EntityReference&lt;/code&gt;, this attribute represents the
                * properties [declaration base URI] in the . How will this be affected
                * by resolution of relative namespace URIs issue?It's not.Should this
                * only be on Document, Element, ProcessingInstruction, Entity, and
                * Notation nodes, according to the infoset? If not, what is it equal to
                * on other nodes? Null? An empty string? I think it should be the
                * parent's.No.Should this be read-only and computed or and actual
                * read-write attribute?Read-only and computed (F2F 19 Jun 2000 and
                * teleconference 30 May 2001).If the base HTML element is not yet
                * attached to a document, does the insert change the Document.baseURI?
                * Yes. (F2F 26 Sep 2001)
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getBaseURI</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compares a node with this node with regard to their position in the
                * tree and according to the document order. This order can be extended
                * by module that define additional types of nodes.
                * @param other The node to compare against this node.
                * @return Returns how the given node is positioned relatively to this
                * node.
                * @since DOM Level 3
                * @deprecated
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>compareTreePosition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Questions of clarification for this method - to be answered by the</comment>
                    <comment type="line">// DOM WG. Current assumptions listed - LM</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// 1. How do ENTITY nodes compare?</comment>
                    <comment type="line">// Current assumption: TREE_POSITION_DISCONNECTED, as ENTITY nodes</comment>
                    <comment type="line">// aren't really 'in the tree'</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// 2. How do NOTATION nodes compare?</comment>
                    <comment type="line">// Current assumption: TREE_POSITION_DISCONNECTED, as NOTATION nodes</comment>
                    <comment type="line">// aren't really 'in the tree'</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// 3. Are TREE_POSITION_ANCESTOR and TREE_POSITION_DESCENDANT</comment>
                    <comment type="line">// only relevant for nodes that are "part of the document tree"?</comment>
                    <comment type="line">// &lt;outer&gt;</comment>
                    <comment type="line">// &lt;inner myattr="true"/&gt;</comment>
                    <comment type="line">// &lt;/outer&gt;</comment>
                    <comment type="line">// Is the element node "outer" considered an ancestor of "myattr"?</comment>
                    <comment type="line">// Current assumption: No.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// 4. How do children of ATTRIBUTE nodes compare (with eachother, or</comment>
                    <comment type="line">// with children of other attribute nodes with the same element)</comment>
                    <comment type="line">// Current assumption: Children of ATTRIBUTE nodes are treated as if</comment>
                    <comment type="line">// they they are the attribute node itself, unless the 2 nodes</comment>
                    <comment type="line">// are both children of the same attribute.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// 5. How does an ENTITY_REFERENCE node compare with it's children?</comment>
                    <comment type="line">// Given the DOM, it should precede its children as an ancestor.</comment>
                    <comment type="line">// Given "document order", does it represent the same position?</comment>
                    <comment type="line">// Current assumption: An ENTITY_REFERENCE node is an ancestor of its</comment>
                    <comment type="line">// children.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// 6. How do children of a DocumentFragment compare?</comment>
                    <comment type="line">// Current assumption: If both nodes are part of the same document</comment>
                    <comment type="line">// fragment, there are compared as if they were part of a document.</comment>


                    <comment type="line">// If the nodes are the same...</comment>
                    <if>if
                        <condition>(
                            <expr><name>this</name>==
                                <name>other</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>(<name>TREE_POSITION_SAME_NODE</name> | <name>TREE_POSITION_EQUIVALENT</name>)
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// If either node is of type ENTITY or NOTATION, compare as disconnected
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>thisType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>otherType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>other</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// If either node is of type ENTITY or NOTATION, compare as disconnected
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>thisType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ENTITY_NODE</name>
                                </name>
                                ||
                                <name>thisType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>NOTATION_NODE</name>
                                </name>
                                ||
                                <name>otherType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ENTITY_NODE</name>
                                </name>
                                ||
                                <name>otherType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>NOTATION_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>TREE_POSITION_DISCONNECTED</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Find the ancestor of each node, and the distance each node is from</comment>
                    <comment type="line">// its ancestor.</comment>
                    <comment type="line">// During this traversal, look for ancestor/descendent relationships</comment>
                    <comment type="line">// between the 2 nodes in question.</comment>
                    <comment type="line">// We do this now, so that we get this info correct for attribute nodes
                    </comment>
                    <comment type="line">// and their children.</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>thisAncestor</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>otherAncestor</name> =
                            <init>
                                <expr>
                                    <name>other</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>thisDepth</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>otherDepth</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr><name>node</name>=
                                <name>this</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>node</name>
                                =
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>thisDepth</name>
                                    +=1
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>other</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <comment type="line">// The other node is an ancestor of this one.</comment>
                                    <return>return
                                        <expr>(<name>TREE_POSITION_ANCESTOR</name> | <name>
                                            TREE_POSITION_PRECEDING</name>)
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>thisAncestor</name>
                                    =
                                    <name>node</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <for>for (
                        <init>
                            <expr><name>node</name>=
                                <name>other</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr><name>node</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>node</name>=
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>otherDepth</name>
                                    +=1
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>this</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <comment type="line">// The other node is a descendent of the reference node.
                                    </comment>
                                    <return>return
                                        <expr>(<name>TREE_POSITION_DESCENDANT</name> | <name>
                                            TREE_POSITION_FOLLOWING</name>)
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>otherAncestor</name>
                                    =
                                    <name>node</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>thisNode</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>otherNode</name> =
                            <init>
                                <expr>
                                    <name>other</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>thisAncestorType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>thisAncestor</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>otherAncestorType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>otherAncestor</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// if the ancestor is an attribute, get owning element.</comment>
                    <comment type="line">// we are now interested in the owner to determine position.</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>thisAncestorType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ATTRIBUTE_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>thisNode</name>
                                        = ((<name>AttrImpl</name>)<name>thisAncestor</name>).
                                        <call>
                                            <name>getOwnerElement</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>otherAncestorType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ATTRIBUTE_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>otherNode</name>
                                        = ((<name>AttrImpl</name>)<name>otherAncestor</name>).
                                        <call>
                                            <name>getOwnerElement</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Before proceeding, we should check if both ancestor nodes turned</comment>
                    <comment type="line">// out to be attributes for the same element</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>thisAncestorType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ATTRIBUTE_NODE</name>
                                </name>
                                &amp;&amp;
                                <name>otherAncestorType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ATTRIBUTE_NODE</name>
                                </name>
                                &amp;&amp;
                                <name>thisNode</name>==
                                <name>otherNode</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>TREE_POSITION_EQUIVALENT</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Now, find the ancestor of the owning element, if the original</comment>
                    <comment type="line">// ancestor was an attribute</comment>

                    <comment type="line">// Note: the following 2 loops are quite close to the ones above.</comment>
                    <comment type="line">// May want to common them up. LM.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>thisAncestorType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ATTRIBUTE_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>thisDepth</name>=0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <expr><name>node</name>=
                                            <name>thisNode</name>
                                        </expr>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>node</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>node</name>=
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>thisDepth</name>
                                                +=1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>node</name>
                                                    ==
                                                    <name>otherNode</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <comment type="line">// The other node is an ancestor of the owning
                                                    element
                                                </comment>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>TREE_POSITION_PRECEDING</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>thisAncestor</name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Now, find the ancestor of the owning element, if the original</comment>
                    <comment type="line">// ancestor was an attribute</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>otherAncestorType</name>
                                ==
                                <name><name>Node</name>.
                                    <name>ATTRIBUTE_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>otherDepth</name>=0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <expr><name>node</name>=
                                            <name>otherNode</name>
                                        </expr>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>node</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>node</name>=
                                            <call>
                                                <name><name>node</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>otherDepth</name>
                                                +=1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>node</name>
                                                    ==
                                                    <name>thisNode</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <comment type="line">// The other node is a descendent of the
                                                    reference
                                                </comment>
                                                <comment type="line">// node's element</comment>
                                                <return>return
                                                    <expr>
                                                        <name>TREE_POSITION_FOLLOWING</name>
                                                    </expr>
                                                    ;
                                                </return>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>otherAncestor</name>
                                                =
                                                <name>node</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// thisAncestor and otherAncestor must be the same at this point,</comment>
                    <comment type="line">// otherwise, we are not in the same tree or document fragment</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>thisAncestor</name>
                                !=
                                <name>otherAncestor</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>TREE_POSITION_DISCONNECTED</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>


                    <comment type="line">// Go up the parent chain of the deeper node, until we find a node</comment>
                    <comment type="line">// with the same depth as the shallower node</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>thisDepth</name>
                                &gt;
                                <name>otherDepth</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name>=
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>i</name>&lt;<name>thisDepth</name> -
                                            <name>otherDepth</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>thisNode</name>
                                            =
                                            <call>
                                                <name><name>thisNode</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                <comment type="line">// Check if the node we have reached is in fact "otherNode". This
                                    can
                                </comment>
                                <comment type="line">// happen in the case of attributes. In this case, otherNode
                                </comment>
                                <comment type="line">// "precedes" this.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>thisNode</name>
                                            ==
                                            <name>otherNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>TREE_POSITION_PRECEDING</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>

                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name>=
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>i</name>&lt;<name>otherDepth</name> -
                                            <name>thisDepth</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>otherNode</name>
                                            =
                                            <call>
                                                <name><name>otherNode</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                <comment type="line">// Check if the node we have reached is in fact "thisNode". This
                                    can
                                </comment>
                                <comment type="line">// happen in the case of attributes. In this case, otherNode
                                </comment>
                                <comment type="line">// "follows" this.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>otherNode</name>
                                            ==
                                            <name>thisNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>TREE_POSITION_FOLLOWING</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// We now have nodes at the same depth in the tree. Find a common</comment>
                    <comment type="line">// ancestor.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>thisNodeP</name>,
                            <name>otherNodeP</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr><name>thisNodeP</name>=
                                <call>
                                    <name><name>thisNode</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ,
                            <expr><name>otherNodeP</name>=
                                <call>
                                    <name><name>otherNode</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr><name>thisNodeP</name>!=
                                <name>otherNodeP</name>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>thisNode</name>
                                    =
                                    <name>thisNodeP</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>otherNode</name>
                                    =
                                    <name>otherNodeP</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>thisNodeP</name>
                                    =
                                    <call>
                                        <name><name>thisNodeP</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>otherNodeP</name>
                                    =
                                    <call>
                                        <name><name>otherNodeP</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// At this point, thisNode and otherNode are direct children of</comment>
                    <comment type="line">// the common ancestor.</comment>
                    <comment type="line">// See whether thisNode or otherNode is the leftmost</comment>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>current</name>=
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>thisNodeP</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>current</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>current</name>=
                                <call>
                                    <name><name>current</name>.
                                        <name>getNextSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr><name>current</name>==
                                        <name>otherNode</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>TREE_POSITION_PRECEDING</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr><name>current</name>==
                                                <name>thisNode</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>TREE_POSITION_FOLLOWING</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="line">// REVISIT: shouldn't get here. Should probably throw an</comment>
                    <comment type="line">// exception</comment>
                    <return>return <expr>0</expr>;
                    </return>

                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Compares a node with this node with regard to their position in the
                * document.
                * @param other The node to compare against this node.
                * @return Returns how the given node is positioned relatively to this
                * node.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>compareDocumentPosition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// If the nodes are the same, no flags should be set</comment>
                    <if>if
                        <condition>(
                            <expr><name>this</name>==
                                <name>other</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>0</expr>;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// check if other is from a different implementation</comment>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>NodeImpl</name>
                                    </type>
                                    <name>node</name> =
                                    <init>
                                        <expr>(<name>NodeImpl</name>)
                                            <name>other</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ClassCastException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// other comes from a different implementation</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>msg</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>DOMMessageFormatter</name>.
                                                        <name>formatMessage</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>DOMMessageFormatter</name>.
                                                                    <name>DOM_DOMAIN</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"NOT_SUPPORTED_ERR"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>NOT_SUPPORTED_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>msg</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>thisOwnerDoc</name>,
                            <name>otherOwnerDoc</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// get the respective Document owners.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>DOCUMENT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>thisOwnerDoc</name>
                                    = (<name>Document</name>)
                                    <name>this</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <name>thisOwnerDoc</name>
                                    =
                                    <call>
                                        <name><name>this</name>.
                                            <name>getOwnerDocument</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>other</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>DOCUMENT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>otherOwnerDoc</name>
                                    = (<name>Document</name>)
                                    <name>other</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <name>otherOwnerDoc</name>
                                    =
                                    <call>
                                        <name><name>other</name>.
                                            <name>getOwnerDocument</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>

                    <comment type="line">// If from different documents, we know they are disconnected.</comment>
                    <comment type="line">// and have an implementation dependent order</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>thisOwnerDoc</name>
                                != <name>otherOwnerDoc</name> &amp;&amp;
                                <name>thisOwnerDoc</name>
                                !=<name>null</name> &amp;&amp;
                                <name>otherOwnerDoc</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>otherDocNum</name> =
                                        <init>
                                            <expr>((<name>CoreDocumentImpl</name>)<name>otherOwnerDoc</name>).
                                                <call>
                                                    <name>getNodeNumber</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>thisDocNum</name> =
                                        <init>
                                            <expr>((<name>CoreDocumentImpl</name>)<name>thisOwnerDoc</name>).
                                                <call>
                                                    <name>getNodeNumber</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>otherDocNum</name>
                                            &gt;
                                            <name>thisDocNum</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>DOCUMENT_POSITION_DISCONNECTED</name>
                                                |
                                                <name>DOCUMENT_POSITION_FOLLOWING</name>
                                                |
                                                <name>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <return>return
                                            <expr>
                                                <name>DOCUMENT_POSITION_DISCONNECTED</name>
                                                |
                                                <name>DOCUMENT_POSITION_PRECEDING</name>
                                                |
                                                <name>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                            </expr>
                                            ;
                                        </return>
                                    </else>
                                </if>

                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Find the ancestor of each node, and the distance each node is from</comment>
                    <comment type="line">// its ancestor.</comment>
                    <comment type="line">// During this traversal, look for ancestor/descendent relationships</comment>
                    <comment type="line">// between the 2 nodes in question.</comment>
                    <comment type="line">// We do this now, so that we get this info correct for attribute nodes
                    </comment>
                    <comment type="line">// and their children.</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>thisAncestor</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>otherAncestor</name> =
                            <init>
                                <expr>
                                    <name>other</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>thisDepth</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>otherDepth</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr><name>node</name>=
                                <name>this</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>node</name>
                                =
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>thisDepth</name>
                                    +=1
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>other</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <comment type="line">// The other node is an ancestor of this one.</comment>
                                    <return>return
                                        <expr>(<name>DOCUMENT_POSITION_CONTAINS</name> |
                                            <name>DOCUMENT_POSITION_PRECEDING</name>)
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>thisAncestor</name>
                                    =
                                    <name>node</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <for>for (
                        <init>
                            <expr><name>node</name>=
                                <name>other</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr><name>node</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>node</name>=
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>otherDepth</name>
                                    +=1
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>this</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <comment type="line">// The other node is a descendent of the reference node.
                                    </comment>
                                    <return>return
                                        <expr>(<name>DOCUMENT_POSITION_IS_CONTAINED</name> |
                                            <name>DOCUMENT_POSITION_FOLLOWING</name>)
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>otherAncestor</name>
                                    =
                                    <name>node</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>


                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>thisAncestorType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>thisAncestor</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>otherAncestorType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>otherAncestor</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>thisNode</name> =
                            <init>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>otherNode</name> =
                            <init>
                                <expr>
                                    <name>other</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Special casing for ENTITY, NOTATION, DOCTYPE and ATTRIBUTES</comment>
                    <comment type="line">// LM: should rewrite this.</comment>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>thisAncestorType</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>DocumentType</name>
                                            </type>
                                            <name>container</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>thisOwnerDoc</name>.
                                                            <name>getDoctype</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>container</name>
                                                ==
                                                <name>otherAncestor</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <return>return
                                                <expr>(<name>DOCUMENT_POSITION_CONTAINS</name> | <name>
                                                    DOCUMENT_POSITION_PRECEDING</name>)
                                                </expr>
                                                ;
                                            </return>
                                        </then>
                                    </if>
                                    <switch>switch
                                        <condition>(
                                            <expr>
                                                <name>otherAncestorType</name>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <case>case
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>NOTATION_NODE</name>
                                                    </name>
                                                </expr>
                                                :
                                            </case>
                                            <case>case
                                                <expr>
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_NODE</name>
                                                    </name>
                                                </expr>
                                                :
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>thisAncestorType</name>
                                                                !=
                                                                <name>otherAncestorType</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <comment type="line">// the nodes are of different types
                                                            </comment>
                                                            <return>return
                                                                <expr>((<name>thisAncestorType</name>&gt;<name>
                                                                    otherAncestorType</name>) ?
                                                                    <name>DOCUMENT_POSITION_PRECEDING</name>:<name>
                                                                        DOCUMENT_POSITION_FOLLOWING</name>)
                                                                </expr>
                                                                ;
                                                            </return>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <comment type="line">// the nodes are of the same type.
                                                                    Find order.
                                                                </comment>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>thisAncestorType</name>
                                                                            ==
                                                                            <name><name>Node</name>.
                                                                                <name>NOTATION_NODE</name>
                                                                            </name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>

                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>((<name>NamedNodeMapImpl</name>)
                                                                                    <call>
                                                                                        <name><name>container</name>.
                                                                                            <name>getNotations</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    ).
                                                                                    <call>
                                                                                        <name>precedes</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        otherAncestor
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>thisAncestor
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <return>return
                                                                                    <expr>(<name>
                                                                                        DOCUMENT_POSITION_PRECEDING
                                                                                    </name> |
                                                                                        <name>
                                                                                            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                                                                        )
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                            </then>
                                                                            <else>else
                                                                                <return>return
                                                                                    <expr>(<name>
                                                                                        DOCUMENT_POSITION_FOLLOWING
                                                                                    </name> |
                                                                                        <name>
                                                                                            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                                                                        )
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                            </else>
                                                                        </if>
                                                                    </then>
                                                                    <else>else
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>((<name>NamedNodeMapImpl</name>)
                                                                                    <call>
                                                                                        <name><name>container</name>.
                                                                                            <name>getEntities</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    ).
                                                                                    <call>
                                                                                        <name>precedes</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        otherAncestor
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>thisAncestor
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <return>return
                                                                                    <expr>(<name>
                                                                                        DOCUMENT_POSITION_PRECEDING
                                                                                    </name> |
                                                                                        <name>
                                                                                            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                                                                        )
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                            </then>
                                                                            <else>else
                                                                                <return>return
                                                                                    <expr>(<name>
                                                                                        DOCUMENT_POSITION_FOLLOWING
                                                                                    </name> |
                                                                                        <name>
                                                                                            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                                                                        )
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                            </else>
                                                                        </if>
                                                                    </else>
                                                                </if>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </case>
                                            }
                                        </block>
                                    </switch>
                                    <expr_stmt>
                                        <expr>
                                            <name>thisNode</name>
                                            = <name>thisAncestor</name> =
                                            <name>thisOwnerDoc</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_TYPE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>otherNode</name>
                                                ==
                                                <name>thisOwnerDoc</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <return>return
                                                <expr>(<name>DOCUMENT_POSITION_PRECEDING</name> |
                                                    <name>DOCUMENT_POSITION_CONTAINS</name>)
                                                </expr>
                                                ;
                                            </return>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr><name>thisOwnerDoc</name>!=<name>null</name> &amp;&amp; <name>
                                                        thisOwnerDoc</name>==
                                                        <name>otherOwnerDoc</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <return>return
                                                        <expr>(<name>DOCUMENT_POSITION_FOLLOWING</name>)
                                                        </expr>
                                                        ;
                                                    </return>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>thisNode</name>
                                            = ((<name>AttrImpl</name>)<name>thisAncestor</name>).
                                            <call>
                                                <name>getOwnerElement</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr><name>otherAncestorType</name>==
                                                <name><name>Node</name>.
                                                    <name>ATTRIBUTE_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>otherNode</name>
                                                        = ((<name>AttrImpl</name>)<name>otherAncestor</name>).
                                                        <call>
                                                            <name>getOwnerElement</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>otherNode</name>
                                                            ==
                                                            <name>thisNode</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>((<name>NamedNodeMapImpl</name>)
                                                                        <call>
                                                                            <name><name>thisNode</name>.
                                                                                <name>getAttributes</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        ).
                                                                        <call>
                                                                            <name>precedes</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>other</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>this</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <return>return
                                                                        <expr>(<name>DOCUMENT_POSITION_PRECEDING</name> |
                                                                            <name>
                                                                                DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                                                            )
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                </then>
                                                                <else>else
                                                                    <return>return
                                                                        <expr>(<name>DOCUMENT_POSITION_FOLLOWING</name> |
                                                                            <name>
                                                                                DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                                                            )
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                </else>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <comment type="line">// Now, find the ancestor of the element</comment>
                                    <expr_stmt>
                                        <expr><name>thisDepth</name>=0
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <for>for (
                                        <init>
                                            <expr><name>node</name>=
                                                <name>thisNode</name>
                                            </expr>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>node</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr><name>node</name>=
                                                <call>
                                                    <name><name>node</name>.
                                                        <name>getParentNode</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>thisDepth</name>
                                                    +=1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>node</name>
                                                        ==
                                                        <name>otherNode</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// The other node is an ancestor of the
                                                            owning element
                                                        </comment>
                                                        <return>return
                                                            <expr>(<name>DOCUMENT_POSITION_CONTAINS</name> |
                                                                <name>DOCUMENT_POSITION_PRECEDING</name>)
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>thisAncestor</name>
                                                    =
                                                    <name>node</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </for>
                                    }
                                </block>
                            </case>
                            }
                        </block>
                    </switch>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>otherAncestorType</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>DocumentType</name>
                                            </type>
                                            <name>container</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>thisOwnerDoc</name>.
                                                            <name>getDoctype</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>container</name>
                                                ==
                                                <name>this</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <return>return
                                                <expr>(<name>DOCUMENT_POSITION_IS_CONTAINED</name> |
                                                    <name>DOCUMENT_POSITION_FOLLOWING</name>)
                                                </expr>
                                                ;
                                            </return>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>otherNode</name>
                                            = <name>otherAncestor</name> =
                                            <name>thisOwnerDoc</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_TYPE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>thisNode</name>
                                                ==
                                                <name>otherOwnerDoc</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <return>return
                                                <expr>(<name>DOCUMENT_POSITION_FOLLOWING</name> |
                                                    <name>DOCUMENT_POSITION_IS_CONTAINED</name>)
                                                </expr>
                                                ;
                                            </return>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr><name>otherOwnerDoc</name>!=<name>null
                                                    </name> &amp;&amp; <name>thisOwnerDoc</name>==
                                                        <name>otherOwnerDoc</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <return>return
                                                        <expr>(<name>DOCUMENT_POSITION_PRECEDING</name>)
                                                        </expr>
                                                        ;
                                                    </return>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <expr_stmt>
                                        <expr><name>otherDepth</name>=0
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>otherNode</name>
                                            = ((<name>AttrImpl</name>)<name>otherAncestor</name>).
                                            <call>
                                                <name>getOwnerElement</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <for>for (
                                        <init>
                                            <expr><name>node</name>=
                                                <name>otherNode</name>
                                            </expr>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>node</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr><name>node</name>=
                                                <call>
                                                    <name><name>node</name>.
                                                        <name>getParentNode</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>otherDepth</name>
                                                    +=1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>node</name>
                                                        ==
                                                        <name>thisNode</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <comment type="line">// The other node is a descendent of the
                                                        reference
                                                    </comment>
                                                    <comment type="line">// node's element</comment>
                                                    <return>return
                                                        <expr>
                                                            <name>DOCUMENT_POSITION_FOLLOWING</name>
                                                            |
                                                            <name>DOCUMENT_POSITION_IS_CONTAINED</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>otherAncestor</name>
                                                    =
                                                    <name>node</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </for>

                                    }
                                </block>
                            </case>
                            }
                        </block>
                    </switch>

                    <comment type="line">// thisAncestor and otherAncestor must be the same at this point,</comment>
                    <comment type="line">// otherwise, the original nodes are disconnected</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>thisAncestor</name>
                                !=
                                <name>otherAncestor</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>thisAncestorNum</name>,
                                        <name>otherAncestorNum</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>thisAncestorNum</name>
                                        = ((<name>NodeImpl</name>)<name>thisAncestor</name>).
                                        <call>
                                            <name>getNodeNumber</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>otherAncestorNum</name>
                                        = ((<name>NodeImpl</name>)<name>otherAncestor</name>).
                                        <call>
                                            <name>getNodeNumber</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>thisAncestorNum</name>
                                            &gt;
                                            <name>otherAncestorNum</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>DOCUMENT_POSITION_DISCONNECTED</name>
                                                |
                                                <name>DOCUMENT_POSITION_FOLLOWING</name>
                                                |
                                                <name>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                    <else>else
                                        <return>return
                                            <expr>
                                                <name>DOCUMENT_POSITION_DISCONNECTED</name>
                                                |
                                                <name>DOCUMENT_POSITION_PRECEDING</name>
                                                |
                                                <name>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                                            </expr>
                                            ;
                                        </return>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>


                    <comment type="line">// Go up the parent chain of the deeper node, until we find a node</comment>
                    <comment type="line">// with the same depth as the shallower node</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>thisDepth</name>
                                &gt;
                                <name>otherDepth</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name>=
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>i</name>&lt;<name>thisDepth</name> -
                                            <name>otherDepth</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>thisNode</name>
                                            =
                                            <call>
                                                <name><name>thisNode</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                <comment type="line">// Check if the node we have reached is in fact "otherNode". This
                                    can
                                </comment>
                                <comment type="line">// happen in the case of attributes. In this case, otherNode
                                </comment>
                                <comment type="line">// "precedes" this.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>thisNode</name>
                                            ==
                                            <name>otherNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>DOCUMENT_POSITION_PRECEDING</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>

                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name>=
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>i</name>&lt;<name>otherDepth</name> -
                                            <name>thisDepth</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <expr_stmt>
                                        <expr>
                                            <name>otherNode</name>
                                            =
                                            <call>
                                                <name><name>otherNode</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </for>
                                <comment type="line">// Check if the node we have reached is in fact "thisNode". This
                                    can
                                </comment>
                                <comment type="line">// happen in the case of attributes. In this case, otherNode
                                </comment>
                                <comment type="line">// "follows" this.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>otherNode</name>
                                            ==
                                            <name>thisNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>DOCUMENT_POSITION_FOLLOWING</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// We now have nodes at the same depth in the tree. Find a common</comment>
                    <comment type="line">// ancestor.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>thisNodeP</name>,
                            <name>otherNodeP</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr><name>thisNodeP</name>=
                                <call>
                                    <name><name>thisNode</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ,
                            <expr><name>otherNodeP</name>=
                                <call>
                                    <name><name>otherNode</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr><name>thisNodeP</name>!=
                                <name>otherNodeP</name>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>thisNode</name>
                                    =
                                    <name>thisNodeP</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>otherNode</name>
                                    =
                                    <name>otherNodeP</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>thisNodeP</name>
                                    =
                                    <call>
                                        <name><name>thisNodeP</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>otherNodeP</name>
                                    =
                                    <call>
                                        <name><name>otherNodeP</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// At this point, thisNode and otherNode are direct children of</comment>
                    <comment type="line">// the common ancestor.</comment>
                    <comment type="line">// See whether thisNode or otherNode is the leftmost</comment>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>current</name>=
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>thisNodeP</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>current</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>current</name>=
                                <call>
                                    <name><name>current</name>.
                                        <name>getNextSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr><name>current</name>==
                                        <name>otherNode</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>DOCUMENT_POSITION_PRECEDING</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr><name>current</name>==
                                                <name>thisNode</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>DOCUMENT_POSITION_FOLLOWING</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="line">// REVISIT: shouldn't get here. Should probably throw an</comment>
                    <comment type="line">// exception</comment>
                    <return>return <expr>0</expr>;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This attribute returns the text content of this node and its
                * descendants. When it is defined to be null, setting it has no effect.
                * When set, any possible children this node may have are removed and
                * replaced by a single &lt;code&gt;Text&lt;/code&gt; node containing the string
                * this attribute is set to. On getting, no serialization is performed,
                * the returned string does not contain any markup. No whitespace
                * normalization is performed, the returned string does not contain the
                * element content whitespaces . Similarly, on setting, no parsing is
                * performed either, the input string is taken as pure textual content.
                * &lt;br&gt;The string returned is made of the text content of this node
                * depending on its type, as defined below:
                * &lt;table border='1'&gt;
                * &lt;tr&gt;
                * &lt;th&gt;Node type&lt;/th&gt;
                * &lt;th&gt;Content&lt;/th&gt;
                * &lt;/tr&gt;

                /**
                * This attribute returns the text content of this node and its
                * descendants. When it is defined to be null, setting it has no effect.
                * When set, any possible children this node may have are removed and
                * replaced by a single &lt;code&gt;Text&lt;/code&gt; node containing the string
                * this attribute is set to. On getting, no serialization is performed,
                * the returned string does not contain any markup. No whitespace
                * normalization is performed, the returned string does not contain the
                * element content whitespaces . Similarly, on setting, no parsing is
                * performed either, the input string is taken as pure textual content.
                * &lt;br&gt;The string returned is made of the text content of this node
                * depending on its type, as defined below:
                * &lt;table border='1'&gt;
                * &lt;tr&gt;
                * &lt;th&gt;Node type&lt;/th&gt;
                * &lt;th&gt;Content&lt;/th&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;
                * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
                * DOCUMENT_FRAGMENT_NODE&lt;/td&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;concatenation of the &lt;code&gt;textContent&lt;/code&gt;
                * attribute value of every child node, excluding COMMENT_NODE and
                * PROCESSING_INSTRUCTION_NODE nodes&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;ATTRIBUTE_NODE, TEXT_NODE,
                * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE&lt;/td&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;
                * &lt;code&gt;nodeValue&lt;/code&gt;&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE&lt;/td&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;
                * null&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;/table&gt;
                * @exception DOMException
                * NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
                * @exception DOMException
                * DOMSTRING_SIZE_ERR: Raised when it would return more characters than
                * fit in a &lt;code&gt;DOMString&lt;/code&gt; variable on the implementation
                * platform.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTextContent</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getNodeValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// overriden in some subclasses</comment>
                    }
                </block>
            </function>

            <comment type="line">// internal method taking a StringBuffer in parameter</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>getTextContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buf</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>content</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getNodeValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>content</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>content</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This attribute returns the text content of this node and its
                * descendants. When it is defined to be null, setting it has no effect.
                * When set, any possible children this node may have are removed and
                * replaced by a single &lt;code&gt;Text&lt;/code&gt; node containing the string
                * this attribute is set to. On getting, no serialization is performed,
                * the returned string does not contain any markup. No whitespace
                * normalization is performed, the returned string does not contain the
                * element content whitespaces . Similarly, on setting, no parsing is
                * performed either, the input string is taken as pure textual content.
                * &lt;br&gt;The string returned is made of the text content of this node
                * depending on its type, as defined below:
                * &lt;table border='1'&gt;
                * &lt;tr&gt;
                * &lt;th&gt;Node type&lt;/th&gt;
                * &lt;th&gt;Content&lt;/th&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;
                * ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
                * DOCUMENT_FRAGMENT_NODE&lt;/td&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;concatenation of the &lt;code&gt;textContent&lt;/code&gt;
                * attribute value of every child node, excluding COMMENT_NODE and
                * PROCESSING_INSTRUCTION_NODE nodes&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;ATTRIBUTE_NODE, TEXT_NODE,
                * CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE&lt;/td&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;
                * &lt;code&gt;nodeValue&lt;/code&gt;&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;tr&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE&lt;/td&gt;
                * &lt;td valign='top' rowspan='1' colspan='1'&gt;
                * null&lt;/td&gt;
                * &lt;/tr&gt;
                * &lt;/table&gt;
                * @exception DOMException
                * NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
                * @exception DOMException
                * DOMSTRING_SIZE_ERR: Raised when it would return more characters than
                * fit in a &lt;code&gt;DOMString&lt;/code&gt; variable on the implementation
                * platform.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTextContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>textContent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setNodeValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>textContent</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether this node is the same node as the given one.
                * &lt;br&gt;This method provides a way to determine whether two
                * &lt;code&gt;Node&lt;/code&gt; references returned by the implementation reference
                * the same object. When two &lt;code&gt;Node&lt;/code&gt; references are references
                * to the same object, even if through a proxy, the references may be
                * used completely interchangably, such that all attributes have the
                * same values and calling the same DOM method on either reference
                * always has exactly the same effect.
                * @param other The node to test against.
                * @return Returns &lt;code&gt;true&lt;/code&gt; if the nodes are the same,
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// we do not use any wrapper so the answer is obvious</comment>
                    <return>return
                        <expr>
                            <name>this</name>
                            ==
                            <name>other</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * DOM Level 3: Experimental
                * This method checks if the specified &lt;code&gt;namespaceURI&lt;/code&gt; is the
                * default namespace or not.
                * @param namespaceURI The namespace URI to look for.
                * @return &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;namespaceURI&lt;/code&gt;
                * is the default namespace, &lt;code&gt;false&lt;/code&gt; otherwise.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDefaultNamespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// REVISIT: remove casts when DOM L3 becomes REC.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>type</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ELEMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>namespace</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getNamespaceURI</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>prefix</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getPrefix</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <comment type="line">// REVISIT: is it possible that prefix is empty string?
                                    </comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>prefix</name>
                                                == <name>null</name> ||
                                                <call>
                                                    <name><name>prefix</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>namespaceURI</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>(<name>namespace</name> == <name>
                                                                    namespaceURI</name>)
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>namespaceURI</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespace</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>hasAttributes</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>ElementImpl</name>
                                                        </type>
                                                        <name>elem</name> =
                                                        <init>
                                                            <expr>(<name>ElementImpl</name>)
                                                                <name>this</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>NodeImpl</name>
                                                        </type>
                                                        <name>attr</name> =
                                                        <init>
                                                            <expr>(<name>NodeImpl</name>)
                                                                <call>
                                                                    <name><name>elem</name>.
                                                                        <name>getAttributeNodeNS</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"http://www.w3.org/2000/xmlns/"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>"xmlns"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>attr</name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>String</name>
                                                                    </type>
                                                                    <name>value</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>attr</name>.
                                                                                    <name>getNodeValue</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                        ==
                                                                        <name>null</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <return>return
                                                                            <expr>(<name>namespace</name> == <name>
                                                                                value</name>)
                                                                            </expr>
                                                                            ;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name><name>namespaceURI</name>.
                                                                            <name>equals</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>NodeImpl</name>
                                            </type>
                                            <name>ancestor</name> =
                                            <init>
                                                <expr>(<name>NodeImpl</name>)
                                                    <call>
                                                        <name>getElementAncestor</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ancestor</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ancestor</name>.
                                                                <name>isDefaultNamespace</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return <expr>false</expr>;
                                    </return>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <return>return
                                        <expr>(
                                            <call>(<name>NodeImpl</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>Document</name>)
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getDocumentElement</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ).
                                            <call>
                                                <name>isDefaultNamespace</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>namespaceURI</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_FRAGMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_TYPE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">// type is unknown</comment>
                                <return>return <expr>false</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>ownerNode</name>.
                                                        <name>getNodeType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>ELEMENT_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ownerNode</name>.
                                                                <name>isDefaultNamespace</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>

                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return <expr>false</expr>;
                                    </return>
                                    }
                                </block>
                            </case>
                            <default>default:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>NodeImpl</name>
                                            </type>
                                            <name>ancestor</name> =
                                            <init>
                                                <expr>(<name>NodeImpl</name>)
                                                    <call>
                                                        <name>getElementAncestor</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ancestor</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ancestor</name>.
                                                                <name>isDefaultNamespace</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return <expr>false</expr>;
                                    </return>
                                    }
                                </block>

                            </default>
                            }
                        </block>
                    </switch>


                    }
                </block>
            </function>


            <comment type="javadoc">/**
                *
                * DOM Level 3 - Experimental:
                * Look up the prefix associated to the given namespace URI, starting from this node.
                *
                * @param namespaceURI
                * @return the prefix for the namespace
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>lookupPrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// REVISIT: When Namespaces 1.1 comes out this may not be true</comment>
                    <comment type="line">// Prefix can't be bound to null namespace</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>namespaceURI</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <switch>switch
                        <condition>(
                            <expr>
                                <name>type</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ELEMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>namespace</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getNamespaceURI</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <comment type="line">// to flip out children</comment>
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>lookupNamespacePrefix</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>namespaceURI</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>(<name>ElementImpl</name>)
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <return>return
                                        <expr>(
                                            <call>(<name>NodeImpl</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>Document</name>)
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getDocumentElement</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ).
                                            <call>
                                                <name>lookupPrefix</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>namespaceURI</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_FRAGMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_TYPE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">// type is unknown</comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>ownerNode</name>.
                                                        <name>getNodeType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>ELEMENT_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ownerNode</name>.
                                                                <name>lookupPrefix</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>

                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </case>
                            <default>default:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>NodeImpl</name>
                                            </type>
                                            <name>ancestor</name> =
                                            <init>
                                                <expr>(<name>NodeImpl</name>)
                                                    <call>
                                                        <name>getElementAncestor</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ancestor</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ancestor</name>.
                                                                <name>lookupPrefix</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>

                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * DOM Level 3 - Experimental:
                * Look up the namespace URI associated to the given prefix, starting from this node.
                * Use lookupNamespaceURI(null) to lookup the default namespace
                *
                * @param namespaceURI
                * @return th URI for the namespace
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>lookupNamespaceURI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>specifiedPrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>type</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ELEMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>namespace</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getNamespaceURI</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>prefix</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>getPrefix</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>namespace</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// REVISIT: is it possible that prefix is empty
                                                    string?
                                                </comment>
                                                <if>if
                                                    <condition>(
                                                        <expr><name>specifiedPrefix</name>== <name>null</name> &amp;&amp; <name>
                                                            prefix</name>==
                                                            <name>specifiedPrefix</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// looking for default namespace
                                                            </comment>
                                                            <return>return
                                                                <expr>
                                                                    <name>namespace</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>prefix</name>
                                                                    != <name>null</name> &amp;&amp;
                                                                    <call>
                                                                        <name><name>prefix</name>.
                                                                            <name>equals</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>specifiedPrefix</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// non default namespace
                                                                    </comment>
                                                                    <return>return
                                                                        <expr>
                                                                            <name>namespace</name>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>hasAttributes</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>NamedNodeMap</name>
                                                        </type>
                                                        <name>map</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>getAttributes</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>length</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>map</name>.
                                                                        <name>getLength</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <for>for (
                                                    <init>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>i</name>=
                                                            <init>
                                                                <expr>0</expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </init>
                                                    <condition>
                                                        <expr><name>i</name>&lt;
                                                            <name>length</name>
                                                        </expr>
                                                        ;
                                                    </condition>
                                                    <incr>
                                                        <expr><name>i</name>++
                                                        </expr>
                                                    </incr>
                                                    )
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>Node</name>
                                                                </type>
                                                                <name>attr</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>map</name>.
                                                                                <name>item</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>attrPrefix</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>attr</name>.
                                                                                <name>getPrefix</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>value</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>attr</name>.
                                                                                <name>getNodeValue</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>namespace</name>
                                                                =
                                                                <call>
                                                                    <name><name>attr</name>.
                                                                        <name>getNamespaceURI</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>namespace</name>
                                                                    !=<name>null</name> &amp;&amp;
                                                                    <call>
                                                                        <name><name>namespace</name>.
                                                                            <name>equals</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"http://www.w3.org/2000/xmlns/"
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// at this point we are dealing
                                                                        with DOM Level 2 nodes only
                                                                    </comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>specifiedPrefix</name>
                                                                                == <name>null</name> &amp;&amp;
                                                                                <call>
                                                                                    <name><name>attr</name>.
                                                                                        <name>getNodeName</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                .
                                                                                <call>
                                                                                    <name>equals</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"xmlns"</expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <comment type="line">// default
                                                                                    namespace
                                                                                </comment>
                                                                                <return>return
                                                                                    <expr>
                                                                                        <name>value</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>attrPrefix</name>
                                                                                        !=<name>null</name> &amp;&amp;
                                                                                        <call>
                                                                                            <name><name>
                                                                                                attrPrefix</name>.
                                                                                                <name>equals</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>"xmlns"</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        &amp;&amp;
                                                                                        <call>
                                                                                            <name><name>attr</name>.
                                                                                                <name>getLocalName
                                                                                                </name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>equals</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            specifiedPrefix
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <comment type="line">// non
                                                                                            default namespace
                                                                                        </comment>
                                                                                        <return>return
                                                                                            <expr>
                                                                                                <name>value</name>
                                                                                            </expr>
                                                                                            ;
                                                                                        </return>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                            </if>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        }
                                                    </block>
                                                </for>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>NodeImpl</name>
                                            </type>
                                            <name>ancestor</name> =
                                            <init>
                                                <expr>(<name>NodeImpl</name>)
                                                    <call>
                                                        <name>getElementAncestor</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ancestor</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ancestor</name>.
                                                                <name>lookupNamespaceURI</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>specifiedPrefix</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>


                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <return>return
                                        <expr>(
                                            <call>(<name>NodeImpl</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>Document</name>)
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getDocumentElement</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ).
                                            <call>
                                                <name>lookupNamespaceURI</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>specifiedPrefix</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_FRAGMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_TYPE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <comment type="line">// type is unknown</comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>ownerNode</name>.
                                                        <name>getNodeType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>ELEMENT_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ownerNode</name>.
                                                                <name>lookupNamespaceURI</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>specifiedPrefix</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>

                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </case>
                            <default>default:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>NodeImpl</name>
                                            </type>
                                            <name>ancestor</name> =
                                            <init>
                                                <expr>(<name>NodeImpl</name>)
                                                    <call>
                                                        <name>getElementAncestor</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ancestor</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>ancestor</name>.
                                                                <name>lookupNamespaceURI</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>specifiedPrefix</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>

                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>


            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>getElementAncestor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>currentNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>currentNode</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>short</name>
                                        </type>
                                        <name>type</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>getNodeType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>type</name>
                                            ==
                                            <name><name>Node</name>.
                                                <name>ELEMENT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>parent</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getElementAncestor</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>parent</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>String</name>
                </type>
                <name>lookupNamespacePrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ElementImpl</name>
                            </type>
                            <name>el</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespace</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getNamespaceURI</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// REVISIT: if no prefix is available is it null or empty string, or</comment>
                    <comment type="line">// could be both?</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getPrefix</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr><name>namespace</name>!=<name>null</name> &amp;&amp;
                                <call>
                                    <name><name>namespace</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>namespaceURI</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>prefix</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>foundNamespace</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>el</name>.
                                                                    <name>lookupNamespaceURI</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>prefix</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>foundNamespace</name>
                                                        !=<name>null</name> &amp;&amp;
                                                        <call>
                                                            <name><name>foundNamespace</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>namespaceURI</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>prefix</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>

                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>hasAttributes</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>NamedNodeMap</name>
                                        </type>
                                        <name>map</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getAttributes</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>length</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>map</name>.
                                                        <name>getLength</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name>=
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>i</name>&lt;
                                            <name>length</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Node</name>
                                                </type>
                                                <name>attr</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>map</name>.
                                                                <name>item</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>attrPrefix</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>attr</name>.
                                                                <name>getPrefix</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>value</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>attr</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>namespace</name>
                                                =
                                                <call>
                                                    <name><name>attr</name>.
                                                        <name>getNamespaceURI</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>namespace</name>
                                                    !=<name>null</name> &amp;&amp;
                                                    <call>
                                                        <name><name>namespace</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"http://www.w3.org/2000/xmlns/"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// DOM Level 2 nodes</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>((
                                                                <call>
                                                                    <name><name>attr</name>.
                                                                        <name>getNodeName</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                .
                                                                <call>
                                                                    <name>equals</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"xmlns"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ) ||
                                                                (<name>attrPrefix</name> !=<name>null</name> &amp;&amp;
                                                                <call>
                                                                    <name><name>attrPrefix</name>.
                                                                        <name>equals</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"xmlns"</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ) &amp;&amp;
                                                                <call>
                                                                    <name><name>value</name>.
                                                                        <name>equals</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>namespaceURI</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                )
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{

                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>String</name>
                                                                        </type>
                                                                        <name>localname</name>=
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>attr</name>.
                                                                                        <name>getLocalName</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>String</name>
                                                                        </type>
                                                                        <name>foundNamespace</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>el</name>.
                                                                                        <name>lookupNamespaceURI</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>localname</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>foundNamespace</name>
                                                                            !=<name>null</name> &amp;&amp;
                                                                            <call>
                                                                                <name><name>foundNamespace</name>.
                                                                                    <name>equals</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>namespaceURI</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>localname</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>


                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>NodeImpl</name>
                            </type>
                            <name>ancestor</name> =
                            <init>
                                <expr>(<name>NodeImpl</name>)
                                    <call>
                                        <name>getElementAncestor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>ancestor</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ancestor</name>.
                                                <name>lookupNamespacePrefix</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>namespaceURI</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>el</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Tests whether two nodes are equal.
                * &lt;br&gt;This method tests for equality of nodes, not sameness (i.e.,
                * whether the two nodes are references to the same object) which can be
                * tested with &lt;code&gt;Node.isSameNode&lt;/code&gt;. All nodes that are the same
                * will also be equal, though the reverse may not be true.
                * &lt;br&gt;Two nodes are equal if and only if the following conditions are
                * satisfied: The two nodes are of the same type.The following string
                * attributes are equal: &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;localName&lt;/code&gt;,
                * &lt;code&gt;namespaceURI&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;nodeValue&lt;/code&gt;
                * , &lt;code&gt;baseURI&lt;/code&gt;. This is: they are both &lt;code&gt;null&lt;/code&gt;, or
                * they have the same length and are character for character identical.
                * The &lt;code&gt;attributes&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.
                * This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same
                * length and for each node that exists in one map there is a node that
                * exists in the other map and is equal, although not necessarily at the
                * same index.The &lt;code&gt;childNodes&lt;/code&gt; &lt;code&gt;NodeLists&lt;/code&gt; are
                * equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the
                * same length and contain equal nodes at the same index. This is true
                * for &lt;code&gt;Attr&lt;/code&gt; nodes as for any other type of node. Note that
                * normalization can affect equality; to avoid this, nodes should be
                * normalized before being compared.
                * &lt;br&gt;For two &lt;code&gt;DocumentType&lt;/code&gt; nodes to be equal, the following
                * conditions must also be satisfied: The following string attributes
                * are equal: &lt;code&gt;publicId&lt;/code&gt;, &lt;code&gt;systemId&lt;/code&gt;,
                * &lt;code&gt;internalSubset&lt;/code&gt;.The &lt;code&gt;entities&lt;/code&gt;
                * &lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.The &lt;code&gt;notations&lt;/code&gt;
                * &lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.
                * &lt;br&gt;On the other hand, the following do not affect equality: the
                * &lt;code&gt;ownerDocument&lt;/code&gt; attribute, the &lt;code&gt;specified&lt;/code&gt;
                * attribute for &lt;code&gt;Attr&lt;/code&gt; nodes, the
                * &lt;code&gt;isWhitespaceInElementContent&lt;/code&gt; attribute for
                * &lt;code&gt;Text&lt;/code&gt; nodes, as well as any user data or event listeners
                * registered on the nodes.
                * @param arg The node to compare equality with.
                * @param deep If &lt;code&gt;true&lt;/code&gt;, recursively compare the subtrees; if
                * &lt;code&gt;false&lt;/code&gt;, compare only the nodes themselves (and its
                * attributes, if it is an &lt;code&gt;Element&lt;/code&gt;).
                * @return If the nodes, and possibly subtrees are equal,
                * &lt;code&gt;true&lt;/code&gt; otherwise &lt;code&gt;false&lt;/code&gt;.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEqualNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>arg</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>arg</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <call>
                                    <name>getNodeType</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// in theory nodeName can't be null but better be careful</comment>
                    <comment type="line">// who knows what other implementations may be doing?...</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getNodeName</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>arg</name>.
                                                    <name>getNodeName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>getNodeName</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>arg</name>.
                                                                <name>getNodeName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLocalName</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>arg</name>.
                                                    <name>getLocalName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>getLocalName</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>arg</name>.
                                                                <name>getLocalName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getNamespaceURI</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>arg</name>.
                                                    <name>getNamespaceURI</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>getNamespaceURI</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>arg</name>.
                                                                <name>getNamespaceURI</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getPrefix</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>arg</name>.
                                                    <name>getPrefix</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>getPrefix</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>arg</name>.
                                                                <name>getPrefix</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getNodeValue</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>arg</name>.
                                                    <name>getNodeValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>getNodeValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>arg</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>


                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getFeature</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>feature</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// we don't have any alternate node, either this node does the job</comment>
                    <comment type="line">// or we don't have anything that does</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>isSupported</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>feature</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>version</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? <name>this</name> :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Associate an object to a key on this node. The object can later be
                * retrieved from this node by calling &lt;code&gt;getUserData&lt;/code&gt; with the
                * same key.
                * @param key The key to associate the object to.
                * @param data The object to associate to the given key, or
                * &lt;code&gt;null&lt;/code&gt; to remove any existing association to that key.
                * @param handler The handler to associate to that key, or
                * &lt;code&gt;null&lt;/code&gt;.
                * @return Returns the &lt;code&gt;DOMObject&lt;/code&gt; previously associated to
                * the given key on this node, or &lt;code&gt;null&lt;/code&gt; if there was none.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>setUserData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>UserDataHandler</name>
                            </type>
                            <name>handler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>setUserData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>handler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Retrieves the object associated to a key on a this node. The object
                * must first have been set to this node by calling
                * &lt;code&gt;setUserData&lt;/code&gt; with the same key.
                * @param key The key the object is associated to.
                * @return Returns the &lt;code&gt;DOMObject&lt;/code&gt; associated to the given key
                * on this node, or &lt;code&gt;null&lt;/code&gt; if there was none.
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getUserData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getUserData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Hashtable</name>
                </type>
                <name>getUserDataRecord</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getUserDataRecord</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * NON-DOM: PR-DOM-Level-1-19980818 mentions readonly nodes in conjunction
                * with Entities, but provides no API to support this.
                * &lt;P&gt;
                * Most DOM users should not touch this method. Its anticpated use
                * is during construction of EntityRefernces, where it will be used to
                * lock the contents replicated from Entity so they can't be casually
                * altered. It _could_ be published as a DOM extension, if desired.
                * &lt;P&gt;
                * Note: since we never have any children deep is meaningless here,
                * ParentNode overrides this behavior.
                * @see ParentNode
                *
                * @param readOnly True or false as desired.
                * @param deep If true, children are also toggled. Note that this will
                * not change the state of an EntityReference or its children,
                * which are always read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setReadOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>readOnly</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>isReadOnly</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>readOnly</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// setReadOnly(boolean,boolean)</comment>

            <comment type="javadoc">/**
                * NON-DOM: Returns true if this node is read-only. This is a
                * shallow check.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getReadOnly</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>isReadOnly</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getReadOnly():boolean</comment>

            <comment type="javadoc">/**
                * NON-DOM: As an alternative to subclassing the DOM, this implementation
                * has been extended with the ability to attach an object to each node.
                * (If you need multiple objects, you can attach a collection such as a
                * vector or hashtable, then attach your application information to that.)
                * &lt;p&gt;&lt;b&gt;Important Note:&lt;/b&gt; You are responsible for removing references
                * to your data on nodes that are no longer used. Failure to do so will
                * prevent the nodes, your data is attached to, to be garbage collected
                * until the whole document is.
                *
                * @param data the object to store or null to remove any existing reference
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUserData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>setUserData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * NON-DOM:
                * Returns the user data associated to this node.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getUserData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getUserData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Protected methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Denotes that this node has changed.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>changed</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// we do not actually store this information on every node, we only</comment>
                    <comment type="line">// have a global indicator on the Document. Doing otherwise cost us too
                    </comment>
                    <comment type="line">// much for little gain.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>changed</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of changes to this node.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>int</name>
                </type>
                <name>changes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// we do not actually store this information on every node, we only</comment>
                    <comment type="line">// have a global indicator on the Document. Doing otherwise cost us too
                    </comment>
                    <comment type="line">// much for little gain.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>ownerDocument</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>changes</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Override this method in subclass to hook in efficient
                * internal data structure.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>synchronizeData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// By default just change the flag to avoid calling this method again</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncData</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * For non-child nodes, the node which "points" to this node.
                * For example, the owning element for an attribute
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Node</name>
                </type>
                <name>getContainer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="block">/*
                * Flags setters and getters
                */
            </comment>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isReadOnly</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>READONLY</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isReadOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>READONLY</name> : <name>flags</name> &amp; ~
                                            <name>READONLY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>needsSyncData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>SYNCDATA</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>needsSyncData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>SYNCDATA</name> : <name>flags</name> &amp; ~
                                            <name>SYNCDATA</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>needsSyncChildren</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>SYNCCHILDREN</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>needsSyncChildren</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>SYNCCHILDREN</name> : <name>flags</name> &amp;
                                            ~
                                            <name>SYNCCHILDREN</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isOwned</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>OWNED</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isOwned</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>OWNED</name> : <name>flags</name> &amp; ~
                                            <name>OWNED</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isFirstChild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>FIRSTCHILD</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isFirstChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>FIRSTCHILD</name> : <name>flags</name> &amp; ~
                                            <name>FIRSTCHILD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isSpecified</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>SPECIFIED</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isSpecified</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>SPECIFIED</name> : <name>flags</name> &amp; ~
                                            <name>SPECIFIED</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// inconsistent name to avoid clash with public method on TextImpl</comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>internalIsIgnorableWhitespace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>IGNORABLEWS</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isIgnorableWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>IGNORABLEWS</name> : <name>flags</name> &amp; ~
                                            <name>IGNORABLEWS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>hasStringValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>HASSTRING</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>hasStringValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>HASSTRING</name> : <name>flags</name> &amp; ~
                                            <name>HASSTRING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isNormalized</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>NORMALIZED</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isNormalized</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// See if flag should propagate to parent.</comment>
                    <if>if
                        <condition>(
                            <expr>!<name>value</name> &amp;&amp;
                                <call>
                                    <name>isNormalized</name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp; <name>ownerNode</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ownerNode</name>.
                                                <name>isNormalized</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ?  <name>flags</name> | <name>NORMALIZED</name> : <name>flags</name> &amp; ~
                                            <name>NORMALIZED</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isIdAttribute</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>flags</name> &amp; <name>ID</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>isIdAttribute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>flags</name>
                            =
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            ? <name>flags</name> | <name>ID</name> : <name>flags</name> &amp; ~
                                            <name>ID</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Object methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** NON-DOM method for debugging convenience. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"["+
                            <call>
                                <name>getNodeName</name>
                                <argument_list>()</argument_list>
                            </call>
                            +": "+
                            <call>
                                <name>getNodeValue</name>
                                <argument_list>()</argument_list>
                            </call>
                            +"]"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Serialization methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Serialize object. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>writeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// synchronize data</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncData</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeData</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// write object</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>defaultWriteObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// writeObject(ObjectOutputStream)</comment>

            }
        </block>
    </class>
    <comment type="line">// class NodeImpl</comment>
</unit>
