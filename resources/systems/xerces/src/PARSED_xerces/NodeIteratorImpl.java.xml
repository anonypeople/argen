<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\NodeIteratorImpl.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>traversal</name>.
            <name>NodeFilter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>traversal</name>.
            <name>NodeIterator</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/** DefaultNodeIterator implements a NodeIterator, which iterates a
        * DOM tree in the expected depth first way.
        *
        * &lt;p&gt;The whatToShow and filter functionality is implemented as expected.
        *
        * &lt;p&gt;This class also has method removeNode to enable iterator "fix-up"
        * on DOM remove. It is expected that the DOM implementation call removeNode
        * right before the actual DOM transformation. If not called by the DOM,
        * the client could call it before doing the removal.
        *
        * @xerces.internal
        *
        * @version $Id: NodeIteratorImpl.java,v 1.13 2004/10/05 17:12:49 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>NodeIteratorImpl</name>
        <super>
            <implements>implements
                <name>NodeIterator</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** The DocumentImpl which created this iterator, so it can be detached. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>DocumentImpl</name>
                    </type>
                    <name>fDocument</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The root. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Node</name>
                    </type>
                    <name>fRoot</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The whatToShow mask. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>fWhatToShow</name> =
                    <init>
                        <expr>
                            <name><name>NodeFilter</name>.
                                <name>SHOW_ALL</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The NodeFilter reference. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>NodeFilter</name>
                    </type>
                    <name>fNodeFilter</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** If detach is called, the fDetach flag is true, otherwise flase. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fDetach</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Iterator state - current node and direction.</comment>
            <comment type="line">//</comment>
            <comment type="line">// Note: The current node and direction are sufficient to implement</comment>
            <comment type="line">// the desired behaviour of the current pointer being _between_</comment>
            <comment type="line">// two nodes. The fCurrentNode is actually the last node returned,</comment>
            <comment type="line">// and the</comment>
            <comment type="line">// direction is whether the pointer is in front or behind this node.</comment>
            <comment type="line">// (usually akin to whether the node was returned via nextNode())</comment>
            <comment type="line">// (eg fForward = true) or previousNode() (eg fForward = false).</comment>
            <comment type="line">// Note also, if removing a Node, the fCurrentNode</comment>
            <comment type="line">// can be placed on a Node which would not pass filters.</comment>

            <comment type="javadoc">/** The last Node returned. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Node</name>
                    </type>
                    <name>fCurrentNode</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The direction of the iterator on the fCurrentNode.
                * &lt;pre&gt;
                * nextNode() == fForward = true;
                * previousNode() == fForward = false;
                * &lt;/pre&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fForward</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** When TRUE, the children of entites references are returned in the iterator. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fEntityReferenceExpansion</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructor</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Public constructor */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>NodeIteratorImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DocumentImpl</name>
                            </type>
                            <name>document</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>whatToShow</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>NodeFilter</name>
                            </type>
                            <name>nodeFilter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>entityReferenceExpansion</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDocument</name>
                            =
                            <name>document</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fRoot</name>
                            =
                            <name>root</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fCurrentNode</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fWhatToShow</name>
                            =
                            <name>whatToShow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fNodeFilter</name>
                            =
                            <name>nodeFilter</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEntityReferenceExpansion</name>
                            =
                            <name>entityReferenceExpansion</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getRoot</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fRoot</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Implementation Note: Note that the iterator looks at whatToShow</comment>
            <comment type="line">// and filter values at each call, and therefore one _could_ add</comment>
            <comment type="line">// setters for these values and alter them while iterating!</comment>

            <comment type="javadoc">/** Return the whatToShow value */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getWhatToShow</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fWhatToShow</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the filter */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>NodeFilter</name>
                </type>
                <name>getFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fNodeFilter</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return whether children entity references are included in the iterator. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getExpandEntityReferences</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fEntityReferenceExpansion</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the next Node in the Iterator. The node is the next node in
                * depth-first order which also passes the filter, and whatToShow.
                * If there is no next node which passes these criteria, then return null.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>nextNode</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if root is null there is no next node.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fRoot</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>nextNode</name> =
                            <init>
                                <expr>
                                    <name>fCurrentNode</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>accepted</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the next node has not been accepted.</comment>

                    <label><name>accepted_loop</name>:
                    </label>
                    <while>while
                        <condition>(
                            <expr>!
                                <name>accepted</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <comment type="line">// if last direction is not forward, repeat node.</comment>
                            <if>if
                                <condition>(
                                    <expr>!<name>fForward</name> &amp;&amp; <name>nextNode</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">
                                            //System.out.println("nextNode():!fForward:"+fCurrentNode.getNodeName());
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>nextNode</name>
                                                =
                                                <name>fCurrentNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// else get the next node via depth-first</comment>
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>fEntityReferenceExpansion</name>
                                                    &amp;&amp; <name>nextNode</name> !=
                                                    <name>null</name>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>nextNode</name>.
                                                            <name>getNodeType</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_REFERENCE_NODE</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>nextNode</name>
                                                            =
                                                            <call>
                                                                <name>nextNode</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>nextNode</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>false</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>nextNode</name>
                                                            =
                                                            <call>
                                                                <name>nextNode</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>nextNode</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>true</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>fForward</name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">//REVIST: should direction be set forward before null check?</comment>

                            <comment type="line">// nothing in the list. return null.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>nextNode</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>

                            <comment type="line">// does node pass the filters and whatToShow?</comment>
                            <expr_stmt>
                                <expr>
                                    <name>accepted</name>
                                    =
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>nextNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>accepted</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if so, then the node is the current node.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>fCurrentNode</name>
                                                =
                                                <name>nextNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>fCurrentNode</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <continue>continue accepted_loop;</continue>
                                </else>
                            </if>

                            }
                        </block>
                    </while>
                    <comment type="line">// while (!accepted) {</comment>

                    <comment type="line">// no nodes, or no accepted nodes.</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/** Return the previous Node in the Iterator. The node is the next node in
                * _backwards_ depth-first order which also passes the filter, and whatToShow.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>previousNode</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if the root is null, or the current node is null, return null.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fRoot</name>
                                == <name>null</name> || <name>fCurrentNode</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>previousNode</name> =
                            <init>
                                <expr>
                                    <name>fCurrentNode</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>accepted</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <label><name>accepted_loop</name>:
                    </label>
                    <while>while
                        <condition>(
                            <expr>!
                                <name>accepted</name>
                            </expr>
                            )
                        </condition>
                        <block>{

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>fForward</name>
                                        &amp;&amp; <name>previousNode</name> !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">//repeat last node.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>previousNode</name>
                                                =
                                                <name>fCurrentNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// get previous node in backwards depth first order.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>previousNode</name>
                                                =
                                                <call>
                                                    <name>previousNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>previousNode</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>

                            <comment type="line">// we are going backwards</comment>
                            <expr_stmt>
                                <expr>
                                    <name>fForward</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// if the new previous node is null, we're at head or past the root,
                            </comment>
                            <comment type="line">// so return null.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>previousNode</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>

                            <comment type="line">// check if node passes filters and whatToShow.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>accepted</name>
                                    =
                                    <call>
                                        <name>acceptNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>previousNode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>accepted</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if accepted, update the current node, and return it.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>fCurrentNode</name>
                                                =
                                                <name>previousNode</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>fCurrentNode</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <continue>continue accepted_loop;</continue>
                                </else>
                            </if>
                            }
                        </block>
                    </while>
                    <comment type="line">// there are no nodes?</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The node is accepted if it passes the whatToShow and the filter. */</comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>acceptNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeFilter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>( <name>fWhatToShow</name> &amp; (1 &lt;&lt;
                                        <call>
                                            <name><name>node</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        -1)) != 0
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>((<name>fWhatToShow</name> &amp; (1 &lt;&lt;
                                        <call>
                                            <name><name>node</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        -1)) != 0 )
                                        &amp;&amp;
                                        <call>
                                            <name><name>fNodeFilter</name>.
                                                <name>acceptNode</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ==
                                        <name><name>NodeFilter</name>.
                                            <name>FILTER_ACCEPT</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Return node, if matches or any parent if matches. */</comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>matchNodeOrParent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Additions and removals in the underlying data structure may occur</comment>
                    <comment type="line">// before any iterations, and in this case the reference_node is null.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fCurrentNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// check if the removed node is an _ancestor_ of the</comment>
                    <comment type="line">// reference node</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>fCurrentNode</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>n</name>
                                !=
                                <name>fRoot</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>n</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The method nextNode(Node, boolean) returns the next node
                * from the actual DOM tree.
                *
                * The boolean visitChildren determines whether to visit the children.
                * The result is the nextNode.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>nextNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>visitChildren</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>fRoot</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// only check children if we visit children.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>visitChildren</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//if hasChildren, return 1st child.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>node</name>.
                                                    <name>hasChildNodes</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>result</name>
                                                    =
                                                    <call>
                                                        <name><name>node</name>.
                                                            <name>getFirstChild</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fRoot</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//if Root has no kids</comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if hasSibling, return sibling</comment>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            =
                            <call>
                                <name><name>node</name>.
                                    <name>getNextSibling</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>result</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>


                    <comment type="line">// return parent's 1st sibling.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>parent</name>
                                != <name>null</name> &amp;&amp; <name>parent</name> !=
                                <name>fRoot</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>result</name>
                                    =
                                    <call>
                                        <name><name>parent</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>result</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>parent</name>
                                                =
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>getParentNode</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>

                            }
                        </block>
                    </while>
                    <comment type="line">// while (parent != null &amp;&amp; parent != fRoot) {</comment>

                    <comment type="line">// end of list, return null</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The method previousNode(Node) returns the previous node
                * from the actual DOM tree.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>previousNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// if we're at the root, return null.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fRoot</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// get sibling</comment>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            =
                            <call>
                                <name><name>node</name>.
                                    <name>getPreviousSibling</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">//if 1st sibling, return parent</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        =
                                        <call>
                                            <name><name>node</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if sibling has children, keep getting last child of child.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>result</name>.
                                        <name>hasChildNodes</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp; !(!
                                <name>fEntityReferenceExpansion</name>
                                &amp;&amp; <name>result</name> !=
                                <name>null</name>
                                &amp;&amp;
                                <call>
                                    <name><name>result</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>ENTITY_REFERENCE_NODE</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>

                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>result</name>.
                                                    <name>hasChildNodes</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>result</name>
                                                =
                                                <call>
                                                    <name><name>result</name>.
                                                        <name>getLastChild</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Fix-up the iterator on a remove. Called by DOM or otherwise,
                * before an actual DOM remove.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// Implementation note: Fix-up means setting the current node properly
                    </comment>
                    <comment type="line">// after a remove.</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>deleted</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>matchNodeOrParent</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>node</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>deleted</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>fForward</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fCurrentNode</name>
                                        =
                                        <call>
                                            <name>previousNode</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>deleted</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <comment type="line">// if (!fForward)</comment>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Node</name>
                                        </type>
                                        <name>next</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>nextNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>deleted</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr><name>next</name>!=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// normal case: there _are_ nodes following this in the
                                                iterator.
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                    =
                                                    <name>next</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// the last node in the iterator is to be removed,
                                            </comment>
                                            <comment type="line">// so we set the current node to be the previous one.
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fCurrentNode</name>
                                                    =
                                                    <call>
                                                        <name>previousNode</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>deleted</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fForward</name>
                                                    = true
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>

                                }
                            </block>
                        </else>
                    </if>

                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>detach</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDetach</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fDocument</name>.
                                    <name>removeNodeIterator</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
