<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xpath\regex\Op.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xpath</name>.
            <name>regex</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * @xerces.internal
        *
        * @version $Id: Op.java,v 1.5 2004/10/04 22:07:40 mrglavas Exp $
        */
    </comment>
    <class>class <name>Op</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DOT</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CHAR</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Single character</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>RANGE</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// [a-zA-Z]</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NRANGE</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// [^a-zA-Z]</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>ANCHOR</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// ^ $ ...</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STRING</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// literal String</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLOSURE</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X*</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NONGREEDYCLOSURE</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X*?</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>QUESTION</name> =
                    <init>
                        <expr>9</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X?</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NONGREEDYQUESTION</name> =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X??</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNION</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// X|Y</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CAPTURE</name> =
                    <init>
                        <expr>15</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// ( and )</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BACKREFERENCE</name> =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// \1 \2 ...</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LOOKAHEAD</name> =
                    <init>
                        <expr>20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?=...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NEGATIVELOOKAHEAD</name> =
                    <init>
                        <expr>21</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?!...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LOOKBEHIND</name> =
                    <init>
                        <expr>22</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?&lt;=...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NEGATIVELOOKBEHIND</name> =
                    <init>
                        <expr>23</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?&lt;!...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INDEPENDENT</name> =
                    <init>
                        <expr>24</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?&gt;...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MODIFIER</name> =
                    <init>
                        <expr>25</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?ims-ims:...)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CONDITION</name> =
                    <init>
                        <expr>26</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// (?(..)yes|no)</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>nofinstances</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>COUNT</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>Op</name>
                </type>
                <name>createDot</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Op</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>DOT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>CharOp</name>
                </type>
                <name>createChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>CHAR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>CharOp</name>
                </type>
                <name>createAnchor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>ANCHOR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>CharOp</name>
                </type>
                <name>createCapture</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>number</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CharOp</name>
                            </type>
                            <name>op</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>CharOp</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Op</name>.
                                                        <name>CAPTURE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>number</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>op</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>op</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>UnionOp</name>
                </type>
                <name>createUnion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <comment type="line">//System.err.println("Creates UnionOp");</comment>
                    <return>return
                        <expr>new
                            <call>
                                <name>UnionOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>UNION</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ChildOp</name>
                </type>
                <name>createClosure</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>id</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>ModifierOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>CLOSURE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>id</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ChildOp</name>
                </type>
                <name>createNonGreedyClosure</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>ChildOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>NONGREEDYCLOSURE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ChildOp</name>
                </type>
                <name>createQuestion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>nongreedy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>ChildOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nongreedy</name>
                                            ?
                                            <name><name>Op</name>.
                                                <name>NONGREEDYQUESTION</name>
                                            </name>
                                            :
                                            <name><name>Op</name>.
                                                <name>QUESTION</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>RangeOp</name>
                </type>
                <name>createRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>RangeOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>RANGE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ChildOp</name>
                </type>
                <name>createLook</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>branch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildOp</name>
                            </type>
                            <name>op</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ChildOp</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>op</name>.
                                    <name>setChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>branch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>op</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>op</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>CharOp</name>
                </type>
                <name>createBackReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refno</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>BACKREFERENCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>refno</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>StringOp</name>
                </type>
                <name>createString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>literal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>StringOp</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Op</name>.
                                                <name>STRING</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>literal</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ChildOp</name>
                </type>
                <name>createIndependent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>branch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildOp</name>
                            </type>
                            <name>op</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ChildOp</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Op</name>.
                                                        <name>INDEPENDENT</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>op</name>.
                                    <name>setChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>branch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>op</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>op</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ModifierOp</name>
                </type>
                <name>createModifier</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>branch</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>add</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>mask</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ModifierOp</name>
                            </type>
                            <name>op</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ModifierOp</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Op</name>.
                                                        <name>MODIFIER</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>add</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>mask</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>op</name>.
                                    <name>setChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>branch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>op</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>op</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ConditionOp</name>
                </type>
                <name>createCondition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ref</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>conditionflow</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>yesflow</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>noflow</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Op</name>.
                                    <name>COUNT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name><name>Op</name>.
                                        <name>nofinstances</name>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ConditionOp</name>
                            </type>
                            <name>op</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ConditionOp</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Op</name>.
                                                        <name>CONDITION</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ref</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>conditionflow</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>yesflow</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>noflow</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>op</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>op</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>type</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Op</name>
                    </type>
                    <name>next</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>protected</specifier>
                <name>Op</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>type</name>
                            </name>
                            =
                            <name>type</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// for UNION</comment>
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Op</name>
                </type>
                <name>elementAt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// for UNIoN</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Internal Error: type="+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Op</name>
                </type>
                <name>getChild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// for CLOSURE, QUESTION</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Internal Error: type="+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <comment type="line">// ModifierOp</comment>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// CharOp for CHAR, BACKREFERENCE, CAPTURE, ANCHOR,</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Internal Error: type="+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>getData2</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// ModifierOp</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Internal Error: type="+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>RangeToken</name>
                </type>
                <name>getToken</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// RANGE, NRANGE</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Internal Error: type="+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>String</name>
                </type>
                <name>getString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// STRING</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Internal Error: type="+
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>CharOp</name>
                <super>
                    <extends>extends
                        <name>Op</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>charData</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>CharOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>data</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>charData</name>
                                    </name>
                                    =
                                    <name>data</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getData</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>charData</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>UnionOp</name>
                <super>
                    <extends>extends
                        <name>Op</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>branches</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>UnionOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>branches</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>void</name>
                        </type>
                        <name>addElement</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Op</name>
                                    </type>
                                    <name>op</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>branches</name>.
                                            <name>addElement</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>op</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>size</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>branches</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Op</name>
                        </type>
                        <name>elementAt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>Op</name>)
                                    <call>
                                        <name><name>this</name>.<name>branches</name>.
                                            <name>elementAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>ChildOp</name>
                <super>
                    <extends>extends
                        <name>Op</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>ChildOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>void</name>
                        </type>
                        <name>setChild</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Op</name>
                                    </type>
                                    <name>child</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                    =
                                    <name>child</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>Op</name>
                        </type>
                        <name>getChild</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>child</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>ModifierOp</name>
                <super>
                    <extends>extends
                        <name>ChildOp</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>v1</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>v2</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>ModifierOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>v1</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>v2</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>v1</name>
                                    </name>
                                    =
                                    <name>v1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>v2</name>
                                    </name>
                                    =
                                    <name>v2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getData</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>v1</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>getData2</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>v2</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>RangeOp</name>
                <super>
                    <extends>extends
                        <name>Op</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>RangeOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Token</name>
                                    </type>
                                    <name>tok</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>tok</name>
                                    </name>
                                    =
                                    <name>tok</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>RangeToken</name>
                        </type>
                        <name>getToken</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>RangeToken</name>)
                                    <name><name>this</name>.
                                        <name>tok</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>StringOp</name>
                <super>
                    <extends>extends
                        <name>Op</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>StringOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>literal</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>string</name>
                                    </name>
                                    =
                                    <name>literal</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <function>
                        <type>
                            <name>String</name>
                        </type>
                        <name>getString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>this</name>.
                                        <name>string</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            <comment type="line">// ================================================================</comment>
            <class>
                <specifier>static</specifier>
                class <name>ConditionOp</name>
                <super>
                    <extends>extends
                        <name>Op</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>refNumber</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>condition</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>yes</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Op</name>
                            </type>
                            <name>no</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>ConditionOp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>refno</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Op</name>
                                    </type>
                                    <name>conditionflow</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Op</name>
                                    </type>
                                    <name>yesflow</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Op</name>
                                    </type>
                                    <name>noflow</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>refNumber</name>
                                    </name>
                                    =
                                    <name>refno</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>condition</name>
                                    </name>
                                    =
                                    <name>conditionflow</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>yes</name>
                                    </name>
                                    =
                                    <name>yesflow</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>no</name>
                                    </name>
                                    =
                                    <name>noflow</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
