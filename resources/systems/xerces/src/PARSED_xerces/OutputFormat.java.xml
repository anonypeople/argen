<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\OutputFormat.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <comment type="line">// Aug 21, 2000:</comment>
    <comment type="line">// Added ability to omit DOCTYPE declaration.</comment>
    <comment type="line">// Reported by Lars Martin &lt;lars@smb-tec.com&gt;</comment>
    <comment type="line">// Aug 25, 2000:</comment>
    <comment type="line">// Added ability to omit comments.</comment>
    <comment type="line">// Contributed by Anupam Bagchi &lt;abagchi@jtcsv.com&gt;</comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>UnsupportedEncodingException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Document</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DocumentType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>html</name>.
            <name>HTMLDocument</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * Specifies an output format to control the serializer. Based on the
        * XSLT specification for output format, plus additional parameters.
        * Used to select the suitable serializer and determine how the
        * document should be formatted on output.
        * &lt;p&gt;
        * The two interesting constructors are:
        * &lt;ul&gt;
        * &lt;li&gt;{@link #OutputFormat(String,String,boolean)} creates a format
        * for the specified method (XML, HTML, Text, etc), encoding and indentation
        * &lt;li&gt;{@link #OutputFormat(Document,String,boolean)} creates a format
        * compatible with the document type (XML, HTML, Text, etc), encoding and
        * indentation
        * &lt;/ul&gt;
        *
        *
        * @version $Revision: 1.21 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        * &lt;a href="mailto:visco@intalio.com"&gt;Keith Visco&lt;/a&gt;
        * @see Serializer
        * @see Method
        * @see LineSeparator
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>OutputFormat</name>
        <block>{


            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class
                <name>DTD</name>
                <block>{

                    <comment type="javadoc">/**
                        * Public identifier for HTML 4.01 (Strict) document type.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>HTMLPublicId</name> =
                            <init>
                                <expr>"-//W3C//DTD HTML 4.01//EN"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * System identifier for HTML 4.01 (Strict) document type.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>HTMLSystemId</name> =
                            <init>
                                <expr>"http://www.w3.org/TR/html4/strict.dtd"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Public identifier for XHTML 1.0 (Strict) document type.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>XHTMLPublicId</name> =
                            <init>
                                <expr>"-//W3C//DTD XHTML 1.0 Strict//EN"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * System identifier for XHTML 1.0 (Strict) document type.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>XHTMLSystemId</name> =
                            <init>
                                <expr>"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    }
                </block>
            </class>


            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class
                <name>Defaults</name>
                <block>{

                    <comment type="javadoc">/**
                        * If indentation is turned on, the default identation
                        * level is 4.
                        *
                        * @see #setIndenting(boolean)
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>Indent</name> =
                            <init>
                                <expr>4</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * The default encoding for Web documents it UTF-8.
                        *
                        * @see #getEncoding()
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>Encoding</name> =
                            <init>
                                <expr>"UTF-8"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * The default line width at which to break long lines
                        * when identing. This is set to 72.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>public</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>LineWidth</name> =
                            <init>
                                <expr>72</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    }
                </block>
            </class>


            <comment type="javadoc">/**
                * Holds the output method specified for this document,
                * or null if no method was specified.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_method</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Specifies the version of the output method.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_version</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The indentation level, or zero if no indentation
                * was requested.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_indent</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The encoding to use, if an input stream is used.
                * The default is always UTF-8.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_encoding</name> =
                    <init>
                        <expr>
                            <name><name>Defaults</name>.
                                <name>Encoding</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The EncodingInfo instance for _encoding.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>EncodingInfo</name>
                    </type>
                    <name>_encodingInfo</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// whether java names for encodings are permitted</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_allowJavaNames</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The specified media type or null.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_mediaType</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The specified document type system identifier, or null.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_doctypeSystem</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The specified document type public identifier, or null.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_doctypePublic</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Ture if the XML declaration should be ommited;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_omitXmlDeclaration</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Ture if the DOCTYPE declaration should be ommited;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_omitDoctype</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Ture if comments should be ommited;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_omitComments</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Ture if the comments should be ommited;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_stripComments</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if the document type should be marked as standalone.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_standalone</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * List of element tag names whose text node children must
                * be output as CDATA.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>_cdataElements</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * List of element tag names whose text node children must
                * be output unescaped.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>_nonEscapingElements</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The selected line separator.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>_lineSeparator</name> =
                    <init>
                        <expr>
                            <name><name>LineSeparator</name>.
                                <name>Web</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The line width at which to wrap long lines when indenting.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_lineWidth</name> =
                    <init>
                        <expr>
                            <name><name>Defaults</name>.
                                <name>LineWidth</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True if spaces should be preserved in elements that do not
                * specify otherwise, or specify the default behavior.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_preserve</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** If true, an empty string valued attribute is output as "". If false and
                * and we are using the HTMLSerializer, then only the attribute name is
                * serialized. Defaults to false for backwards compatibility.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>_preserveEmptyAttributes</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs a new output format with the default values.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>OutputFormat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Constructs a new output format with the default values for
                * the specified method and encoding. If &lt;tt&gt;indent&lt;/tt&gt;
                * is true, the document will be pretty printed with the default
                * indentation level and default line wrapping.
                *
                * @param method The specified output method
                * @param encoding The specified encoding
                * @param indenting True for pretty printing
                * @see #setEncoding
                * @see #setIndenting
                * @see #setMethod
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>OutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>indenting</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>method</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setEncoding</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>encoding</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setIndenting</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>indenting</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Constructs a new output format with the proper method,
                * document type identifiers and media type for the specified
                * document.
                *
                * @param doc The document to output
                * @see #whichMethod
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>OutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>whichMethod</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>doc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDoctype</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>whichDoctypePublic</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>doc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>whichDoctypeSystem</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>doc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setMediaType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>whichMediaType</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>getMethod</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Constructs a new output format with the proper method,
                * document type identifiers and media type for the specified
                * document, and with the specified encoding. If &lt;tt&gt;indent&lt;/tt&gt;
                * is true, the document will be pretty printed with the default
                * indentation level and default line wrapping.
                *
                * @param doc The document to output
                * @param encoding The specified encoding
                * @param indenting True for pretty printing
                * @see #setEncoding
                * @see #setIndenting
                * @see #whichMethod
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>OutputFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>indenting</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>doc</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setEncoding</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>encoding</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setIndenting</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>indenting</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Returns the method specified for this output format.
                * Typically the method will be &lt;tt&gt;xml&lt;/tt&gt;, &lt;tt&gt;html&lt;/tt&gt;
                * or &lt;tt&gt;text&lt;/tt&gt;, but it might be other values.
                * If no method was specified, null will be returned
                * and the most suitable method will be determined for
                * the document by calling {@link #whichMethod}.
                *
                * @return The specified output method, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getMethod</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_method</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the method for this output format.
                *
                * @see #getMethod
                * @param method The output method, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_method</name>
                            =
                            <name>method</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the version for this output method.
                * If no version was specified, will return null
                * and the default version number will be used.
                * If the serializerr does not support that particular
                * version, it should default to a supported version.
                *
                * @return The specified method version, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getVersion</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_version</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the version for this output method.
                * For XML the value would be "1.0", for HTML
                * it would be "4.0".
                *
                * @see #getVersion
                * @param version The output method version, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setVersion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_version</name>
                            =
                            <name>version</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the indentation specified. If no indentation
                * was specified, zero is returned and the document
                * should not be indented.
                *
                * @return The indentation or zero
                * @see #setIndenting
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getIndent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_indent</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if indentation was specified.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getIndenting</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>( <name>_indent</name> &gt; 0 )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the indentation. The document will not be
                * indented if the indentation is set to zero.
                * Calling {@link #setIndenting} will reset this
                * value to zero (off) or the default (on).
                *
                * @param indent The indentation, or zero
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIndent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>indent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>indent</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>_indent</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <name>_indent</name>
                                    =
                                    <name>indent</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the indentation on and off. When set on, the default
                * indentation level and default line wrapping is used
                * (see {@link Defaults#Indent} and {@link Defaults#LineWidth}).
                * To specify a different indentation level or line wrapping,
                * use {@link #setIndent} and {@link #setLineWidth}.
                *
                * @param on True if indentation should be on
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setIndenting</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>on</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>on</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>_indent</name>
                                        =
                                        <name><name>Defaults</name>.
                                            <name>Indent</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_lineWidth</name>
                                        =
                                        <name><name>Defaults</name>.
                                            <name>LineWidth</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>_indent</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_lineWidth</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the specified encoding. If no encoding was
                * specified, the default is always "UTF-8".
                *
                * @return The encoding
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getEncoding</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_encoding</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the encoding for this output method. If no
                * encoding was specified, the default is always "UTF-8".
                * Make sure the encoding is compatible with the one
                * used by the {@link java.io.Writer}.
                *
                * @see #getEncoding
                * @param encoding The encoding, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEncoding</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_encoding</name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_encodingInfo</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the encoding for this output method with an &lt;code&gt;EncodingInfo&lt;/code&gt;
                * instance.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEncoding</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>EncodingInfo</name>
                            </type>
                            <name>encInfo</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_encoding</name>
                            =
                            <call>
                                <name><name>encInfo</name>.
                                    <name>getIANAName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_encodingInfo</name>
                            =
                            <name>encInfo</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an &lt;code&gt;EncodingInfo&lt;code&gt; instance for the encoding.
                *
                * @see #setEncoding
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EncodingInfo</name>
                </type>
                <name>getEncodingInfo</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>UnsupportedEncodingException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>_encodingInfo</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>_encodingInfo</name>
                                    =
                                    <call>
                                        <name><name>Encodings</name>.
                                            <name>getEncodingInfo</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>_encoding</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>_allowJavaNames</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>_encodingInfo</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether java encoding names are permitted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAllowJavaNames</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allow</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_allowJavaNames</name>
                            =
                            <name>allow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether java encoding names are permitted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>setAllowJavaNames</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_allowJavaNames</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the specified media type, or null.
                * To determine the media type based on the
                * document type, use {@link #whichMediaType}.
                *
                * @return The specified media type, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getMediaType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_mediaType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the media type.
                *
                * @see #getMediaType
                * @param mediaType The specified media type
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMediaType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>mediaType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_mediaType</name>
                            =
                            <name>mediaType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the document type public and system identifiers.
                * Required only if the DOM Document or SAX events do not
                * specify the document type, and one must be present in
                * the serialized document. Any document type specified
                * by the DOM Document or SAX events will override these
                * values.
                *
                * @param publicId The public identifier, or null
                * @param systemId The system identifier, or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDoctype</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>publicId</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>systemId</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_doctypePublic</name>
                            =
                            <name>publicId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_doctypeSystem</name>
                            =
                            <name>systemId</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the specified document type public identifier,
                * or null.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getDoctypePublic</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_doctypePublic</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the specified document type system identifier,
                * or null.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getDoctypeSystem</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_doctypeSystem</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if comments should be ommited.
                * The default is false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getOmitComments</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_omitComments</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets comment omitting on and off.
                *
                * @param omit True if comments should be ommited
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOmitComments</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>omit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_omitComments</name>
                            =
                            <name>omit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the DOCTYPE declaration should
                * be ommited. The default is false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getOmitDocumentType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_omitDoctype</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets DOCTYPE declaration omitting on and off.
                *
                * @param omit True if DOCTYPE declaration should be ommited
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOmitDocumentType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>omit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_omitDoctype</name>
                            =
                            <name>omit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the XML document declaration should
                * be ommited. The default is false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getOmitXMLDeclaration</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_omitXmlDeclaration</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets XML declaration omitting on and off.
                *
                * @param omit True if XML declaration should be ommited
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOmitXMLDeclaration</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>omit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_omitXmlDeclaration</name>
                            =
                            <name>omit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the document type is standalone.
                * The default is false.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getStandalone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_standalone</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets document DTD standalone. The public and system
                * identifiers must be null for the document to be
                * serialized as standalone.
                *
                * @param standalone True if document DTD is standalone
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStandalone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>standalone</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_standalone</name>
                            =
                            <name>standalone</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns a list of all the elements whose text node children
                * should be output as CDATA, or null if no such elements were
                * specified.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getCDataElements</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_cdataElements</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the text node children of the given elements
                * should be output as CDATA.
                *
                * @param tagName The element's tag name
                * @return True if should serialize as CDATA
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isCDataElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>_cdataElements</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <expr>
                                <name>i</name>
                                = 0
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>_cdataElements</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <if>if
                            <condition>(
                                <expr>
                                    <name>
                                        <name>_cdataElements</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>equals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <return>return <expr>true</expr>;
                                </return>
                            </then>
                        </if>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the list of elements for which text node children
                * should be output as CDATA.
                *
                * @param cdataElements List of CDATA element tag names
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setCDataElements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>cdataElements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_cdataElements</name>
                            =
                            <name>cdataElements</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns a list of all the elements whose text node children
                * should be output unescaped (no character references), or null
                * if no such elements were specified.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getNonEscapingElements</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_nonEscapingElements</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the text node children of the given elements
                * should be output unescaped.
                *
                * @param tagName The element's tag name
                * @return True if should serialize unescaped
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isNonEscapingElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tagName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>_nonEscapingElements</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <expr>
                                <name>i</name>
                                = 0
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>_nonEscapingElements</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <if>if
                            <condition>(
                                <expr>
                                    <name>
                                        <name>_nonEscapingElements</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>equals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tagName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <return>return <expr>true</expr>;
                                </return>
                            </then>
                        </if>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the list of elements for which text node children
                * should be output unescaped (no character references).
                *
                * @param nonEscapingElements List of unescaped element tag names
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNonEscapingElements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>nonEscapingElements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_nonEscapingElements</name>
                            =
                            <name>nonEscapingElements</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns a specific line separator to use. The default is the
                * Web line separator (&lt;tt&gt;\n&lt;/tt&gt;). A string is returned to
                * support double codes (CR + LF).
                *
                * @return The specified line separator
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getLineSeparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_lineSeparator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the line separator. The default is the Web line separator
                * (&lt;tt&gt;\n&lt;/tt&gt;). The machine's line separator can be obtained
                * from the system property &lt;tt&gt;line.separator&lt;/tt&gt;, but is only
                * useful if the document is edited on machines of the same type.
                * For general documents, use the Web line separator.
                *
                * @param lineSeparator The specified line separator
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLineSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>lineSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>lineSeparator</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>_lineSeparator</name>
                                    =
                                    <name><name>LineSeparator</name>.
                                        <name>Web</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <name>_lineSeparator</name>
                                    =
                                    <name>lineSeparator</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns true if the default behavior for this format is to
                * preserve spaces. All elements that do not specify otherwise
                * or specify the default behavior will be formatted based on
                * this rule. All elements that specify space preserving will
                * always preserve space.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getPreserveSpace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_preserve</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets space preserving as the default behavior. The default is
                * space stripping and all elements that do not specify otherwise
                * or use the default value will not preserve spaces.
                *
                * @param preserve True if spaces should be preserved
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreserveSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserve</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_preserve</name>
                            =
                            <name>preserve</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Return the selected line width for breaking up long lines.
                * When indenting, and only when indenting, long lines will be
                * broken at space boundaries based on this line width.
                * No line wrapping occurs if this value is zero.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLineWidth</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_lineWidth</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Sets the line width. If zero then no line wrapping will
                * occur. Calling {@link #setIndenting} will reset this
                * value to zero (off) or the default (on).
                *
                * @param lineWidth The line width to use, zero for default
                * @see #getLineWidth
                * @see #setIndenting
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLineWidth</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lineWidth</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>lineWidth</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>_lineWidth</name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <name>_lineWidth</name>
                                    =
                                    <name>lineWidth</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns the preserveEmptyAttribute flag. If flag is false, then'
                * attributes with empty string values are output as the attribute
                * name only (in HTML mode).
                * @return preserve the preserve flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getPreserveEmptyAttributes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_preserveEmptyAttributes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Sets the preserveEmptyAttribute flag. If flag is false, then'
                * attributes with empty string values are output as the attribute
                * name only (in HTML mode).
                * @param preserve the preserve flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreserveEmptyAttributes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserve</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_preserveEmptyAttributes</name>
                            =
                            <name>preserve</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the last printable character based on the selected
                * encoding. Control characters and non-printable characters
                * are always printed as character references.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>char</name>
                </type>
                <name>getLastPrintable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getEncoding</name>
                                    <argument_list>()</argument_list>
                                </call>
                                != <name>null</name> &amp;&amp;
                                (
                                <call>
                                    <name>getEncoding</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>equalsIgnoreCase</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"ASCII"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>0xFF</expr>;
                            </return>
                        </then>
                        <else>else
                            <return>return <expr>0xFFFF</expr>;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determine the output method for the specified document.
                * If the document is an instance of {@link org.w3c.dom.html.HTMLDocument}
                * then the method is said to be &lt;tt&gt;html&lt;/tt&gt;. If the root
                * element is 'html' and all text nodes preceding the root
                * element are all whitespace, then the method is said to be
                * &lt;tt&gt;html&lt;/tt&gt;. Otherwise the method is &lt;tt&gt;xml&lt;/tt&gt;.
                *
                * @param doc The document to check
                * @return The suitable method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>whichMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// If document is derived from HTMLDocument then the default</comment>
                    <comment type="line">// method is html.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>doc</name>
                                <name>instanceof</name>
                                <name>HTMLDocument</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name><name>Method</name>.
                                        <name>HTML</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Lookup the root element and the text nodes preceding it.</comment>
                    <comment type="line">// If root element is html and all text nodes contain whitespace</comment>
                    <comment type="line">// only, the method is html.</comment>

                    <comment type="line">// FIXME (SM) should we care about namespaces here?</comment>

                    <expr_stmt>
                        <expr>
                            <name>node</name>
                            =
                            <call>
                                <name><name>doc</name>.
                                    <name>getFirstChild</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// If the root element is html, the method is html.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>node</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>ELEMENT_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>node</name>.
                                                            <name>getNodeName</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>equalsIgnoreCase</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"html"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name><name>Method</name>.
                                                                <name>HTML</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>node</name>.
                                                                    <name>getNodeName</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>equalsIgnoreCase</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"root"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name><name>Method</name>.
                                                                        <name>FOP</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name><name>Method</name>.
                                                                        <name>XML</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>node</name>.
                                                        <name>getNodeType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <name><name>Node</name>.
                                                    <name>TEXT_NODE</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// If a text node preceding the root element
                                                    contains
                                                </comment>
                                                <comment type="line">// only whitespace, this might be html, otherwise
                                                    it's
                                                </comment>
                                                <comment type="line">// definitely xml.</comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>value</name>
                                                        =
                                                        <call>
                                                            <name><name>node</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <for>for (
                                                    <init>
                                                        <expr>
                                                            <name>i</name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </init>
                                                    <condition>
                                                        <expr>
                                                            <name>i</name>
                                                            &lt;
                                                            <call>
                                                                <name><name>value</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </condition>
                                                    <incr>
                                                        <expr>++
                                                            <name>i</name>
                                                        </expr>
                                                    </incr>
                                                    )
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name><name>value</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                != 0x20 &amp;&amp;
                                                                <call>
                                                                    <name><name>value</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                != 0x0A &amp;&amp;
                                                                <call>
                                                                    <name><name>value</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                != 0x09 &amp;&amp;
                                                                <call>
                                                                    <name><name>value</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                != 0x0D
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <return>return
                                                                <expr>
                                                                    <name><name>Method</name>.
                                                                        <name>XML</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                        </then>
                                                    </if>
                                                </for>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>node</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <comment type="line">// Anything else, the method is xml.</comment>
                    <return>return
                        <expr>
                            <name><name>Method</name>.
                                <name>XML</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the document type public identifier
                * specified for this document, or null.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>whichDoctypePublic</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentType</name>
                            </type>
                            <name>doctype</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="block">/* DOM Level 2 was introduced into the code base*/</comment>
                    <expr_stmt>
                        <expr>
                            <name>doctype</name>
                            =
                            <call>
                                <name><name>doc</name>.
                                    <name>getDoctype</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>doctype</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Note on catch: DOM Level 1 does not specify this method
                                </comment>
                                <comment type="line">// and the code will throw a NoSuchMethodError</comment>
                                <try>try
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>doctype</name>.
                                                        <name>getPublicId</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Error</name>
                                                </type>
                                                <name>except</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{ }</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>doc</name>
                                <name>instanceof</name>
                                <name>HTMLDocument</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name><name>DTD</name>.
                                        <name>XHTMLPublicId</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the document type system identifier
                * specified for this document, or null.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>whichDoctypeSystem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Document</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentType</name>
                            </type>
                            <name>doctype</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="block">/* DOM Level 2 was introduced into the code base*/</comment>
                    <expr_stmt>
                        <expr>
                            <name>doctype</name>
                            =
                            <call>
                                <name><name>doc</name>.
                                    <name>getDoctype</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>doctype</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Note on catch: DOM Level 1 does not specify this method
                                </comment>
                                <comment type="line">// and the code will throw a NoSuchMethodError</comment>
                                <try>try
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>doctype</name>.
                                                        <name>getSystemId</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Error</name>
                                                </type>
                                                <name>except</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{ }</block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>doc</name>
                                <name>instanceof</name>
                                <name>HTMLDocument</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name><name>DTD</name>.
                                        <name>XHTMLSystemId</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the suitable media format for a document
                * output with the specified method.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>whichMediaType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>method</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Method</name>.
                                                    <name>XML</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>"text/xml"</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>method</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Method</name>.
                                                    <name>HTML</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>"text/html"</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>method</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Method</name>.
                                                    <name>XHTML</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>"text/html"</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>method</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Method</name>.
                                                    <name>TEXT</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>"text/plain"</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>method</name>.
                                        <name>equalsIgnoreCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Method</name>.
                                                    <name>FOP</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>"application/pdf"</expr>;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            }
        </block>
    </class>

</unit>
