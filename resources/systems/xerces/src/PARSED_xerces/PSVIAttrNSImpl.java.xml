<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\PSVIAttrNSImpl.java">
    <comment type="block">/*
        * Copyright 2002-2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>NotSerializableException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.
            <name>AttributePSVI</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>xs</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * Attribute namespace implementation; stores PSVI attribute items.
        *
        * @xerces.internal
        *
        * @author Sandy Gao, IBM
        *
        * @version $Id: PSVIAttrNSImpl.java,v 1.9 2004/10/05 17:12:51 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>PSVIAttrNSImpl</name>
        <super>
            <extends>extends
                <name>AttrNSImpl</name>
            </extends>
            <implements>implements
                <name>AttributePSVI</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-3241738699421018889L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Construct an attribute node.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>PSVIAttrNSImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDocument</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>qualifiedName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>localName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDocument</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>namespaceURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>qualifiedName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>localName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct an attribute node.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>PSVIAttrNSImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDocument</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>namespaceURI</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>qualifiedName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDocument</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>namespaceURI</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>qualifiedName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/** attribute declaration */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XSAttributeDeclaration</name>
                    </type>
                    <name>fDeclaration</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** type of attribute, simpleType */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XSTypeDefinition</name>
                    </type>
                    <name>fTypeDecl</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** If this attribute was explicitly given a
                * value in the original document, this is true; otherwise, it is false */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>fSpecified</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** schema normalized value property */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fNormalizedValue</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** schema actual value */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Object</name>
                    </type>
                    <name>fActualValue</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** schema actual value type */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>short</name>
                    </type>
                    <name>fActualValueType</name> =
                    <init>
                        <expr>
                            <name><name>XSConstants</name>.
                                <name>UNAVAILABLE_DT</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** actual value types if the value is a list */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ShortList</name>
                    </type>
                    <name>fItemValueTypes</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** member type definition against which attribute was validated */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>XSSimpleTypeDefinition</name>
                    </type>
                    <name>fMemberType</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** validation attempted: none, partial, full */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>short</name>
                    </type>
                    <name>fValidationAttempted</name> =
                    <init>
                        <expr>
                            <name><name>AttributePSVI</name>.
                                <name>VALIDATION_NONE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** validity: valid, invalid, unknown */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>short</name>
                    </type>
                    <name>fValidity</name> =
                    <init>
                        <expr>
                            <name><name>AttributePSVI</name>.
                                <name>VALIDITY_NOTKNOWN</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** error codes */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>StringList</name>
                    </type>
                    <name>fErrorCodes</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** validation context: could be QName or XPath expression*/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>fValidationContext</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// AttributePSVI methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * [schema default]
                *
                * @return The canonical lexical representation of the declaration's {value constraint} value.
                * @see &lt;a href="http://www.w3.org/TR/xmlschema-1/#e-schema_default&gt;XML Schema Part 1: Structures
                [schema default]&lt;/a&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemaDefault</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDeclaration</name>
                            == <name>null</name> ? <name>null</name> :
                            <call>
                                <name><name>fDeclaration</name>.
                                    <name>getConstraintValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * [schema normalized value]
                *
                *
                * @see &lt;a href="http://www.w3.org/TR/xmlschema-1/#e-schema_normalized_value&gt;XML Schema Part 1:
                Structures [schema normalized value]&lt;/a&gt;
                * @return the normalized value of this item after validation
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSchemaNormalizedValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fNormalizedValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * [schema specified]
                * @see &lt;a href="http://www.w3.org/TR/xmlschema-1/#e-schema_specified"&gt;XML Schema Part 1:
                Structures [schema specified]&lt;/a&gt;
                * @return false value was specified in schema, true value comes from the infoset
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getIsSchemaSpecified</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fSpecified</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determines the extent to which the document has been validated
                *
                * @return return the [validation attempted] property. The possible values are
                * NO_VALIDATION, PARTIAL_VALIDATION and FULL_VALIDATION
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getValidationAttempted</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fValidationAttempted</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determine the validity of the node with respect
                * to the validation being attempted
                *
                * @return return the [validity] property. Possible values are:
                * UNKNOWN_VALIDITY, INVALID_VALIDITY, VALID_VALIDITY
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getValidity</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fValidity</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A list of error codes generated from validation attempts.
                * Need to find all the possible subclause reports that need reporting
                *
                * @return list of error codes
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StringList</name>
                </type>
                <name>getErrorCodes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fErrorCodes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// This is the only information we can provide in a pipeline.</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getValidationContext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fValidationContext</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An item isomorphic to the type definition used to validate this element.
                *
                * @return a type declaration
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSTypeDefinition</name>
                </type>
                <name>getTypeDefinition</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fTypeDecl</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If and only if that type definition is a simple type definition
                * with {variety} union, or a complex type definition whose {content type}
                * is a simple thype definition with {variety} union, then an item isomorphic
                * to that member of the union's {member type definitions} which actually
                * validated the element item's normalized value.
                *
                * @return a simple type declaration
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSSimpleTypeDefinition</name>
                </type>
                <name>getMemberTypeDefinition</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fMemberType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An item isomorphic to the attribute declaration used to validate
                * this attribute.
                *
                * @return an attribute declaration
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>XSAttributeDeclaration</name>
                </type>
                <name>getAttributeDeclaration</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>fDeclaration</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Copy PSVI properties from another psvi item.
                *
                * @param attr the source of attribute PSVI items
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPSVI</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AttributePSVI</name>
                            </type>
                            <name>attr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fDeclaration</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getAttributeDeclaration</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fValidationContext</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getValidationContext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fValidity</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getValidity</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fValidationAttempted</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getValidationAttempted</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fErrorCodes</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getErrorCodes</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fNormalizedValue</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getSchemaNormalizedValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fActualValue</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getActualNormalizedValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fActualValueType</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getActualNormalizedValueType</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fItemValueTypes</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getItemValueTypes</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fTypeDecl</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getTypeDefinition</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fMemberType</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getMemberTypeDefinition</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fSpecified</name>
                            </name>
                            =
                            <call>
                                <name><name>attr</name>.
                                    <name>getIsSchemaSpecified</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="block">/* (non-Javadoc)
                * @see org.apache.xerces.xs.ItemPSVI#getActualNormalizedValue()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getActualNormalizedValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>fActualValue</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/* (non-Javadoc)
                * @see org.apache.xerces.xs.ItemPSVI#getActualNormalizedValueType()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getActualNormalizedValueType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>fActualValueType</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/* (non-Javadoc)
                * @see org.apache.xerces.xs.ItemPSVI#getItemValueTypes()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ShortList</name>
                </type>
                <name>getItemValueTypes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>fItemValueTypes</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// REVISIT: Forbid serialization of PSVI DOM until</comment>
            <comment type="line">// we support object serialization of grammars -- mrglavas</comment>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>writeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>NotSerializableException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getClass</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>readObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>NotSerializableException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getClass</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
