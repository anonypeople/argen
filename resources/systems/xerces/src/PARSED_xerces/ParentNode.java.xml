<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\ParentNode.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004,2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Document</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>NodeList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>UserDataHandler</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * ParentNode inherits from ChildNode and adds the capability of having child
        * nodes. Not every node in the DOM can have children, so only nodes that can
        * should inherit from this class and pay the price for it.
        * &lt;P&gt;
        * ParentNode, just like NodeImpl, also implements NodeList, so it can
        * return itself in response to the getChildNodes() query. This eliminiates
        * the need for a separate ChildNodeList object. Note that this is an
        * IMPLEMENTATION DETAIL; applications should _never_ assume that
        * this identity exists. On the other hand, subclasses may need to override
        * this, in case of conflicting names. This is the case for the classes
        * HTMLSelectElementImpl and HTMLFormElementImpl of the HTML DOM.
        * &lt;P&gt;
        * While we have a direct reference to the first child, the last child is
        * stored as the previous sibling of the first child. First child nodes are
        * marked as being so, and getNextSibling hides this fact.
        * &lt;P&gt;Note: Not all parent nodes actually need to also be a child. At some
        * point we used to have ParentNode inheriting from NodeImpl and another class
        * called ChildAndParentNode that inherited from ChildNode. But due to the lack
        * of multiple inheritance a lot of code had to be duplicated which led to a
        * maintenance nightmare. At the same time only a few nodes (Document,
        * DocumentFragment, Entity, and Attribute) cannot be a child so the gain in
        * memory wasn't really worth it. The only type for which this would be the
        * case is Attribute, but we deal with there in another special way, so this is
        * not applicable.
        * &lt;p&gt;
        * This class doesn't directly support mutation events, however, it notifies
        * the document when mutations are performed so that the document class do so.
        *
        * &lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: Some of the code here is partially duplicated in
        * AttrImpl, be careful to keep these two classes in sync!
        *
        * @xerces.internal
        *
        * @author Arnaud Le Hors, IBM
        * @author Joe Kesselman, IBM
        * @author Andy Clark, IBM
        * @version $Id: ParentNode.java,v 1.50 2005/05/02 22:02:22 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>ParentNode</name>
        <super>
            <extends>extends
                <name>ChildNode</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** Serialization version. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>2815829867152120872L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Owner document. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>CoreDocumentImpl</name>
                    </type>
                    <name>ownerDocument</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** First child. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>ChildNode</name>
                    </type>
                    <name>firstChild</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// transients</comment>

            <comment type="javadoc">/** NodeList cache */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>NodeListCache</name>
                    </type>
                    <name>fNodeListCache</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Constructors</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * No public constructor; only subclasses of ParentNode should be
                * instantiated, and those normally via a Document's factory methods
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ParentNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDocument</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerDocument</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>ownerDocument</name>
                            </name>
                            =
                            <name>ownerDocument</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/** Constructor for serialization. */</comment>
            <constructor>
                <specifier>public</specifier>
                <name>ParentNode</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="line">//</comment>
            <comment type="line">// NodeList methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Returns a duplicate of a given node. You can consider this a
                * generic "copy constructor" for nodes. The newly returned object should
                * be completely independent of the source object's subtree, so changes
                * in one after the clone has been made will not affect the other.
                * &lt;p&gt;
                * Example: Cloning a Text node will copy both the node and the text it
                * contains.
                * &lt;p&gt;
                * Example: Cloning something that has children -- Element or Attr, for
                * example -- will _not_ clone those children unless a "deep clone"
                * has been requested. A shallow clone of an Attr node will yield an
                * empty Attr of the same name.
                * &lt;p&gt;
                * NOTE: Clones will always be read/write, even if the node being cloned
                * is read-only, to permit applications using only the DOM API to obtain
                * editable copies of locked portions of the tree.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>cloneNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ParentNode</name>
                            </type>
                            <name>newnode</name> =
                            <init>
                                <expr>(<name>ParentNode</name>)
                                    <call>
                                        <name><name>super</name>.
                                            <name>cloneNode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>deep</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// set owner document</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>newnode</name>.
                                <name>ownerDocument</name>
                            </name>
                            =
                            <name>ownerDocument</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Need to break the association w/ original kids</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>newnode</name>.
                                <name>firstChild</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// invalidate cache for children NodeList</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>newnode</name>.
                                <name>fNodeListCache</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Then, if deep, clone the kids too.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>deep</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>ChildNode</name>
                                            </type>
                                            <name>child</name> =
                                            <init>
                                                <expr>
                                                    <name>firstChild</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>child</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>child</name>
                                            =
                                            <name><name>child</name>.
                                                <name>nextSibling</name>
                                            </name>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>newnode</name>.
                                                        <name>appendChild</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>child</name>.
                                                                        <name>cloneNode</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>true</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>newnode</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// cloneNode(boolean):Node</comment>

            <comment type="javadoc">/**
                * Find the Document that this Node belongs to (the document in
                * whose context the Node was created). The Node may or may not
                * currently be part of that Document's actual contents.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Document</name>
                </type>
                <name>getOwnerDocument</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ownerDocument</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * same as above but returns internal type and this one is not overridden
                * by CoreDocumentImpl to return null
                */
            </comment>
            <function>
                <type>
                    <name>CoreDocumentImpl</name>
                </type>
                <name>ownerDocument</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ownerDocument</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * NON-DOM
                * set the ownerDocument of this node and its children
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>setOwnerDocument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>doc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setOwnerDocument</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>doc</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>ownerDocument</name>
                            =
                            <name>doc</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>ChildNode</name>
                                </type>
                                <name>child</name> =
                                <init>
                                    <expr>
                                        <name>firstChild</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>child</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>child</name>
                                =
                                <name><name>child</name>.
                                    <name>nextSibling</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>child</name>.
                                            <name>setOwnerDocument</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>doc</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Test whether this node has any children. Convenience shorthand
                * for (Node.getFirstChild()!=null)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasChildNodes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>firstChild</name>
                            !=
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Obtain a NodeList enumerating all children of this node. If there
                * are none, an (initially) empty NodeList is returned.
                * &lt;p&gt;
                * NodeLists are "live"; as children are added/removed the NodeList
                * will immediately reflect those changes. Also, the NodeList refers
                * to the actual nodes, so changes to those nodes made via the DOM tree
                * will be reflected in the NodeList and vice versa.
                * &lt;p&gt;
                * In this implementation, Nodes implement the NodeList interface and
                * provide their own getChildNodes() support. Other DOMs may solve this
                * differently.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>NodeList</name>
                </type>
                <name>getChildNodes</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getChildNodes():NodeList</comment>

            <comment type="javadoc">/** The first child of this Node, or null if none. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getFirstChild</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>firstChild</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getFirstChild():Node</comment>

            <comment type="javadoc">/** The last child of this Node, or null if none. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getLastChild</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>lastChild</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// getLastChild():Node</comment>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>ChildNode</name>
                </type>
                <name>lastChild</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// last child is stored as the previous sibling of first child</comment>
                    <return>return
                        <expr>
                            <name>firstChild</name>
                            != <name>null</name> ?
                            <name><name>firstChild</name>.
                                <name>previousSibling</name>
                            </name>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>lastChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// store lastChild as previous sibling of first child</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>firstChild</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>firstChild</name>.
                                            <name>previousSibling</name>
                                        </name>
                                        =
                                        <name>node</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Move one or more node(s) to our list of children. Note that this
                * implicitly removes them from their previous parent.
                *
                * @param newChild The Node to be moved to our subtree. As a
                * convenience feature, inserting a DocumentNode will instead insert
                * all its children.
                *
                * @param refChild Current child which newChild should be placed
                * immediately before. If refChild is null, the insertion occurs
                * after all existing Nodes, like appendChild().
                *
                * @return newChild, in its new state (relocated, or emptied in the case of
                * DocumentNode.)
                *
                * @throws DOMException(HIERARCHY_REQUEST_ERR) if newChild is of a
                * type that shouldn't be a child of this node, or if newChild is an
                * ancestor of this node.
                *
                * @throws DOMException(WRONG_DOCUMENT_ERR) if newChild has a
                * different owner document than we do.
                *
                * @throws DOMException(NOT_FOUND_ERR) if refChild is not a child of
                * this node.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>insertBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Tail-call; optimizer should be able to do good things with.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>internalInsertBefore</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>refChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// insertBefore(Node,Node):Node</comment>

            <comment type="javadoc">/** NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able
                * to control which mutation events are spawned. This version of the
                * insertBefore operation allows us to do so. It is not intended
                * for use by application programs.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>internalInsertBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>replace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>errorChecking</name> =
                            <init>
                                <expr>
                                    <name><name>ownerDocument</name>.
                                        <name>errorChecking</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>newChild</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>DOCUMENT_FRAGMENT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// SLOW BUT SAFE: We could insert the whole subtree without
                                </comment>
                                <comment type="line">// juggling so many next/previous pointers. (Wipe out the</comment>
                                <comment type="line">// parent's child-list, patch the parent pointers, set the
                                </comment>
                                <comment type="line">// ends of the list.) But we know some subclasses have special-
                                </comment>
                                <comment type="line">// case behavior they add to insertBefore(), so we don't risk it.
                                </comment>
                                <comment type="line">// This approch also takes fewer bytecodes.</comment>

                                <comment type="line">// NOTE: If one of the children is not a legal child of this
                                </comment>
                                <comment type="line">// node, throw HIERARCHY_REQUEST_ERR before _any_ of the children
                                </comment>
                                <comment type="line">// have been transferred. (Alternative behaviors would be to
                                </comment>
                                <comment type="line">// reparent up to the first failure point or reparent all those
                                </comment>
                                <comment type="line">// which are acceptable to the target node, neither of which is
                                </comment>
                                <comment type="line">// as robust. PR-DOM-0818 isn't entirely clear on which it
                                </comment>
                                <comment type="line">// recommends?????</comment>

                                <comment type="line">// No need to check kids for right-document; if they weren't,
                                </comment>
                                <comment type="line">// they wouldn't be kids of that DocFrag.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>errorChecking</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>Node</name>
                                                        </type>
                                                        <name>kid</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>newChild</name>.
                                                                        <name>getFirstChild</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <comment type="line">// Prescan</comment>
                                                <condition>
                                                    <expr>
                                                        <name>kid</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr>
                                                        <name>kid</name>
                                                        =
                                                        <call>
                                                            <name><name>kid</name>.
                                                                <name>getNextSibling</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{

                                                    <if>if
                                                        <condition>(
                                                            <expr>!
                                                                <call>
                                                                    <name><name>ownerDocument</name>.
                                                                        <name>isKidOK</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>this</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>kid</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <throw>throw
                                                                    <expr>new
                                                                        <call>
                                                                            <name>DOMException</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name><name>DOMException</name>.
                                                                                            <name>
                                                                                                HIERARCHY_REQUEST_ERR
                                                                                            </name>
                                                                                        </name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>
                                                                                                DOMMessageFormatter</name>
                                                                                                .
                                                                                                <name>formatMessage
                                                                                                </name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name><name>
                                                                                                            DOMMessageFormatter</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                DOM_DOMAIN
                                                                                                            </name>
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        "HIERARCHY_REQUEST_ERR"
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>null
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </throw>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>newChild</name>.
                                                    <name>hasChildNodes</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>insertBefore</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>newChild</name>.
                                                                        <name>getFirstChild</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>refChild</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <return>return
                                    <expr>
                                        <name>newChild</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>newChild</name>
                                ==
                                <name>refChild</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// stupid case that must be handled as a no-op triggering
                                    events...
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <name>refChild</name>
                                        =
                                        <call>
                                            <name><name>refChild</name>.
                                                <name>getNextSibling</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>removeChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newChild</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>insertBefore</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newChild</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>refChild</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>newChild</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>errorChecking</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isReadOnly</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>NO_MODIFICATION_ALLOWED_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"NO_MODIFICATION_ALLOWED_ERR"
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>newChild</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>ownerDocument</name> &amp;&amp; <name>newChild</name> !=
                                            <name>ownerDocument</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>ownerDocument</name>.
                                                    <name>isKidOK</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>newChild</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>HIERARCHY_REQUEST_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"HIERARCHY_REQUEST_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// refChild must be a child of this node (or null)</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>refChild</name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>refChild</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>this</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>NOT_FOUND_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"NOT_FOUND_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// Prevent cycles in the tree</comment>
                                <comment type="line">// newChild cannot be ancestor of this Node,</comment>
                                <comment type="line">// and actually cannot be this</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                        </type>
                                        <name>treeSafe</name> =
                                        <init>
                                            <expr>true</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>NodeImpl</name>
                                            </type>
                                            <name>a</name> =
                                            <init>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>treeSafe</name>
                                            &amp;&amp; <name>a</name> !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>a</name>
                                            =
                                            <call>
                                                <name><name>a</name>.
                                                    <name>parentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>treeSafe</name>
                                                = <name>newChild</name> !=
                                                <name>a</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <name>treeSafe</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>HIERARCHY_REQUEST_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"HIERARCHY_REQUEST_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ownerDocument</name>.
                                    <name>insertingNode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Convert to internal type, to avoid repeated casting</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>newInternal</name> =
                            <init>
                                <expr>(<name>ChildNode</name>)
                                    <name>newChild</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldparent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>newInternal</name>.
                                            <name>parentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>oldparent</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>oldparent</name>.
                                                <name>removeChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newInternal</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Convert to internal type, to avoid repeated casting</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>refInternal</name> =
                            <init>
                                <expr>(<name>ChildNode</name>)
                                    <name>refChild</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Attach up</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>newInternal</name>.
                                <name>ownerNode</name>
                            </name>
                            =
                            <name>this</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newInternal</name>.
                                    <name>isOwned</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Attach before and after</comment>
                    <comment type="line">// Note: firstChild.previousSibling == lastChild!!</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>firstChild</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// this our first and only child</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>firstChild</name>
                                        =
                                        <name>newInternal</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>newInternal</name>.
                                                <name>isFirstChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>newInternal</name>.
                                            <name>previousSibling</name>
                                        </name>
                                        =
                                        <name>newInternal</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>refInternal</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// this is an append</comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>ChildNode</name>
                                                    </type>
                                                    <name>lastChild</name> =
                                                    <init>
                                                        <expr>
                                                            <name><name>firstChild</name>.
                                                                <name>previousSibling</name>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>lastChild</name>.
                                                        <name>nextSibling</name>
                                                    </name>
                                                    =
                                                    <name>newInternal</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>newInternal</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                    =
                                                    <name>lastChild</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>firstChild</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                    =
                                                    <name>newInternal</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// this is an insert</comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>refChild</name>
                                                        ==
                                                        <name>firstChild</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// at the head of the list</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>firstChild</name>.
                                                                        <name>isFirstChild</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>false</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>newInternal</name>.
                                                                    <name>nextSibling</name>
                                                                </name>
                                                                =
                                                                <name>firstChild</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>newInternal</name>.
                                                                    <name>previousSibling</name>
                                                                </name>
                                                                =
                                                                <name><name>firstChild</name>.
                                                                    <name>previousSibling</name>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>firstChild</name>.
                                                                    <name>previousSibling</name>
                                                                </name>
                                                                =
                                                                <name>newInternal</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>firstChild</name>
                                                                =
                                                                <name>newInternal</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>newInternal</name>.
                                                                        <name>isFirstChild</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>true</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// somewhere in the middle</comment>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>ChildNode</name>
                                                                </type>
                                                                <name>prev</name> =
                                                                <init>
                                                                    <expr>
                                                                        <name><name>refInternal</name>.
                                                                            <name>previousSibling</name>
                                                                        </name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>newInternal</name>.
                                                                    <name>nextSibling</name>
                                                                </name>
                                                                =
                                                                <name>refInternal</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>prev</name>.
                                                                    <name>nextSibling</name>
                                                                </name>
                                                                =
                                                                <name>newInternal</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>refInternal</name>.
                                                                    <name>previousSibling</name>
                                                                </name>
                                                                =
                                                                <name>newInternal</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>newInternal</name>.
                                                                    <name>previousSibling</name>
                                                                </name>
                                                                =
                                                                <name>prev</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>changed</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// update cached length if we have any</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeListCache</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNodeListCache</name>.
                                                <name>fLength</name>
                                            </name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fNodeListCache</name>.
                                                        <name>fLength</name>
                                                    </name>
                                                    ++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNodeListCache</name>.
                                                <name>fChildIndex</name>
                                            </name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// if we happen to insert just before the cached node,
                                                update
                                            </comment>
                                            <comment type="line">// the cache to the new node to match the cached
                                                index
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>fNodeListCache</name>.
                                                            <name>fChild</name>
                                                        </name>
                                                        ==
                                                        <name>refInternal</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNodeListCache</name>.
                                                                    <name>fChild</name>
                                                                </name>
                                                                =
                                                                <name>newInternal</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// otherwise just invalidate the cache
                                                        </comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNodeListCache</name>.
                                                                    <name>fChildIndex</name>
                                                                </name>
                                                                = -1
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ownerDocument</name>.
                                    <name>insertedNode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newInternal</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNormalizationAfterInsert</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newInternal</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>newChild</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// internalInsertBefore(Node,Node,boolean):Node</comment>

            <comment type="javadoc">/**
                * Remove a child from this Node. The removed child's subtree
                * remains intact so it may be re-inserted elsewhere.
                *
                * @return oldChild, in its new state (removed).
                *
                * @throws DOMException(NOT_FOUND_ERR) if oldChild is not a child of
                * this node.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>removeChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Tail-call, should be optimizable</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>internalRemoveChild</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>oldChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// removeChild(Node) :Node</comment>

            <comment type="javadoc">/** NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able
                * to control which mutation events are spawned. This version of the
                * removeChild operation allows us to do so. It is not intended
                * for use by application programs.
                */
            </comment>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>internalRemoveChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>replace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CoreDocumentImpl</name>
                            </type>
                            <name>ownerDocument</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>ownerDocument</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>ownerDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isReadOnly</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>NO_MODIFICATION_ALLOWED_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"NO_MODIFICATION_ALLOWED_ERR"
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>oldChild</name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>oldChild</name>.
                                                    <name>getParentNode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>this</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>NOT_FOUND_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"NOT_FOUND_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>oldInternal</name> =
                            <init>
                                <expr>(<name>ChildNode</name>)
                                    <name>oldChild</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ownerDocument</name>.
                                    <name>removingNode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>oldInternal</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// update cached length if we have any</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeListCache</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNodeListCache</name>.
                                                <name>fLength</name>
                                            </name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>fNodeListCache</name>.
                                                        <name>fLength</name>
                                                    </name>
                                                    --
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNodeListCache</name>.
                                                <name>fChildIndex</name>
                                            </name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// if the removed node is the cached node</comment>
                                            <comment type="line">// move the cache to its (soon former) previous
                                                sibling
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>fNodeListCache</name>.
                                                            <name>fChild</name>
                                                        </name>
                                                        ==
                                                        <name>oldInternal</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNodeListCache</name>.
                                                                    <name>fChildIndex</name>
                                                                </name>
                                                                --
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNodeListCache</name>.
                                                                    <name>fChild</name>
                                                                </name>
                                                                =
                                                                <call>
                                                                    <name><name>oldInternal</name>.
                                                                        <name>previousSibling</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// otherwise just invalidate the cache
                                                        </comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>fNodeListCache</name>.
                                                                    <name>fChildIndex</name>
                                                                </name>
                                                                = -1
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Patch linked list around oldChild</comment>
                    <comment type="line">// Note: lastChild == firstChild.previousSibling</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>oldInternal</name>
                                ==
                                <name>firstChild</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// removing first child</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>oldInternal</name>.
                                                <name>isFirstChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>firstChild</name>
                                        =
                                        <name><name>oldInternal</name>.
                                            <name>nextSibling</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>firstChild</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>firstChild</name>.
                                                            <name>isFirstChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>firstChild</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                    =
                                                    <name><name>oldInternal</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>prev</name> =
                                        <init>
                                            <expr>
                                                <name><name>oldInternal</name>.
                                                    <name>previousSibling</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>next</name> =
                                        <init>
                                            <expr>
                                                <name><name>oldInternal</name>.
                                                    <name>nextSibling</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>prev</name>.
                                            <name>nextSibling</name>
                                        </name>
                                        =
                                        <name>next</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>next</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// removing last child</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>firstChild</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                    =
                                                    <name>prev</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">// removing some other child in the middle</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>next</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                    =
                                                    <name>prev</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// Save previous sibling for normalization checking.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>oldPreviousSibling</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>oldInternal</name>.
                                            <name>previousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Remove oldInternal's references to tree</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>oldInternal</name>.
                                <name>ownerNode</name>
                            </name>
                            =
                            <name>ownerDocument</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>oldInternal</name>.
                                    <name>isOwned</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>oldInternal</name>.
                                <name>nextSibling</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>oldInternal</name>.
                                <name>previousSibling</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>changed</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ownerDocument</name>.
                                    <name>removedNode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replace</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNormalizationAfterRemove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>oldPreviousSibling</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>oldInternal</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// internalRemoveChild(Node,boolean):Node</comment>

            <comment type="javadoc">/**
                * Make newChild occupy the location that oldChild used to
                * have. Note that newChild will first be removed from its previous
                * parent, if any. Equivalent to inserting newChild before oldChild,
                * then removing oldChild.
                *
                * @return oldChild, in its new state (removed).
                *
                * @throws DOMException(HIERARCHY_REQUEST_ERR) if newChild is of a
                * type that shouldn't be a child of this node, or if newChild is
                * one of our ancestors.
                *
                * @throws DOMException(WRONG_DOCUMENT_ERR) if newChild has a
                * different owner document than we do.
                *
                * @throws DOMException(NOT_FOUND_ERR) if oldChild is not a child of
                * this node.
                *
                * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if this node is
                * read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>replaceChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newChild</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>oldChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// If Mutation Events are being generated, this operation might</comment>
                    <comment type="line">// throw aggregate events twice when modifying an Attr -- once</comment>
                    <comment type="line">// on insertion and once on removal. DOM Level 2 does not specify</comment>
                    <comment type="line">// this as either desirable or undesirable, but hints that</comment>
                    <comment type="line">// aggregations should be issued only once per user request.</comment>

                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ownerDocument</name>.
                                    <name>replacingNode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>internalInsertBefore</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>oldChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newChild</name>
                                !=
                                <name>oldChild</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>internalRemoveChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>oldChild</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ownerDocument</name>.
                                    <name>replacedNode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>oldChild</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Get Node text content
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTextContent</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getFirstChild</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>child</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Node</name>
                                        </type>
                                        <name>next</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>child</name>.
                                                        <name>getNextSibling</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>next</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>hasTextContent</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>child</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ? ((<name>NodeImpl</name>) <name>child</name>).
                                                    <call>
                                                        <name>getTextContent</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    : ""
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fBufferStr</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fBufferStr</name>
                                                    = new
                                                    <call>
                                                        <name>StringBuffer</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fBufferStr</name>.
                                                            <name>setLength</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getTextContent</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fBufferStr</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>fBufferStr</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>""</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// internal method taking a StringBuffer in parameter</comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>getTextContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buf</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getFirstChild</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>child</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>hasTextContent</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>child</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>((<name>NodeImpl</name>) <name>child</name>).
                                                <call>
                                                    <name>getTextContent</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>buf</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>child</name>
                                    =
                                    <call>
                                        <name><name>child</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">// internal method returning whether to take the given node's text content</comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>hasTextContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>child</name>.
                                    <name>getNodeType</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            !=
                            <name><name>Node</name>.
                                <name>COMMENT_NODE</name>
                            </name>
                            &amp;&amp;
                            <call>
                                <name><name>child</name>.
                                    <name>getNodeType</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            !=
                            <name><name>Node</name>.
                                <name>PROCESSING_INSTRUCTION_NODE</name>
                            </name>
                            &amp;&amp;
                            (
                            <call>
                                <name><name>child</name>.
                                    <name>getNodeType</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            !=
                            <name><name>Node</name>.
                                <name>TEXT_NODE</name>
                            </name>
                            ||
                            ((<name>TextImpl</name>) <name>child</name>).
                            <call>
                                <name>isIgnorableWhitespace</name>
                                <argument_list>()</argument_list>
                            </call>
                            == false)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Set Node text content
                * @since DOM Level 3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTextContent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>textContent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// get rid of any existing children</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>child</name> =
                                <call>
                                    <name>getFirstChild</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>removeChild</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>child</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <comment type="line">// create a Text node to hold the given content</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>textContent</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>textContent</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>appendChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>ownerDocument</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>createTextNode</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>textContent</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// NodeList methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Count the immediate children of this node. Use to implement
                * NodeList.getLength().
                * @return int
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>nodeListGetLength</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeListCache</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// get rid of trivial cases</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>firstChild</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>0</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>firstChild</name>
                                            ==
                                            <call>
                                                <name>lastChild</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>1</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// otherwise request a cache object</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeListCache</name>
                                        =
                                        <call>
                                            <name><name>ownerDocument</name>.
                                                <name>getNodeListCache</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fNodeListCache</name>.
                                    <name>fLength</name>
                                </name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// is the cached length invalid ?</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>l</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>n</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// start from the cached node if we have one</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>fNodeListCache</name>.
                                                <name>fChildIndex</name>
                                            </name>
                                            != -1 &amp;&amp;
                                            <name><name>fNodeListCache</name>.
                                                <name>fChild</name>
                                            </name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>l</name>
                                                    =
                                                    <name><name>fNodeListCache</name>.
                                                        <name>fChildIndex</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>n</name>
                                                    =
                                                    <name><name>fNodeListCache</name>.
                                                        <name>fChild</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>n</name>
                                                    =
                                                    <name>firstChild</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>l</name>
                                                    = 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>n</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>l</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>n</name>
                                                =
                                                <name><name>n</name>.
                                                    <name>nextSibling</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNodeListCache</name>.
                                            <name>fLength</name>
                                        </name>
                                        =
                                        <name>l</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name><name>fNodeListCache</name>.
                                <name>fLength</name>
                            </name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// nodeListGetLength():int</comment>

            <comment type="javadoc">/**
                * NodeList method: Count the immediate children of this node
                * @return int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nodeListGetLength</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the Nth immediate child of this node, or null if the index is
                * out of bounds. Use to implement NodeList.item().
                * @param index int
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>nodeListItem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fNodeListCache</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// get rid of trivial case</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>firstChild</name>
                                            ==
                                            <call>
                                                <name>lastChild</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>index</name>
                                                    == 0 ? <name>firstChild</name> :
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// otherwise request a cache object</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>fNodeListCache</name>
                                        =
                                        <call>
                                            <name><name>ownerDocument</name>.
                                                <name>getNodeListCache</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <name><name>fNodeListCache</name>.
                                        <name>fChildIndex</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <name><name>fNodeListCache</name>.
                                        <name>fChild</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>firstAccess</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// short way</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                != -1 &amp;&amp; <name>n</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>firstAccess</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>index</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <while>while
                                                <condition>(
                                                    <expr>
                                                        <name>i</name>
                                                        &lt; <name>index</name> &amp;&amp; <name>n</name> !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>i</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>n</name>
                                                            =
                                                            <name><name>n</name>.
                                                                <name>nextSibling</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </while>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    &gt;
                                                    <name>index</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <while>while
                                                        <condition>(
                                                            <expr>
                                                                <name>i</name>
                                                                &gt; <name>index</name> &amp;&amp; <name>n</name> !=
                                                                <name>null</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr><name>i</name>--
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>n</name>
                                                                    =
                                                                    <call>
                                                                        <name><name>n</name>.
                                                                            <name>previousSibling</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </while>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// long way</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>n</name>
                                        =
                                        <name>firstChild</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <for>for (
                                    <init>
                                        <expr>
                                            <name>i</name>
                                            = 0
                                        </expr>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt; <name>index</name> &amp;&amp; <name>n</name> !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>n</name>
                                                =
                                                <name><name>n</name>.
                                                    <name>nextSibling</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// release cache if reaching last child or first child</comment>
                    <if>if
                        <condition>(
                            <expr>!<name>firstAccess</name> &amp;&amp; (<name>n</name> == <name>firstChild</name> || <name>
                                n
                            </name> ==
                                <call>
                                    <name>lastChild</name>
                                    <argument_list>()</argument_list>
                                </call>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNodeListCache</name>.
                                            <name>fChildIndex</name>
                                        </name>
                                        = -1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNodeListCache</name>.
                                            <name>fChild</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ownerDocument</name>.
                                                <name>freeNodeListCache</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fNodeListCache</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// we can keep using the cache until it is actually reused
                                </comment>
                                <comment type="line">// fNodeListCache will be nulled by the pool (document) if that
                                </comment>
                                <comment type="line">// happens.</comment>
                                <comment type="line">// fNodeListCache = null;</comment>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// otherwise update it</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNodeListCache</name>.
                                            <name>fChildIndex</name>
                                        </name>
                                        =
                                        <name>i</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>fNodeListCache</name>.
                                            <name>fChild</name>
                                        </name>
                                        =
                                        <name>n</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>n</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>
            <comment type="line">// nodeListItem(int):Node</comment>

            <comment type="javadoc">/**
                * NodeList method: Return the Nth immediate child of this node, or
                * null if the index is out of bounds.
                * @return org.w3c.dom.Node
                * @param index int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>item</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nodeListItem</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// item(int):Node</comment>

            <comment type="javadoc">/**
                * Create a NodeList to access children that is use by subclass elements
                * that have methods named getLength() or item(int). ChildAndParentNode
                * optimizes getChildNodes() by implementing NodeList itself. However if
                * a subclass Element implements methods with the same name as the NodeList
                * methods, they will override the actually methods in this class.
                * &lt;p&gt;
                * To use this method, the subclass should implement getChildNodes() and
                * have it call this method. The resulting NodeList instance maybe
                * shared and cached in a transient field, but the cached value must be
                * cleared if the node is cloned.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>NodeList</name>
                </type>
                <name>getChildNodesUnoptimized</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>NodeList</name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <comment type="javadoc">/**
                                        * @see NodeList.getLength()
                                        */
                                    </comment>
                                    <function>
                                        <type>
                                            <specifier>public</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>getLength</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>nodeListGetLength</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    <comment type="line">// getLength():int</comment>

                                    <comment type="javadoc">/**
                                        * @see NodeList.item(int)
                                        */
                                    </comment>
                                    <function>
                                        <type>
                                            <specifier>public</specifier>
                                            <name>Node</name>
                                        </type>
                                        <name>item</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>index</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>nodeListItem</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>index</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    <comment type="line">// item(int):Node</comment>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="line">// getChildNodesUnoptimized():NodeList</comment>

            <comment type="line">//</comment>
            <comment type="line">// DOM2: methods, getters, setters</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Override default behavior to call normalize() on this Node's
                * children. It is up to implementors or Node to override normalize()
                * to take action.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>normalize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// No need to normalize if already normalized.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isNormalized</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>kid</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr>
                                <name>kid</name>
                                =
                                <name>firstChild</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>kid</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>kid</name>
                                =
                                <name><name>kid</name>.
                                    <name>nextSibling</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>kid</name>.
                                            <name>normalize</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>isNormalized</name>
                                <argument_list>(
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * DOM Level 3 WD- Experimental.
                * Override inherited behavior from NodeImpl to support deep equal.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEqualNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>super</name>.
                                        <name>isEqualNode</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>arg</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// there are many ways to do this test, and there isn't any way</comment>
                    <comment type="line">// better than another. Performance may vary greatly depending on</comment>
                    <comment type="line">// the implementations involved. This one should work fine for us.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getFirstChild</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>arg</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>child1</name>
                                != <name>null</name> &amp;&amp; <name>child2</name> !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!((<name>NodeImpl</name>) <name>child1</name>).
                                        <call>
                                            <name>isEqualNode</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>child2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>child1</name>
                                    =
                                    <call>
                                        <name><name>child1</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>child2</name>
                                    =
                                    <call>
                                        <name><name>child2</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name>child1</name>
                                !=
                                <name>child2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Public methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Override default behavior so that if deep is true, children are also
                * toggled.
                * @see Node
                * &lt;P&gt;
                * Note: this will not change the state of an EntityReference or its
                * children, which are always read-only.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setReadOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>readOnly</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>deep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setReadOnly</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>readOnly</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>deep</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>deep</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>needsSyncChildren</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>synchronizeChildren</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <comment type="line">// Recursively set kids</comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>ChildNode</name>
                                            </type>
                                            <name>mykid</name> =
                                            <init>
                                                <expr>
                                                    <name>firstChild</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>mykid</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>mykid</name>
                                            =
                                            <name><name>mykid</name>.
                                                <name>nextSibling</name>
                                            </name>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>mykid</name>.
                                                            <name>getNodeType</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name><name>Node</name>.
                                                        <name>ENTITY_REFERENCE_NODE</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>mykid</name>.
                                                                    <name>setReadOnly</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>readOnly</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>true</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// setReadOnly(boolean,boolean)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Protected methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/**
                * Override this method in subclass to hook in efficient
                * internal data structure.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>synchronizeChildren</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// By default just change the flag to avoid calling this method again</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncChildren</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks the normalized state of this node after inserting a child.
                * If the inserted child causes this node to be unnormalized, then this
                * node is flagged accordingly.
                * The conditions for changing the normalized state are:
                * &lt;ul&gt;
                * &lt;li&gt;The inserted child is a text node and one of its adjacent siblings
                * is also a text node.
                * &lt;li&gt;The inserted child is is itself unnormalized.
                * &lt;/ul&gt;
                *
                * @param insertedChild the child node that was inserted into this node
                *
                * @throws NullPointerException if the inserted child is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>checkNormalizationAfterInsert</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>insertedChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// See if insertion caused this node to be unnormalized.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>insertedChild</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>prev</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>insertedChild</name>.
                                                        <name>previousSibling</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>next</name> =
                                        <init>
                                            <expr>
                                                <name><name>insertedChild</name>.
                                                    <name>nextSibling</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// If an adjacent sibling of the new child is a text node,
                                </comment>
                                <comment type="line">// flag this node as unnormalized.</comment>
                                <if>if
                                    <condition>(
                                        <expr>(<name>prev</name> != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>prev</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>Node</name>.
                                                <name>TEXT_NODE</name>
                                            </name>
                                            ) ||
                                            (<name>next</name> != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>next</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>Node</name>.
                                                <name>TEXT_NODE</name>
                                            </name>
                                            )
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>isNormalized</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// If the new child is not normalized,</comment>
                                <comment type="line">// then this node is inherently not normalized.</comment>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>insertedChild</name>.
                                                    <name>isNormalized</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>isNormalized</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// checkNormalizationAfterInsert(ChildNode)</comment>

            <comment type="javadoc">/**
                * Checks the normalized of this node after removing a child.
                * If the removed child causes this node to be unnormalized, then this
                * node is flagged accordingly.
                * The conditions for changing the normalized state are:
                * &lt;ul&gt;
                * &lt;li&gt;The removed child had two adjacent siblings that were text nodes.
                * &lt;/ul&gt;
                *
                * @param previousSibling the previous sibling of the removed child, or
                * &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>checkNormalizationAfterRemove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ChildNode</name>
                            </type>
                            <name>previousSibling</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// See if removal caused this node to be unnormalized.</comment>
                    <comment type="line">// If the adjacent siblings of the removed child were both text nodes,
                    </comment>
                    <comment type="line">// flag this node as unnormalized.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>previousSibling</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>previousSibling</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ChildNode</name>
                                        </type>
                                        <name>next</name> =
                                        <init>
                                            <expr>
                                                <name><name>previousSibling</name>.
                                                    <name>nextSibling</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>next</name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>next</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>Node</name>.
                                                <name>TEXT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>isNormalized</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            <comment type="line">// checkNormalizationAfterRemove(Node)</comment>

            <comment type="line">//</comment>
            <comment type="line">// Serialization methods</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Serialize object. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>writeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// synchronize chilren</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>needsSyncChildren</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>synchronizeChildren</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// write object</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>defaultWriteObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// writeObject(ObjectOutputStream)</comment>

            <comment type="javadoc">/** Deserialize object. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>readObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>ois</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// perform default deseralization</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ois</name>.
                                    <name>defaultReadObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// hardset synchildren - so we don't try to sync - it does not make any
                    </comment>
                    <comment type="line">// sense to try to synchildren when we just deserialize object.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>needsSyncChildren</name>
                                <argument_list>(
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>
            <comment type="line">// readObject(ObjectInputStream)</comment>

            <comment type="block">/*
                * a class to store some user data along with its handler
                */
            </comment>
            <class>class <name>UserDataRecord</name>
                <super>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <comment type="javadoc">/** Serialization version. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>3258126977134310455L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>fData</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>UserDataHandler</name>
                            </type>
                            <name>fHandler</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <name>UserDataRecord</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>data</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>UserDataHandler</name>
                                    </type>
                                    <name>handler</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>fData</name>
                                    =
                                    <name>data</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fHandler</name>
                                    =
                                    <name>handler</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>
            }
        </block>
    </class>
    <comment type="line">// class ParentNode</comment>
</unit>
