<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\xpath\regex\ParserForXMLSchema.java">
    <comment type="block">/*
        * Copyright 1999-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>xpath</name>.
            <name>regex</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Hashtable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A regular expression parser for the XML Schema.
        *
        * @xerces.internal
        *
        * @author TAMURA Kent &amp;lt;kent@trl.ibm.co.jp&amp;gt;
        * @version $Id: ParserForXMLSchema.java,v 1.9 2005/06/23 15:55:18 mrglavas Exp $
        */
    </comment>
    <class>class <name>ParserForXMLSchema</name>
        <super>
            <extends>extends
                <name>RegexParser</name>
            </extends>
        </super>
        <block>{

            <constructor>
                <specifier>public</specifier>
                <name>ParserForXMLSchema</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">//this.setLocale(Locale.getDefault());</comment>
                    }
                </block>
            </constructor>
            <constructor>
                <specifier>public</specifier>
                <name>ParserForXMLSchema</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">//this.setLocale(locale);</comment>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processCaret</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>createChar</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'^'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processDollar</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>createChar</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'$'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processLookahead</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processNegativelookahead</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processLookbehind</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processNegativelookbehind</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_A</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_Z</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_z</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_b</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_B</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_lt</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_gt</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processStar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>createClosure</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processPlus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// X+ -&gt; XX*</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Token</name>.
                                    <name>createConcat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>createClosure</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>tok</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processQuestion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// X? -&gt; X|</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>par</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createUnion</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>par</name>.
                                    <name>addChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>par</name>.
                                    <name>addChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Token</name>.
                                                    <name>createEmpty</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>par</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>checkQuestion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processParen</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Token</name>.
                                            <name>createParen</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>parseRegex</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_RPAREN</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.factor.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Skips ')'</comment>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processParen2</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processCondition</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processModifiers</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processIndependent</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_c</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>getTokenForShorthand</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'c'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_C</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>getTokenForShorthand</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'C'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_i</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>getTokenForShorthand</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'i'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_I</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>getTokenForShorthand</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'I'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_g</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>ex</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            -2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBacksolidus_X</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            -2
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>processBackreference</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name>ex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                            -4
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>int</name>
                </type>
                <name>processCIinCharacterClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>mergeRanges</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getTokenForShorthand</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Parses a character-class-expression, not a character-class-escape.
                *
                * c-c-expression ::= '[' c-group ']'
                * c-group ::= positive-c-group | negative-c-group | c-c-subtraction
                * positive-c-group ::= (c-range | c-c-escape)+
                * negative-c-group ::= '^' positive-c-group
                * c-c-subtraction ::= (positive-c-group | negative-c-group) subtraction
                * subtraction ::= '-' c-c-expression
                * c-range ::= single-range | from-to-range
                * single-range ::= multi-c-escape | category-c-escape | block-c-escape | &lt;any XML char&gt;
                * cc-normal-c ::= &lt;any character except [, ], \&gt;
                * from-to-range ::= cc-normal-c '-' cc-normal-c
                *
                * @param useNrage Ignored.
                * @return This returns no NrageToken.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>parseCharacterClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useNrange</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setContext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>S_INBRACKETS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// '['</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>nrange</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>wasDecoded</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// used to detect if the last - was escaped.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>base</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == <name>T_CHAR</name> &amp;&amp;
                                <name><name>this</name>.
                                    <name>chardata</name>
                                </name>
                                == '^'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>nrange</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// '^'</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>base</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>base</name>.
                                                <name>addRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>Token</name>.
                                                            <name>UTF16_MAX</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>firstloop</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>type</name> =
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>T_EOF</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// Don't use 'cotinue' for this loop.</comment>

                            <expr_stmt>
                                <expr>
                                    <name>wasDecoded</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// single-range | from-to-range | subtraction</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        == <name>T_CHAR</name> &amp;&amp;
                                        <name><name>this</name>.
                                            <name>chardata</name>
                                        </name>
                                        == ']' &amp;&amp; !
                                        <name>firstloop</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>nrange</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>base</name>.
                                                                    <name>subtractRanges</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tok</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>tok</name>
                                                            =
                                                            <name>base</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>chardata</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>false</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name>T_BACKSOLIDUS</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case <expr>'d'</expr>:
                                                </case>
                                                <case>case <expr>'D'</expr>:
                                                </case>
                                                <case>case <expr>'w'</expr>:
                                                </case>
                                                <case>case <expr>'W'</expr>:
                                                </case>
                                                <case>case <expr>'s'</expr>:
                                                </case>
                                                <case>case <expr>'S'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>tok</name>.
                                                                    <name>mergeRanges</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getTokenForShorthand</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>c</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>end</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>

                                                </case>
                                                <case>case <expr>'i'</expr>:
                                                </case>
                                                <case>case <expr>'I'</expr>:
                                                </case>
                                                <case>case <expr>'c'</expr>:
                                                </case>
                                                <case>case <expr>'C'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>processCIinCharacterClass</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tok</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>c</name>
                                                                &lt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>end</name>
                                                                    = true
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                        </then>
                                                    </if>
                                                    <break>break;</break>

                                                </case>
                                                <case>case <expr>'p'</expr>:
                                                </case>
                                                <case>case <expr>'P'</expr>:
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>pstart</name> =
                                                            <init>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>offset</name>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>RangeToken</name>
                                                            </type>
                                                            <name>tok2</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>processBacksolidus_pP</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>c</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>tok2</name>
                                                                ==
                                                                <name>null</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.atom.5"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>pstart</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>tok</name>.
                                                                    <name>mergeRanges</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tok2</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>end</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>

                                                </case>
                                                <case>case <expr>'-'</expr>:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>decodeEscaped</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>wasDecoded</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>

                                                </case>
                                                <default>default:
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>c</name>
                                                            =
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>decodeEscaped</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                </default>
                                                }
                                            </block>
                                        </switch>
                                        <comment type="line">// \ + c</comment>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// backsolidus</comment>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                == <name>T_XMLSCHEMA_CC_SUBTRACTION</name> &amp;&amp; !
                                                <name>firstloop</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// Subraction</comment>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>nrange</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>base</name>.
                                                                            <name>subtractRanges</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>tok</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>tok</name>
                                                                    =
                                                                    <name>base</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>RangeToken</name>
                                                        </type>
                                                        <name>range2</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>parseCharacterClass</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>false</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tok</name>.
                                                                <name>subtractRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>range2</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            != <name>T_CHAR</name> ||
                                                            <name><name>this</name>.
                                                                <name>chardata</name>
                                                            </name>
                                                            != ']'
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <throw>throw
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>ex</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"parser.cc.5"</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>offset</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                    </then>
                                                </if>
                                                <break>break;</break>
                                                <comment type="line">// Exit this loop</comment>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <name>end</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if not shorthands...</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>type</name>
                                                    ==
                                                    <name>T_CHAR</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>c</name>
                                                                == '['
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.cc.6"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                    -2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>c</name>
                                                                == ']'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.cc.7"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                    -2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>c</name>
                                                                == '-' &amp;&amp;
                                                                <name><name>this</name>.
                                                                    <name>chardata</name>
                                                                </name>
                                                                == ']' &amp;&amp;
                                                                <name>firstloop</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.cc.8"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                    -2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <comment type="line">// if regex = '[-]' then invalid</comment>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>c</name>
                                                    == '-' &amp;&amp;
                                                    <name><name>this</name>.
                                                        <name>chardata</name>
                                                    </name>
                                                    == '-' &amp;&amp;
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>read</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    != <name>T_BACKSOLIDUS</name> &amp;&amp; !
                                                    <name>wasDecoded</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <throw>throw
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>ex</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parser.cc.8"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>offset</name>
                                                                            </name>
                                                                            -2
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.
                                                            <name>read</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    != <name>T_CHAR</name> ||
                                                    <name><name>this</name>.
                                                        <name>chardata</name>
                                                    </name>
                                                    != '-'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// Here is no '-'.</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>tok</name>.
                                                                    <name>addRange</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">// Found '-'</comment>
                                                    <comment type="line">// Is this '-' is a from-to token??</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>next</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <comment type="line">// Skips '-'</comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>(<name>type</name> =
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>read</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                ) ==
                                                                <name>T_EOF</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <throw>throw
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>ex</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"parser.cc.2"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>this</name>.
                                                                                        <name>offset</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                        </then>
                                                    </if>
                                                    <comment type="line">// c '-' ']' -&gt; '-' is a single-range.
                                                    </comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>type</name>
                                                                == <name>T_CHAR</name> &amp;&amp;
                                                                <name><name>this</name>.
                                                                    <name>chardata</name>
                                                                </name>
                                                                == ']'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <comment type="line">// if - is at the last position of
                                                                    the group
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>tok</name>.
                                                                                <name>addRange</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>c</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>c</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>tok</name>.
                                                                                <name>addRange</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>'-'</expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>'-'</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>type</name>
                                                                        ==
                                                                        <name>T_XMLSCHEMA_CC_SUBTRACTION</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <throw>throw
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>this</name>.
                                                                                        <name>ex</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"parser.cc.8"</expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>this</name>.
                                                                                                    <name>offset</name>
                                                                                                </name>
                                                                                                -1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </throw>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <block>{

                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>rangeend</name> =
                                                                                <init>
                                                                                    <expr>
                                                                                        <name><name>this</name>.
                                                                                            <name>chardata</name>
                                                                                        </name>
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>
                                                                                    <name>type</name>
                                                                                    ==
                                                                                    <name>T_CHAR</name>
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <block>{
                                                                                    <if>if
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>rangeend</name>
                                                                                                == '['
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <then>
                                                                                            <throw>throw
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            this</name>.
                                                                                                            <name>ex
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    "parser.cc.6"
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            ,
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            this</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            offset
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                    -1
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </throw>
                                                                                        </then>
                                                                                    </if>
                                                                                    <if>if
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>rangeend</name>
                                                                                                == ']'
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <then>
                                                                                            <throw>throw
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            this</name>.
                                                                                                            <name>ex
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    "parser.cc.7"
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            ,
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            this</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            offset
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                    -1
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </throw>
                                                                                        </then>
                                                                                    </if>
                                                                                    <if>if
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>rangeend</name>
                                                                                                == '-'
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <then>
                                                                                            <throw>throw
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            this</name>.
                                                                                                            <name>ex
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    "parser.cc.8"
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            ,
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            this</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            offset
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                    -2
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </throw>
                                                                                        </then>
                                                                                    </if>
                                                                                    }
                                                                                </block>
                                                                            </then>
                                                                            <else>else
                                                                                <if>if
                                                                                    <condition>(
                                                                                        <expr>
                                                                                            <name>type</name>
                                                                                            ==
                                                                                            <name>T_BACKSOLIDUS</name>
                                                                                        </expr>
                                                                                        )
                                                                                    </condition>
                                                                                    <then>
                                                                                        <expr_stmt>
                                                                                            <expr>
                                                                                                <name>rangeend</name>
                                                                                                =
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        this</name>.
                                                                                                        <name>
                                                                                                            decodeEscaped
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            ;
                                                                                        </expr_stmt>
                                                                                    </then>
                                                                                </if>
                                                                            </else>
                                                                        </if>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>this</name>.
                                                                                        <name>next</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>

                                                                        <if>if
                                                                            <condition>(
                                                                                <expr>
                                                                                    <name>c</name>
                                                                                    &gt;
                                                                                    <name>rangeend</name>
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <throw>throw
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>this</name>.
                                                                                                <name>ex</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        "parser.ope.3"
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name><name>
                                                                                                            this</name>.
                                                                                                            <name>
                                                                                                                offset
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        -1
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </throw>
                                                                            </then>
                                                                        </if>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>tok</name>.
                                                                                        <name>addRange</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>c</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>rangeend</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </else>
                                                            </if>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>firstloop</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>T_EOF</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>ex</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.cc.2"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>sortRanges</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>compactRanges</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">//tok.dumpRanges();</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setContext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>S_NORMAL</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Skips ']'</comment>

                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>parseSetOperations</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>ex</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"parser.process.1"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>offset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>Token</name>
                </type>
                <name>getTokenForShorthand</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>ch</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>'d'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isDigit"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'D'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isDigit"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'w'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isWord"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'W'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isWord"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'s'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isSpace"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'S'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isSpace"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'c'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'C'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'i'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isInitialNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>'I'</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ParserForXMLSchema</name>.
                                                <name>getRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isInitialNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Internal Error: shorthands: \\u"+
                                                        <call>
                                                            <name><name>Integer</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>16</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>decodeEscaped</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>read</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>T_BACKSOLIDUS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>
                                    <call>
                                        <name>ex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"parser.next.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>offset</name>
                                                    </name>
                                                    -1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>chardata</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>c</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>'n'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\n'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// LINE FEED U+000A</comment>
                            </case>
                            <case>case <expr>'r'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\r'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// CRRIAGE RETURN U+000D</comment>
                            </case>
                            <case>case <expr>'t'</expr>:
                                <expr_stmt>
                                    <expr>
                                        <name>c</name>
                                        = '\t'
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                                <comment type="line">// HORIZONTAL TABULATION U+0009</comment>
                            </case>
                            <case>case <expr>'\\'</expr>:
                            </case>
                            <case>case <expr>'|'</expr>:
                            </case>
                            <case>case <expr>'.'</expr>:
                            </case>
                            <case>case <expr>'^'</expr>:
                            </case>
                            <case>case <expr>'-'</expr>:
                            </case>
                            <case>case <expr>'?'</expr>:
                            </case>
                            <case>case <expr>'*'</expr>:
                            </case>
                            <case>case <expr>'+'</expr>:
                            </case>
                            <case>case <expr>'{'</expr>:
                            </case>
                            <case>case <expr>'}'</expr>:
                            </case>
                            <case>case <expr>'('</expr>:
                            </case>
                            <case>case <expr>')'</expr>:
                            </case>
                            <case>case <expr>'['</expr>:
                            </case>
                            <case>case <expr>']'</expr>:
                                <break>break;</break>
                                <comment type="line">// return actucal char</comment>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name>ex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"parser.process.1"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>offset</name>
                                                        </name>
                                                        -2
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>c</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>ranges</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>private</specifier>
                        <name>Hashtable</name>
                    </type>
                    <name>ranges2</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <specifier>protected</specifier>
                    <name>RangeToken</name>
                </type>
                <name>getRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>positive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ranges</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>ranges</name>
                                        = new
                                        <call>
                                            <name>Hashtable</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ranges2</name>
                                        = new
                                        <call>
                                            <name>Hashtable</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Token</name>
                                        </type>
                                        <name>tok</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Token</name>.
                                                        <name>createRange</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setupRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>SPACES</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isSpace"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isSpace"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>complementRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setupRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>DIGITS</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isDigit"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isDigit"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>complementRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setupRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>DIGITS</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isDigit"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isDigit"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>complementRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setupRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>LETTERS</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>tok</name>.
                                                <name>mergeRanges</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>Token</name>)
                                                        <call>
                                                            <name><name>ranges</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"xml:isDigit"</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isWord"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isWord"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>complementRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setupRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>NAMECHARS</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>complementRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>tok</name>
                                        =
                                        <call>
                                            <name><name>Token</name>.
                                                <name>createRange</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setupRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>LETTERS</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>tok</name>.
                                                <name>addRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'_'</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>'_'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>tok</name>.
                                                <name>addRange</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>':'</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>':'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isInitialNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tok</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ranges2</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"xml:isInitialNameChar"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Token</name>.
                                                                <name>complementRanges</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>tok</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>RangeToken</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <name>positive</name>
                                    ? (<name>RangeToken</name>)
                                    <call>
                                        <name><name>ranges</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    : (<name>RangeToken</name>)
                                    <call>
                                        <name><name>ranges2</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>setupRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Token</name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>src</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>src</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>i</name>
                                += 2
                            </expr>
                        </incr>
                        )
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name><name>range</name>.
                                        <name>addRange</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>src</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>src</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr><name>i</name>+1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                    </for>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SPACES</name> =
                    <init>
                        <expr>"\t\n\r\r "</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>NAMECHARS</name> =
                    <init>
                        <expr>"\u002d\u002e\u0030\u003a\u0041\u005a\u005f\u005f\u0061\u007a\u00b7\u00b7\u00c0\u00d6"
                            +"\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0"
                            +"\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361"
                            +"\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc"
                            +"\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481"
                            +"\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9"
                            +"\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf"
                            +"\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669"
                            +"\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9"
                            +"\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983"
                            +"\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc"
                            +"\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1"
                            +"\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36"
                            +"\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e"
                            +"\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0"
                            +"\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef"
                            +"\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39"
                            +"\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f"
                            +"\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f"
                            +"\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd"
                            +"\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33"
                            +"\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f"
                            +"\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4"
                            +"\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03"
                            +"\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d"
                            +"\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59"
                            +"\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f"
                            +"\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd"
                            +"\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35"
                            +"\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95"
                            +"\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100"
                            +"\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e"
                            +"\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161"
                            +"\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175"
                            +"\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2"
                            +"\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d"
                            +"\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d"
                            +"\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb"
                            +"\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b"
                            +"\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094"
                            +"\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3"
                            +""
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>LETTERS</name> =
                    <init>
                        <expr>"\u0041\u005a\u0061\u007a\u00c0\u00d6\u00d8\u00f6\u00f8\u0131\u0134\u013e\u0141\u0148"
                            +"\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1"
                            +"\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da"
                            +"\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c"
                            +"\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9"
                            +"\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a"
                            +"\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939"
                            +"\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2"
                            +"\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28"
                            +"\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74"
                            +"\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9"
                            +"\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33"
                            +"\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95"
                            +"\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9"
                            +"\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c"
                            +"\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c"
                            +"\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33"
                            +"\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97"
                            +"\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0"
                            +"\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6"
                            +"\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c"
                            +"\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159"
                            +"\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173"
                            +"\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba"
                            +"\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15"
                            +"\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d"
                            +"\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3"
                            +"\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e"
                            +"\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5"
                            +"\uac00\ud7a3"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>DIGITS</name> =
                    <init>
                        <expr>"\u0030\u0039\u0660\u0669\u06F0\u06F9\u0966\u096F\u09E6\u09EF\u0A66\u0A6F\u0AE6\u0AEF"
                            +"\u0B66\u0B6F\u0BE7\u0BEF\u0C66\u0C6F\u0CE6\u0CEF\u0D66\u0D6F\u0E50\u0E59\u0ED0\u0ED9"
                            +"\u0F20\u0F29"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
