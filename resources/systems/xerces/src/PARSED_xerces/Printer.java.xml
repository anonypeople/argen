<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xml\serialize\Printer.java">
    <comment type="block">/*
        * Copyright 1999-2002,2004 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>


    <comment type="line">// Sep 14, 2000:</comment>
    <comment type="line">// Fixed serializer to report IO exception directly, instead at</comment>
    <comment type="line">// the end of document processing.</comment>
    <comment type="line">// Reported by Patrick Higgins &lt;phiggins@transzap.com&gt;</comment>


    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xml</name>.
            <name>serialize</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * The printer is responsible for sending text to the output stream
        * or writer. This class performs direct writing for efficiency.
        * {@link IndentPrinter} supports indentation and line wrapping by
        * extending this class.
        *
        * @version $Revision: 1.8 $ $Date: 2004/02/24 23:34:03 $
        * @author &lt;a href="mailto:arkin@intalio.com"&gt;Assaf Arkin&lt;/a&gt;
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>Printer</name>
        <block>{


            <comment type="javadoc">/**
                * The output format associated with this serializer. This will never
                * be a null reference. If no format was passed to the constructor,
                * the default one for this document type will be used. The format
                * object is never changed by the serializer.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>OutputFormat</name>
                    </type>
                    <name>_format</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The writer to which the document is written.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Writer</name>
                    </type>
                    <name>_writer</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The DTD writer. When we switch to DTD mode, all output is
                * accumulated in this DTD writer. When we switch out of it,
                * the output is obtained as a string. Must not be reset to
                * null until we're done with the document.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>StringWriter</name>
                    </type>
                    <name>_dtdWriter</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Holds a reference to the document writer while we are
                * in DTD mode.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>Writer</name>
                    </type>
                    <name>_docWriter</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Holds the exception thrown by the serializer. Exceptions do not cause
                * the serializer to quit, but are held and one is thrown at the end.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>IOException</name>
                    </type>
                    <name>_exception</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The size of the output buffer.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BufferSize</name> =
                    <init>
                        <expr>4096</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Output buffer.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                        <index>[]</index>
                    </type>
                    <name>_buffer</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>char</name>
                                <index>[
                                    <expr>
                                        <name>BufferSize</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Position within the output buffer.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>_pos</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <constructor>
                <specifier>public</specifier>
                <name>Printer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>writer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputFormat</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_writer</name>
                            =
                            <name>writer</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_format</name>
                            =
                            <name>format</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_exception</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_dtdWriter</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_docWriter</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>_pos</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>IOException</name>
                </type>
                <name>getException</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>_exception</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called by any of the DTD handlers to enter DTD mode.
                * Once entered, all output will be accumulated in a string
                * that can be printed as part of the document's DTD.
                * This method may be called any number of time but will only
                * have affect the first time it's called. To exist DTD state
                * and get the accumulated DTD, call {@link #leaveDTD}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>enterDTD</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Can only enter DTD state once. Once we're out of DTD</comment>
                    <comment type="line">// state, can no longer re-enter it.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>_dtdWriter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>flushLine</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>_dtdWriter</name>
                                        = new
                                        <call>
                                            <name>StringWriter</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_docWriter</name>
                                        =
                                        <name>_writer</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>_writer</name>
                                        =
                                        <name>_dtdWriter</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Called by the root element to leave DTD mode and if any
                * DTD parts were printer, will return a string with their
                * textual content.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>leaveDTD</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Only works if we're going out of DTD mode.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>_writer</name>
                                ==
                                <name>_dtdWriter</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>flushLine</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>_writer</name>
                                        =
                                        <name>_docWriter</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>_dtdWriter</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>length</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>_pos</name>
                                                ==
                                                <name>BufferSize</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>_writer</name>.
                                                                <name>write</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>_buffer</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>_pos</name>
                                                        = 0
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>_buffer</name>
                                                <index>[
                                                    <expr>
                                                        <name>_pos</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>
                                                <name><name>text</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>++
                                            <name>_pos</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>length</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>_pos</name>
                                                ==
                                                <name>BufferSize</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>_writer</name>.
                                                                <name>write</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>_buffer</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>_pos</name>
                                                        = 0
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>_buffer</name>
                                                <index>[
                                                    <expr>
                                                        <name>_pos</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>
                                                <name><name>text</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>++
                                            <name>_pos</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <while>while
                                <condition>(
                                    <expr><name>length</name>-- &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>_pos</name>
                                                ==
                                                <name>BufferSize</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>_writer</name>.
                                                                <name>write</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>_buffer</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>_pos</name>
                                                        = 0
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>_buffer</name>
                                                <index>[
                                                    <expr>
                                                        <name>_pos</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>++
                                            <name>start</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>++
                                            <name>_pos</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>_pos</name>
                                        ==
                                        <name>BufferSize</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>_writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>_buffer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>_pos</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>_buffer</name>
                                        <index>[
                                            <expr>
                                                <name>_pos</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>ch</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>++
                                    <name>_pos</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printSpace</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>_pos</name>
                                        ==
                                        <name>BufferSize</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>_writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>_buffer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>_pos</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>_buffer</name>
                                        <index>[
                                            <expr>
                                                <name>_pos</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = ' '
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>++
                                    <name>_pos</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>breakLine</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>_pos</name>
                                        ==
                                        <name>BufferSize</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>_writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>_buffer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>_pos</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>_buffer</name>
                                        <index>[
                                            <expr>
                                                <name>_pos</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = '\n'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>++
                                    <name>_pos</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>breakLine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveSpace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>breakLine</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>flushLine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveSpace</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Write anything left in the buffer into the writer.</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>_writer</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>_buffer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>_pos</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <name>_pos</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Flush the output stream. Must be called when done printing
                * the document, otherwise some text might be buffered.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>flush</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>_writer</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>_buffer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>_pos</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>_writer</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>except</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// We don't throw an exception, but hold it</comment>
                                <comment type="line">// until the end of the document.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>_exception</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>_exception</name>
                                                =
                                                <name>except</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>except</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <name>_pos</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>indent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// NOOP</comment>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unindent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// NOOP</comment>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNextIndent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextIndent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>indent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setThisIndent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>indent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>


            }
        </block>
    </class>
</unit>
