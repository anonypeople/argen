<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\impl\dv\xs\QNameDV.java">
    <comment type="block">/*
        * Copyright 2001-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>xs</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>InvalidDatatypeValueException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>impl</name>.<name>dv</name>.
            <name>ValidationContext</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>util</name>.
            <name>XMLChar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xni</name>.
            <name>QName</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.<name>xs</name>.<name>datatypes</name>.
            <name>XSQName</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represent the schema type "QName" and "NOTATION"
        *
        * @xerces.internal
        *
        * @author Neeraj Bajaj, Sun Microsystems, inc.
        * @author Sandy Gao, IBM
        *
        * @version $Id: QNameDV.java,v 1.9 2005/05/06 15:31:14 ankitp Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>QNameDV</name>
        <super>
            <extends>extends
                <name>TypeValidator</name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>EMPTY_STRING</name> =
                    <init>
                        <expr>"".
                            <call>
                                <name>intern</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getAllowedFacets</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_LENGTH</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_MINLENGTH</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_MAXLENGTH</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_PATTERN</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_ENUMERATION</name>
                            </name>
                            |
                            <name><name>XSSimpleTypeDecl</name>.
                                <name>FACET_WHITESPACE</name>
                            </name>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getActualValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>content</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ValidationContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvalidDatatypeValueException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// "prefix:localpart" or "localpart"</comment>
                    <comment type="line">// get prefix and local part out of content</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>,
                            <name>localpart</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>colonptr</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>content</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>":"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>colonptr</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>prefix</name>
                                        =
                                        <call>
                                            <name><name>context</name>.
                                                <name>getSymbol</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>content</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>colonptr</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>localpart</name>
                                        =
                                        <call>
                                            <name><name>content</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr><name>colonptr</name>+1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>prefix</name>
                                        =
                                        <name>EMPTY_STRING</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>localpart</name>
                                        =
                                        <name>content</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <comment type="line">// both prefix (if any) a nd localpart must be valid NCName</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>prefix</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0 &amp;&amp; !
                                <call>
                                    <name><name>XMLChar</name>.
                                        <name>isValidNCName</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>prefix</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>InvalidDatatypeValueException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"cvc-datatype-valid.1.2.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <name>
                                                        <name>Object</name>
                                                        <index>[]</index>
                                                    </name>
                                                    <block>{
                                                        <expr>
                                                            <name>content</name>
                                                        </expr>
                                                        , <expr>"QName"</expr>}
                                                    </block>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>XMLChar</name>.
                                        <name>isValidNCName</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>localpart</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>InvalidDatatypeValueException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"cvc-datatype-valid.1.2.1"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <name>
                                                        <name>Object</name>
                                                        <index>[]</index>
                                                    </name>
                                                    <block>{
                                                        <expr>
                                                            <name>content</name>
                                                        </expr>
                                                        , <expr>"QName"</expr>}
                                                    </block>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <comment type="line">// resove prefix to a uri, report an error if failed</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>context</name>.
                                            <name>getURI</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prefix</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>prefix</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0 &amp;&amp; <name>uri</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>InvalidDatatypeValueException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"UndeclaredPrefix"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <name>
                                                        <name>Object</name>
                                                        <index>[]</index>
                                                    </name>
                                                    <block>{
                                                        <expr>
                                                            <name>content</name>
                                                        </expr>
                                                        ,
                                                        <expr>
                                                            <name>prefix</name>
                                                        </expr>
                                                        }
                                                    </block>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <return>return
                        <expr>new
                            <call>
                                <name>XQName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>context</name>.
                                                    <name>getSymbol</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>localpart</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>context</name>.
                                                    <name>getSymbol</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>content</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>uri</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="line">// REVISIT: qname and notation shouldn't support length facets.</comment>
            <comment type="line">// now we just return the length of the rawname</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getDataLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>XQName</name>)<name>value</name>).
                            <call>
                                <name><name>rawname</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * represent QName data
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>XQName</name>
                <super>
                    <extends>extends
                        <name>QName</name>
                    </extends>
                    <implements>implements
                        <name>XSQName</name>
                    </implements>
                </super>
                <block>{
                    <comment type="javadoc">/** Constructs a QName with the specified values. */</comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>XQName</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>prefix</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>localpart</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>rawname</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>uri</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setValues</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prefix</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>localpart</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rawname</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>uri</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    <comment type="line">// &lt;init&gt;(String,String,String,String)</comment>

                    <comment type="javadoc">/** Returns true if the two objects are equal. */</comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>equals</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>object</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>object</name>
                                        <name>instanceof</name>
                                        <name>QName</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>QName</name>
                                                </type>
                                                <name>qname</name> =
                                                <init>
                                                    <expr>(<name>QName</name>)
                                                        <name>object</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <name>uri</name>
                                                ==
                                                <name><name>qname</name>.
                                                    <name>uri</name>
                                                </name>
                                                &amp;&amp; <name>localpart</name> ==
                                                <name><name>qname</name>.
                                                    <name>localpart</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    <comment type="line">// equals(Object):boolean</comment>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <specifier>synchronized</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>rawname</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name><name>javax</name>.<name>xml</name>.<name>namespace</name>.
                                <name>QName</name>
                            </name>
                        </type>
                        <name>getJAXPQName</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name><name>javax</name>.<name>xml</name>.<name>namespace</name>.
                                            <name>QName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>uri</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>localpart</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>prefix</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>QName</name>
                        </type>
                        <name>getXNIQName</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
    <comment type="line">// class QNameDVDV</comment>
</unit>
