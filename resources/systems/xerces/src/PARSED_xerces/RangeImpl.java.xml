<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="C:\Users\dnader\git\biorimp\BIO-RIMP\test_data\code\xerces\src\org\apache\xerces\dom\RangeImpl.java">
    <comment type="block">/*
        * Copyright 1999-2005 The Apache Software Foundation.
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>xerces</name>.
            <name>dom</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>CharacterData</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DOMException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>DocumentFragment</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.
            <name>Node</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ranges</name>.
            <name>Range</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>ranges</name>.
            <name>RangeException</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/** The RangeImpl class implements the org.w3c.dom.range.Range interface.
        * &lt;p&gt; Please see the API documentation for the interface classes
        * and use the interfaces in your client programs.
        *
        * @xerces.internal
        *
        * @version $Id: RangeImpl.java,v 1.39 2005/03/07 23:28:40 mrglavas Exp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>RangeImpl</name>
        <super>
            <implements>implements
                <name>Range</name>
            </implements>
        </super>
        <block>{

            <comment type="line">//</comment>
            <comment type="line">// Constants</comment>
            <comment type="line">//</comment>


            <comment type="line">//</comment>
            <comment type="line">// Data</comment>
            <comment type="line">//</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>DocumentImpl</name>
                    </type>
                    <name>fDocument</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fStartContainer</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fEndContainer</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fStartOffset</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>fEndOffset</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>fIsCollapsed</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>fDetach</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fInsertNode</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fDeleteNode</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fSplitNode</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Was the Node inserted from the Range or the Document</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>fInsertedFromRange</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The constructor. Clients must use DocumentRange.createRange(),
                * because it registers the Range with the document, so it can
                * be fixed-up.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>RangeImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DocumentImpl</name>
                            </type>
                            <name>document</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDocument</name>
                            =
                            <name>document</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fStartContainer</name>
                            =
                            <name>document</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEndContainer</name>
                            =
                            <name>document</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fStartOffset</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEndOffset</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fDetach</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getStartContainer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>fStartContainer</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getStartOffset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>fStartOffset</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getEndContainer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>fEndContainer</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getEndOffset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>fEndOffset</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>getCollapsed</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>fStartContainer</name> ==
                            <name>fEndContainer</name>
                            &amp;&amp; <name>fStartOffset</name> == <name>fEndOffset</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Node</name>
                </type>
                <name>getCommonAncestorContainer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>startV</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr><name>node</name>=
                                <name>fStartContainer</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>node</name>=
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>startV</name>.
                                            <name>addElement</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>node</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Vector</name>
                            </type>
                            <name>endV</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr><name>node</name>=
                                <name>fEndContainer</name>
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>node</name>=
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>endV</name>.
                                            <name>addElement</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>node</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>startV</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>endV</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr><name>s</name>&gt;=0 &amp;&amp; <name>e</name>&gt;=0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>startV</name>.
                                                <name>elementAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>s</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ==
                                        <call>
                                            <name><name>endV</name>.
                                                <name>elementAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>result</name>
                                                =
                                                <call>
                                                    <name><name>startV</name>.
                                                        <name>elementAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>s</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>--
                                    <name>s</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>--
                                    <name>e</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>(<name>Node</name>)
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isLegalContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>refNode</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fStartContainer</name>
                            =
                            <name>refNode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fStartOffset</name>
                            =
                            <name>offset</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If one boundary-point of a Range is set to have a root container</comment>
                    <comment type="line">// other</comment>
                    <comment type="line">// than the current one for the Range, the Range should be collapsed to
                    </comment>
                    <comment type="line">// the new position.</comment>
                    <comment type="line">// The start position of a Range should never be after the end position.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getCommonAncestorContainer</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                                || (<name>fStartContainer</name> == <name>fEndContainer</name> &amp;&amp; <name>
                                fEndOffset
                            </name> &lt; <name>fStartOffset</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isLegalContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>refNode</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>fEndContainer</name>
                            =
                            <name>refNode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEndOffset</name>
                            =
                            <name>offset</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If one boundary-point of a Range is set to have a root container</comment>
                    <comment type="line">// other</comment>
                    <comment type="line">// than the current one for the Range, the Range should be collapsed to
                    </comment>
                    <comment type="line">// the new position.</comment>
                    <comment type="line">// The start position of a Range should never be after the end position.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getCommonAncestorContainer</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                                || (<name>fStartContainer</name> == <name>fEndContainer</name> &amp;&amp; <name>
                                fEndOffset
                            </name> &lt; <name>fStartOffset</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStartBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>hasLegalRootContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            !
                                            <call>
                                                <name>isLegalContainedNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>fStartContainer</name>
                            =
                            <call>
                                <name><name>refNode</name>.
                                    <name>getParentNode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>refNode</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>n</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getPreviousSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>fStartOffset</name>
                            = <name>i</name>-1
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If one boundary-point of a Range is set to have a root container</comment>
                    <comment type="line">// other</comment>
                    <comment type="line">// than the current one for the Range, the Range should be collapsed to
                    </comment>
                    <comment type="line">// the new position.</comment>
                    <comment type="line">// The start position of a Range should never be after the end position.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getCommonAncestorContainer</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                                || (<name>fStartContainer</name> == <name>fEndContainer</name> &amp;&amp; <name>
                                fEndOffset
                            </name> &lt; <name>fStartOffset</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStartAfter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>hasLegalRootContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            !
                                            <call>
                                                <name>isLegalContainedNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fStartContainer</name>
                            =
                            <call>
                                <name><name>refNode</name>.
                                    <name>getParentNode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>refNode</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>n</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getPreviousSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>fStartOffset</name>
                            =
                            <name>i</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If one boundary-point of a Range is set to have a root container</comment>
                    <comment type="line">// other</comment>
                    <comment type="line">// than the current one for the Range, the Range should be collapsed to
                    </comment>
                    <comment type="line">// the new position.</comment>
                    <comment type="line">// The start position of a Range should never be after the end position.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getCommonAncestorContainer</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                                || (<name>fStartContainer</name> == <name>fEndContainer</name> &amp;&amp; <name>
                                fEndOffset
                            </name> &lt; <name>fStartOffset</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEndBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>hasLegalRootContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            !
                                            <call>
                                                <name>isLegalContainedNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fEndContainer</name>
                            =
                            <call>
                                <name><name>refNode</name>.
                                    <name>getParentNode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>refNode</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>n</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getPreviousSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>fEndOffset</name>
                            = <name>i</name>-1
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If one boundary-point of a Range is set to have a root container</comment>
                    <comment type="line">// other</comment>
                    <comment type="line">// than the current one for the Range, the Range should be collapsed to
                    </comment>
                    <comment type="line">// the new position.</comment>
                    <comment type="line">// The start position of a Range should never be after the end position.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getCommonAncestorContainer</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                                || (<name>fStartContainer</name> == <name>fEndContainer</name> &amp;&amp; <name>
                                fEndOffset
                            </name> &lt; <name>fStartOffset</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEndAfter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>hasLegalRootContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            !
                                            <call>
                                                <name>isLegalContainedNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fEndContainer</name>
                            =
                            <call>
                                <name><name>refNode</name>.
                                    <name>getParentNode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>refNode</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>n</name>!=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getPreviousSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>fEndOffset</name>
                            =
                            <name>i</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If one boundary-point of a Range is set to have a root container</comment>
                    <comment type="line">// other</comment>
                    <comment type="line">// than the current one for the Range, the Range should be collapsed to
                    </comment>
                    <comment type="line">// the new position.</comment>
                    <comment type="line">// The start position of a Range should never be after the end position.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getCommonAncestorContainer</name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                                || (<name>fStartContainer</name> == <name>fEndContainer</name> &amp;&amp; <name>
                                fEndOffset
                            </name> &lt; <name>fStartOffset</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>collapse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toStart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>toStart</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fEndContainer</name>
                                        =
                                        <name>fStartContainer</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fEndOffset</name>
                                        =
                                        <name>fStartOffset</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fStartContainer</name>
                                        =
                                        <name>fEndContainer</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fStartOffset</name>
                                        =
                                        <name>fEndOffset</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>selectNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isLegalContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>refNode</name>.
                                                                    <name>getParentNode</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            !
                                            <call>
                                                <name>isLegalContainedNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>refNode</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <comment type="line">// REVIST: what to do if it IS null?</comment>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fStartContainer</name>
                                        =
                                        <name>parent</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fEndContainer</name>
                                        =
                                        <name>parent</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>n</name> =
                                            <init>
                                                <expr>
                                                    <name>refNode</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>n</name>!=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>n</name>
                                            =
                                            <call>
                                                <name><name>n</name>.
                                                    <name>getPreviousSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>i</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <expr_stmt>
                                    <expr>
                                        <name>fStartOffset</name>
                                        = <name>i</name>-1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>fEndOffset</name>
                                        = <name>fStartOffset</name>+1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>selectNodeContents</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isLegalContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>refNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <name>refNode</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fStartContainer</name>
                            =
                            <name>refNode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fEndContainer</name>
                            =
                            <name>refNode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>first</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>refNode</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fStartOffset</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>first</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fEndOffset</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>n</name> =
                                            <init>
                                                <expr>
                                                    <name>first</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr><name>n</name>!=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>n</name>
                                            =
                                            <call>
                                                <name><name>n</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>i</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <expr_stmt>
                                    <expr>
                                        <name>fEndOffset</name>
                                        =
                                        <name>i</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>compareBoundaryPoints</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Range</name>
                            </type>
                            <name>sourceRange</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// WRONG_DOCUMENT_ERR: Raised if the two Ranges are not in the same
                                    Document or DocumentFragment.
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>(<name>fDocument</name> !=
                                            <call>
                                                <name><name>sourceRange</name>.
                                                    <name>getStartContainer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getOwnerDocument</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <call>
                                                <name><name>sourceRange</name>.
                                                    <name>getStartContainer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>sourceRange</name>.
                                                    <name>getStartContainer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>null</name>)
                                            || (<name>fDocument</name> !=
                                            <call>
                                                <name><name>sourceRange</name>.
                                                    <name>getEndContainer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getOwnerDocument</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; <name>fDocument</name> !=
                                            <call>
                                                <name><name>sourceRange</name>.
                                                    <name>getEndContainer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>sourceRange</name>.
                                                    <name>getStartContainer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != <name>null</name>)
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>endPointA</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>endPointB</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offsetA</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offsetB</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>how</name>
                                ==
                                <name>START_TO_START</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endPointA</name>
                                        =
                                        <call>
                                            <name><name>sourceRange</name>.
                                                <name>getStartContainer</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>endPointB</name>
                                        =
                                        <name>fStartContainer</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>offsetA</name>
                                        =
                                        <call>
                                            <name><name>sourceRange</name>.
                                                <name>getStartOffset</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>offsetB</name>
                                        =
                                        <name>fStartOffset</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>how</name>
                                        ==
                                        <name>START_TO_END</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>endPointA</name>
                                                =
                                                <call>
                                                    <name><name>sourceRange</name>.
                                                        <name>getStartContainer</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>endPointB</name>
                                                =
                                                <name>fEndContainer</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>offsetA</name>
                                                =
                                                <call>
                                                    <name><name>sourceRange</name>.
                                                        <name>getStartOffset</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>offsetB</name>
                                                =
                                                <name>fEndOffset</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>how</name>
                                                ==
                                                <name>END_TO_START</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>endPointA</name>
                                                        =
                                                        <call>
                                                            <name><name>sourceRange</name>.
                                                                <name>getEndContainer</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>endPointB</name>
                                                        =
                                                        <name>fStartContainer</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offsetA</name>
                                                        =
                                                        <call>
                                                            <name><name>sourceRange</name>.
                                                                <name>getEndOffset</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offsetB</name>
                                                        =
                                                        <name>fStartOffset</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>endPointA</name>
                                                        =
                                                        <call>
                                                            <name><name>sourceRange</name>.
                                                                <name>getEndContainer</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>endPointB</name>
                                                        =
                                                        <name>fEndContainer</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offsetA</name>
                                                        =
                                                        <call>
                                                            <name><name>sourceRange</name>.
                                                                <name>getEndOffset</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offsetB</name>
                                                        =
                                                        <name>fEndOffset</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// The DOM Spec outlines four cases that need to be tested</comment>
                    <comment type="line">// to compare two range boundary points:</comment>
                    <comment type="line">// case 1: same container</comment>
                    <comment type="line">// case 2: Child C of container A is ancestor of B</comment>
                    <comment type="line">// case 3: Child C of container B is ancestor of A</comment>
                    <comment type="line">// case 4: preorder traversal of context tree.</comment>

                    <comment type="line">// case 1: same container</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endPointA</name>
                                ==
                                <name>endPointB</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>offsetA</name>
                                            &lt;
                                            <name>offsetB</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>1</expr>;
                                        </return>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>offsetA</name>
                                            ==
                                            <name>offsetB</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>0</expr>;
                                        </return>
                                    </then>
                                </if>
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// case 2: Child C of container A is ancestor of B</comment>
                    <comment type="line">// This can be quickly tested by walking the parent chain of B</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>c</name> =
                                <init>
                                    <expr>
                                        <name>endPointB</name>
                                    </expr>
                                </init>
                                , <name>p</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>c</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>p</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>c</name>
                                =
                                <name>p</name>
                            </expr>
                            ,
                            <expr>
                                <name>p</name>
                                =
                                <call>
                                    <name><name>p</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p</name>
                                        ==
                                        <name>endPointA</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>index</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>indexOf</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>c</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>endPointA</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>offsetA</name>
                                                    &lt;=
                                                    <name>index</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <return>return <expr>1</expr>;
                                                </return>
                                            </then>
                                        </if>
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// case 3: Child C of container B is ancestor of A</comment>
                    <comment type="line">// This can be quickly tested by walking the parent chain of A</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>c</name> =
                                <init>
                                    <expr>
                                        <name>endPointA</name>
                                    </expr>
                                </init>
                                , <name>p</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>c</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>p</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>c</name>
                                =
                                <name>p</name>
                            </expr>
                            ,
                            <expr>
                                <name>p</name>
                                =
                                <call>
                                    <name><name>p</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p</name>
                                        ==
                                        <name>endPointB</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>index</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>indexOf</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>c</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>endPointB</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>index</name>
                                                    &lt;
                                                    <name>offsetB</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <return>return <expr>1</expr>;
                                                </return>
                                            </then>
                                        </if>
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// case 4: preorder traversal of context tree.</comment>
                    <comment type="line">// Instead of literally walking the context tree in pre-order,</comment>
                    <comment type="line">// we use relative node depth walking which is usually faster</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>depthDiff</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>endPointA</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>n</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <expr_stmt>
                            <expr><name>depthDiff</name>++
                            </expr>
                            ;
                        </expr_stmt>
                    </for>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <name>endPointB</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>n</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <expr_stmt>
                            <expr><name>depthDiff</name>--
                            </expr>
                            ;
                        </expr_stmt>
                    </for>
                    <while>while
                        <condition>(
                            <expr>
                                <name>depthDiff</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>endPointA</name>
                                    =
                                    <call>
                                        <name><name>endPointA</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>depthDiff</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <while>while
                        <condition>(
                            <expr>
                                <name>depthDiff</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>endPointB</name>
                                    =
                                    <call>
                                        <name><name>endPointB</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>depthDiff</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>pA</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>endPointA</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                                ,
                                <name>pB</name>
                                =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>endPointB</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>pA</name>
                                !=
                                <name>pB</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>pA</name>
                                =
                                <call>
                                    <name><name>pA</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ,
                            <expr>
                                <name>pB</name>
                                =
                                <call>
                                    <name><name>pB</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>endPointA</name>
                                    =
                                    <name>pA</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>endPointB</name>
                                    =
                                    <name>pB</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>n</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>endPointA</name>.
                                                <name>getNextSibling</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>n</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>n</name>
                                =
                                <call>
                                    <name><name>n</name>.
                                        <name>getNextSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>n</name>
                                        ==
                                        <name>endPointB</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>deleteContents</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>traverseContents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>DELETE_CONTENTS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>extractContents</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>traverseContents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>EXTRACT_CONTENTS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>cloneContents</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>traverseContents</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>CLONE_CONTENTS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>insertNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>newNode</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <comment type="line">//throw exception?</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>newNode</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDocument</name>
                                            !=
                                            <call>
                                                <name><name>newNode</name>.
                                                    <name>getOwnerDocument</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>WRONG_DOCUMENT_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"WRONG_DOCUMENT_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>type</name>
                                            ==
                                            <name><name>Node</name>.
                                                <name>ATTRIBUTE_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>ENTITY_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>NOTATION_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>DOCUMENT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>cloneCurrent</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>current</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>currentChildren</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fInsertedFromRange</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">//boolean MULTIPLE_MODE = false;</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Node</name>
                                        </type>
                                        <name>parent</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fStartContainer</name>.
                                                        <name>getParentNode</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>currentChildren</name>
                                        =
                                        <call>
                                            <name><name>parent</name>.
                                                <name>getChildNodes</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getLength</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">//holds number of kids before insertion</comment>
                                <comment type="line">// split text node: results is 3 nodes..</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>cloneCurrent</name>
                                        =
                                        <call>
                                            <name><name>fStartContainer</name>.
                                                <name>cloneNode</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>((<name>TextImpl</name>)<name>cloneCurrent</name>).
                                        <call>
                                            <name>setNodeValueInternal</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(
                                                        <call>
                                                            <name><name>cloneCurrent</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        ).
                                                        <call>
                                                            <name>substring</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fStartOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>((<name>TextImpl</name>)<name>fStartContainer</name>).
                                        <call>
                                            <name>setNodeValueInternal</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(
                                                        <call>
                                                            <name><name>fStartContainer</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        ).
                                                        <call>
                                                            <name>substring</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fStartOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Node</name>
                                        </type>
                                        <name>next</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fStartContainer</name>.
                                                        <name>getNextSibling</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>next</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>parent</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>parent</name>.
                                                                        <name>insertBefore</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>newNode</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>next</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>parent</name>.
                                                                        <name>insertBefore</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>cloneCurrent</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>next</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>parent</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>parent</name>.
                                                                        <name>appendChild</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>newNode</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>parent</name>.
                                                                        <name>appendChild</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>cloneCurrent</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <comment type="line">//update ranges after the insertion</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fEndContainer</name>
                                            ==
                                            <name>fStartContainer</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndContainer</name>
                                                    =
                                                    <name>cloneCurrent</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">//endContainer is the new Node created</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    -=
                                                    <name>fStartOffset</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fEndContainer</name>
                                                    ==
                                                    <name>parent</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">//endContainer was not a text Node.</comment>
                                                    <comment type="line">//endOffset + = number_of_children_added
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fEndOffset</name>
                                                            += (
                                                            <call>
                                                                <name><name>parent</name>.
                                                                    <name>getChildNodes</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>getLength</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            - <name>currentChildren</name>)
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>

                                <comment type="line">// signal other Ranges to update their start/end
                                    containers/offsets
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>signalSplitData</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fStartContainer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>cloneCurrent</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>fStartOffset</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>


                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// ! TEXT_NODE</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fEndContainer</name>
                                            ==
                                            <name>fStartContainer</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <comment type="line">//need to remember number of kids</comment>
                                        <expr_stmt>
                                            <expr><name>currentChildren</name>=
                                                <call>
                                                    <name><name>fEndContainer</name>.
                                                        <name>getChildNodes</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getLength</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>current</name>
                                        =
                                        <call>
                                            <name><name>fStartContainer</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for(
                                    <init>
                                        <expr>
                                            <name>i</name>
                                            = 0
                                        </expr>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt; <name>fStartOffset</name> &amp;&amp; <name>current</name> !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>current</name>=
                                                <call>
                                                    <name><name>current</name>.
                                                        <name>getNextSibling</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>current</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fStartContainer</name>.
                                                            <name>insertBefore</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>newNode</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>current</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>fStartContainer</name>.
                                                            <name>appendChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>newNode</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <comment type="line">//update fEndOffset. ex:&lt;body&gt;&lt;p/&gt;&lt;/body&gt;.
                                    Range(start;end): body,0; body,1
                                </comment>
                                <comment type="line">// insert &lt;h1&gt;: &lt;body&gt;&lt;/h1&gt;&lt;p/&gt;&lt;/body&gt;.
                                    Range(start;end): body,0; body,2
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fEndContainer</name>
                                            == <name>fStartContainer</name> &amp;&amp; <name>fEndOffset</name> != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">//update fEndOffset if not 0</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    += (
                                                    <call>
                                                        <name><name>fEndContainer</name>.
                                                            <name>getChildNodes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>getLength</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    - <name>currentChildren</name>)
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fInsertedFromRange</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>surroundContents</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newParent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>RangeException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr><name>newParent</name>==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>newParent</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fDocument</name>.
                                    <name>errorChecking</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fDetach</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INVALID_STATE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_STATE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>type</name>
                                            ==
                                            <name><name>Node</name>.
                                                <name>ATTRIBUTE_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>ENTITY_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>NOTATION_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>DOCUMENT_TYPE_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>DOCUMENT_NODE</name>
                                            </name>
                                            || <name>type</name> ==
                                            <name><name>Node</name>.
                                                <name>DOCUMENT_FRAGMENT_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>RangeExceptionImpl</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>RangeException</name>.
                                                                        <name>INVALID_NODE_TYPE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INVALID_NODE_TYPE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>realStart</name> =
                            <init>
                                <expr>
                                    <name>fStartContainer</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>realEnd</name> =
                            <init>
                                <expr>
                                    <name>fEndContainer</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>realStart</name>
                                        =
                                        <call>
                                            <name><name>fStartContainer</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>realEnd</name>
                                        =
                                        <call>
                                            <name><name>fEndContainer</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>realStart</name>
                                !=
                                <name>realEnd</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RangeExceptionImpl</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>RangeException</name>.
                                                            <name>BAD_BOUNDARYPOINTS_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"BAD_BOUNDARYPOINTS_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentFragment</name>
                            </type>
                            <name>frag</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>extractContents</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>insertNode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newParent</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newParent</name>.
                                    <name>appendChild</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>frag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>selectNode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newParent</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Range</name>
                </type>
                <name>cloneRange</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Range</name>
                            </type>
                            <name>range</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fDocument</name>.
                                            <name>createRange</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>range</name>.
                                    <name>setStart</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fStartContainer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fStartOffset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>range</name>.
                                    <name>setEnd</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fEndContainer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fEndOffset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>range</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name> =
                            <init>
                                <expr>
                                    <name>fStartContainer</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>stopNode</name> =
                            <init>
                                <expr>
                                    <name>fEndContainer</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>sb</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                                ||
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>CDATA_SECTION_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fStartContainer</name>
                                            ==
                                            <name>fEndContainer</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>sb</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fStartContainer</name>.
                                                                            <name>getNodeValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>substring</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fStartOffset</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>fEndOffset</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>sb</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>sb</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>fStartContainer</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>substring</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fStartOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>node</name>=
                                        <call>
                                            <name>nextNode</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">//fEndContainer!=fStartContainer</comment>

                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">//fStartContainer is not a TextNode</comment>
                                <expr_stmt>
                                    <expr><name>node</name>=
                                        <call>
                                            <name><name>node</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr><name>fStartOffset</name>&gt;0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">//find a first node within a range, specified by
                                                fStartOffset
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>counter</name>=
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <while>while
                                                <condition>(
                                                    <expr><name>counter</name>&lt;<name>fStartOffset
                                                    </name> &amp;&amp; <name>node</name>!=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>node</name>=
                                                            <call>
                                                                <name><name>node</name>.
                                                                    <name>getNextSibling</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr><name>counter</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </while>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>node</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>node</name>
                                                    =
                                                    <call>
                                                        <name>nextNode</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fStartContainer</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                                &amp;&amp;
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name><name>Node</name>.
                                    <name>CDATA_SECTION_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name>=
                                        <init>
                                            <expr>
                                                <name>fEndOffset</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>stopNode</name>
                                        =
                                        <call>
                                            <name><name>fEndContainer</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <while>while
                                    <condition>(
                                        <expr><name>i</name>&gt;0 &amp;&amp; <name>stopNode</name>!=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>--
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>stopNode</name>
                                                =
                                                <call>
                                                    <name><name>stopNode</name>.
                                                        <name>getNextSibling</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>stopNode</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <expr_stmt>
                                            <expr>
                                                <name>stopNode</name>
                                                =
                                                <call>
                                                    <name>nextNode</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fEndContainer</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <while>while
                        <condition>(
                            <expr>
                                <name>node</name>
                                !=
                                <name>stopNode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">//look into all kids of the Range</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <break>break;</break>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>node</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>TEXT_NODE</name>
                                        </name>
                                        ||
                                        <call>
                                            <name><name>node</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name><name>Node</name>.
                                            <name>CDATA_SECTION_NODE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>sb</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>node</name>.
                                                                        <name>getNodeValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name>nextNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>node</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                                ||
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>CDATA_SECTION_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>sb</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>fEndContainer</name>.
                                                                <name>getNodeValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>substring</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fEndOffset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>sb</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>detach</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fDetach</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fDocument</name>.
                                    <name>removeRange</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Mutation functions</comment>
            <comment type="line">//</comment>

            <comment type="javadoc">/** Signal other Ranges to update their start/end
                * containers/offsets. The data has already been split
                * into the two Nodes.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>signalSplitData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fSplitNode</name>
                            =
                            <name>node</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// notify document</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fDocument</name>.
                                    <name>splitData</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>node</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNode</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fSplitNode</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Fix up this Range if another Range has split a Text Node
                * into 2 Nodes.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>receiveSplitData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                == <name>null</name> || <name>newNode</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fSplitNode</name>
                                ==
                                <name>node</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fStartContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fStartOffset</name>
                                            &gt;
                                            <name>offset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStartOffset</name>
                                                    = <name>fStartOffset</name> -
                                                    <name>offset</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStartContainer</name>
                                                    =
                                                    <name>newNode</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fEndContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fEndOffset</name>
                                            &gt;
                                            <name>offset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    = <name>fEndOffset</name>-
                                                    <name>offset</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndContainer</name>
                                                    =
                                                    <name>newNode</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>

            <comment type="javadoc">/** This function inserts text into a Node and invokes
                * a method to fix-up all other Ranges.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>deleteData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharacterData</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fDeleteNode</name>
                            =
                            <name>node</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>node</name>.
                                    <name>deleteData</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fDeleteNode</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/** This function is called from DOM.
                * The text has already beeen inserted.
                * Fix-up any offsets.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>receiveDeletedText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDeleteNode</name>
                                ==
                                <name>node</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fStartContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fStartOffset</name>
                                            &gt; <name>offset</name>+
                                            <name>count</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStartOffset</name>
                                                    = <name>offset</name>+(<name>fStartOffset</name>-(<name>
                                                    offset</name>+<name>count</name>))
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fStartOffset</name>
                                                    &gt;
                                                    <name>offset</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fStartOffset</name>
                                                            =
                                                            <name>offset</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fEndContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>fEndOffset</name>
                                            &gt; <name>offset</name>+
                                            <name>count</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    = <name>offset</name>+(<name>fEndOffset</name>-(<name>offset</name>+<name>
                                                    count</name>))
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    &gt;
                                                    <name>offset</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>fEndOffset</name>
                                                            =
                                                            <name>offset</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>

            <comment type="javadoc">/** This function inserts text into a Node and invokes
                * a method to fix-up all other Ranges.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>insertData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharacterData</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>insert</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fInsertNode</name>
                            =
                            <name>node</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>node</name>.
                                    <name>insertData</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>insert</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fInsertNode</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/** This function is called from DOM.
                * The text has already beeen inserted.
                * Fix-up any offsets.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>receiveInsertedText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fInsertNode</name>
                                ==
                                <name>node</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fStartContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>fStartOffset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStartOffset</name>
                                                    = <name>fStartOffset</name>+
                                                    <name>len</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fEndContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>fEndOffset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    = <name>fEndOffset</name>+
                                                    <name>len</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>

            <comment type="javadoc">/** This function is called from DOM.
                * The text has already beeen replaced.
                * Fix-up any offsets.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>receiveReplacedText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fStartContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fStartOffset</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>fEndContainer</name>
                                &amp;&amp;
                                <call>
                                    <name><name>fEndContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fEndOffset</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>

            <comment type="javadoc">/** This function is called from the DOM.
                * This node has already been inserted into the DOM.
                * Fix-up any offsets.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>insertedNodeFromDOM</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fInsertNode</name>
                                ==
                                <name>node</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fInsertedFromRange</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <comment type="line">// Offsets are adjusted in Range.insertNode</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                ==
                                <name>fStartContainer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>indexOf</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fStartContainer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>fStartOffset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>fStartOffset</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                ==
                                <name>fEndContainer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>indexOf</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fEndContainer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>fEndOffset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>fEndOffset</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>

            <comment type="javadoc">/** This function is called within Range
                * instead of Node.removeChild,
                * so that the range can remember that it is actively
                * removing this child.
                */
            </comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>Node</name>
                    </type>
                    <name>fRemoveChild</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>removeChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>fRemoveChild</name>
                            =
                            <name>child</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>parent</name>.
                                            <name>removeChild</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>child</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fRemoveChild</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>n</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** This function must be called by the DOM _BEFORE_
                * a node is deleted, because at that time it is
                * connected in the DOM tree, which we depend on.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>removeNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fRemoveChild</name>
                                ==
                                <name>node</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return;</return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                ==
                                <name>fStartContainer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>indexOf</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fStartContainer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>fStartOffset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>fStartOffset</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                ==
                                <name>fEndContainer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>indexOf</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>node</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fEndContainer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt;
                                            <name>fEndOffset</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>fEndOffset</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">//startContainer or endContainer or both is/are the ancestor(s) of the Node to
                        be deleted
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parent</name>
                                !=
                                <name>fStartContainer</name>
                                ||  <name>parent</name> !=
                                <name>fEndContainer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isAncestorOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>node</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fStartContainer</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStartContainer</name>
                                                    =
                                                    <name>parent</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fStartOffset</name>
                                                    =
                                                    <call>
                                                        <name>indexOf</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>parent</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isAncestorOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>node</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fEndContainer</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndContainer</name>
                                                    =
                                                    <name>parent</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>fEndOffset</name>
                                                    =
                                                    <call>
                                                        <name>indexOf</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>parent</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    }
                </block>
            </function>

            <comment type="line">//</comment>
            <comment type="line">// Utility functions.</comment>
            <comment type="line">//</comment>

            <comment type="line">// parameters for traverseContents(int)</comment>
            <comment type="line">//REVIST: use boolean, since there are only 2 now...</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>EXTRACT_CONTENTS</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CLONE_CONTENTS</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DELETE_CONTENTS</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * This is the master routine invoked to visit the nodes
                * selected by this range. For each such node, different
                * actions are taken depending on the value of the
                * &lt;code&gt;how&lt;/code&gt; argument.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a document fragment containing the range's content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but sill
                * produced cloned content in a document fragment
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes.
                * &lt;/ol&gt;
                *
                * @return Returns a document fragment containing any
                * copied or extracted nodes. If the &lt;code&gt;how&lt;/code&gt;
                * parameter was &lt;code&gt;DELETE_CONTENTS&lt;/code&gt;, the
                * return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>traverseContents</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fStartContainer</name>
                                == <name>null</name> || <name>fEndContainer</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// REVIST: Throw exception?</comment>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">//Check for a detached range.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fDetach</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INVALID_STATE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INVALID_STATE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        Traversal is accomplished by first determining the
                        relationship between the endpoints of the range.
                        For each of four significant relationships, we will
                        delegate the traversal call to a method that
                        can make appropriate assumptions.
                        */
                    </comment>

                    <comment type="line">// case 1: same container</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fStartContainer</name>
                                ==
                                <name>fEndContainer</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>traverseSameContainer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>


                    <comment type="line">// case 2: Child C of start container is ancestor of end container</comment>
                    <comment type="line">// This can be quickly tested by walking the parent chain of</comment>
                    <comment type="line">// end container</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endContainerDepth</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>c</name> =
                                <init>
                                    <expr>
                                        <name>fEndContainer</name>
                                    </expr>
                                </init>
                                , <name>p</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>c</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>p</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>c</name>
                                =
                                <name>p</name>
                            </expr>
                            ,
                            <expr>
                                <name>p</name>
                                =
                                <call>
                                    <name><name>p</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p</name>
                                        ==
                                        <name>fStartContainer</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>traverseCommonStartContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>++
                                    <name>endContainerDepth</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// case 3: Child C of container B is ancestor of A</comment>
                    <comment type="line">// This can be quickly tested by walking the parent chain of A</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startContainerDepth</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>c</name> =
                                <init>
                                    <expr>
                                        <name>fStartContainer</name>
                                    </expr>
                                </init>
                                , <name>p</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>c</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>p</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>c</name>
                                =
                                <name>p</name>
                            </expr>
                            ,
                            <expr>
                                <name>p</name>
                                =
                                <call>
                                    <name><name>p</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>p</name>
                                        ==
                                        <name>fEndContainer</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>traverseCommonEndContainer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>++
                                    <name>startContainerDepth</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// case 4: There is a common ancestor container. Find the</comment>
                    <comment type="line">// ancestor siblings that are children of that container.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>depthDiff</name> =
                            <init>
                                <expr>
                                    <name>startContainerDepth</name>
                                    -
                                    <name>endContainerDepth</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>startNode</name> =
                            <init>
                                <expr>
                                    <name>fStartContainer</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>depthDiff</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>startNode</name>
                                    =
                                    <call>
                                        <name><name>startNode</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>depthDiff</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>endNode</name> =
                            <init>
                                <expr>
                                    <name>fEndContainer</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>depthDiff</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>endNode</name>
                                    =
                                    <call>
                                        <name><name>endNode</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>depthDiff</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// ascend the ancestor hierarchy until we have a common parent.</comment>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>sp</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>startNode</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                                , <name>ep</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>endNode</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>sp</name>!=
                                <name>ep</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>sp</name>
                                =
                                <call>
                                    <name><name>sp</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ,
                            <expr>
                                <name>ep</name>
                                =
                                <call>
                                    <name><name>ep</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>startNode</name>
                                    =
                                    <name>sp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>endNode</name>
                                    =
                                    <name>ep</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>traverseCommonAncestors</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>startNode</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>endNode</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>how</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Visits the nodes selected by this range when we know
                * a-priori that the start and end containers are the same.
                * This method is invoked by the generic &lt;code&gt;traverse&lt;/code&gt;
                * method.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a document fragment containing the range's content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but sill
                * produced cloned content in a document fragment
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes.
                * &lt;/ol&gt;
                *
                * @return Returns a document fragment containing any
                * copied or extracted nodes. If the &lt;code&gt;how&lt;/code&gt;
                * parameter was &lt;code&gt;DELETE_CONTENTS&lt;/code&gt;, the
                * return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>traverseSameContainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentFragment</name>
                            </type>
                            <name>frag</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>how</name>!=
                                <name>DELETE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>frag</name>
                                    =
                                    <call>
                                        <name><name>fDocument</name>.
                                            <name>createDocumentFragment</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <comment type="line">// If selection is empty, just return the fragment</comment>
                    <if>if
                        <condition>(
                            <expr><name>fStartOffset</name>==
                                <name>fEndOffset</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>frag</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// Text node needs special case handling</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fStartContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// get the substring</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>s</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>fStartContainer</name>.
                                                        <name>getNodeValue</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>sub</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fStartOffset</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fEndOffset</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <comment type="line">// set the original text node to its new value</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>how</name>
                                            !=
                                            <name>CLONE_CONTENTS</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>((<name>TextImpl</name>)<name>fStartContainer</name>).
                                                    <call>
                                                        <name>deleteData</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fStartOffset</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr><name>fEndOffset</name>-
                                                                    <name>fStartOffset</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// Nothing is partially selected, so collapse to start
                                                point
                                            </comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>collapse</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr><name>how</name>==
                                            <name>DELETE_CONTENTS</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>frag</name>.
                                                <name>appendChild</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>fDocument</name>.
                                                                <name>createTextNode</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>sub</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>frag</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Copy nodes between the start/end offsets.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getSelectedNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fStartContainer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fStartOffset</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cnt</name> =
                            <init>
                                <expr>
                                    <name>fEndOffset</name>
                                    -
                                    <name>fStartOffset</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>cnt</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>sibling</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>n</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>xferNode</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>traverseFullySelected</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>n</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr><name>frag</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>frag</name>.
                                                    <name>appendChild</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xferNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>--
                                    <name>cnt</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>n</name>
                                    =
                                    <name>sibling</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// Nothing is partially selected, so collapse to start point</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>how</name>
                                !=
                                <name>CLONE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>collapse</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>frag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Visits the nodes selected by this range when we know
                * a-priori that the start and end containers are not the
                * same, but the start container is an ancestor of the
                * end container. This method is invoked by the generic
                * &lt;code&gt;traverse&lt;/code&gt; method.
                *
                * @param endAncestor
                * The ancestor of the end container that is a direct child
                * of the start container.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a document fragment containing the range's content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but sill
                * produced cloned content in a document fragment
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes.
                * &lt;/ol&gt;
                *
                * @return Returns a document fragment containing any
                * copied or extracted nodes. If the &lt;code&gt;how&lt;/code&gt;
                * parameter was &lt;code&gt;DELETE_CONTENTS&lt;/code&gt;, the
                * return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>traverseCommonStartContainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>endAncestor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentFragment</name>
                            </type>
                            <name>frag</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>how</name>!=
                                <name>DELETE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>frag</name>
                                    =
                                    <call>
                                        <name><name>fDocument</name>.
                                            <name>createDocumentFragment</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>traverseRightBoundary</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>frag</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>frag</name>.
                                            <name>appendChild</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fStartContainer</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cnt</name> =
                            <init>
                                <expr>
                                    <name>endIdx</name>
                                    -
                                    <name>fStartOffset</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cnt</name>
                                &lt;=0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Collapse to just before the endAncestor, which</comment>
                                <comment type="line">// is partially selected.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>how</name>
                                            !=
                                            <name>CLONE_CONTENTS</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>setEndBefore</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>endAncestor</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>collapse</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>frag</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>n</name>
                            =
                            <call>
                                <name><name>endAncestor</name>.
                                    <name>getPreviousSibling</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>cnt</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>sibling</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>n</name>.
                                                    <name>getPreviousSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>xferNode</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>traverseFullySelected</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>n</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr><name>frag</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>frag</name>.
                                                    <name>insertBefore</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xferNode</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>frag</name>.
                                                                    <name>getFirstChild</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>--
                                    <name>cnt</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>n</name>
                                    =
                                    <name>sibling</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <comment type="line">// Collapse to just before the endAncestor, which</comment>
                    <comment type="line">// is partially selected.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>how</name>
                                !=
                                <name>CLONE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setEndBefore</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>endAncestor</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>frag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Visits the nodes selected by this range when we know
                * a-priori that the start and end containers are not the
                * same, but the end container is an ancestor of the
                * start container. This method is invoked by the generic
                * &lt;code&gt;traverse&lt;/code&gt; method.
                *
                * @param startAncestor
                * The ancestor of the start container that is a direct
                * child of the end container.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a document fragment containing the range's content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but sill
                * produced cloned content in a document fragment
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes.
                * &lt;/ol&gt;
                *
                * @return Returns a document fragment containing any
                * copied or extracted nodes. If the &lt;code&gt;how&lt;/code&gt;
                * parameter was &lt;code&gt;DELETE_CONTENTS&lt;/code&gt;, the
                * return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>traverseCommonEndContainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>startAncestor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentFragment</name>
                            </type>
                            <name>frag</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>how</name>!=
                                <name>DELETE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>frag</name>
                                    =
                                    <call>
                                        <name><name>fDocument</name>.
                                            <name>createDocumentFragment</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>traverseLeftBoundary</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>frag</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>frag</name>.
                                            <name>appendChild</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fEndContainer</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>++
                            <name>startIdx</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Because we already traversed it....</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cnt</name> =
                            <init>
                                <expr>
                                    <name>fEndOffset</name>
                                    -
                                    <name>startIdx</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>n</name>
                            =
                            <call>
                                <name><name>startAncestor</name>.
                                    <name>getNextSibling</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>cnt</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>sibling</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>n</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>xferNode</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>traverseFullySelected</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>n</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr><name>frag</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>frag</name>.
                                                    <name>appendChild</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>xferNode</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>--
                                    <name>cnt</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>n</name>
                                    =
                                    <name>sibling</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <if>if
                        <condition>(
                            <expr>
                                <name>how</name>
                                !=
                                <name>CLONE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setStartAfter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>startAncestor</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>frag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Visits the nodes selected by this range when we know
                * a-priori that the start and end containers are not
                * the same, and we also know that neither the start
                * nor end container is an ancestor of the other.
                * This method is invoked by
                * the generic &lt;code&gt;traverse&lt;/code&gt; method.
                *
                * @param startAncestor
                * Given a common ancestor of the start and end containers,
                * this parameter is the ancestor (or self) of the start
                * container that is a direct child of the common ancestor.
                *
                * @param endAncestor
                * Given a common ancestor of the start and end containers,
                * this parameter is the ancestor (or self) of the end
                * container that is a direct child of the common ancestor.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a document fragment containing the range's content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but sill
                * produced cloned content in a document fragment
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes.
                * &lt;/ol&gt;
                *
                * @return Returns a document fragment containing any
                * copied or extracted nodes. If the &lt;code&gt;how&lt;/code&gt;
                * parameter was &lt;code&gt;DELETE_CONTENTS&lt;/code&gt;, the
                * return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>DocumentFragment</name>
                </type>
                <name>traverseCommonAncestors</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>startAncestor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>endAncestor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DocumentFragment</name>
                            </type>
                            <name>frag</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>how</name>!=
                                <name>DELETE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <name>frag</name>
                                    =
                                    <call>
                                        <name><name>fDocument</name>.
                                            <name>createDocumentFragment</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>traverseLeftBoundary</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>frag</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>frag</name>.
                                            <name>appendChild</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>commonParent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>startAncestor</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startOffset</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>commonParent</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endOffset</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endAncestor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>commonParent</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>++
                            <name>startOffset</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cnt</name> =
                            <init>
                                <expr>
                                    <name>endOffset</name>
                                    -
                                    <name>startOffset</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>sibling</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>startAncestor</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>cnt</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>nextSibling</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>sibling</name>.
                                                    <name>getNextSibling</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>n</name>
                                    =
                                    <call>
                                        <name>traverseFullySelected</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sibling</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr><name>frag</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>frag</name>.
                                                    <name>appendChild</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>n</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>sibling</name>
                                    =
                                    <name>nextSibling</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>--
                                    <name>cnt</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <expr_stmt>
                        <expr>
                            <name>n</name>
                            =
                            <call>
                                <name>traverseRightBoundary</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>endAncestor</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>how</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr><name>frag</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>frag</name>.
                                            <name>appendChild</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>how</name>
                                !=
                                <name>CLONE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>setStartAfter</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>startAncestor</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>collapse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>frag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Traverses the "right boundary" of this range and
                * operates on each "boundary node" according to the
                * &lt;code&gt;how&lt;/code&gt; parameter. It is a-priori assumed
                * by this method that the right boundary does
                * not contain the range's start container.
                * &lt;p&gt;
                * A "right boundary" is best visualized by thinking
                * of a sample tree:&lt;pre&gt;
                * A
                * /|\
                * / | \
                * / | \
                * B C D
                * /|\ /|\
                * E F G H I J
                * &lt;/pre&gt;
                * Imagine first a range that begins between the
                * "E" and "F" nodes and ends between the
                * "I" and "J" nodes. The start container is
                * "B" and the end container is "D". Given this setup,
                * the following applies:
                * &lt;p&gt;
                * Partially Selected Nodes: B, D&lt;br&gt;
                * Fully Selected Nodes: F, G, C, H, I
                * &lt;p&gt;
                * The "right boundary" is the highest subtree node
                * that contains the ending container. The root of
                * this subtree is always partially selected.
                * &lt;p&gt;
                * In this example, the nodes that are traversed
                * as "right boundary" nodes are: H, I, and D.
                *
                * @param root The node that is the root of the "right boundary" subtree.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a node containing the boundaries content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but will
                * produced cloned content.
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes within the boundary.
                * &lt;/ol&gt;
                *
                * @return Returns a node that is the result of visiting nodes.
                * If the traversal operation is
                * &lt;code&gt;DELETE_CONTENTS&lt;/code&gt; the return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>traverseRightBoundary</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getSelectedNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fEndContainer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr><name>fEndOffset</name>-1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isFullySelected</name> =
                            <init>
                                <expr>( <name>next</name>!=<name>fEndContainer</name> )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr><name>next</name>==
                                <name>root</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>traverseNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>next</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>isFullySelected</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>next</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>clonedParent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>traverseNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>parent</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr><name>parent</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <while>while
                                <condition>(
                                    <expr><name>next</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>prevSibling</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>next</name>.
                                                            <name>getPreviousSibling</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>clonedChild</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>traverseNode</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>next</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>isFullySelected</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>false</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>how</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr><name>how</name>!=
                                                <name>DELETE_CONTENTS</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>clonedParent</name>.
                                                                <name>insertBefore</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>clonedChild</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>clonedParent</name>.
                                                                                <name>getFirstChild</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>isFullySelected</name>
                                            = true
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>next</name>
                                            =
                                            <name>prevSibling</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <if>if
                                <condition>(
                                    <expr><name>parent</name>==
                                        <name>root</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>clonedParent</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>next</name>
                                    =
                                    <call>
                                        <name><name>parent</name>.
                                            <name>getPreviousSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>parent</name>
                                    =
                                    <call>
                                        <name><name>parent</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>clonedGrandParent</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>traverseNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>parent</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr><name>how</name>!=
                                        <name>DELETE_CONTENTS</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>clonedGrandParent</name>.
                                                    <name>appendChild</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>clonedParent</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>clonedParent</name>
                                    =
                                    <name>clonedGrandParent</name>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                    </while>

                    <comment type="line">// should never occur</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Traverses the "left boundary" of this range and
                * operates on each "boundary node" according to the
                * &lt;code&gt;how&lt;/code&gt; parameter. It is a-priori assumed
                * by this method that the left boundary does
                * not contain the range's end container.
                * &lt;p&gt;
                * A "left boundary" is best visualized by thinking
                * of a sample tree:&lt;pre&gt;
                *
                * A
                * /|\
                * / | \
                * / | \
                * B C D
                * /|\ /|\
                * E F G H I J
                * &lt;/pre&gt;
                * Imagine first a range that begins between the
                * "E" and "F" nodes and ends between the
                * "I" and "J" nodes. The start container is
                * "B" and the end container is "D". Given this setup,
                * the following applies:
                * &lt;p&gt;
                * Partially Selected Nodes: B, D&lt;br&gt;
                * Fully Selected Nodes: F, G, C, H, I
                * &lt;p&gt;
                * The "left boundary" is the highest subtree node
                * that contains the starting container. The root of
                * this subtree is always partially selected.
                * &lt;p&gt;
                * In this example, the nodes that are traversed
                * as "left boundary" nodes are: F, G, and B.
                *
                * @param root The node that is the root of the "left boundary" subtree.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will produce
                * a node containing the boundaries content.
                * Partially selected nodes are copied, but fully
                * selected nodes are moved.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but will
                * produced cloned content.
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete from
                * the context tree of the range, all fully selected
                * nodes within the boundary.
                * &lt;/ol&gt;
                *
                * @return Returns a node that is the result of visiting nodes.
                * If the traversal operation is
                * &lt;code&gt;DELETE_CONTENTS&lt;/code&gt; the return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>traverseLeftBoundary</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getSelectedNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getStartContainer</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getStartOffset</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isFullySelected</name> =
                            <init>
                                <expr>( <name>next</name>!=
                                    <call>
                                        <name>getStartContainer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr><name>next</name>==
                                <name>root</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>traverseNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>next</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>isFullySelected</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>next</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>clonedParent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>traverseNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>parent</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr><name>parent</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <while>while
                                <condition>(
                                    <expr><name>next</name>!=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>nextSibling</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>next</name>.
                                                            <name>getNextSibling</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Node</name>
                                            </type>
                                            <name>clonedChild</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>traverseNode</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>next</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>isFullySelected</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>how</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr><name>how</name>!=
                                                <name>DELETE_CONTENTS</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>clonedParent</name>.
                                                            <name>appendChild</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>clonedChild</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>isFullySelected</name>
                                            = true
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>next</name>
                                            =
                                            <name>nextSibling</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <if>if
                                <condition>(
                                    <expr><name>parent</name>==
                                        <name>root</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return
                                        <expr>
                                            <name>clonedParent</name>
                                        </expr>
                                        ;
                                    </return>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>next</name>
                                    =
                                    <call>
                                        <name><name>parent</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>parent</name>
                                    =
                                    <call>
                                        <name><name>parent</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Node</name>
                                    </type>
                                    <name>clonedGrandParent</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>traverseNode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>parent</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>how</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr><name>how</name>!=
                                        <name>DELETE_CONTENTS</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>clonedGrandParent</name>.
                                                    <name>appendChild</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>clonedParent</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>clonedParent</name>
                                    =
                                    <name>clonedGrandParent</name>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                    </while>

                    <comment type="line">// should never occur</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Utility method for traversing a single node.
                * Does not properly handle a text node containing both the
                * start and end offsets. Such nodes should
                * have been previously detected and been routed to traverseTextNode.
                *
                * @param n The node to be traversed.
                *
                * @param isFullySelected
                * Set to true if the node is fully selected. Should be
                * false otherwise.
                * Note that although the DOM 2 specification says that a
                * text node that is boththe start and end container is not
                * selected, we treat it here as if it were partially
                * selected.
                *
                * @param isLeft Is true if we are traversing the node as part of navigating
                * the "left boundary" of the range. If this value is false,
                * it implies we are navigating the "right boundary" of the
                * range.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will simply
                * return the original node.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but will
                * return a cloned node.
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete the
                * node from it's parent, but will return null.
                * &lt;/ol&gt;
                *
                * @return Returns a node that is the result of visiting the node.
                * If the traversal operation is
                * &lt;code&gt;DELETE_CONTENTS&lt;/code&gt; the return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>traverseNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isFullySelected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isLeft</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isFullySelected</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>traverseFullySelected</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>n</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <call>
                                        <name>traverseTextNode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>isLeft</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>how</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>traversePartiallySelected</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>how</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Utility method for traversing a single node when
                * we know a-priori that the node if fully
                * selected.
                *
                * @param n The node to be traversed.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will simply
                * return the original node.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but will
                * return a cloned node.
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete the
                * node from it's parent, but will return null.
                * &lt;/ol&gt;
                *
                * @return Returns a node that is the result of visiting the node.
                * If the traversal operation is
                * &lt;code&gt;DELETE_CONTENTS&lt;/code&gt; the return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>traverseFullySelected</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>how</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>CLONE_CONTENTS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>n</name>.
                                                <name>cloneNode</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>EXTRACT_CONTENTS</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>n</name>.
                                                    <name>getNodeType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <name><name>Node</name>.
                                                <name>DOCUMENT_TYPE_NODE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// TBD: This should be a HIERARCHY_REQUEST_ERR
                                            </comment>
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>HIERARCHY_REQUEST_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"HIERARCHY_REQUEST_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>n</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>DELETE_CONTENTS</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>n</name>.
                                                <name>getParentNode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>removeChild</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>n</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Utility method for traversing a single node when
                * we know a-priori that the node if partially
                * selected and is not a text node.
                *
                * @param n The node to be traversed.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will simply
                * return the original node.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but will
                * return a cloned node.
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete the
                * node from it's parent, but will return null.
                * &lt;/ol&gt;
                *
                * @return Returns a node that is the result of visiting the node.
                * If the traversal operation is
                * &lt;code&gt;DELETE_CONTENTS&lt;/code&gt; the return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>traversePartiallySelected</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>how</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>DELETE_CONTENTS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>CLONE_CONTENTS</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>EXTRACT_CONTENTS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>n</name>.
                                                <name>cloneNode</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Utility method for traversing a text node that we know
                * a-priori to be on a left or right boundary of the range.
                * This method does not properly handle text nodes that contain
                * both the start and end points of the range.
                *
                * @param n The node to be traversed.
                *
                * @param isLeft Is true if we are traversing the node as part of navigating
                * the "left boundary" of the range. If this value is false,
                * it implies we are navigating the "right boundary" of the
                * range.
                *
                * @param how Specifies what type of traversal is being
                * requested (extract, clone, or delete).
                * Legal values for this argument are:
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;EXTRACT_CONTENTS&lt;/code&gt; - will simply
                * return the original node.
                *
                * &lt;li&gt;&lt;code&gt;CLONE_CONTENTS&lt;/code&gt; - will leave the
                * context tree of the range undisturbed, but will
                * return a cloned node.
                *
                * &lt;li&gt;&lt;code&gt;DELETE_CONTENTS&lt;/code&gt; - will delete the
                * node from it's parent, but will return null.
                * &lt;/ol&gt;
                *
                * @return Returns a node that is the result of visiting the node.
                * If the traversal operation is
                * &lt;code&gt;DELETE_CONTENTS&lt;/code&gt; the return value is null.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>traverseTextNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isLeft</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>how</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>txtValue</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>n</name>.
                                            <name>getNodeValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>newNodeValue</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>oldNodeValue</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>isLeft</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>offset</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getStartOffset</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>newNodeValue</name>
                                        =
                                        <call>
                                            <name><name>txtValue</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>oldNodeValue</name>
                                        =
                                        <call>
                                            <name><name>txtValue</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>offset</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getEndOffset</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>newNodeValue</name>
                                        =
                                        <call>
                                            <name><name>txtValue</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>oldNodeValue</name>
                                        =
                                        <call>
                                            <name><name>txtValue</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>offset</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>how</name>
                                !=
                                <name>CLONE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>n</name>.
                                            <name>setNodeValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>oldNodeValue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr><name>how</name>==
                                <name>DELETE_CONTENTS</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>newNode</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>n</name>.
                                            <name>cloneNode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newNode</name>.
                                    <name>setNodeValue</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newNodeValue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newNode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>checkIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>refNode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>DOMException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>DOMException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>DOMException</name>.
                                                            <name>INDEX_SIZE_ERR</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>DOMMessageFormatter</name>.
                                                                <name>formatMessage</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>DOM_DOMAIN</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"INDEX_SIZE_ERR"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>refNode</name>.
                                            <name>getNodeType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// If the node contains text, ensure that the</comment>
                    <comment type="line">// offset of the range is &lt;= to the length of the text</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                                || <name>type</name> ==
                                <name><name>Node</name>.
                                    <name>CDATA_SECTION_NODE</name>
                                </name>
                                || <name>type</name> ==
                                <name><name>Node</name>.
                                    <name>COMMENT_NODE</name>
                                </name>
                                || <name>type</name> ==
                                <name><name>Node</name>.
                                    <name>PROCESSING_INSTRUCTION_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>offset</name>
                                            &gt;
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getNodeValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>length</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INDEX_SIZE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INDEX_SIZE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// Since the node is not text, ensure that the offset</comment>
                                <comment type="line">// is valid with respect to the number of child nodes</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>offset</name>
                                            &gt;
                                            <call>
                                                <name><name>refNode</name>.
                                                    <name>getChildNodes</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getLength</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>DOMException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>DOMException</name>.
                                                                        <name>INDEX_SIZE_ERR</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>DOMMessageFormatter</name>.
                                                                            <name>formatMessage</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>
                                                                                        DOMMessageFormatter</name>.
                                                                                        <name>DOM_DOMAIN</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>"INDEX_SIZE_ERR"</expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>null</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Given a node, calculate what the Range's root container
                * for that node would be.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>getRootContainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr><name>node</name>==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <expr_stmt>
                            <expr>
                                <name>node</name>
                                =
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                    </while>
                    <return>return
                        <expr>
                            <name>node</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true IFF the given node can serve as a container
                * for a range's boundary points.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isLegalContainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr><name>node</name>==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr><name>node</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>node</name>.
                                                <name>getNodeType</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name><name>Node</name>.
                                                <name>ENTITY_NODE</name>
                                            </name>
                                        </expr>
                                        :
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>Node</name>.
                                                <name>NOTATION_NODE</name>
                                            </name>
                                        </expr>
                                        :
                                    </case>
                                    <case>case
                                        <expr>
                                            <name><name>Node</name>.
                                                <name>DOCUMENT_TYPE_NODE</name>
                                            </name>
                                        </expr>
                                        :
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </case>
                                    }
                                </block>
                            </switch>
                            <expr_stmt>
                                <expr>
                                    <name>node</name>
                                    =
                                    <call>
                                        <name><name>node</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Finds the root container for the given node and determines
                * if that root container is legal with respect to the
                * DOM 2 specification. At present, that means the root
                * container must be either an attribute, a document,
                * or a document fragment.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>hasLegalRootContainer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr><name>node</name>==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>rootContainer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getRootContainer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>node</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>rootContainer</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_FRAGMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                                <return>return <expr>true</expr>;
                                </return>
                            </case>
                            }
                        </block>
                    </switch>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true IFF the given node can be contained by
                * a range.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isLegalContainedNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr><name>node</name>==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>node</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>DOCUMENT_FRAGMENT_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ATTRIBUTE_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>ENTITY_NODE</name>
                                    </name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name><name>Node</name>.
                                        <name>NOTATION_NODE</name>
                                    </name>
                                </expr>
                                :
                                <return>return <expr>false</expr>;
                                </return>
                            </case>
                            }
                        </block>
                    </switch>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>Node</name>
                </type>
                <name>nextNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>visitChildren</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>node</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>visitChildren</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        =
                                        <call>
                                            <name><name>node</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>result</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if hasSibling, return sibling</comment>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            =
                            <call>
                                <name><name>node</name>.
                                    <name>getNextSibling</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>


                    <comment type="line">// return parent's 1st sibling.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getParentNode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>parent</name>
                                !=
                                <name>null</name>
                                &amp;&amp; <name>parent</name> !=
                                <name>fDocument</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>result</name>
                                    =
                                    <call>
                                        <name><name>parent</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>result</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>parent</name>
                                                =
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>getParentNode</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>

                            }
                        </block>
                    </while>
                    <comment type="line">// while (parent != null &amp;&amp; parent != fRoot) {</comment>

                    <comment type="line">// end of list, return null</comment>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** is a an ancestor of b ? */</comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>isAncestorOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>node</name>=
                                <init>
                                    <expr>
                                        <name>b</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>node</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>node</name>=
                                <call>
                                    <name><name>node</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>node</name>
                                        ==
                                        <name>a</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>true</expr>;
                                    </return>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** what is the index of the child in the parent */</comment>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>parent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>child</name>.
                                        <name>getParentNode</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>parent</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>-1</expr>;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>Node</name>
                                </type>
                                <name>node</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>parent</name>.
                                                <name>getFirstChild</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>node</name>!=
                                <name>child</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>node</name>=
                                <call>
                                    <name><name>node</name>.
                                        <name>getNextSibling</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>i</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Utility method to retrieve a child node by index. This method
                * assumes the caller is trying to find out which node is
                * selected by the given index. Note that if the index is
                * greater than the number of children, this implies that the
                * first node selected is the parent node itself.
                *
                * @param container A container node
                *
                * @param offset An offset within the container for which a selected node should
                * be computed. If the offset is less than zero, or if the offset
                * is greater than the number of children, the container is returned.
                *
                * @return Returns either a child node of the container or the
                * container itself.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Node</name>
                </type>
                <name>getSelectedNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>container</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>container</name>.
                                        <name>getNodeType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name><name>Node</name>.
                                    <name>TEXT_NODE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>container</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <comment type="line">// This case is an important convenience for</comment>
                    <comment type="line">// traverseRightBoundary()</comment>
                    <if>if
                        <condition>(
                            <expr><name>offset</name>&lt;0
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>container</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Node</name>
                            </type>
                            <name>child</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>container</name>.
                                            <name>getFirstChild</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr><name>child</name>!=<name>null</name> &amp;&amp; <name>offset</name> &gt; 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>--
                                    <name>offset</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>child</name>
                                    =
                                    <call>
                                        <name><name>child</name>.
                                            <name>getNextSibling</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr><name>child</name>!=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>
                                    <name>child</name>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>container</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
